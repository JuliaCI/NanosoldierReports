cset: moving following pidspec: 2695232
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.240973409 seconds)
loading group "shootout"... done (took 0.844664163 seconds)
loading group "string"... done (took 0.218900332 seconds)
loading group "linalg"... done (took 3.153941129 seconds)
loading group "parallel"... done (took 0.021924795 seconds)
loading group "find"... done (took 1.174794821 seconds)
loading group "tuple"... done (took 0.681233833 seconds)
loading group "union"... done (took 3.047515852 seconds)
loading group "dates"... done (took 0.157150029 seconds)
loading group "micro"... done (took 0.058667457 seconds)
loading group "simd"... done (took 0.40036949 seconds)
loading group "io"... done (took 1.402942032 seconds)
loading group "random"... done (took 2.538381881 seconds)
loading group "problem"... done (took 1.163043042 seconds)
loading group "array"... done (took 4.340876745 seconds)
loading group "misc"... done (took 1.100922966 seconds)
loading group "scalar"... done (took 3.543840845 seconds)
loading group "sort"... done (took 0.307707457 seconds)
loading group "sparse"... done (took 3.499304532 seconds)
loading group "collection"... done (took 5.943580911 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.474599697 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.072200052 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.266633475 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.072445279 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.270760188 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.082723632 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.090902831 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.072480103 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.135602542 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.156938905 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.239004927 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.362508044 seconds)
done (took 5.029411457 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.316565564 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.032648034 seconds)
    (2/2) benchmarking "String"...
    done (took 0.122586756 seconds)
  done (took 0.750645427 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.137127764 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015635016 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022619023 seconds)
  done (took 0.764445656 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020387771 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.098417879 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021440245 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022043898 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.022061578 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021429658 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021213334 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021253508 seconds)
  done (took 0.820277989 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028772117 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022270189 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020707302 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022054073 seconds)
  done (took 0.684584088 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022627906 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.090737623 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.026289334 seconds)
    (4/4) benchmarking "different"...
    done (took 0.02623489 seconds)
  done (took 0.752728861 seconds)
done (took 4.713562304 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.191642771 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.757700479 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.869771538 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.173674742 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.338951199 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.319041618 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.07469344 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.22523056 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.145527976 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.034118618 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.179659329 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.036128264 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.504813877 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.562316968 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.026397431 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.143890997 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.561424593 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038183907 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.067803875 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.174335432 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.034823558 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038060657 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.042259449 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.02718303 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.044221264 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.129789494 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.570255084 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.064882243 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.023902922 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.04697157 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.026617422 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.027930737 seconds)
  done (took 9.131668934 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.157008721 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.140134698 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023519014 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.057154752 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.052192819 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024717752 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029985049 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023155278 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.042030321 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.085208712 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.044870355 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.152463229 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.02099851 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024354669 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.137571186 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.110932499 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037250212 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036599944 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022212396 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.03598335 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.047355971 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.034115684 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.031928567 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.031572814 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.067486806 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.085432585 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.043247326 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.065349346 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022572525 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.033542213 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.052882395 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.060746132 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022506941 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021155597 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.062989185 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.042406775 seconds)
  done (took 2.641057661 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.758846394 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.113181529 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.137979393 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.177786994 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.065808623 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.052189043 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.17237501 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.072548274 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.053561161 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023864917 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.190410613 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.650410552 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.16136498 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.281636483 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028211487 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.277990446 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.882305663 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.947508139 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.022524974 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022874858 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.128792054 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025782476 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.282576347 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021207828 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.139103229 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.568208176 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025553673 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02415346 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.050097047 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.135617561 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.020830137 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.092678193 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.045840319 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.02497021 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.362673947 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021548619 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019748681 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.040731788 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050829328 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021835398 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022911423 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030444788 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020922157 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068709429 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.032357258 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.49082192 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024945743 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.670182016 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.657279771 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.028947453 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.026289298 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.058626622 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019888971 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023253793 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.53970152 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.093153373 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.022686693 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.281472619 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025332702 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024105746 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.046995289 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.054425753 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022986555 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024388882 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026197065 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.03969708 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.042313999 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.03295196 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.041510918 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021524909 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022595523 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021157495 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.386720832 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029486256 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.124335123 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020420901 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026067562 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022565658 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022184269 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.060550311 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.047879991 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.044827349 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026274576 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.02314982 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022785947 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.539811686 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.93849204 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02488789 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024513611 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.328405972 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020468364 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02250806 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024144357 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043185954 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023348218 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.02001017 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.056322596 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024815727 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.128134372 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.346654156 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024620559 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020565389 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.55320742 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024091413 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.052038725 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071138846 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022283614 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.055322699 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022265173 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019888281 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025798995 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019719666 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.044651549 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020948491 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021410368 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020871884 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.021803431 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023275364 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022185918 seconds)
  done (took 23.300846517 seconds)
done (took 37.424051994 seconds)
(4/20) benchmarking "parallel"...
done (took 0.761886549 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.203740553 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.049481051 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019703503 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.153942569 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.043320326 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.129899339 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.166071595 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.121693587 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.044209351 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.044015114 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.044375528 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.172878778 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.179222282 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.045189611 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.113130508 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.179446967 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.045204697 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019873662 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.044187841 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.044724063 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.044815563 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019758867 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.044082843 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.044856133 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.112355079 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.043728145 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019523819 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.112284659 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.045416317 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.114478176 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.045818799 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.045851892 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.046842089 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.114934968 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.047037579 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.115524772 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020062403 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.047502155 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.047431337 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.048045129 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.047919261 seconds)
  done (took 3.806775621 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046534316 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038380686 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.053984724 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018160614 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028127096 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038376578 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018136681 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037986727 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.055944023 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.038611765 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038557181 seconds)
  done (took 1.155712881 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.041552339 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039253719 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.046972543 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.01805704 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029823879 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038985105 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01807598 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038801072 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.054909071 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.03917963 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03921314 seconds)
  done (took 1.095864569 seconds)
done (took 6.729735075 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.147604473 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.117857685 seconds)
  done (took 0.947202166 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.57317334 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.20257844 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.124472442 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.24088109 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.117862954 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.149625427 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.635093819 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.151455478 seconds)
  done (took 6.931952601 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.075270563 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.138997374 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023966966 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022566623 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022803681 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022646986 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024179338 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022955657 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022204755 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024689165 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024359341 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022393982 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023209105 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024345528 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.02249448 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022701246 seconds)
  done (took 1.359069651 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028031852 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025253308 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026296013 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016789256 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026771778 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025456072 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026560797 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027764337 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.02609208 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026175142 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024172661 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.027228676 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025843383 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024649957 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027211673 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016897225 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.027358237 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026422871 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028427843 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.026952591 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.025930188 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024174203 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027653858 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025534302 seconds)
  done (took 1.321075279 seconds)
done (took 11.251888179 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.133439697 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.028650143 seconds)
  done (took 0.854749963 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.122724996 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.121428969 seconds)
  done (took 0.945554515 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027705602 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015950608 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.030696589 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023587751 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016185699 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015897448 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.029754384 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.01612125 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.01595886 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016064624 seconds)
  done (took 0.912760903 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019276321 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022390066 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020494987 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019001451 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.02055244 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.01696394 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.01905587 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017132222 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022224081 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016275814 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019722709 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037515997 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019170963 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.037970422 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.01913782 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019567624 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.020972054 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018937097 seconds)
  done (took 1.091950447 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017755583 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.01672176 seconds)
  done (took 0.741510099 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020255398 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016872572 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018300769 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018228278 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016505542 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015959669 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016476097 seconds)
  done (took 0.823073553 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.38542977 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.090173566 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.313977288 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.024587222 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.036556456 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.233934684 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019738222 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023756644 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023639682 seconds)
  done (took 1.855251403 seconds)
done (took 7.931105437 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.045268416 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.144987616 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.145633582 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.438490964 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033748221 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022521601 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.055494231 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.219641093 seconds)
done (took 1.823286388 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.278201332 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.262175958 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.182464431 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.020889391 seconds)
  done (took 2.175716235 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.309110916 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.136698397 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.030783628 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023090044 seconds)
  done (took 1.222120417 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022119695 seconds)
    (2/2) benchmarking "read"...
    done (took 0.027440864 seconds)
  done (took 0.766676594 seconds)
done (took 5.164600174 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030329782 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016693878 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.02580372 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018103459 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017755207 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017373829 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017409282 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018144628 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016311582 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018077884 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018105951 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018045344 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.01788779 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017808672 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017379467 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018091098 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016325704 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017826159 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017795331 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017773504 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.01627813 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018105216 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017325118 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017787273 seconds)
  done (took 1.147895004 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.03903551 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.02215826 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.022067151 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.021910791 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.023125655 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.021989043 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.02209739 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.021908356 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.022202883 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.021109811 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023113634 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.023165385 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.020963058 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.023227439 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021134382 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.023605479 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.022120244 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022047455 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021137702 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.02324575 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.022112729 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022036332 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.023232032 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.0221346 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.023103473 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.023131746 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.021142293 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.022152108 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02209007 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.023118695 seconds)
  done (took 1.405236681 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023161875 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015052244 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015249797 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025486286 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01499996 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015164425 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015492037 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014819379 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015189964 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015979273 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015543875 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014957038 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015718345 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014960352 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015222951 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015556565 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020365752 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.035854462 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015299595 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015077322 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019806805 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015222021 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015051356 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.015042569 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015456853 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015063129 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014850891 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015367393 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015071075 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015599434 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.015006571 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019718323 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021192643 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015462285 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.025367637 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020263714 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015512223 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019629321 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.01581363 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.01490867 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014881829 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014924537 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.015002388 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015031517 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025539015 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015208159 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016064718 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015485733 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015186931 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014876279 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015070408 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016416046 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.02076619 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016111429 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014873559 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016015571 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014895548 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015567613 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014998285 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014907559 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014924292 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019050221 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016223409 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015631185 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.036619664 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016221464 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025661624 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015114112 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015501603 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019323786 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015587715 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.034902713 seconds)
  done (took 1.976948409 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028301888 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.024544331 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033970284 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024560634 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018324639 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015912319 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018716668 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015888369 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024719109 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019031767 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015882966 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018647701 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024744677 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019087366 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016896819 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024645055 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019055832 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01841476 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015908881 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019065713 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016808258 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01870788 seconds)
  done (took 1.176498409 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.105310206 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.022394469 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.067536186 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.021737103 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.020543546 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.021515678 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.022364302 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.022286767 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022478109 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023457901 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023371974 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022440048 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.020468853 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023334664 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023397285 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023312519 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022504035 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023331799 seconds)
  done (took 1.252596535 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.039829628 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.023794028 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.049915048 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.023654568 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.023826364 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020415498 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.027172129 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.025800067 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020251276 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.023967616 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025800355 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020380207 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020319736 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023975328 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020380682 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.023954724 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020335933 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023932567 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025856779 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.027197539 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.027303068 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025869958 seconds)
  done (took 1.28721552 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03682747 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021071494 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.039327801 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.022957917 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015393164 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015456448 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.022872566 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.021822097 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.022801276 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.020917291 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021893298 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015462439 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.023800423 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021931741 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.023960913 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021949933 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020939342 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021927367 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020954715 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015429782 seconds)
  done (took 1.171264297 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.125240662 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017531378 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.01731495 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02135107 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017306657 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017518208 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021411047 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017295419 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.01730705 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.041229863 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017371888 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017312354 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021482239 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019881361 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017382934 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021544305 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021481995 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021444249 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017361795 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017342714 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.041504236 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017318566 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021552655 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017370763 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017356205 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017338358 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017335263 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.019935138 seconds)
  done (took 1.398835272 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038527458 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.014893893 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.01514643 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018529858 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018682233 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.024374392 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018714306 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018636976 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014702329 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015100393 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.016939892 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.014854763 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014769073 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.023915221 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.014805687 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.016922575 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023893212 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018791166 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.026680621 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02448082 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.016942046 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023691484 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.016976042 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015096762 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024576679 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.016918678 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018694672 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.019453147 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.016900139 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015096454 seconds)
  done (took 1.303604835 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029352887 seconds)
    (2/2) benchmarking "in"...
    done (took 0.026153766 seconds)
  done (took 0.77900133 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.020772415 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.034741353 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014865154 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.029643387 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.026416645 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019274924 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.0251066 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.026555185 seconds)
  done (took 0.914138972 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.123979 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.145844644 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.017028129 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017096618 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.12159302 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.083112888 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.131351356 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.0291773 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030362392 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019833711 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.01679532 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.131475349 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016379673 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.030192959 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017898238 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.02628835 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023751172 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034407317 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029516797 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015425762 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029074782 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017027978 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016246274 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017071878 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017407147 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023264518 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032053841 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028915281 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02463906 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014859754 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.034851371 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015640526 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.01625312 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024664275 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.122860341 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015871981 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.052920369 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.0157834 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.0196128 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015427032 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027369978 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036432162 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029931208 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.033091266 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016909308 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017310757 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015452374 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017146441 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019873799 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024829172 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015821022 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023164465 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015465493 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016984641 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026146415 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015904787 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.019901176 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024945917 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029430913 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026038684 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.028181068 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031061975 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024414907 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.02328262 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016358403 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.035493281 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017095855 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029008186 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030394456 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016784136 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028164241 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015568928 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.01499491 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015735008 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.049279817 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.016976158 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.01647618 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015800453 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.01593966 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016949274 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025071288 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019974815 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023159481 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018471269 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031352749 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024757869 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015566399 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.022240735 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.033667345 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.01989272 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015800991 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032529925 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019889474 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.01563988 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033511438 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026338304 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017113269 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016446004 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019891792 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028814975 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.016878396 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.015002369 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024180653 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017395324 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.12432902 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020528825 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024299363 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015970469 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.026260515 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022053753 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017527055 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015340397 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020966349 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016907032 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015296903 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025512804 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016192608 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030640299 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023143343 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.030745018 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031176157 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026711592 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032032865 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016103544 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015380119 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.034361392 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025523982 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017358958 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034203992 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016109979 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.02670943 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016223389 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017573682 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025506618 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.01558323 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017732529 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016289103 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022021263 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017595855 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.01774916 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022195968 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024628479 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028282375 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.0171177 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025061718 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016521125 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032231081 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026002754 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021256205 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019389683 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017045155 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028266814 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023305015 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025394349 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016128493 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017041511 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016324052 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027371908 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025683979 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.01787601 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.024853787 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021283595 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017010665 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016372774 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.01721777 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020327598 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019465484 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016843129 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024175701 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025027895 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030299255 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023287686 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025343489 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015726061 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016123776 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.017799171 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016060244 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021140755 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025315792 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.0317459 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.027902135 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.037705541 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016409936 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.025926203 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.017789832 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033185662 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.029657012 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017130284 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020588028 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015409406 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.01779517 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.02540299 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027325272 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.029987148 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031180232 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021241764 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021120418 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016103211 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.03149507 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016618738 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024638383 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025386212 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021980186 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016175343 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018030392 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025364381 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021297702 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.017384432 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032180799 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.023631569 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016298945 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030729124 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016674643 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.026982882 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016348319 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.02034647 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021919893 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018386077 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025901457 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031690502 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015574715 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016729517 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032080582 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018175618 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017984027 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024402512 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031678026 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021417757 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024249521 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026940629 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027044163 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.0213402 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026727285 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017463631 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025599276 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019650833 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.02818333 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016460006 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034806236 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015609854 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031777073 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.017139751 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027517956 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016793853 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025765851 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.017226038 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033710217 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017969361 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017270396 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.028226031 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015608741 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025443818 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.016318554 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021776599 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023475534 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.025630613 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018135742 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025844594 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.018127148 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.025366137 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021389314 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.02529218 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025473052 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021357377 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.01620805 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024644261 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027270358 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.17446587 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017078814 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016880669 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015927918 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024900572 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016816851 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016395136 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023747937 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020733687 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021855008 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016743019 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016824835 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016715698 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023861894 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024794941 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033098883 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024119298 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023058724 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.02451671 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015412859 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.147390782 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.01610262 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023326582 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.01497569 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021075697 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024611699 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015601939 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033876362 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016616126 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023166454 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02666183 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023855145 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019603831 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032845316 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017869858 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023695296 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023165808 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020366025 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.02239144 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016642048 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023723024 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024553485 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.02546273 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015868776 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022871755 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024167205 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016562721 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.022200137 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016487339 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023682923 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016593447 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014813088 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020419281 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026129148 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.02053798 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020743912 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015538574 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014673919 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015480665 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.021081291 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020404245 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.023742284 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030503172 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014652632 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.015850867 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015103198 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019515867 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.032634896 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.024503424 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023168526 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020391935 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.01479814 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016339189 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.016461765 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015367243 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.017603433 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014722871 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015056583 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025400758 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.016467221 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020072652 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015567285 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.016329971 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025198467 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.019047318 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015746062 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.02238171 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015223345 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020929886 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.014885303 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.016646804 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020333273 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015230142 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019594836 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.025476728 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.031430519 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022437247 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024304022 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016267065 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023244228 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030546126 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02257203 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016317317 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.024729237 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015239235 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033871843 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024758355 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024113076 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025062761 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016471421 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.03243801 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020621406 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025415772 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.03087245 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016504994 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.022648314 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015613862 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031183769 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020651494 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015509419 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024033295 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023570583 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021980008 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.026988466 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016376499 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.024046172 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019865588 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020051599 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017077988 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.017096122 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024348221 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.031763625 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016422628 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.020319646 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.02354914 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.023984375 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020744406 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027924826 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024120198 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016977317 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017584782 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020062495 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016746047 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.02802579 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016346435 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020925462 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020967645 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.015960125 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023108866 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032527708 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025230726 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025380257 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.015977751 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015478629 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.033977987 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020218928 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019153451 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.024077273 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025832005 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028217331 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025300028 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033010938 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016561176 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022339247 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028141327 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.016921379 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.015955002 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020202085 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017549876 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025115974 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025687111 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023548894 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017806831 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023300447 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029640082 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017478356 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021099456 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021673888 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.016834779 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026479069 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.023915696 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.02462083 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017429768 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.015931847 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019906998 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.024679078 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023467689 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.024882479 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016912749 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023979599 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030119039 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023712459 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019434893 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.01610011 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019295777 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025271713 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.022128048 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016065696 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.02126831 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020269533 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.024336165 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025512394 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021159788 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016081364 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033327904 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.024633889 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025170676 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017766519 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.017917671 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016455438 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016034798 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027346001 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016118342 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017670385 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021469613 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.017861458 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.03392282 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024521494 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031903171 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017063836 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.02102542 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016084497 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025670362 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021115932 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016173874 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026553132 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01567161 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031581145 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.027916663 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023031712 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016105767 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021686949 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.024744794 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031336963 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025730448 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.024991282 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019371441 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025642551 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017771414 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027038515 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.01617567 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015346503 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026343902 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024728895 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028306557 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016095743 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026182436 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.017879577 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024378775 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024741067 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017723225 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017803479 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017662328 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025517124 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021203595 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025362164 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021308027 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033111135 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017070633 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027200296 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025231796 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.027301402 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.03026552 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028553194 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024900972 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016741639 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023739826 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.02498229 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017420776 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021652934 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019595416 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.038745906 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.018025809 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017955632 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031045391 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.024549224 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.01652121 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.024048011 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.021522581 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.026400246 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.017259182 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.026683428 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021815244 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.017190904 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021394791 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021426766 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015514733 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.016254289 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.01655085 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026051737 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.021457261 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016478233 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.03578296 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017759535 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.025195394 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027217369 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.023316174 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017751698 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015494873 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.017140835 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.029647045 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031919317 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020629654 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024871124 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.169500586 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.025034853 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014961653 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.02411684 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.02344468 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024074651 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015480476 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01564446 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030497893 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03077123 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020612255 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032365922 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.024298893 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016731254 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036530442 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.02434022 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016213244 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02587398 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01706839 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015043134 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014886751 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016763321 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026532888 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015346881 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017079981 seconds)
  done (took 15.156186883 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.060291781 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016555133 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015396524 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015330298 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02181317 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016386335 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.01541132 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016485728 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016464493 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017467972 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015474449 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015437254 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020401417 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029531634 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022423723 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018601326 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.01545168 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016456065 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015451731 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016416671 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020760481 seconds)
  done (took 1.188350761 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.019868229 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019417984 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.01869807 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018852706 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018277573 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015604494 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018662161 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015598994 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019108135 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015926835 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019095665 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015640984 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015896699 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015862712 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015878955 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016832981 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019100331 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018412851 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015568388 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018648277 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016847153 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018726048 seconds)
  done (took 1.14625619 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.01818335 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.015961647 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023890765 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.01495862 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014898927 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017371073 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014862034 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019732839 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019839625 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019746528 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023935742 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015720011 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014943158 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021097885 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014927494 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015611939 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.068263913 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015758893 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015789118 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015129083 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017108072 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023995536 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015178026 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015309172 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019802967 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017544152 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015105646 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017182094 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015581043 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019784415 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015743782 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014930457 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023859884 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.023185488 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019811731 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019818643 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.01618845 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015735883 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015108705 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015110566 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023301114 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016238499 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015319097 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016029209 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023780852 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015248434 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014988602 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023901931 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.01505732 seconds)
  done (took 1.68090301 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.026950856 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067860574 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.022682279 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050454109 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.027502387 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.019994266 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021963361 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.052852399 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016204432 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016549704 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.028072871 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.028736808 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017460334 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018557752 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.021858676 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017442806 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017991556 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016825244 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019576271 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017133259 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019543703 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022910822 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027336113 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.028358213 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018221863 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.01685832 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017144747 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018483732 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.02812179 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.019949954 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.018563621 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018948326 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027811112 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.023862889 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017080583 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017192847 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.028123485 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017637464 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017372907 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016152513 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017188747 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018432184 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.022900441 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028297382 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017514507 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023821995 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017462652 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.015782335 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028264765 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017296033 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.020361979 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.029150037 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018411009 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.017770523 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018727111 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.027911719 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.01762037 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.0165205 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.017678333 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.028397739 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016163337 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018219391 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.029064455 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.01716372 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020158672 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.029097269 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.024029492 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.01836887 seconds)
  done (took 2.420382083 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026545774 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.021891361 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025593256 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.025729627 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021872147 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.021997769 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.021871696 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.021859247 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.021717669 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.024312782 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022004722 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.131537481 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.01932768 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.022544598 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.022008578 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.021959746 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.021986193 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.02191574 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.021917118 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021917549 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.021955762 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.02593244 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.021955141 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.026031651 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.054907905 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019171042 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.021793112 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.021862355 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.026106621 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.021890339 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.028491839 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.021971334 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.021934201 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.026241193 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.028516955 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.021870615 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.01570684 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021849131 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.022199103 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.022127099 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.019277833 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.026774332 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.022015976 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.019283885 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.022260274 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.022064032 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.026527767 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.028828133 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.022941605 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.02475988 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.022290106 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026537541 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022139414 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.022852448 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.028452733 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.064192723 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.028381612 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.028589136 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.023635196 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.028448204 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.028559572 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.037424792 seconds)
  done (took 2.424037155 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029381622 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020455555 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.025534164 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015150885 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015047111 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.020483802 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015124458 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015123498 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020347901 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020262517 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021686376 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020531311 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022147462 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021673417 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.020545735 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022086269 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020473622 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020395862 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020311559 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.020523725 seconds)
  done (took 1.193645324 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018736202 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.019942724 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.015693923 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.019242331 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.015727488 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.018845898 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015750315 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015704471 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015716823 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015774882 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019816742 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019846384 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015778315 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021460073 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.018883415 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.018899744 seconds)
  done (took 1.051976367 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019968899 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.024875995 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.120736318 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016353954 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018133911 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015746765 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016498979 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015156581 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017566812 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.031301186 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016140059 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018391416 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016548448 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015361009 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015851041 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018299282 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017596544 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016166777 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016491335 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.121404986 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.028115325 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017015287 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018412871 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017058575 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018039651 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.027818882 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.01733032 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018082748 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.015487107 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018287739 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018062794 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.025872181 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.017993823 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016579 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015295673 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016061483 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016500648 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018293321 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018320836 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016518921 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015140598 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018004748 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.01650873 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016817028 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017501056 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018307143 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017534876 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.0252359 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016378212 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018070379 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016522145 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017509942 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016458315 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.022787226 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.01791897 seconds)
  done (took 1.979766071 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035641147 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.02163731 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015001863 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014898419 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021034357 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.022259009 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021325661 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.021836653 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022350891 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014997439 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.022540553 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020823701 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022493301 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021510993 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.022440122 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.02149998 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014937635 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.02228704 seconds)
  done (took 1.15556471 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.023544872 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.02006908 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020278058 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016730141 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016784734 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020216038 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015289574 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.01645842 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016481539 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016818945 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01679007 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016467206 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016483924 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016468835 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019990184 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016834527 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016488904 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015534926 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016824584 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015340978 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020428527 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01551264 seconds)
  done (took 1.152726651 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.180820094 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.14157991 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.0383386 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.033578239 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.02535814 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.051272128 seconds)
  done (took 1.238712402 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.053535683 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024208093 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021492265 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.048188479 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020571 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.01947824 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019503293 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019678377 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022372142 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027957708 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019812334 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02208917 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02236184 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024071641 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021040118 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020653592 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019623552 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019694176 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021714256 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032122883 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019876741 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021967662 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019915657 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.01952191 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.01974629 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024040002 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022450616 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028042282 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019626323 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022012059 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020600198 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019770516 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022129517 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028024048 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021456093 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022442528 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019771534 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.03210192 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020617024 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023928597 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021282871 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021239568 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022459684 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022188569 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022068373 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02012495 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022425434 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020015734 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020069289 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034646847 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021039697 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024166146 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021452141 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022539568 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022702249 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034682399 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028417691 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024452389 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022145725 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029827594 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025967225 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022116114 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025821887 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030076964 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022876661 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026053911 seconds)
  done (took 2.353022335 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029859264 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.049403385 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.01950386 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027702529 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023739702 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019684655 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.01969791 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.01964711 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019674841 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022030242 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.061227415 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019911152 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023754621 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023940495 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019861077 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019660037 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019629376 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023739709 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022029637 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034057229 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019796078 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023876307 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023892178 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023812703 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028017314 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020652222 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019698141 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019627472 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019683597 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019679125 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022196636 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019856168 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023863209 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021988286 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02377396 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019881714 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.019722654 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022269417 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019639058 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020694364 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02402467 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031631099 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019794902 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.019906803 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028311335 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019874527 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019859547 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022223486 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019950018 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022252578 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028329356 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028262894 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02828298 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024404698 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020125313 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020125441 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.019927687 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019941616 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020117934 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021874034 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025819788 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021006808 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.037135861 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020991046 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020988744 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026042639 seconds)
  done (took 2.351516919 seconds)
done (took 51.019679432 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.20555605 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.167761062 seconds)
  done (took 1.131880287 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.131869105 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.129338875 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.158307103 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023606365 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.080907559 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.173644121 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125094654 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026242032 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023936657 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025005372 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023547846 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.024704768 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.024894126 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023407995 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.085493045 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.02618356 seconds)
  done (took 1.884731797 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.090572625 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.273487969 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.066703205 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022895435 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.076254414 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.032252037 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.023646586 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028788336 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.032072962 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023071612 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.086886206 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.043969383 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.026967029 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.031796372 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.023677644 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.026955831 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028885644 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.032191797 seconds)
  done (took 1.748932356 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.089451018 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.031879933 seconds)
  done (took 0.900076751 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.136492243 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.061948156 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.104640708 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.336220749 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.09445564 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.29077713 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.100312555 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.097030197 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.068491563 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.093859843 seconds)
  done (took 2.156764467 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.059872807 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.054674318 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.275605427 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.053857016 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.033855526 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.028802162 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.029739574 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.029000866 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.030319309 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.029034763 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.071595079 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027828147 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.02430842 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.067510305 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.046343787 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.058248778 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023536723 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.02845348 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032433035 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023385292 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027481986 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.028863205 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.133181177 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.028641826 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.047448521 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.026700997 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.028167991 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.0290697 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.029023673 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.029861221 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.029997671 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.049475857 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.02856725 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037355174 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.02768697 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.046802519 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024291839 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.046518823 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.026735738 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024262446 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.026560895 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.030090369 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024888987 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.029733165 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.030426213 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.028971366 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.029097228 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023486228 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.030411862 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.026911532 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024379195 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.027723547 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.027687455 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.028346764 seconds)
  done (took 2.958496344 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.076133097 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.066054417 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023872559 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.072888657 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066965246 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024089808 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.077935519 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060233963 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076901308 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023512621 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023258971 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023234883 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030004447 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.034166629 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.075548513 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.068467192 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025105394 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023802815 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.067902299 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.067599619 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022672165 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.078177503 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068677526 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.066400993 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022323257 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02365501 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022501472 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023152129 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029643816 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.030278533 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022880267 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.03174345 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.033617442 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.029453 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022292046 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022575302 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022528701 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.030266198 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.030898333 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03079415 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.028745131 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02227366 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022520877 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023161858 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023590705 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022186498 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.030799618 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.029607672 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.030695637 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.022999127 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023223402 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.02246967 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023352001 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.029356653 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.028228333 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.029639871 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031644032 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022938044 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02290657 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024071466 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032248159 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.030205896 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.0302866 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02381659 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.030507114 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022799147 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031454248 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.035253125 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.02271088 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02331063 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022962761 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022923441 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023313531 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.028689206 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.028798266 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023405554 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.0232613 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022715128 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.030269858 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029060757 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02283765 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.030080452 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022458854 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02304916 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02337119 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023596898 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.030934688 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.030210143 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023435122 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023058335 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023137811 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02314652 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022358321 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031080629 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030867013 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.031346103 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.03241254 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023869314 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.032947305 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031510939 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024000803 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.030443253 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023569323 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023877142 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023813043 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.03036324 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.030182636 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.031842664 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023507596 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02312496 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.031270555 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033591734 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023379806 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.03000187 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032057352 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.030469315 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022881618 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033511904 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023356377 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.032204853 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023594779 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032138501 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023769562 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030862421 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023749838 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022892798 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02360196 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.033444866 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024143332 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023612032 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02389067 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023550185 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.031044545 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.034192306 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02422033 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031336268 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.031219361 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024106476 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032438791 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023738771 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.032384835 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023826838 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024034436 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022850586 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035082951 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023430137 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023929299 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023525954 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.032597504 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023441909 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.032704763 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030074765 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.022939471 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032910143 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032306284 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.030064234 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.033029833 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024182419 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023655852 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02332694 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023586899 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.031998372 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.033622319 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024335004 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023566859 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.029761125 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.032538238 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023001984 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030149794 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030055241 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.030573556 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023800284 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.02373119 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033635931 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034802947 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.030656062 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.032710163 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031793187 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023599622 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.03055734 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032951997 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02361296 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037292977 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023602074 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.03417146 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033277234 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.029970106 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032961844 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.034271012 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.032568179 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.032903284 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.035129345 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023274563 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023520646 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.030905952 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.169257633 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023309806 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028391322 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023424553 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023407788 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.034373318 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023150392 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.030424624 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022489215 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.029178994 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022363796 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023301869 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033352021 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022827015 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023235889 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.028313687 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022851982 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028125409 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.030879062 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028059005 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022631068 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023173543 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030623461 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.029527895 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022630512 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022565083 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02317953 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.029683057 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.029062443 seconds)
  done (took 7.645926358 seconds)
done (took 19.215601769 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.131940936 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.070124381 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.124734368 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.07641346 seconds)
  done (took 1.174488461 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.05556454 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019530653 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.135572581 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.146525676 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019705007 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.129575494 seconds)
  done (took 1.298656173 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.241513646 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.143982452 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.146251877 seconds)
  done (took 1.325684057 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.148677423 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.275505464 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.5463513 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.141544403 seconds)
  done (took 1.913343562 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.162818766 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.155598043 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.029858498 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.171516861 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.03648499 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015982345 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.097772048 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.016898821 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.048529921 seconds)
  done (took 1.591067117 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.090300145 seconds)
done (took 8.186263833 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.196919807 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.132051279 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.033115125 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.027681593 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.122164239 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.125690227 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.142115829 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.03003463 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.132838789 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.297557956 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.177676434 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.048200218 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.146987057 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.040973075 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.254486532 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.03074288 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029427873 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024505426 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.139203368 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.12993711 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.238633119 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027782624 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.095407824 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.030084995 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.09899433 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077424372 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.181897216 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.302125777 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.263710984 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030631857 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.117290564 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.040473104 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.113564868 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.120481347 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.127949719 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048012356 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020002796 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.235343049 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.098906658 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.312248633 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.162303828 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027137113 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.137319526 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025067988 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019537664 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.139930995 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.03186988 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026117414 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.042350282 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027327827 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.038547614 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028169457 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.128763189 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023886545 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092747286 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.133302083 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.179019777 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.101288862 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025870294 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03723619 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029909975 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.155381678 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.037075555 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025377715 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031187079 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020062151 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.130793886 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.039628828 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020329933 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030547933 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028878652 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.096218291 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.147780181 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.064078197 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031610451 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.106171558 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.096863027 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.045645964 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.047360495 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029440668 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019784661 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.187688033 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025560373 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.037881468 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026999828 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052616136 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019917604 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034415347 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.166702369 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.145314674 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.085320563 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.02119003 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.23274444 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022029243 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.044708724 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021273545 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020627013 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.182778234 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020374377 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020531551 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.030612916 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029287511 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.022546002 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.165811228 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.101269871 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028604928 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.027530339 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020990092 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.026392786 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021641244 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.021081553 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020435884 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.095324631 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.037119738 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019901257 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.102236759 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.119329455 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.03089612 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.037224775 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.245221412 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023958762 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.030198626 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.02738988 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.135109656 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.026725533 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.131223911 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021798186 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.040660904 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.114465651 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.09591064 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.100600866 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019695066 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.137198769 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.02956877 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.01924577 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026902579 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.046381689 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.029253303 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.036462569 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028033005 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.137022451 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.029601685 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025578737 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.114812153 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019068597 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.10469204 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.097575301 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.127188117 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024620814 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029252263 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091591325 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.041639382 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.048491624 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.040098282 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.024172083 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019780393 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019509916 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.032463469 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018937519 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019672086 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.032247831 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.026398331 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.035514927 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.232633742 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.02926093 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023779418 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.243241619 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031634832 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.089298634 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038903366 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.01995684 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.098828104 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021450593 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.039732431 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.081787837 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020059562 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095894293 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020512212 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019901903 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.025778857 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021583836 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029257842 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.033106338 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.02040853 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.032545345 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027465386 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019951848 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.099257499 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021994396 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.183024353 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.097983269 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093317651 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020149679 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.038438056 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019750684 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.130889019 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020128912 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067895353 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.109866224 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.034311893 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.040196156 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021165573 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.097658044 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.03391848 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.025084407 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.098638549 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.129009593 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.089901733 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026310774 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.238825926 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028945929 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020413015 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.02589988 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028857968 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020389276 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.099175884 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024854788 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019491744 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019745481 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021941692 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.01911826 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.043673464 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019266058 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027958247 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.025628817 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022939992 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021953727 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019126731 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028222944 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.09921977 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.11760919 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.026096131 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039383881 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032397591 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030194569 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.066247797 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.027837006 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.156468389 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019247088 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029496411 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.039786623 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019457201 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024667202 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.025191686 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036302257 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023168437 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021014561 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028721927 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020116042 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.0203407 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020028283 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020298891 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028910918 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021436539 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019649771 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019557772 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.036041228 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024972538 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025492576 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.03077414 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.039990345 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.467229534 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.0215443 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022524739 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.032623971 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.025523838 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.02040111 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021438896 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019913293 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.02224289 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.02023184 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019690003 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.047151737 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025161613 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020510158 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.039932177 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.025895572 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.0298224 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.116826276 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.036486657 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.025037592 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019412667 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.252119376 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.09276189 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.04081756 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.039274549 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020543432 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.031001467 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020402947 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020870071 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019540982 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046236367 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.02572282 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020438321 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019527113 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019766164 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.067178139 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.028467019 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019801139 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028416262 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020112264 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020064792 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.04657679 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020940803 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020253642 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037558134 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032031121 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.104509194 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031922275 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023526876 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.070195386 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019690691 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.02021868 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020551642 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.106520949 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032646678 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021895439 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020257982 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027622475 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029425375 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.072827103 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026583046 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023686328 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028086504 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019679776 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020558083 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.046872071 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.04849843 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021510365 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.024023972 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.020098723 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020487367 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.096786364 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027963125 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.025321645 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.10857623 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.02272908 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.028404552 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019691583 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.660427366 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.030973744 seconds)
  done (took 21.949744704 seconds)
done (took 22.760408445 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.147691124 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.033002191 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.040812201 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028545753 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031812779 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.031452177 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.042086697 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029344183 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032290177 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.0396506 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.141750205 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.019930895 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027413036 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.033663386 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028292524 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.032225258 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031181575 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.031901042 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020421887 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.032135783 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.030794517 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.030693892 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028595993 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.031384809 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020384602 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028231401 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.144509601 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.034484164 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.030156059 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029159688 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.027506443 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.041583627 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027556581 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027009727 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029005585 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025240005 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029498093 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026242536 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.143792796 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025449771 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020325616 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031462016 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026954091 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027506793 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028363377 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.030614371 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025146353 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.03221328 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.027925276 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.039315349 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.143405785 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028548058 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.030040769 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.02796717 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025145208 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028795415 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.029687669 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.03006887 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025065648 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.038603938 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028206534 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027470202 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019577982 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.02799966 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026887164 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027204057 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018841878 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02840613 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.025062285 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019538435 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.02790953 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.027944137 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026316274 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024695403 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.027892867 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019510128 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.027457761 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.038382263 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026470783 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028051279 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019865498 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025074079 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024544346 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020067385 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028214971 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.030460474 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.028693584 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020087327 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.027838983 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.038834998 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.02610041 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019538878 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.030440227 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028267419 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028097944 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019594643 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.027988898 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0280197 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.02739748 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019609001 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018883268 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028171105 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024778633 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.02798262 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019923778 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028120617 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028134412 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.01895684 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.02791964 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.02673943 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028322949 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.030222151 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.027934005 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030663659 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020038333 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018756918 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.02918944 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.01990239 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028258353 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027616178 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.02501334 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027298746 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020109136 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.027371749 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028056334 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025528943 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019943347 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020029078 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019873744 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028051472 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026811683 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018895364 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019547614 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028102416 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.02784881 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.02746134 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.027861462 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.027978201 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.019991981 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025532703 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.025034526 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028041022 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.027660228 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019901843 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.027697376 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.027560111 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.028481356 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.02499216 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028372667 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.02013043 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.027957363 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026613373 seconds)
done (took 5.618059502 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.074606753 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.062260344 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.170562766 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.138854863 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.032961643 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.033627627 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024823605 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.039521678 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.02649457 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.044737507 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045154738 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.042916526 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.155942887 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.040647896 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020136117 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.031916645 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.020688841 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.046404732 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.140148989 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.044659853 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.061501406 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.018868247 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.035092571 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.038254463 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.031755276 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.038063135 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.04414769 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021178151 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.0376214 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036783436 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046781601 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.022674274 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020506672 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.038998676 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.03598128 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.028567492 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.019832479 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.026619603 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.031537747 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.020002302 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.062565112 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.03788301 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.026314906 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.026538767 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020852654 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.034447305 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020793127 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.027401849 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.033200593 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026301656 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032191174 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.036009472 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021994677 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.037536982 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019110039 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027104815 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.026812448 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.019851441 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020816775 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019963159 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.019929088 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022934915 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.032272622 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.037942908 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023886142 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027088109 seconds)
  done (took 3.500599042 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.046019628 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.066057079 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034172231 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034602209 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.01988479 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020376955 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020256623 seconds)
  done (took 1.144183956 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.091804747 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.135625175 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.138723158 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.139943759 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.152577771 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.137079832 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.03292218 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.049773205 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.054606894 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.155792312 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.146962078 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.141026258 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024201311 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.032525477 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.051954069 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.143931334 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032989092 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027782219 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.135868463 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.142024213 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025265566 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.051822089 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033255962 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.023406759 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.144606969 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.136971732 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024094345 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.061666269 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023013984 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.020803105 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020815763 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.042933628 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.137576159 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035842347 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021249543 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019861579 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.135547214 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02155894 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.137689267 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.02762174 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.134817813 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023301509 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023486295 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021201069 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021994311 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.134796938 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022149059 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020861265 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020411304 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.139068243 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031949104 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.137822281 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.02241903 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025693055 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027730142 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027279079 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027663482 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021257672 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.140856905 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030953466 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022721 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.143559304 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.142529789 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.13879253 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.143652367 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029967027 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.14003896 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.135734546 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.02094673 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028648058 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021685702 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.144938188 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024662475 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023586647 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019591103 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028276813 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.15056726 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.150818523 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.150892712 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.03496565 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022734628 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021683704 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.150268398 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.151666458 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026635549 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021489909 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021701727 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.036766742 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.045587042 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023599841 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026007417 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021287389 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031635558 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023643728 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.022884336 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.14500471 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020655852 seconds)
  done (took 7.565796232 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.038807598 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021404257 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020974007 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021292737 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021548008 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021348186 seconds)
  done (took 1.127450079 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.060276847 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021781895 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.02163477 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021482831 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.043477921 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.129225828 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.129254666 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022868114 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.037857708 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.033420466 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.129012232 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.131961637 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.131433544 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022780965 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.128806374 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.033026982 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.129320561 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026063369 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032383011 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022780372 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.031711151 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022377442 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022537846 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.148277255 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.016801063 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032701425 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030701798 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032696493 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.032503798 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022440472 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.02232717 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.016468962 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.031449047 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022428697 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.130655862 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.031758899 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021773627 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.017610287 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.025672662 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.016499751 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.133039527 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022925553 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025884952 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.017502694 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022421835 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.03148466 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.017535197 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.031322034 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.13108962 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.017817431 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.017607365 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022101535 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.016548412 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.017482381 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.031777038 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02259626 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.017522369 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.131527842 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022678353 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.031804125 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021867164 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.016526415 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022417942 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.016476757 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026293651 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.017489736 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.031615726 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022700718 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02275383 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.021620308 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.017508749 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021676085 seconds)
  done (took 3.989296533 seconds)
done (took 18.231697255 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.447720096 seconds)
  done (took 1.352212785 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.958612553 seconds)
  done (took 1.875129494 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049443134 seconds)
  done (took 0.983556004 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.288501084 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.469862849 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.731294442 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.090960814 seconds)
  done (took 2.498473737 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.844123187 seconds)
  done (took 1.787048885 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.204539381 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.169098027 seconds)
  done (took 1.333133982 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.487159231 seconds)
  done (took 1.416787848 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.309634446 seconds)
  done (took 2.246538961 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.19280856 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.133894405 seconds)
  done (took 1.263269688 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.596974464 seconds)
  done (took 1.530571645 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.38131727 seconds)
  done (took 7.317113227 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.191787468 seconds)
  done (took 1.179415891 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.240275111 seconds)
  done (took 1.177296752 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.691001059 seconds)
  done (took 1.626509366 seconds)
done (took 28.530252673 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.044189827 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.037056457 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.037077271 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034470775 seconds)
  done (took 1.077465912 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030594005 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.025105799 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.027136701 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027388564 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.02482696 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.02658223 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.027334748 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.023876725 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024886941 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024216319 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.02290511 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024197555 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.026672931 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.024013706 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026405533 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.02761899 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024264005 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.02491424 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025911558 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023965042 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026638648 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024164113 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024177282 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025518947 seconds)
  done (took 1.551080834 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.039331608 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.033757259 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.031847166 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.03130429 seconds)
  done (took 1.077216255 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.032727084 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030294124 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038236505 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.037952841 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.030027773 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.03071647 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036578972 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036829061 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.04355603 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039347104 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021764773 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021452312 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020761874 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.034074366 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036070848 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015757173 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.016941625 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.03086478 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029680404 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032451893 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023557611 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.0193572 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030189339 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030563245 seconds)
  done (took 1.656826978 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.036955259 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019645911 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.034836492 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043565484 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.043803436 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019450328 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032610605 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044521979 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.184737436 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.01981358 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025680347 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019642466 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.056425885 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019602003 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033918284 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.164154964 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.167554184 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.023855459 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.050011831 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019583012 seconds)
  done (took 2.008042253 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028770701 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.027424237 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024913333 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019151529 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030444757 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.033334372 seconds)
  done (took 1.112081723 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.024117176 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021259509 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020993572 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025321312 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.020912974 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.020846165 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020967365 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019820239 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019799037 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020660324 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020572753 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021016531 seconds)
  done (took 1.197616784 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.158201633 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026244608 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.024034243 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019776064 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.02154494 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020688207 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.033710782 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022355464 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.036637926 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020563237 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020835259 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022910199 seconds)
  done (took 1.369745203 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059013072 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062646171 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095237066 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071746607 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07751217 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048656661 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.194142073 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.033022175 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.111655828 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087011752 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074716623 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045304976 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039128572 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.023832624 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053681352 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070161026 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088199005 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02678805 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072291164 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.230266763 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083549137 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.082815588 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099754844 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076173486 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045028215 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099096363 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04981075 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055776393 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.075746428 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0793234 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074385773 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.056600503 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.025485481 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024752642 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11329124 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.057307418 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073305237 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047276886 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059205094 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043645037 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079214557 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024502528 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.03772402 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.065157598 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041424646 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089785808 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.050155321 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071774593 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03611459 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094923627 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084821449 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.181286187 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041403002 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059552866 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098043222 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068951634 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088426921 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063416868 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036457 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.076486431 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.066786942 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058549802 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06559606 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035684456 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133487667 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.20022057 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.076795176 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066047831 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.043555077 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.047723198 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063009966 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086770069 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076500136 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.069128344 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081662886 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045143529 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079308531 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.05240482 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.076297984 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054589482 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026256195 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.072705498 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079222795 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04990796 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052194301 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07846062 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056059701 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029537936 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.042529227 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.07092932 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033601788 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.061172693 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038570561 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.081465213 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086822218 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050714336 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06798759 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074344084 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032171709 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116799693 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062199735 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027147107 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07142999 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066194138 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104621056 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050076867 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029381897 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05355431 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056150249 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.114112454 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057813233 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034873697 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070614445 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09555126 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049768265 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.271445589 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050326554 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09757206 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070583483 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040974616 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029863767 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.049031711 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068357787 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066447693 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079631339 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050738935 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.038476973 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041576597 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076323221 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061812163 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034317806 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075781321 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.059393134 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.029466517 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045119609 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.03208871 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108682703 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.041822445 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.252247738 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084452572 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.029762957 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058902312 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049368117 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058036054 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.053442005 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072305846 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090590419 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.143535113 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042954236 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.036177557 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060500197 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093405451 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07748771 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043719024 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.037984478 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052054391 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062634289 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.052776674 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07391901 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046453992 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062292012 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05486483 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090164338 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094433679 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053875162 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058312622 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058258575 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.065912533 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.028904756 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110142336 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0568384 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076404765 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041062794 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09338658 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.069103125 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059594422 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.04031465 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057299059 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.055831991 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059567018 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09631569 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.04766536 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026553773 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047203997 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100491684 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031137355 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072787651 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.290815788 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.046816627 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071064222 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.047875172 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036419179 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022578422 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077691239 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112464616 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024973756 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072434386 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.070594127 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.059061418 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.077986549 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.023844969 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083388262 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094193318 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082248116 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105190385 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154014244 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078209742 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074889793 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.237294476 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.064988398 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033125126 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.076940646 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084683414 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045107237 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044623916 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085659017 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096759694 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.08465804 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.064425439 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072628973 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.055953528 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060289629 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055183658 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.052704865 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093271871 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07443937 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.076235902 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036996817 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06234004 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071275798 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088032821 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034879675 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092695997 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.038059175 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094997945 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.031872416 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078848435 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030360686 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.123119762 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033567197 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.053401862 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024134863 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.026401109 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095522859 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.074952436 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058162525 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051899843 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.08733945 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089588239 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031940029 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065506654 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068147393 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057590167 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068114189 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062674327 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042464753 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049297713 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.061829448 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039038864 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034873458 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081565982 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050443845 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090632607 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037667402 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029269932 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093929367 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066193487 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048474098 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031061413 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062810738 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.082558055 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047761243 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041275913 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076926797 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060501585 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098944169 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.045618256 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.057722996 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082316263 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036872523 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.051860985 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024570158 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.045108198 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.031556936 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087650107 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031301171 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.229156958 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023167867 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08108054 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038115922 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.049894301 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05619097 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06012276 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085720036 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046894029 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089482282 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041284111 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070187912 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059913341 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064050031 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039048112 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054675202 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055934769 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.072045687 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.046293224 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072018663 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092481088 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05379142 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093391906 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043460031 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076026148 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059562341 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.077754713 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065847641 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147441791 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091625595 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067010863 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065667985 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029223177 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049353223 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064482143 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.063531884 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127354198 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077942398 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026354031 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057826967 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047545683 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060181396 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061552526 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033667771 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095361843 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054269915 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041418949 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061835247 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.042794632 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058160077 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029808894 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056383824 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.049984283 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.050287057 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052476282 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071763779 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08393919 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065126245 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100463399 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.058021974 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.046023518 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.074441631 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073853031 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071578276 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038757207 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039205974 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099644446 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077630143 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.082137855 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.054060341 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067123947 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.225174324 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051852345 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080334178 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057947852 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.074797269 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032589636 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.029617585 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022417622 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025703892 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074006017 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062245482 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060500999 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056345422 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025985165 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057269812 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058807642 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025598393 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038101735 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045879517 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.051096148 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.034996119 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05655867 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.066837718 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.046801102 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053291328 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055830378 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090238298 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.050769211 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041225162 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094670872 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100603216 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041390498 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046143965 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.02546016 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.032814332 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07541813 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097063634 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100660044 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032579968 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040154497 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.037708431 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040318093 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.02536122 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.042400488 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042569605 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058415907 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053098155 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.066680759 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058376615 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0292698 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061194254 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053468252 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059294282 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.062587329 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074154116 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079873072 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.090760872 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06888243 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068468909 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030632499 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.034381911 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03094793 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034186598 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061022984 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.033397045 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030651401 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102511655 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.046381832 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066698371 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068372451 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042686474 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029960558 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089858484 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024149908 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09167471 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025532677 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035213678 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036763071 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033411407 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050974325 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099880333 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066896004 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066412477 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.216624151 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061873846 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13906596 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10721754 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037962863 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091475001 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02874952 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.029331303 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029509846 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059578909 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041524605 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068964572 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092455917 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040511553 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052029149 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030876913 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091503562 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.04900322 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053157157 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037858668 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032211435 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091520743 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032978897 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.03721079 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041541657 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063549172 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.02625257 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055300669 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036880256 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033379435 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143638614 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.665293454 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050161255 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.028452864 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049911499 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09481812 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086249308 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049190459 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063811094 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.071617702 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058204398 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047847063 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067446727 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.154478785 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027957146 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048746506 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.051122165 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056039686 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061622199 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.050071778 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.041477597 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.049196059 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.040156841 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0333091 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067330655 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040135561 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050341274 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06253102 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037745921 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.043388728 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085128743 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.056514533 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.038167563 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043469859 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.066519895 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041463115 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061723329 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.024172403 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06552999 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043719987 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075678497 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.055420903 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065699797 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080640562 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049051217 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094447494 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.064711323 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078640987 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041891518 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.033010847 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.232465584 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.041566259 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030743437 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093024211 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.045209366 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.056997751 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058270957 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.048813846 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060762669 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064521932 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063806055 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052273125 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031254662 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049872317 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.056475289 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037953087 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03196649 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.026339629 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.02903923 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059767421 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036982108 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039303868 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067961322 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041192775 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054969689 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.049899845 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072813028 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042141666 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057093181 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062755197 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045112147 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084156733 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053639992 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081020796 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126857728 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084129555 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08279637 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086555951 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.031822304 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.032995348 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023121923 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068269316 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033618972 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.040948355 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032776573 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085863408 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.03816859 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064757164 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.210583632 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034346014 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047061773 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050011965 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.024073102 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03747911 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063303233 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040427353 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033848576 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065849326 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035715925 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081632584 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06229282 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052350948 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049422508 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034538325 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062185245 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.058987085 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.083238584 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.05343786 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029445777 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080819288 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061335979 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097494626 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029197603 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035745182 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08581563 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060199154 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091017723 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.036108703 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119299348 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100505675 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06132062 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.241383408 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02501178 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042702394 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041657269 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.074458754 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036904616 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057410379 seconds)
  done (took 40.351836983 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.142738923 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.254528682 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.135294691 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.108551372 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.076801641 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.076522915 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.245872017 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.090116 seconds)
  done (took 2.187448492 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024586265 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.054210635 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035440251 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.301157229 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.052806941 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020939985 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.027227661 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036218663 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.02091409 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020368705 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054548323 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020605999 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.021098371 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.438250784 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019998999 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.024613076 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.021174629 seconds)
  done (took 2.266920686 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.302247227 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.55502915 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.203295977 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.358785961 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.10331185 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.559940396 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028766867 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.033876782 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.624296981 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.161770191 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.097093688 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.174455255 seconds)
  done (took 17.263793167 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031382098 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.147738378 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.14658363 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.027888207 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027332487 seconds)
  done (took 1.515452387 seconds)
done (took 75.647383544 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040756244 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.122012737 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020735998 seconds)
  done (took 1.229250967 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.150454991 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.146457186 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.146944571 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.148017917 seconds)
  done (took 1.646809363 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030661843 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029840189 seconds)
  done (took 1.122677006 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.173746617 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.285002946 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.052604545 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040146597 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034723399 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.035210959 seconds)
  done (took 1.176737581 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.02693874 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024644493 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024667938 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.025065692 seconds)
  done (took 1.156472211 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.130045325 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019656648 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022226503 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.0236553 seconds)
  done (took 1.251704179 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.039912064 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.038717099 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.068219651 seconds)
  done (took 1.206039999 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039316368 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.038554822 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.033149288 seconds)
  done (took 1.170621507 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.05604939 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.046985739 seconds)
  done (took 1.159703537 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035926063 seconds)
  done (took 1.09488628 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.044431487 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.05022337 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.206642246 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.173331297 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.2106524 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.193140637 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.032398177 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.029730935 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.032040469 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.034077866 seconds)
  done (took 2.060778227 seconds)
done (took 15.887175767 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.03625639 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.144695653 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.392732176 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.039020129 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.779545491 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.390243834 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.686605934 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043282629 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.052807139 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021923673 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037403302 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.75830131 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.686336283 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.098872053 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.670725813 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.093442941 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.515212879 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022171349 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021212535 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02172521 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.66585976 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021360646 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021603908 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022123758 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.513238302 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.285893591 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022388166 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.089817263 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021500666 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024959972 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.26876987 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022477504 seconds)
  done (took 12.542674299 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026007358 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.075111023 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026288878 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.03609813 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023425095 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023624919 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.03971449 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022124996 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.063648524 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021897934 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037633143 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021380145 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.02600458 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022963443 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.040793282 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021800747 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023741256 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022286861 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021942057 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022317248 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.039676306 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021635099 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02231847 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022363223 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022071944 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036101875 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.0228447 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021722273 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022144429 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02541536 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026860849 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023061943 seconds)
  done (took 1.995358843 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077964595 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.076904208 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027509218 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.060565141 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072254358 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024901489 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.103054096 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.04342021 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066332547 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022352089 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037950163 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022194916 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.057082133 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023225903 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041015365 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022202216 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024193423 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022632533 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021781091 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022194385 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.039693143 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021886639 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022112871 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022605177 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022405448 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037587339 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022841152 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022088741 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021984041 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02548263 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027149124 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023220138 seconds)
  done (took 2.25065958 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.025957183 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.026001684 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.031717081 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.034690928 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020369628 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022948713 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024077181 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020386489 seconds)
  done (took 1.277960921 seconds)
done (took 19.144836143 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035574091 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022141082 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025011039 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.046208367 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.028526084 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.136643464 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.024750241 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027259987 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025724943 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025023193 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.02712718 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019639046 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.024305369 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.02449011 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026000416 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020229203 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.139941181 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024742492 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.137633059 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.139330703 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022939902 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025919772 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028700081 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.138426724 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.138625324 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.139360255 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.029719419 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.026391208 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.025913583 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023420453 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.136132491 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.138295866 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.023013364 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.133209899 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020539659 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020329744 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024837332 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021844032 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.141070654 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029467023 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022498578 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029087329 seconds)
  done (took 3.373974421 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.142385555 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.147445853 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.140671133 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.032606472 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028936137 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032064607 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.146238833 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029358992 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.02825351 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.145350311 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023937448 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027960066 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030093726 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021057681 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027671067 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.024455791 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029741182 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022207404 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027691125 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027954965 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.145956558 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021527909 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028682352 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029197569 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024806527 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029821155 seconds)
  done (took 2.506878793 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031318333 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043093959 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045463107 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.10856716 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.06256914 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.043529499 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.03682323 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.04741728 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.05310976 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021302017 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.043439253 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.049208065 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.050263522 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028220193 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.059885876 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039960754 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.034492226 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022820423 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027499748 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.056649923 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.04456697 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.040447733 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.05394065 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.041549568 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020342416 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030244316 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.025458914 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.038595267 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.032663423 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033270135 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.0247922 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024760513 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.022219091 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.031959317 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.02467982 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019686612 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.044654064 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033731583 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.036113193 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.059982142 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.031576432 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022535562 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.047393635 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.080597913 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020122966 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023956413 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025432904 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033597544 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022674007 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.063455387 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036002691 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020797879 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.04030023 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.0225264 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022601213 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.041766964 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022840349 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023270315 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.041544242 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027442471 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.043150686 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026766314 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040887626 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020189412 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032555456 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022468779 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022978296 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019890803 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.054637726 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028485414 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.066578278 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022168936 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019618761 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033071557 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032429028 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028396858 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.019859602 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.038940774 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034599138 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024995563 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.039245126 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024089585 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024529799 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.065074336 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020445021 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.01966235 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019513528 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023621871 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024504537 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021786238 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033132502 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.02062606 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024627008 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.04758022 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020970748 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021824735 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023627087 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.02267126 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.0207133 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030592903 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024420946 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023283087 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.034128593 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021965964 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.025012751 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.0367216 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030665533 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.019987709 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.02269522 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023849435 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023073197 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.02279218 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024815835 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023228186 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027174242 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028942641 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027277384 seconds)
  done (took 4.971406024 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.232831681 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.223077748 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022470852 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.218643223 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029627819 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.150420954 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.221534244 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.221976324 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.022154535 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.02309324 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021340114 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.165525421 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.160355054 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.172497495 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.152334941 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.024136278 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.054455651 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.170913667 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.226317885 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.224712092 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.053593719 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029151582 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.02451251 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023526423 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.023231762 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030624675 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.039335225 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030411521 seconds)
  done (took 4.091861253 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.029827467 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.065947081 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025611668 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.046286344 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.037409654 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.0224784 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023823249 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022580621 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.038737241 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027203715 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022168625 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025825345 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025255303 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024012697 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022198077 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.028172927 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028565628 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.020783666 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025493561 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026378642 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032912871 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.044427894 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025714855 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021754658 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.025167212 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021771581 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.02679998 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029867124 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.0215971 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021624367 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019125482 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.030643887 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036814928 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.023178663 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021652768 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022582716 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022251556 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022263179 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022068825 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020400854 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020468695 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.02727552 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021138067 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.02650794 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035478954 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024312605 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023526259 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024341411 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024936883 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019123111 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025123651 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025393287 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024692985 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030370413 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.024269807 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024726514 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.023463996 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.036635648 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027834756 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021544656 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021289468 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020542611 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024220214 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028254501 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038205078 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024063416 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020525121 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022421721 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023710858 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035482416 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.02147759 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.029034829 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019334723 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022274432 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024358654 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024946705 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023857141 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.02049774 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.02196869 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021524394 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.02213455 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021796326 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021393599 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024569406 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020081716 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.02049688 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022654042 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023766282 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026797425 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020924061 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025253519 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023603226 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020756398 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024604405 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.02732383 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024785187 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.039817745 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029443719 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.023072928 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.020224171 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.038456253 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024650648 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021587504 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024254732 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.03104022 seconds)
  done (took 3.841244931 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.052600052 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024167482 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041563644 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.057438708 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.032145627 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027733511 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035887061 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023410411 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.043410393 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021196294 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031221774 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020409761 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035186704 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030781033 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.02400373 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031906227 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024830635 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.042652286 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.037084139 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020805403 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030795894 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.034455205 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.034633531 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039523881 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038862844 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040292875 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.034208583 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024731157 seconds)
  done (took 2.03921666 seconds)
done (took 21.890619491 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.135367702 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.307976992 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.104493276 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.670853367 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.156065344 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.348388981 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.175214029 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.081536374 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.1475886 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.187438294 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.813171146 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.296209537 seconds)
done (took 59.589565001 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.085423421 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.242203578 seconds)
    (2/2) benchmarking "String"...
    done (took 1.323732831 seconds)
  done (took 3.669767914 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.528621252 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.090932566 seconds)
    (3/3) benchmarking "different"...
    done (took 1.124170229 seconds)
  done (took 4.822730321 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.438390073 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.080108761 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.431563417 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.079873051 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.095705492 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.878319201 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.239089684 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.782961542 seconds)
  done (took 27.676994435 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.144608851 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.35272014 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.469779377 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.57611437 seconds)
  done (took 17.719338886 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.54237357 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.463788753 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.462524527 seconds)
    (4/4) benchmarking "different"...
    done (took 1.727075644 seconds)
  done (took 7.408076641 seconds)
done (took 71.004464984 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.079880321 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.228467939 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.094462625 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.274075512 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.123874624 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.154383399 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.097111051 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.110261147 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.090186642 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.096531133 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.993995732 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.090894635 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.094934755 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.147511176 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.089383132 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.107646998 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.219523403 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.101325701 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.094109994 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.675162607 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.247024156 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.091156115 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.095828941 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.161470233 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.181683154 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.110997362 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.374089969 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.101234311 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.685838554 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.096634246 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.095437973 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.092637352 seconds)
  done (took 180.378300862 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.08042031 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.814671557 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.860589272 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.112175786 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.42048834 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.438418751 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.884643403 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.439880941 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.089570264 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.110251929 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.042058879 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.083814482 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.089117121 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.617039548 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.125143236 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.111568893 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.970668555 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.905283798 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.135719602 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.967323364 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.079826184 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.591619443 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.55759315 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.885654383 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.099456638 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.142777685 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.107189661 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.115509974 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.556755407 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.952735237 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.084742285 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.099264669 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.272742276 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.329211993 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.093104468 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.093828331 seconds)
  done (took 151.451974139 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.258636097 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.088148743 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.121308628 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.198450485 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.865754435 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.742893308 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.091310559 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.08005554 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.080226576 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.086683141 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.082062948 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.146807759 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.08988975 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.349878978 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.118811452 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.081929744 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.081107197 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.344381199 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.099755417 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.080414399 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.080233871 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.177494367 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.431850104 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.191336244 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.090333625 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.088052635 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.188819248 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.096889699 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.081340631 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.080221767 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.188601989 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.08973205 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.203102324 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.198520007 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.096218179 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.13579955 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.098012587 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.173726497 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.092310106 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.080491255 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.081985155 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.125012771 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.090048895 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.910811529 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.186075013 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.094339738 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.099513738 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.664337339 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.679657056 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.093635457 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.080800176 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.0802621 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.083828731 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.082209532 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.431746417 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.095064249 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.114471498 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.137705106 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.096291939 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.081134307 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.08041445 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.080481939 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.080942297 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.086812665 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.11614184 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.580554079 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.385763489 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.443580989 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.708597185 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.091066429 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.080887034 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.080285631 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.476890543 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.150283537 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.082704601 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.080580414 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.246480781 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.089953423 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.080744881 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 2.918092655 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.928151426 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.09114127 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.188987994 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.090568681 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.08112378 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.505956302 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.359758017 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.100296685 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.100567921 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.134981749 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.083682207 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.080403454 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.087340172 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.919508756 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.092055211 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.092858104 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.207406027 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.091696712 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.080305942 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.384519567 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.454197959 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.093086063 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.162691409 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.49429355 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.985903297 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.092351299 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.082046769 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.101717167 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.121086172 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.114276995 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.110462331 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.097526712 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.080392836 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.086184874 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.083568349 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.085199546 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.086797552 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.105694249 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.088910064 seconds)
  done (took 322.272055903 seconds)
done (took 656.559308562 seconds)
(4/20) benchmarking "parallel"...
done (took 1.088268136 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.347021289 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.113303387 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.298474556 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.350547291 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.299729494 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.267737833 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.300964131 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.385689113 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.32388947 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.264540096 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.317331346 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.262812245 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.381409159 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.351518614 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.351898662 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.38041471 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.297549162 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.806311916 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.312695702 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.2599427 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.291630611 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.266013855 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.244596394 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.319268376 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.349731866 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.289430326 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.496085886 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.335578795 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.302810263 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.355475086 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.381151531 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.416849744 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.346182037 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.358945537 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.382101893 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.405496576 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.330027687 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.38860856 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.335338518 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.353752825 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.375154257 seconds)
  done (took 63.083434841 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.543622057 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.332232074 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.44238586 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.446117115 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.882158325 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.448027671 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.541128615 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.308817588 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.322463981 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.439764118 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.462629477 seconds)
  done (took 18.322930701 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.369275192 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.309488884 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.437179345 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.4185667 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.523883952 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.447359891 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.453214722 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.286193547 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.294397883 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.419465372 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.443705885 seconds)
  done (took 17.557651354 seconds)
done (took 100.051609827 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.699854654 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.167294095 seconds)
  done (took 3.967951813 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.12267039 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.112385976 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.135330341 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.137571078 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.118285752 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.129686012 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.194141116 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.15434377 seconds)
  done (took 10.191234741 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.103472207 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.100558345 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.106489379 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.128980912 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.114943838 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.121443742 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.133913574 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.115699136 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.127946835 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.102805826 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.149267947 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.117921528 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.121854464 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.136929119 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.111476881 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.108071353 seconds)
  done (took 19.006303057 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.161198736 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.138877104 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.125817449 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.124136545 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.125660413 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.124580666 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.119250465 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.134222008 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.118758688 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.132561558 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.132430057 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.131815181 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.130021723 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.131595371 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.12744033 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.129450015 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.133339459 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.119434571 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.098120475 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.099712341 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.121920475 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.142142124 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.1136893 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.111207215 seconds)
  done (took 28.151340358 seconds)
done (took 62.427640556 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.671785155 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.939220305 seconds)
  done (took 6.693433108 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.094117895 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.119057348 seconds)
  done (took 3.36033107 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.115297061 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.13943819 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.140207114 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.156847943 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.163051669 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.160351796 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.151850701 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.144292801 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.152182919 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.13976024 seconds)
  done (took 12.594638817 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.114402704 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.111993691 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.165365334 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.114471771 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.103169995 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.103229629 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.14721546 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.143990981 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.136874325 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.115531521 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.158037358 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.358207839 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.172058009 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.355416155 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.157570824 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.149538504 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.121731736 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.131195428 seconds)
  done (took 21.995034248 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.107225107 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.101551717 seconds)
  done (took 3.345470104 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.103686561 seconds)
    (2/7) benchmarking "second"...
    done (took 1.115651989 seconds)
    (3/7) benchmarking "month"...
    done (took 1.123550983 seconds)
    (4/7) benchmarking "year"...
    done (took 1.116836711 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.116636985 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.119616324 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.114090748 seconds)
  done (took 8.892549358 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.564319242 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.276035754 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.32270209 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.58339199 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.785152893 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.100945426 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.812634104 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.089435466 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.876619183 seconds)
  done (took 16.509800584 seconds)
done (took 74.48045266 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.822584892 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.092734471 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.593984 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.210214596 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.170196752 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.483927183 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.113381913 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.700708125 seconds)
done (took 37.287617208 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.244556088 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.119782053 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.131085581 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.121866715 seconds)
  done (took 19.478451412 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.116154307 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.707958567 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.145120744 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.143129789 seconds)
  done (took 19.307272325 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.510142236 seconds)
    (2/2) benchmarking "read"...
    done (took 1.523430962 seconds)
  done (took 4.158316436 seconds)
done (took 50.332375509 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.095397428 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.094248729 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.125583714 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.115861222 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.117673939 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.098682755 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.128055292 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.155384202 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.145979152 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.144654721 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.118248332 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.115534503 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.117772381 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.117218654 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.114337473 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.114990249 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.137968404 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.143103575 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.117411389 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.12667968 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.154734115 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.120883018 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.143100077 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.12577664 seconds)
  done (took 28.083102516 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.258425199 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.215535976 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.277547473 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.24029845 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.237543506 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.267444504 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.266563585 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.180566321 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.254984126 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.28179541 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.195592439 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.248128247 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.266671758 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.269326282 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.280818236 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.257769553 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.267982515 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.188006302 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.27401643 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.212709726 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.231672036 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.158308281 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.205900404 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.222563933 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.225218594 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.180060767 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.278188109 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.239679267 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.221142894 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.210502419 seconds)
  done (took 38.214115014 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.153318385 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.153557196 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.156636488 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.221640733 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.122463192 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.114904038 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.121147337 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.115996269 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.149217749 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.146580688 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.123068713 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.117504747 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.128280415 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.117879625 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.130797257 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.122459497 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.154893265 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.319950763 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.158080036 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.140500119 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.165389242 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.120903682 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.113587217 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.126888241 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.127064271 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.132389785 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.142019074 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.157579868 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.148925331 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.149674589 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.15136424 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.182589836 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.147756344 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.114931942 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.267430319 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.172464355 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.127632685 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.143634886 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.107135569 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.107863732 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.154667462 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.145840427 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.140478174 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.148895549 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.20835366 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.157758601 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.162958326 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.158175968 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.160670209 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.158358548 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.161499545 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.162186011 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.177865088 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.164564113 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.161924566 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.163817195 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.161122398 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.135746415 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.138443731 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.147004828 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.135030822 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.208381965 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.107757188 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.095434852 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.485538885 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.095402345 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.172685579 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.106734711 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.109861131 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.320024697 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.107111685 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.3159984 seconds)
  done (took 84.417889404 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.114648719 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.115976721 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.193794817 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.199736747 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.12133622 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.10926487 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.123083847 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.118850476 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.789453338 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.114271728 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.117870931 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.120859189 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.806837158 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.150537747 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.148530486 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.21724736 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.147452089 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.12195335 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.14667758 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.148686692 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.150764441 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.139402101 seconds)
  done (took 27.532865674 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.152184362 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.158379737 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.190139627 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.146573408 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.149949758 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.124714624 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.153802055 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.138343563 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.146244797 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.144081485 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.162612066 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.152688199 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.119450109 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.153067692 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.217167713 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.135329 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.174001248 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.152160694 seconds)
  done (took 21.895240501 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.290160178 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.284966177 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.256029182 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.167804622 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.359669688 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.370866834 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.22370207 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.361570259 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.213852626 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.289638968 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.338619425 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.219782137 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.381428642 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.17088014 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.207963456 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.374735982 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.247701244 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.191303557 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.299378128 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.246866534 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.32750853 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.300663279 seconds)
  done (took 29.260322142 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.220942395 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.238295452 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.233672828 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.217804728 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.127709985 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.124131018 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.153858878 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.146420409 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.119282096 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.181136711 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.134982099 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.103627889 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.145529362 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.180016372 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.217815567 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.134656371 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.216991433 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.157041572 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.19867462 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.106477824 seconds)
  done (took 24.474026708 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.096653454 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.114097894 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.130228777 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.114525593 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.142321004 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.105928029 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.116543783 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.118154769 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.108177787 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.376100775 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.120789758 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.118971933 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.104901961 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.105979698 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.104362888 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.112429322 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.095686679 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.107382103 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.121292506 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.120926755 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.374683099 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.124537989 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.107961789 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.119049741 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.109863091 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.103374352 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.107927108 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.112080441 seconds)
  done (took 32.796381101 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.172229639 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.109041548 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.118135755 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.151456031 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.127289197 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.188831125 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.108986824 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.124210692 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.145544041 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.14422274 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.126136139 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.12089757 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.127157297 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.179364862 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.126569561 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.1252434 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.259780159 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.126097193 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.191436211 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.101829376 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.136586424 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.267115843 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.123636848 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.137719262 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.109620705 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.145676596 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.155888528 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.151934129 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.132865112 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.132044059 seconds)
  done (took 53.459407242 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.162910228 seconds)
    (2/2) benchmarking "in"...
    done (took 1.163473517 seconds)
  done (took 3.445488884 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.141814721 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.29598946 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.133920517 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.347806069 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.32464742 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.345370896 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.371756273 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.240223974 seconds)
  done (took 11.33386419 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.1428122 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.260800161 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.25812105 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.128911033 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.124033716 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.357790077 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.151939172 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.912136196 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.811948671 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.03884566 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.231188143 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.810019153 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.195357113 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.438065366 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.252246142 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.966031721 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.266168317 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.473236739 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.052511198 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.223541531 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.700975691 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.189758253 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.159871081 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.140939318 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.144416115 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.099265833 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.773669057 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.671008806 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.140499565 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.252966177 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.744594448 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.152650482 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.104034935 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.247879238 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.193596546 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.109640289 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.197893634 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.185794579 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.111218107 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.111892035 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.57330319 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.676152566 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.362413669 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.215606727 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.164308668 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.100262759 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.110545973 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.103594622 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.310765068 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.800276905 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.142588608 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.038411887 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.238938167 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.109224228 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.483179414 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.209430902 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.126412299 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.062992584 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.416907101 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.197001736 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.493555102 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.278128317 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.028981431 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.220639139 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.107592783 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.349995102 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.021452809 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.763707968 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.709757538 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.196809909 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.388206919 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.271664243 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.125273875 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.110497229 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.029073981 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.424741399 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.127624906 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.109620752 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.114957572 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.107443734 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.292864894 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.197242888 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.878841579 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.24095351 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.349067214 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.538776535 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.236661384 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.126101383 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.664964193 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.946923167 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.140114824 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.462276736 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.396347792 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.258995794 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.012663113 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.363690947 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.15011443 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.142726116 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.936696902 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.521488559 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.261662426 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.126339482 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.50410956 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.238211075 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.154323001 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.14547441 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.714485976 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.237829425 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.192213937 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.171899963 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.147258007 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.146855946 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.767385864 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.168638158 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.164950007 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.680507937 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.184253248 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.441470234 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.407441213 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.262713449 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.365029419 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.94307865 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.372689164 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.009486679 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.151810918 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.380821082 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.169125348 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.786887267 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.286823554 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.241547641 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.718766462 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.309381624 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.148352402 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.103953057 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.134144489 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.118233524 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.116935336 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.124951673 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.123056903 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.163003654 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.222488737 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.397751972 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.641758671 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.253394578 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.31923497 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.240969586 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.699611003 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.442023144 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.768117935 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.275994833 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.149839681 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.559386335 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.261173627 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.914740734 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.248257527 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.151931519 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.155476168 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.940155114 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.02223088 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.20851765 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.146165117 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.765101365 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.169455414 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.16659243 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.150146495 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.616224824 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.273146099 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.141977719 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.145404278 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.78487486 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.661686406 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.231851418 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.439806349 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.244034175 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.135927927 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.136795026 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.137660237 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.879577987 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.793057302 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.181290219 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.758583927 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.820120907 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.203629293 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.22464626 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.212341484 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.309944195 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.289542235 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.271311768 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.162798423 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.17061349 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.148014635 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.678512448 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.047704354 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.861513002 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.964884604 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.151575906 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.093715319 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.174927903 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.762184276 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.333378527 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.785147334 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.988592161 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.227468672 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.168864401 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.160903979 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.363616165 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.281028595 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.289791116 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.46092184 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.276147149 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.158425931 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.720684325 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.254052103 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.723335744 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.235211853 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.944990404 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.105736775 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.240933026 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.213679335 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.562216979 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.205473815 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.131406083 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.617499654 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.198079066 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.158190641 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.115551259 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.534687156 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.043388025 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.839308362 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.544391498 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.193679211 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.699811785 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.35000429 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.301577817 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.931816729 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.2239622 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.431982328 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.259464076 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.351659271 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.266414758 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.707027163 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.302644836 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.562716046 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.239543034 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.032017419 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.227043829 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.496633379 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.244228832 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.144923822 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.231067345 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.224630579 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.710639891 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.245331954 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.234814606 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.358355951 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.918486695 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.214678658 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.419601553 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.2354018 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.992275545 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.073225899 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.436501305 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.985059863 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.153187488 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.161580284 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.827938293 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.247150848 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.395956502 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.275438266 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.15002658 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.162222746 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.266890195 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.21536014 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.16020999 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.450161317 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.055145763 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.228064641 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.17908013 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.178063178 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.156306909 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.256654888 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.153304094 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.241128809 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.471337918 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.714928282 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.851111153 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.253250661 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.60222641 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.1909357 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.856956515 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.188523773 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.168994401 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.713634299 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.240714398 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.293881066 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.270337294 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.21051064 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.546252496 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.270601361 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.352669204 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.17104699 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.240846303 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.808962056 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.651780056 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.337257041 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.298542291 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.31156712 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.737328796 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.144304806 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.72300034 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.199675692 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.871911445 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.068229347 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.169395715 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.152077859 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.152502221 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.72270984 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.161917791 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.158354599 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.871272724 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.579200017 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.174867885 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.908424695 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.176564604 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.167147463 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.147097793 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.145376034 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.050793564 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.020206102 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.404371151 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.176318135 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.096187376 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.114214805 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.032491136 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.261088384 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.743323841 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.837277625 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.995210624 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.229375966 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.095707454 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.0956593 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.095271816 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.095387378 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.098071721 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.095334824 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.340899397 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.229697873 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.728829485 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.130866592 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.108418697 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.207047093 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.129580512 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.095363679 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.132974399 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.125280813 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.178644042 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.163320255 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.095430432 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.497224678 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.231210316 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.096142175 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.216022991 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.301466071 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.255568448 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.314941933 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.246436602 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.513141151 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.436259992 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.925237299 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.111208037 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.044762533 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.121435133 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.750746653 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.070122337 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.375735294 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.709161949 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.138112004 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.256253141 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.904180828 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.496670783 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.203993931 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.133196572 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.095172689 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.09546555 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.0832531 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.290274407 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.141084471 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.281005627 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.202583987 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.11149439 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.238179312 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.160624231 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.085310559 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.255174112 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.111761201 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.095333403 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.095012517 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.430662072 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.795914011 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.128017138 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.095705242 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.034715677 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.79714119 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.911863527 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.76520456 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.050301583 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.228044324 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.095392695 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.269412097 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.145582856 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.583530106 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.216014558 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.820912854 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.407242875 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.141238738 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.146876517 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.466605533 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.761984048 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.341203513 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.181316605 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.095876453 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.343152477 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.001856385 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.232801329 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.985784621 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.328761666 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.661785622 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.629719861 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.297468644 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.180676858 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.033901197 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.656141603 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.141534483 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.111384324 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.881338165 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.233762004 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.327920384 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.924575683 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.276778249 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.232237523 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.746057157 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.683551425 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.23037388 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.63640457 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.23147235 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.095565145 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.546000589 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.135935153 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.230929772 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.18422933 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.097146076 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.110532232 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.665307389 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.664606349 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.23064879 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.140670445 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.095891234 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.568412498 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.921085157 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.1282662 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.111271306 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.095944908 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.222139709 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.242492801 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.097556356 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.504154103 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.696497747 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.230886078 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.62409396 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.204395661 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.234819294 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.252180711 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.371819179 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.219391576 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.155943184 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.095752263 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.096640829 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.097300911 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.383330268 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.224247082 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.096214924 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.640196405 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.231538733 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.649524612 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.159930995 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.25617107 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.133262637 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.512040764 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.233888882 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.630237309 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.061238551 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.115787326 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.390037246 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.201455128 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.140935006 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.692168342 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.167976161 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.098093188 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.920266661 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.259438499 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.291728969 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.363501196 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.312231346 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.150184871 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.674433127 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.173788219 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.573042951 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.209109438 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.096784893 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.608590276 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.201431651 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.404493414 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.213646155 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.445465148 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.178358891 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.442407717 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.345556154 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.184392631 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.096204207 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.096258059 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.985593538 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.129260055 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.659721779 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.033201894 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.440286721 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.194007222 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.989247256 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.605745865 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.575806734 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.398474726 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.206485181 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.774741279 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.259588568 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.017850154 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.302474673 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.121422335 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.210434282 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.187003506 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.76703977 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.115870281 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.096481651 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.382858031 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.22137165 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.096698687 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.096185726 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.036386056 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.704916424 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.166961892 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.271003396 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.15836962 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.096547575 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.6352258 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.345407239 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.133391658 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.097992342 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.096155786 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.879181596 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.172261966 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.097185368 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.31051015 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.213252947 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.287865824 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.860209487 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.49531741 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.184152329 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.098422268 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.096683426 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.596365135 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.52539927 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.226177565 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.456547885 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.183848516 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.641780955 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.127313852 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.449068256 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.588998303 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.995165166 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.186380193 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.097197028 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.099192647 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.705858503 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.094201168 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.861223172 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.396503682 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.152808291 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.777003583 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.961720383 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.123612444 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.159012486 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.113743103 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.097701023 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.097163474 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.096029468 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.620550157 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.136299869 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.112286439 seconds)
  done (took 1413.148711664 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.372690594 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.098033601 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.097456062 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.09773561 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.098165524 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.097934297 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.098133937 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.097619501 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.097374298 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.097735133 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.097833023 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.097579097 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.097911035 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.381541465 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.098029453 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.097970616 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.097723127 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.0973508 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.09779285 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.098454389 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.098020177 seconds)
  done (took 24.698988973 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.096167523 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.098107577 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.097630994 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.096403197 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.097814951 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.096813031 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.097617415 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.096824012 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.095925883 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.097559513 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.096326037 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.096003332 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.097700934 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.097775305 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.097365856 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.096240891 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.096034078 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.097689001 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.095791534 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.097896513 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.096984409 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.097868266 seconds)
  done (took 25.219446088 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.097080729 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.096204787 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.723450337 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.186172699 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.098461484 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.096774854 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.096350147 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.263764489 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.067170255 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.997718159 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.486795998 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.186859788 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.113883564 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.229385496 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.188795222 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.096943657 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.222646542 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.096898713 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.096963443 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.099441626 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.096324403 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.200713456 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.199001148 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.098478081 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.873801958 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.234397628 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.097722224 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.096252078 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.096403323 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.102182925 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.116651252 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.110339056 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.855177966 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.73329572 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.322325954 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.00017742 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.127559708 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.110282628 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.099866295 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.097095164 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.331533851 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.925706475 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.11478891 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.096170752 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.355590726 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.17746955 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.097475269 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.472017317 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.189281284 seconds)
  done (took 87.056146496 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.109972392 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.286939676 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.176495691 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.096854823 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.280159403 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.096806499 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.246633487 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.096812722 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.098298079 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.098356726 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.295868743 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.271476993 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.098624264 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.096965807 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.252335939 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.098203867 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.098375421 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.097885527 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.097996851 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.098233819 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.098002807 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.200805744 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.275107589 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.270134523 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.096683952 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.098569299 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.098307741 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.096756854 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.265277042 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.098166699 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.0966177 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.096851224 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.287642666 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.228338138 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.098061942 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.096732327 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.283736388 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.098650057 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.096565241 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.098560237 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.096819321 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.096932173 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.199647042 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.293599325 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.098574052 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.228056097 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.098276935 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.098401755 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.261516297 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.097225774 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.097061902 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.281710843 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.096637209 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.098503581 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.09688073 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.279133614 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.098483138 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.0990702 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.096525408 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.256573601 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.098026966 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.096628634 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.270152091 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.096625729 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.096875879 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.280464101 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.226545799 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.096894541 seconds)
  done (took 79.594827181 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.097260371 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.097026453 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.097170324 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.097647826 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.097595355 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.096703913 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.097196743 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.097597119 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.097596433 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.097110991 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.097442949 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.097361756 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.097134369 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.096825255 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.096866645 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.097264814 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.09691914 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.096976796 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.096948712 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.097050776 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.09724297 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.097718882 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.097023727 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.097370866 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.463936325 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.097607773 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.097671638 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.09716506 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.09724942 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.097260662 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.459934492 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.097940563 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.096835803 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.097303848 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.460454633 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.097097116 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.097105936 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.097263799 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.097145515 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.097368641 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.097105078 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.097042011 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.096980855 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.097222055 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.097737443 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.097165304 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.097445369 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.460556714 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.09792479 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.096973571 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.09726185 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.097613069 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.097571077 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.097193217 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.096859667 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.263045963 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.097279771 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.097492445 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.096991826 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.096997594 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.097168251 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.264766422 seconds)
  done (took 70.905963876 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.096694965 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.097406139 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.098893461 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.099347921 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.097677984 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.098587937 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.096920434 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.09758117 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.096868271 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.097799379 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.098631056 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.098529718 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.098741766 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.097437545 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.099043 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.099096117 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.099099241 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.099004179 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.097267885 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.0992573 seconds)
  done (took 23.049954771 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.099313039 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.097999888 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.098659261 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.098466444 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.097389205 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.099257697 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.097492861 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.097631711 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.098583279 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.097704787 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0976227 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.097320449 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.09886372 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.098963316 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.097179174 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.099280802 seconds)
  done (took 18.657830168 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.098888779 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.097791743 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.097101517 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.097022758 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.098821949 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.099760734 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.097312137 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.098934475 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.098689821 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.639459765 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.097081883 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.097097891 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.09701245 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.096726561 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.099958037 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.097807501 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.098480689 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.098359468 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.097223783 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.097301963 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.675749086 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.100435057 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.097116411 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.097461336 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.098788026 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.671157157 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.098637043 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.098676398 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.099154287 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.097583204 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.098879726 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.584805215 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.098955665 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.097910733 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.097454392 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.099389778 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.097151781 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.097319899 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.098342253 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.097159543 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.097143782 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.098615087 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.097131917 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.097400369 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.098721516 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.097461793 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.098975706 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.578823316 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.100005793 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.098819898 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.097620818 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.097545315 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.097359527 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.655129777 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.097605186 seconds)
  done (took 64.698842802 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.192632458 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.19626428 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.098744126 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.097190217 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.153250186 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.154818785 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.191162782 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.114206173 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.154382082 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.097259969 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.185014659 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.112289648 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.155107218 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.199542733 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.18464064 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.192720251 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.099252391 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.170539867 seconds)
  done (took 21.834856889 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.098610413 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.098605226 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.102547985 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.120085651 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.101991469 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.110364243 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.110736607 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.099288737 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.10229379 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.103956151 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.149434863 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.146083374 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.138472626 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.164796699 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.169755683 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.137074228 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.098562231 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.101059784 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.100321798 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.099498855 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.099108742 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.097476272 seconds)
  done (took 25.636415877 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.128838133 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.142941932 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.098774775 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.10035528 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.099570938 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.124359088 seconds)
  done (took 7.780734969 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.163064212 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.097791078 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.138760481 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.155350477 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.097864775 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.09980916 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.099663365 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.099675367 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.098247788 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.404316972 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100155769 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.09883158 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.09806223 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.111257477 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.119024058 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.12338678 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.118425486 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.115746983 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.160665005 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.235311675 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.098811585 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.120353838 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.124991652 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.116657665 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100068905 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.09857087 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.099093572 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.405447361 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.147307884 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.099353126 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.097782901 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.101640732 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.097602466 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.408399361 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.179842463 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.100309462 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.098681739 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.23962246 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.098141993 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.133010816 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.158689882 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.146782625 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.126481656 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.11969328 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.116231985 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.099398851 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.098437946 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.098146588 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.099169615 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.464448893 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.099471623 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.107229306 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.106143941 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.13904241 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.13920018 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.503222334 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.546141289 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.237408011 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.215028218 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.515996867 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.207653229 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.196245447 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.182871421 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.478502105 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.166805054 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.174747028 seconds)
  done (took 78.354187319 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.148122191 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.207570672 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.133855262 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.430369789 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.111795142 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.140907692 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.101443966 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.107783249 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.162172472 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.205027743 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.238812275 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.121237777 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.169456821 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.136909834 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.120234164 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.139198044 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.13464247 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.155283926 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.262429952 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.549425317 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.228729842 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.23042913 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.183020217 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.221074628 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.574683322 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.19103734 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.227277406 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.246119706 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.208016744 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.185773562 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.179507693 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.103564289 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.145084614 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.192135661 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.211336042 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.170225409 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.148304346 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.154350904 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.247026708 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.305224725 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.326107144 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.428816769 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.256016234 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.308124096 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.632456617 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.312936739 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.328806183 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.353577715 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.288023327 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.346592877 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.503941137 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.464275106 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.433340239 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.170946371 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.250629383 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.18775875 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.132404006 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.137131251 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.128752688 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.124013232 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.228321364 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.236466804 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.547085205 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.193730271 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.191630551 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.167183706 seconds)
  done (took 82.949559021 seconds)
done (took 2379.608450796 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.333536839 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.216252864 seconds)
  done (took 13.716943599 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.115768658 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.128559706 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.303675531 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.242760575 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.227231672 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.294105273 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.275493563 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.134605583 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.190511152 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.333740961 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.187731217 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.25943774 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.275608586 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.244332916 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.201081326 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.14535159 seconds)
  done (took 40.723201186 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.17077005 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.30245456 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.182866303 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 3.024675925 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.274314988 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.261943842 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.450729461 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.422796051 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.541124012 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.686528879 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.561841755 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.829912899 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.963104315 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.36241835 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.77867394 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.803054497 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.877859434 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.949838688 seconds)
  done (took 61.557986386 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.208797716 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.289801368 seconds)
  done (took 8.747573315 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.286588385 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.180996419 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.287778738 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.235565831 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.199064261 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.23370054 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.274679741 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.292916334 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.307099571 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.132732906 seconds)
  done (took 63.585511637 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.090139297 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.806847245 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.609441893 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.86105685 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.726229136 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.672449592 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.389344026 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.598674412 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.325057125 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.220756244 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.020698608 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.684756268 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.962289188 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.150089376 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.669904354 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.483209259 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.803347406 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.758472048 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.55674889 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.599161144 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.442986385 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.991246293 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.747645952 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.130132539 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.241125519 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.250218097 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.359948507 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.277179807 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.201311789 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.184192956 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.181772281 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.225992755 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.196064509 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.126128766 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.209138298 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.923619182 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.876282854 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.340947632 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.456034976 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.42763711 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.517035386 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.407314448 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.401949342 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.532437968 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.503953631 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.498239584 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.1836321 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.366382476 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.34249682 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.329936435 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.616416383 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.310250529 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.272426656 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.236895832 seconds)
  done (took 155.522897049 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.11769451 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.695505568 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.320467816 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.178666757 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.39627347 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.498954571 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.014552499 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.618550846 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.129882478 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.399794642 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.298768093 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.251363526 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.221274915 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.127074496 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.218388722 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.289973606 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.41990391 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.7848292 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.175569018 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.247207569 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.412593495 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.547630161 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.420417297 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.239546863 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.477170778 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.479126421 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.698686208 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.286942798 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.661688889 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.255352918 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.617912809 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.128254448 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.283607492 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.110914521 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.590168855 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.630766583 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.736921279 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.274535548 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.976273693 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.249277066 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.853839404 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.423658631 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.558719344 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.364949522 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.392071436 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.508805189 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.814584214 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.221524219 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.973465842 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.381259502 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.418621705 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.431217719 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.476854679 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.246706148 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.767759192 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.2414762 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.230561236 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.506457223 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.385702659 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.358396324 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.233928468 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.226390777 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.251615391 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.488576343 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.215073004 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.348523907 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.232747632 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.254675638 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.347139821 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.359996463 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.382554195 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.471135721 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.464848123 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.153410311 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.549282831 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.45219559 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.650237883 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.413675134 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.152418711 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.169919036 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.636307257 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.612448449 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.276712069 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.360921691 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.422436958 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.463294375 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.7334705 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.152318855 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.373435839 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.31008662 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.484236138 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.26413705 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.476030787 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.040537756 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.123259352 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.114967679 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.541437706 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.321976882 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.180094237 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.685769049 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.423377367 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.685492569 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.363907537 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.503901921 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.301745349 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.199326455 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.707865399 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.181378278 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.346760495 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.452453572 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.113685824 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.116550541 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.276230873 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.070274186 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.126254613 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.368808419 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.579672527 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.126388914 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.290090134 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.183498249 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.362130691 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.970666012 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.347438001 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.440048419 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.419187026 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.303342866 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.263555693 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.134216585 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.471822792 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.404826776 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.544160902 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.481956529 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.003502434 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.132448787 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.472233649 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.1538024 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.196415837 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.385251833 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.159785232 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.379521329 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.213699372 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.573870541 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.379257947 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.591709778 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.221079807 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.458866645 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.440784774 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.613943285 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.208263096 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.286180777 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.148961039 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.110734126 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.310465533 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.163155633 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.171352063 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.987253634 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.144223657 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.30088543 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.390368226 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.785279871 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.663644419 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.519392608 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.166665644 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.57570158 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.311526448 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.562280358 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.621012957 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.307678861 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.881748475 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.418888726 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.170641166 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.412834353 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.455434904 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.174644333 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.171842163 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.891935811 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.297936648 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.200750966 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.360464964 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.860921985 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.693199483 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.4227171 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.202677703 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.571329177 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.223846252 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.456103851 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.735106399 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.453737965 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.202530616 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.199877875 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.163807389 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.176607513 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.391653495 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.461050075 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.632888545 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.339508799 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.493564308 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.35618787 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.446025507 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.580082927 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.144077509 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.438666493 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.1007573 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.579326059 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.133881074 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.267837609 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.438341647 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.129941371 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.349410896 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.507153099 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.112733895 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.607318236 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.180122989 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.139148562 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.715853114 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.351312146 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.621501122 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.169759012 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.264049869 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.586868672 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.327686894 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.380266187 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.414746256 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.203246485 seconds)
  done (took 742.890487263 seconds)
done (took 1087.928698162 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.155422761 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.177340913 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.155914477 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.16188471 seconds)
  done (took 25.821615238 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.998164717 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.986812436 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.293470766 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.188354806 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.30636114 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.403542011 seconds)
  done (took 11.327395396 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.663884632 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.193854338 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.174742588 seconds)
  done (took 18.212193806 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.455390718 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.593178417 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.296040658 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.23394907 seconds)
  done (took 6.730265092 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.150928878 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.148371276 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.140838779 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.15172225 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.160413706 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.136185666 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.141917416 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.158794102 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.151021108 seconds)
  done (took 11.451825506 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.622283826 seconds)
done (took 79.337975698 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.563186029 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.456296483 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.11440058 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.373639725 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.281194928 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.466574198 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.269151052 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.167985177 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.473593767 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.589526204 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.670046413 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.249438395 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.632301191 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.561956153 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.379288468 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.170765573 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.158950563 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.218141699 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.833570768 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.326800809 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.17915954 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.299184731 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.826565436 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.210803408 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.091432865 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.223900823 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.422794578 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.14833315 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.841939542 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.15053656 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.246682393 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.692660219 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.332754143 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.440149483 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.239581238 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.093078651 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.617006971 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.134298131 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.370002128 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.685958531 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.399638899 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.246855864 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.097041803 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.413743066 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.521289493 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.12356435 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.071252941 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.269073222 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.710104309 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.313261684 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.497415764 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.10659316 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.738166972 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.187487237 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.187691699 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.11655996 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.107596511 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.587061235 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.324722359 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.372903626 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.136715904 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.093071749 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.080897868 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.140251856 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.091581611 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.407964533 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.515006371 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.193817066 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.566089388 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.130924398 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.122505695 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.134956649 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.818353855 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.178490398 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.094780413 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.124702781 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.397641862 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.207583925 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.100943735 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.193037195 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 3.544380475 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.104808663 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.324163833 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.596289664 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.262937842 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.574808715 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.609262565 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.482146138 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.734594258 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.106819054 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.474168192 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.726545712 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.44355326 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.110716588 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.20048893 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.386356891 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.689837408 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.59905426 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.23399085 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.803282946 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.133811734 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.121904661 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.635228813 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.459838303 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.973558769 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.143291661 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.238581791 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.096936485 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.286128794 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.098134668 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.614186013 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.545225805 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.12379579 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.16281594 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.571692609 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.103432503 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.413924934 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.432906258 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.177319425 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.108588963 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.338642912 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.112112009 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.223547079 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.68511673 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.488314845 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.361409852 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.09992662 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.717701016 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.115906453 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.325976337 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.109936995 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.732037934 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.714239693 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.139337722 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.35414129 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.232431166 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.091934652 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.277472242 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.15390934 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.238799287 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.468744877 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.414558772 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.271780308 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.094500719 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.481056998 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.445896086 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.337955407 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.419517031 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.265938324 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.417924132 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.187865104 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.119475709 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.228079002 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.515970248 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.718204702 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.825744128 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.34669454 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.236391073 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.690721367 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.420185426 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.942202985 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.209297893 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.153624641 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.106750865 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.123126112 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.167314498 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.097755613 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.103854372 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.336663241 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.493315083 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.848995361 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.986317945 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.096491471 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.401896435 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.236112883 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.06965255 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.759298094 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.10216355 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.55454892 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.57375015 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.224928872 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.141480459 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.09766478 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.227372367 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.960302994 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.145182993 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.471598113 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.718143389 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.508616361 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.456382278 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.274066308 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.152940712 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.463311666 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.344790885 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.3856524 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.306901353 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.735531537 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.184962862 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.491331296 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.199665688 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.381522099 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.10636651 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.462099037 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.35838339 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.585971038 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.424064145 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.336796677 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.331773266 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.418406816 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.11261315 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.10578477 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.014843508 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.373366925 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.137796792 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.108140198 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 7.925748328 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 1.525397601 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.017594007 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.276363677 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.518439507 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.223552293 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.14115919 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.562566053 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.124009347 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.379371107 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.323876385 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.23445492 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.316260326 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.14308143 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.271466581 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.297163248 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.248719835 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.330766397 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.122711429 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.429713851 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.137611927 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.999778641 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.096354109 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 1.767011261 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.138999403 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.119990221 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.436939156 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.30625441 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.41936352 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.26059486 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.264723714 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.095618257 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.208802489 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.668192763 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.017069088 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.649734896 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.235405009 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.142637779 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.09186106 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.616156228 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.53547029 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.173652696 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.242809285 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.737616265 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.14682265 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.303324477 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.108145367 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.107294661 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.982682226 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.23018553 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.345123897 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.79575347 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.104557335 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.564793849 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.156480667 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.625921297 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.626313495 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.153211101 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.228491495 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.098357368 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.032072656 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.509376718 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.140569471 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.250767161 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.415545628 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.220486626 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.229068681 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.09786307 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.148316672 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.654923437 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.457995777 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.586669372 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.143523211 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.481288067 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.104559265 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.581198289 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.128902534 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.18517095 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.550481914 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.231909513 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.446988692 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.108452946 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.154500217 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.358755817 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.13391986 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.094768732 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.262687714 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.132617867 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.722442556 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.992218927 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.276398599 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.048120977 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.338454529 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.10602504 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.181872858 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.240782254 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.187214336 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.680909077 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.647973368 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.109261031 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.489273717 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.100507225 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.535787923 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.129093685 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.124121468 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.223807322 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.195789515 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.092683784 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.20324686 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.278035458 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.596690526 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.363165003 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.0282903 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.110069653 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.53389772 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.236484486 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.415324086 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.918303392 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.126375034 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.281540569 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.761151651 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.230473145 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.134533523 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.326317636 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.108133888 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.748262456 seconds)
  done (took 869.482243293 seconds)
done (took 870.826870532 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.145542481 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.47340161 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.310423374 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.641303731 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.91429111 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.746157385 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.329948014 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.348006028 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.177428901 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.321896012 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.021800133 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.919965816 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.210008923 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.215552407 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.190919891 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.20280627 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.354387125 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.350964022 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.21852357 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.186029405 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.47182538 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.188812288 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.553156619 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.410477098 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.48938878 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.213680838 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.168806439 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.454256259 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.459024764 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.650616118 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.331494417 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.30844264 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.945754927 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.343868723 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.200882598 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.185408304 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.917275976 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.20096826 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.130801791 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.183017981 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.475231014 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.232187526 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.82400959 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.038243288 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.906850214 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.52599502 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.985383495 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.210694524 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.226740049 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.281532654 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.128473044 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.126997217 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.470476482 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.686609055 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.999531254 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.036710732 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.459247269 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.921615424 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.835530969 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.287752996 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.479345466 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.206412679 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.276577872 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.337962932 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.221236758 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.39504041 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.536173431 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.135805764 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.298063599 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.328512652 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.34836326 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.32696444 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.216282498 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.231074133 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.225647273 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.325158782 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.945640451 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.304094571 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.889191644 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.215115821 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.009661645 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.012633427 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.066132173 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.186560438 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.148548717 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.88696463 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.199937072 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.005548614 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.227693994 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.297961841 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.012329016 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.31301534 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.557872703 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.166907893 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.144846973 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.302839002 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.205919177 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.137380997 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.083038001 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.306407337 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.89618753 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.177883479 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.145639445 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.204722584 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.208319316 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.130167557 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.164412442 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.517889009 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.326969731 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.261055731 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.479015008 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.227217955 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.325084309 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.220401026 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.175566762 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.888871311 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.38338878 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.916962863 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.128963962 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.784391231 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.385996859 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.216893711 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.477986361 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.411159928 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.145805164 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.197535382 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.20908029 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.988460082 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.206266477 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.227659536 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.287920653 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.554165107 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.275331516 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.651688181 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.331520425 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.885701913 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.348927709 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.330687751 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.174730316 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.943139474 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.208193278 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.065516797 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.403754695 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.483681885 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.347957693 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.398828942 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.225022021 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.398276662 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.130893451 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.221498805 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.325717499 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.224610447 seconds)
done (took 243.626811406 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.471847983 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.434155185 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.409176965 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.327160178 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.488070872 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.403605047 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.18065772 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.565606641 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.163202258 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.523353964 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.305987186 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.261113155 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.46466381 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.367613357 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.508422917 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.334238605 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.173106794 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.358492471 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.567284848 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.508045878 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.131853818 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.320785504 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.244986423 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.519913666 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.097742586 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.177691154 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.411123193 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.216996017 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.369196758 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.11540721 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.132468236 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.371755346 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.40841877 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.204013232 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.497542942 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.106255757 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.408599834 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.181553511 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.372878881 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.477232656 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.315228986 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.887746636 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.125446888 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.163266236 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.215358363 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.374689072 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.185211406 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.338112243 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.1065894 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.120204612 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.375696126 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.138453373 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.292337958 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.387089803 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.348395728 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.20247698 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.54319828 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.482973605 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.4969957 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.40413503 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.36014039 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.526148617 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.514149563 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.224801666 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.123151984 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.405767795 seconds)
  done (took 125.337192971 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.532437128 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.407594102 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.518541792 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.38677585 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.658438039 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.504702111 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.462625317 seconds)
  done (took 13.566225704 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.16762329 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.149192273 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.400202595 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.351110822 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.15564186 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.280941031 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.239559633 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.114810931 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.403533886 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.200993897 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.478138514 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.396159021 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.060684149 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.111458598 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.243616164 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.494383456 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.141062446 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.224760183 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.210636272 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.409919864 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.112728256 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.099749715 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.311165492 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.137847152 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.159878529 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.199247882 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.15236035 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.12313283 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.15655171 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.135892658 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.153890996 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.262339757 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.15023351 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.096478365 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.156830892 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.472747338 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.166626518 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.167526261 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.283927939 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.099542218 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.147441137 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.160494075 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.284902589 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.158726367 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.140289716 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.340087721 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.139513932 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.158594832 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.131474137 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.157385842 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.34566113 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.164932768 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.13806743 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.064661659 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.367406778 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.097378053 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.226648886 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.147323708 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.151482375 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.20314647 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.155132654 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.40860481 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.393427998 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.137504422 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.374000087 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.437401647 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.151629972 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.128701213 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.145376611 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.369155809 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.14514679 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.392745025 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.15841907 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.203910674 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.162112524 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.287273549 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.346800038 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.963944518 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.939495359 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.068691508 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.507403318 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.144389811 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.468486666 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.111259072 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.069045303 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.140935227 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.158116373 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.824324518 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.068465946 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.156013425 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.469386267 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.140531607 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.205980736 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.201084997 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.139341227 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.207958924 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.313360099 seconds)
  done (took 143.490363585 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.340648867 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.337149229 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.499704765 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.073490639 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.153638146 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.421060584 seconds)
  done (took 14.918025902 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.572222453 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.982102052 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.176874872 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.173499243 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.207506437 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.107124609 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.105189953 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.30924492 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.302745228 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.169015118 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.116249125 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.106616438 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.105711354 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.287890729 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.106144704 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.153192504 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.119057299 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.18004122 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.155256587 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.231570286 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.353899456 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.208402647 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.223009696 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.843382229 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.16075232 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.187273841 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.884606649 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.172197261 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.153910912 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.520413165 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.307180992 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.10853987 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.83762304 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.248745464 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.873421552 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.830901824 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.294221212 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.135491289 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.161763991 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.109001835 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.111204969 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.214974227 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.177150641 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.106769548 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.498520906 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.746764577 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.164927172 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.422641012 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.121726372 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.109492552 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.113887825 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.170471666 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.107809358 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.109460769 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.413111891 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.705478003 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.079933695 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.121340533 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.205578282 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.822179207 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.24940708 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.11362365 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.546797079 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.076786299 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.106886879 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.114697115 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.825275211 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.306576839 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.222264226 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.168602006 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.105041735 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.179679118 seconds)
  done (took 112.961634917 seconds)
done (took 411.374744033 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.350308356 seconds)
  done (took 7.443903771 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.216144124 seconds)
  done (took 7.409789112 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.096221143 seconds)
  done (took 7.209243694 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.097923683 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.14560869 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.122843375 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.123790206 seconds)
  done (took 25.635748557 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.842553424 seconds)
  done (took 7.948952359 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.093598639 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.117871303 seconds)
  done (took 13.321570917 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.157155948 seconds)
  done (took 7.273210358 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.347221717 seconds)
  done (took 7.471653664 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.109010817 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.122096588 seconds)
  done (took 13.360213153 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.099354572 seconds)
  done (took 7.201846259 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.22172622 seconds)
  done (took 7.369770798 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.102801929 seconds)
  done (took 7.333344499 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.109491902 seconds)
  done (took 7.216280889 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.535846551 seconds)
  done (took 7.638117473 seconds)
done (took 134.929574079 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.093749379 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.112676592 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.103090472 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.102574467 seconds)
  done (took 25.506408955 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.431621401 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.443875856 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.408977848 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.585829225 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.381273619 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.374566228 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.430981016 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.43268973 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.382239331 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.475723702 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.433532986 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.478701797 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.581819586 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.412773483 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.414946455 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.510423143 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.580973378 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.432656618 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.374924175 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.40958024 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.580793275 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.587302302 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.875924156 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.849645768 seconds)
  done (took 36.974222779 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.301331187 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.300020824 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.268716703 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.243608239 seconds)
  done (took 6.215359871 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.134706406 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.489429681 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.466843381 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.542263406 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.465988357 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.28114159 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.488139119 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.349100515 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.262747224 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.242939812 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.747906754 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.270764923 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.289468255 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.536709044 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.279605405 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.119919467 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.10535153 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.298658555 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.486283416 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.311088413 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.381260797 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.463346602 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.465749237 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.465527069 seconds)
  done (took 34.042718824 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.865850738 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.03883478 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.471598388 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.015609833 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.810770424 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.905034986 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.390047558 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.614241976 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.377561476 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.349925942 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.836391144 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.859675511 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.258530745 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.994666757 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.876918716 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.292768657 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.284033297 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.954684839 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.547195364 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.414526117 seconds)
  done (took 38.258097161 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.097772083 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.362602411 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.353114101 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.275171146 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.104482688 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 4.553264745 seconds)
  done (took 21.857808249 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.391371811 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.248866843 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.397230098 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.373752893 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.269366807 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.242206601 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.627347694 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.334568792 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.851171154 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.764995068 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.52872602 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.534039029 seconds)
  done (took 21.667487269 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.103226155 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.164053467 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.107412575 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.277970483 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.911573912 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.989888711 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.430850784 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.099801805 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.165303329 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.308045123 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.967878548 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.275089115 seconds)
  done (took 39.924492281 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.284840151 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.317247923 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.413325026 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.138553014 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.49750812 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.145250447 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.475910525 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.070945749 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.717349853 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.868517803 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.656347359 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.113788802 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.635594175 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.07624558 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.105648243 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.402368759 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.931079284 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.069111351 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.423905555 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.138350849 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.065977123 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.175163289 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09738189 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.545750664 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.383598264 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.102102102 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.335248406 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.353826902 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.107031012 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.323988119 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.117054868 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.658926209 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.267996777 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.408716521 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.508395724 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.152244223 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.29314083 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.703830457 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.649441226 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.401912046 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.245929709 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.261828152 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.348894953 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.109625953 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.363127213 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.882262268 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.109341899 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.82513721 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08455937 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.373014981 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.859177998 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.569225944 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.441508413 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.806823604 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.251380443 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.405506269 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.265972936 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.112657302 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.412310119 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.299769505 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.126106482 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.284059896 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.294033426 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.067433988 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.504418684 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.307577359 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.252414953 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.30446258 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.421195581 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.410593626 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.44188969 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.373943189 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.802034307 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.168031477 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.644263007 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.020390728 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.465515639 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.103905888 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.82791266 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.638402545 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.085792107 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.22962408 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.857002979 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075030478 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.104755049 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.294963072 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.106930695 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.075721259 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.119314144 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.330935496 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.371173983 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.154219925 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.171637149 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.34530562 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.803486109 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.113321663 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107144911 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.352030823 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.068355938 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.669897268 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.097027226 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.141665654 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.104168749 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.699005659 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.488144863 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.140402142 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.885239903 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.71337571 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.404375166 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.695091791 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264894877 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.934113489 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.449929153 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.429268895 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.096353524 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.049445719 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.106750691 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.355366865 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.315494125 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.118988136 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.077042111 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.517960347 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.267302581 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.095626565 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.387372474 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107437213 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.257210906 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.098425614 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.701429448 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.100142737 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.349042787 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.567199248 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.182209296 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.251501869 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.067310806 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.250518465 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.557905955 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.239347294 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.414927754 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.420588239 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.292950868 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.934796296 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.101675788 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.938883892 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.487367827 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.321624607 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.435931976 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.768136579 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.263736721 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.111521748 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.09613066 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.236098951 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.104050005 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.644876973 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.109873098 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.933452221 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.086394158 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.358294165 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.101453659 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.269969697 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.106437577 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.340497702 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.537493231 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.261311405 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.279980036 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.357398608 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.308824282 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.099831019 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.078825757 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.383300602 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.340693148 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.561499437 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.334547508 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.527785018 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.557949303 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.595446051 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.322321776 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.444785167 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.903303637 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.377621152 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.354050879 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.11904802 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.072545503 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.139889129 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.341266355 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.381515188 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.33120185 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.848781294 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.832460878 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.038409844 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.191484174 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.579994293 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.074791914 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.256097465 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.485219559 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.103870608 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.603579328 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.18133917 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.468910669 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.601404086 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.129066219 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.406620207 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.726964928 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.630644813 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.45683623 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.427516174 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.078233523 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.943029009 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.698630374 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.307738378 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.108006021 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.543746385 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.731426051 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.298400551 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.107922311 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.453901811 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.965563327 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.912147392 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.626712388 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.646962036 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.118938369 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.261505418 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.487658548 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.114600988 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.924668383 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.38371832 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.309222091 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.817487143 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.560604841 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.341651457 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.430026468 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.099057012 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.114973664 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.40102148 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.417234156 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.401602804 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.559767005 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.327998842 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.785455568 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.201247597 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.716504293 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.274266497 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.131436726 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.45586937 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.265113539 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.926149056 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.26790045 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.901724745 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.407055756 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.57880452 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.379188848 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.099125 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.474644449 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.683445153 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.118419947 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.07155892 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.222152316 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.106707804 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.365023283 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.867158682 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.151268432 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.78731832 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.348436647 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.322151975 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.262280695 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.503428088 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.513404292 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.84085769 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.079681872 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264463121 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.204601883 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.392758753 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.098431093 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.383092345 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.735425253 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.530621722 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.051700021 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.594027555 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.47215597 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.713198057 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.476985055 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.306744286 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.415226509 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.022883532 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.660169862 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.106747405 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.248663552 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.067074404 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.709651786 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.554068594 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.477619837 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.492176606 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.122275676 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.51245707 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.435156365 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.315881644 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.112646445 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.368695581 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.098976509 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.431690137 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.095906593 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.843334236 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.523122894 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.105651783 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.931974004 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.333501087 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.451951796 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.263795085 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.618646051 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.255753545 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.237440274 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.669711445 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.28554383 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.235447773 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.447485455 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.727960602 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.257192729 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.119757487 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.69939058 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.743295948 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.479997852 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.68224237 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.600307806 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.457555479 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.882234902 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.109853564 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.330090951 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.260783265 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.103774957 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.34616779 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.481482633 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.136519998 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.300421894 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.416972614 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.419694362 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.67597714 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087718567 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.784290614 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.494850502 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.623906847 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.668256005 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.888804636 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.35999136 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.255017713 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.392926491 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.198691315 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.274647746 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.337373105 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.826076693 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.141070533 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.982311745 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.891156758 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.19289048 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.643568281 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.122564595 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.961482422 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.267199967 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.340645292 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.322582582 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.240284069 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.064754366 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.849911615 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.886169062 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.384766531 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.271286924 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.26636182 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.148902002 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.354288143 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.626031328 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.421457945 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.88260803 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.473327633 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.288629455 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.070600892 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.119558084 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.380079422 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.479786321 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.120716433 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.400056638 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.440470666 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.125991622 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.15301207 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106796712 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.39040634 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.961304024 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.835397157 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.348465529 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.503945989 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.670253266 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.140943088 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.883601699 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.330229069 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.452834586 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.503273809 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.903643766 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.48785481 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.412754889 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.249852022 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.074406672 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.272430012 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.104774683 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.269865264 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.002973201 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.402159541 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.110287363 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.349568557 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.743077324 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.106188281 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.113814117 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.10723404 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.330222121 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.298224732 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.098063547 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.867458685 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.472477383 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.263221395 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.082509334 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.875141844 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.067995729 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.329216534 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.097385056 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.280844129 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.943630514 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.121465396 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.87813821 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.569629726 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.143264015 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.301461676 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.079814579 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.711189835 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.252498739 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.559845594 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.052083211 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.354507555 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.619720393 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.269346905 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.103308108 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.434327179 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.238599069 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.415043928 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.361722314 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.478982848 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.496552489 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.373555095 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.368564541 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.772268918 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.352585706 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.350320737 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.076865717 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.104808187 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.128269557 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.486579073 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.465366201 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.101414617 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.642068852 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.352045596 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.170465901 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.370085781 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.362498053 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.639055308 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.317175857 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.17348274 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.352816537 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.164396634 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.416259796 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.976534735 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.353264233 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.10014151 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.149827121 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.329043672 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.348375962 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.486365255 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.416880586 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.9972487 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.262796838 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.502576985 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.916733427 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.637315191 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.107409934 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.765086819 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.592710798 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.101845084 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.488345182 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.698477171 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.279558751 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.371168236 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.356514597 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.102971626 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.335785709 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.609688 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.103480237 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.769999334 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.482709398 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.098948244 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.48531397 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.14333444 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.269443029 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.885727078 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.604798946 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.108976522 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.704152185 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.331211178 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.648187266 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.380430152 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.115340894 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.255066566 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.741682627 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.087037349 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.109445935 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.200135498 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.638230628 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.118410637 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.645219843 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.129831965 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.349795085 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.129948167 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.187541424 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.113205542 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.328753911 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.297057269 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.350291412 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.375005469 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.276866831 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.106172456 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.705152385 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.789610208 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.084530965 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.344019583 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.104404058 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.493177694 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.943187331 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.107781178 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.677290185 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.316724902 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.088066647 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.497150116 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.361842067 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.143013527 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.295286926 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.095939625 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.457041447 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.261997132 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.601446185 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.344132185 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.427303915 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.220456317 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.124873024 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.643311725 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.479571223 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.942131946 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.104489768 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422195127 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.100635338 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.705783131 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.765663916 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.259373424 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.178841032 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.964119374 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.824976811 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.931214425 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.363017424 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.106420535 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.317809976 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.613477734 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.074474241 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.710794249 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.111704576 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.312758107 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.429916818 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.076049729 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.269254347 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117851934 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.086676512 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.605770341 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.104115837 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.409046706 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070812011 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.652338812 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.118608349 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.144406007 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.342857025 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.458748882 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.10299791 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.826174733 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.277654723 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.107651627 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.112192587 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.444552068 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.258276296 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.351534709 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.481824898 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.216199367 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.537236636 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.010979283 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.708680402 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.242157988 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.425248924 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.934749536 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.660039346 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.12343493 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.720516331 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.696413057 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.239849839 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.646896641 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.354825881 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.840424487 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.180091364 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.598363796 seconds)
  done (took 1953.798254399 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.17478687 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.289684335 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.190624011 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.145065301 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.199257906 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.233589848 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.246518507 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.160560157 seconds)
  done (took 50.797775265 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.114803058 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.136883084 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.619923625 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.372824936 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.122192955 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.199895319 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.356967519 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.7232257 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.119324662 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.022818223 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.24895391 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.297029604 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.130053537 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.143839271 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.896932181 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.237709323 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.101707565 seconds)
  done (took 92.983674381 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.141983304 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.804571693 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.124962635 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.764227759 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.154736848 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.520441276 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.118651323 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.106892197 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.468285888 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.771964632 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.153384868 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.264041221 seconds)
  done (took 85.529817305 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.136935238 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.13735498 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.142279213 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.137145124 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.144656591 seconds)
  done (took 6.811203057 seconds)
done (took 2415.493394004 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.328799168 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.631344589 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.660463994 seconds)
  done (took 4.391992537 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.167433899 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.232396912 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.299456446 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.244930757 seconds)
  done (took 6.063476696 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.431993498 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.584576145 seconds)
  done (took 4.116714609 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.44282512 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.126913101 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.669594811 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.097165297 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.118994401 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.112766103 seconds)
  done (took 19.441862991 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.134104855 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.133373333 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.134117918 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.127152754 seconds)
  done (took 5.638424731 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.104980362 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.156485669 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.108002671 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.128480006 seconds)
  done (took 18.595321214 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.392711235 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.368922613 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.882832824 seconds)
  done (took 5.761493699 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.925001644 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.25702733 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.90513854 seconds)
  done (took 6.202058011 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.859166671 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.023525508 seconds)
  done (took 5.98320331 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.278395257 seconds)
  done (took 2.380131527 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.612539504 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.596973313 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.765761324 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.840171219 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.022699906 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.402002988 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.515566993 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.346599704 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.627167831 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.649328766 seconds)
  done (took 17.498637508 seconds)
done (took 107.742093519 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.207973446 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.51603064 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.271262691 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.905093133 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.283267206 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.27324156 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.130934846 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.720841504 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.513710256 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.519557469 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.921494987 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.279047664 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.164918078 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.496746373 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.174834454 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.458693228 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.516390523 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.216635419 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.097207768 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.586407011 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.141015396 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.502678408 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.668419877 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.519475077 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.527959964 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.255719641 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.048991464 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.475462414 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.321398639 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.060018414 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.269524756 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.811038844 seconds)
  done (took 151.958004343 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.095390504 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.122352653 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.1229431 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.109390553 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.101983615 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.123972004 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.117832084 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.105213615 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.912343536 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.909279575 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.120184474 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.073449488 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.124946929 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.110149531 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.12597962 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.10707724 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.152474603 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.120560077 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.122798824 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.121732812 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.125103114 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.833112217 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.122499315 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.864510724 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.148958294 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.123337974 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.109668932 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.133671248 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.124020458 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.126266056 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.124544243 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.111872398 seconds)
  done (took 187.972402024 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.111913899 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.122861147 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.123180152 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.108944442 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.11996475 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.124204079 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.109953825 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.110865584 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.124629827 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.123878204 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.123499726 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.122298827 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.12625733 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.108730205 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.127298748 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.11093498 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.122822179 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.129494573 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.124178261 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.12587285 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.12565802 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.109557435 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.121800158 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.125243091 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.121774179 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.126038497 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.107747008 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.121657182 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.120587119 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.121864967 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.122639787 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.106335734 seconds)
  done (took 196.960253144 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.40995301 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.141888084 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.071879584 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.858438243 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.014801299 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.135110313 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.849403182 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.420549202 seconds)
  done (took 14.022948862 seconds)
done (took 552.036411588 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.769684798 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.035566499 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.28899467 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.397126919 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.665109766 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.419226082 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.393733278 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.570401342 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.844043949 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.546201334 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.565435998 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.324808822 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.919710859 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.376501278 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.285320131 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.597168026 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.521621724 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.813364625 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.299608093 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.943694475 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.319930273 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.001241444 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.553822708 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.896433621 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.581158738 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.045609861 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.314170153 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.522716722 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.36520793 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.296859441 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.135494483 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.588502137 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.342041051 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.333370344 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.590993777 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.591377609 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.542274356 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.570437536 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.289379561 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.793896321 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.950146914 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.723306267 seconds)
  done (took 75.034045147 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.140175416 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.161172036 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.292120328 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.203635922 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.786290875 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.206854457 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.355497708 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.347955636 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.20932679 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.33893977 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.396625777 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.811088342 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.377990376 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.79038848 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.368673538 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.390097877 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.207628994 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.762338356 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.367586243 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.342453305 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.17378229 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.295708751 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.172394482 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.325013761 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.165193454 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.17678253 seconds)
  done (took 36.294152591 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.182956039 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.291782011 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.378773103 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.199326409 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.378110968 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.12184558 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.440890212 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.273294787 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.752483196 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.480211578 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.214947588 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.30084681 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.321445264 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.411408941 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.382831517 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.30379158 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.300767148 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.300611265 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.289857809 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.360085767 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.212316294 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.223513063 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.444843937 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.07405679 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.978593563 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.647337909 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.340356505 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.750403795 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.328574643 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.296033923 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.271329356 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.418924364 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.587922297 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.387035376 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.272940216 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.157658941 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.153824129 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.217712377 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.041586083 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.300260124 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.432495967 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.555873258 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.492255321 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.711270882 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.414352053 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.360112306 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.635846772 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.225771205 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.266473459 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.017718969 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.439965275 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.758978734 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.36322812 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.327947374 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.258441885 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.52280428 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.324030837 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.543972701 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.236604981 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.900653967 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.22909406 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.5275955 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.295276999 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.423635161 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.406022991 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.344812193 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.322422124 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.680000219 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.491084529 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.331869612 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.766654055 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.227014055 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.175770956 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.211228445 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.283893091 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.657582983 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.05713373 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.444936202 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.589069437 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.442515517 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.377836299 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.762941309 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.139061683 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.445780925 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.324567439 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.138530326 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.259882224 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.450154982 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.415098428 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.678492522 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.730415459 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.569742657 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.560496742 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.279510963 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.704363186 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.649559632 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.196568394 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.167497267 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.373534041 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.727792928 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.232128979 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.392033662 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.767226874 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.630960122 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.481351662 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.25849908 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.504807465 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.427338856 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.526416787 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.1381283 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.342859427 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.21543468 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.362707527 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.4243281 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.136196857 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.693561026 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.235850838 seconds)
  done (took 237.313472398 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.099549141 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.118018455 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.115004528 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.117865606 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.10789764 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.661172737 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.158801097 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.107318483 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.659618499 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.15279391 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.109200861 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.109415405 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.109214409 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.112049978 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.295534927 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.326407127 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.239437051 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.106093729 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.111531418 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.110472315 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.223028236 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.11201303 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.111097561 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.111315339 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.110204663 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.112300315 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.110193344 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.115108818 seconds)
  done (took 152.040618811 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.161924996 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.525971852 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.187640217 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.250031821 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.193394562 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.182169002 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.688068372 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.305950311 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.240126523 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.174860006 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.170668304 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.386927849 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.468686188 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.750302812 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.296491487 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.351837779 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.805449371 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.307585272 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.184080688 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.171274804 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.31899077 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.503689174 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.425117008 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.419903723 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.308192377 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.429496913 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.236350304 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.176925949 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.277205487 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.649921118 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.183279077 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.509241338 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.305186333 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.166441626 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.65090011 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.512297423 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.73315532 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.804880748 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.355450991 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.135252342 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.130667454 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.394954069 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.458077571 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.210836092 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.163456582 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.781569927 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.184004878 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.418354489 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.175566608 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.150918668 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.260327184 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.281349084 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.406289722 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.045019784 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.346883029 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.315298293 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.750581476 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.147272596 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.177745807 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.471267576 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.144463114 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.638516585 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.651293495 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.216260803 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.182119914 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.316117133 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.267956269 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.711359653 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.778000422 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.21086052 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.522359732 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.366110522 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.144772695 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.442707112 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.350031419 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.603693515 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.737970418 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.323288361 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.265416445 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.255167867 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.434697237 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.155920324 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.683768914 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.263643951 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.162636392 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.644564894 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.553957506 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.141730336 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.164528411 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.259614363 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.324510475 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.376240742 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.428904624 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.23312731 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.061593099 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.422078084 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.438536671 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.187811833 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.288453019 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.157078579 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.581580144 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.349192349 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.156907354 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.471924219 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.550843094 seconds)
  done (took 155.909606457 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.853974968 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.226393037 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.408015536 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.700812236 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.540121626 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.600363715 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.4333704 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.22773641 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.460865306 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.377758732 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.368761327 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.267437437 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.846864401 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.916575842 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.209259944 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.390022789 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.233237547 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.765716922 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.437297003 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.059122758 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.611080565 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.857645216 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.477057952 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.555890439 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.59859164 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.645593641 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.818205839 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.274668544 seconds)
  done (took 48.273133363 seconds)
done (took 705.966157095 seconds)
SAVING RESULT...
DONE!
