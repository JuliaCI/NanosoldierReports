cset: moving following pidspec: 31483
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.811825443 seconds)
loading group "shootout"... done (took 1.178815932 seconds)
loading group "string"... done (took 0.67098571 seconds)
loading group "linalg"... done (took 8.603424274 seconds)
loading group "parallel"... done (took 0.165538839 seconds)
loading group "find"... done (took 3.029407525 seconds)
loading group "tuple"... done (took 2.128022754 seconds)
loading group "union"... done (took 14.860087025 seconds)
loading group "dates"... done (took 1.451727042 seconds)
loading group "micro"... done (took 0.220601606 seconds)
loading group "simd"... done (took 4.773400542 seconds)
loading group "io"... done (took 1.07854382 seconds)
loading group "random"... done (took 9.633882197 seconds)
loading group "problem"... done (took 1.508506713 seconds)
loading group "array"... done (took 25.293183513 seconds)
loading group "misc"... done (took 1.884424287 seconds)
loading group "scalar"... done (took 43.536600173 seconds)
loading group "sort"... done (took 3.334325155 seconds)
loading group "sparse"... done (took 12.768678667 seconds)
loading group "collection"... done (took 18.564111245 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.443915096 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115979027 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.163328683 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114930774 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.210744944 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122052101 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129430151 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085525397 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.884516858 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.156085339 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.11531613 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.423591574 seconds)
done (took 5.419530173 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.185463519 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.247298724 seconds)
    (2/2) benchmarking "String"...
    done (took 0.163928964 seconds)
  done (took 1.646013673 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091536706 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063809774 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06814938 seconds)
  done (took 1.457116259 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066664671 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136479075 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067369688 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067849999 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067772522 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067424914 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067171795 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067171612 seconds)
  done (took 1.780027276 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072666182 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068308958 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066225799 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068400019 seconds)
  done (took 1.509150187 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066552758 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122464837 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065557719 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065818705 seconds)
  done (took 1.551901814 seconds)
done (took 9.44785812 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.161259566 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.840959529 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.862206834 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144083999 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.267193781 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.327173393 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124934371 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.207433492 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112181528 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.076298784 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.145002022 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079409955 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.479445276 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.462778986 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072765324 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171699187 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.642242915 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.090086399 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136028471 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.461324582 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.079145342 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.08833003 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085109883 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072479394 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.332581713 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152418614 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.67000186 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.09360409 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069200007 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.190712251 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071760653 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078961276 seconds)
  done (took 11.116560878 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114657488 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.113627312 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069986561 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124833969 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09491233 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070614768 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07615098 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068576915 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089601086 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125675873 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091117258 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.121976525 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067565235 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070023208 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.096428429 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.19797114 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081641888 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082494243 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068499755 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082068192 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106217875 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078977752 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078987353 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07901759 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133482933 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169732077 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098064376 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099476677 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.069328815 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080205641 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11627723 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128521715 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069367271 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066240704 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121154669 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096716267 seconds)
  done (took 4.773054762 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.882463472 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09760376 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.10787484 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099189883 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107549446 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114612383 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.147512559 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12282503 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100247756 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.075679633 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.177659427 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.671114401 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.141262812 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.2160413 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071820208 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.144108973 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.876079334 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.118697959 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070135568 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068271077 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.094708303 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070310021 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.1351191 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066004768 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176446351 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.722300095 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072426023 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071420648 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098693855 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067220436 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142133485 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.09505614 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071474424 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.560034919 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067202059 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.066435993 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089868543 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065926478 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067896472 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.095688577 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068633848 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079635782 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067200271 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109942038 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08049459 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.511060608 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070499028 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.60470365 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.308242731 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074570389 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071552193 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102492818 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064984504 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068377757 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.256841113 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.141171364 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067578693 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272694139 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071063026 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068497047 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069539638 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.098777476 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070600958 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068524413 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072745828 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096268247 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.793055748 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.147567565 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096591923 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069566988 seconds)
    (70/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.066229017 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.396516336 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073693429 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069302895 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069245687 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.091661913 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.258253481 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068387542 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068223865 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109321934 seconds)
    (80/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066000171 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.09540058 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090173971 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071131354 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069043741 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067529361 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.325182711 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.163426917 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06798714 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068802152 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.488063633 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065622753 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067534889 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069832058 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091486027 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068052726 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065189639 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065993513 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100361043 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072054706 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.703129623 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.0704463 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.492117554 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070212275 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103946056 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121145736 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069034397 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.101724166 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069132951 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066405341 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07466055 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066999853 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.183966204 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070375696 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066988418 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067826649 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069744244 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068925085 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068615242 seconds)
  done (took 24.782393988 seconds)
done (took 42.791034321 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.39859392 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079585193 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079880007 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080460215 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079860597 seconds)
  done (took 2.017637486 seconds)
done (took 3.420267609 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.251774772 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076095426 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065222822 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.201597834 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088647754 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.175295917 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.212944652 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.158728586 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.088752302 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088461714 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.088715935 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.218739866 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.224541419 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089146045 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.158920262 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.22422501 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.088766169 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065205375 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088409196 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.088699579 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.088783321 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065101042 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.088304729 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.088197551 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.157723315 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088404332 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064956995 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.15754951 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.086871382 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.157940962 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.087484062 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.086712509 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.086839947 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.156764167 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087213379 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.157301739 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064417445 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.086995299 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.086008852 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.086196156 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.085930936 seconds)
  done (took 6.197817702 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076179193 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08378988 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085211143 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063405713 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072958326 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084053496 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063175748 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082739027 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092009931 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083590851 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083265403 seconds)
  done (took 2.255993218 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071278838 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084196434 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085407959 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062785825 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073955078 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084314544 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062967819 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084109743 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086671994 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084091015 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084370257 seconds)
  done (took 2.202048118 seconds)
done (took 11.977414192 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.189071602 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.090412934 seconds)
  done (took 1.599513316 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.260145249 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.521124818 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.951257075 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.117122823 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.097532587 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.110118982 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.220504608 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.092304627 seconds)
  done (took 7.882602739 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.12832564 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.07073542 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069777988 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069787482 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069030995 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068251076 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069441739 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068499225 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068328956 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068607183 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068323467 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070668548 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070642642 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068996639 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069114917 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06925126 seconds)
  done (took 2.6142645 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104530246 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070562962 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.100288904 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062837308 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072728632 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063126032 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072002354 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073922477 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071498758 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070813498 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072807383 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071076403 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072071281 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.072414077 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073848945 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073276279 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073490206 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071443074 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073511067 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074424689 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07302509 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073418879 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073986665 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072167959 seconds)
  done (took 3.240066713 seconds)
done (took 16.672779367 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176354526 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075259666 seconds)
  done (took 1.579472699 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.092926201 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.093448719 seconds)
  done (took 1.534023436 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073345357 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061192678 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.077987053 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070270724 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061705879 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061890355 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076549125 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062166769 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062011214 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062270117 seconds)
  done (took 2.022188599 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063499376 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068824411 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066762937 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065072684 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067222193 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062926102 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065119046 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063081455 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069298662 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061989253 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066197718 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083313729 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065752265 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084406481 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065171774 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06580843 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06743603 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065209381 seconds)
  done (took 2.568111494 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062187182 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061939233 seconds)
  done (took 1.48395879 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065534012 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062609524 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064364959 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064562305 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06226584 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061920966 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062435224 seconds)
  done (took 1.795976855 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.425451022 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.184345462 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.418058607 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069711376 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07700965 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.25626469 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064962729 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069390464 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069547554 seconds)
  done (took 3.030414563 seconds)
done (took 15.377599924 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083718967 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181860566 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.111964287 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.410298961 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092000508 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067992738 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113725085 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.203126449 seconds)
done (took 2.646173993 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.256591981 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.168143621 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.312464237 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.149036754 seconds)
  done (took 2.995715957 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.394602122 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.167773103 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075883086 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067291778 seconds)
  done (took 2.076483651 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.06748857 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072290864 seconds)
  done (took 1.507198195 seconds)
done (took 8.21936893 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074034961 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062108719 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.096760232 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.063743555 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06448936 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062133597 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.063631629 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063269351 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064147464 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062032307 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064559871 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064157581 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064213294 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063980306 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063782192 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06431151 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063962442 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063507919 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064031725 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064040854 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061969505 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064308214 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063156345 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064049456 seconds)
  done (took 2.959029697 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080164119 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066621767 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067411538 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067056558 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067506789 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067243859 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067269345 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066305616 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067544771 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065972196 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067678731 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067753796 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066146981 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068022197 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066031247 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068020607 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067907705 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066378193 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06600602 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068269278 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067862091 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066568758 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068180667 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067459409 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068076387 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068217307 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066275309 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066644445 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067764337 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068105546 seconds)
  done (took 3.415443664 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.0681157 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.06028793 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061057302 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070719793 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060304942 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060689276 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061300956 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060300949 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060798502 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061554742 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061280395 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060752508 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.06155435 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060362834 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060488218 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061154585 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065732471 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080230151 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060984395 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060525516 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065646355 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061100698 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060469998 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060668532 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061117372 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060684201 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.06047459 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061261506 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060864875 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061818681 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.06066631 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065636294 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066309864 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06057388 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.07150703 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066239378 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060858227 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.068238521 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062616295 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060412032 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060767512 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060642591 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.06107207 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.06074058 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071369778 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061061354 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061479496 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061260285 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061070634 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060593455 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060746235 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062201532 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070289031 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.06225435 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060642582 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061750672 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060734022 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061181805 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060890369 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060471915 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060502027 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064839731 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06193206 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061301581 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081335225 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061888888 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071522365 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060571836 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061074584 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064917651 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061444471 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079608573 seconds)
  done (took 5.927441498 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072412641 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071783278 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079578066 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.07107303 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064585717 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061375726 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065385904 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061567098 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070739186 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065414169 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061453962 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064536702 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070962012 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065474283 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062685506 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070752972 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065225229 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064584263 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061783724 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065490091 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062795476 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064776469 seconds)
  done (took 2.859375328 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138450113 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066848292 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105726763 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.071048719 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069612553 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070885058 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066954823 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066933008 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067482425 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067968066 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067892429 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067016146 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069371028 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068315106 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06776424 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067746544 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067201641 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067855403 seconds)
  done (took 2.717850785 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077912245 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066686637 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089715448 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066803715 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066823131 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06622265 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070197718 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070448755 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066361145 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067797034 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071753173 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066435076 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.06662151 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066822613 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066239945 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066845089 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066519962 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06708418 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070550755 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070188381 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070393091 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070797191 seconds)
  done (took 2.914215489 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078874528 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065378095 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081159682 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067247987 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060559166 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060943732 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067254358 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066297991 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067537419 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06588191 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06667684 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061323362 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067889313 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066467034 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067960413 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066505815 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066293664 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066504199 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066082393 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060876294 seconds)
  done (took 2.72462176 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.09848638 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063262196 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063291318 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06825475 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063915461 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074655682 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068492802 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063464521 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063349817 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085877626 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063695715 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064286605 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068992242 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067320269 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063839227 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068619758 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068579673 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069161686 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064316845 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064199389 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086035747 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063536126 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068356749 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063347715 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063775529 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063342137 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063437848 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066785881 seconds)
  done (took 3.300081276 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065754404 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064091478 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064227951 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064347971 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064540056 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064594433 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064523909 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064678137 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064372385 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064744396 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064324074 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064145937 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066962561 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06443295 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064013205 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06409885 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064057645 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064505033 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064687846 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064928438 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064167219 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064684982 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064384662 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064835472 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065069942 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064146768 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065050091 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065286957 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0647426 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06520323 seconds)
  done (took 3.338969762 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073903596 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072070925 seconds)
  done (took 1.540187903 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063058342 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078753325 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059962265 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073148897 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068824998 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065008211 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069975316 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069728676 seconds)
  done (took 1.937628009 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.093373069 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.118194816 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062725086 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063379634 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.091601521 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.12923388 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.101574986 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07490759 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076720353 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065191218 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063157543 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.101476809 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061719372 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076332424 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064005944 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071929623 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070171818 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080240524 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075881702 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06057819 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075212121 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062694253 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060940632 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063010539 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062062873 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069583417 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078199669 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075387372 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071346817 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060032476 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081044995 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060970856 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062306333 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07103588 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.091158189 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061012285 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.099217846 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061691387 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066066848 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060479724 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074045195 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082534009 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076044684 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079455341 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062791267 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062932984 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060516017 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063520618 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06554678 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071029219 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061029811 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069244761 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060276373 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062347007 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072593614 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061426238 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066447959 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070863748 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075430515 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072490269 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.074149079 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077389441 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070824346 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068442109 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061949508 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081006414 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062867363 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075260084 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076562187 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061950316 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074335573 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060619386 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060218437 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061349801 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095557066 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06240842 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06198238 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060901781 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060874907 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062351452 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071175774 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065819353 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069117993 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063811941 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077345796 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070694912 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.0608932 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066766351 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079035033 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065205655 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06123769 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077786484 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06491767 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060044791 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078376128 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07068373 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.061217275 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.060620683 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064089806 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073475702 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06060193 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058712578 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069091027 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06146588 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.086898378 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063797452 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.205827192 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062385836 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.073314443 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066625739 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063508133 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060612811 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.06634949 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06244116 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060577333 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071983633 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061435849 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07613216 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068476688 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076785424 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076423154 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072185507 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077699756 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061368761 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060243019 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079183241 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070919239 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.062683285 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.079409697 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060614697 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075104746 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060438799 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.062647678 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070898029 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060058223 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06278361 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061450462 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065975119 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062686501 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063097775 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067609177 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070424041 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073424187 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062409885 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.0707635 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061502021 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076917319 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071635688 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066248585 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064538178 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061945076 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073840085 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068543294 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071166449 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060654169 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061991594 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061458877 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072700955 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071750276 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06303645 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068082884 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066207819 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062068913 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061361263 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062454175 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065528764 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064501821 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061841306 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069809075 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070654336 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075802584 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068369159 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070966871 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060231159 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060620357 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062680887 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060602363 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066218128 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070814283 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077484384 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.07362642 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082991173 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061193513 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071451433 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062669364 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078822732 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.075127176 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062557755 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065740238 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060579446 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062652792 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.07068837 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072863096 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074529405 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076322732 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065830889 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065870477 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060234411 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076283162 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061148983 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070147452 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070775135 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.064787576 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060744744 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062151344 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070506711 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066090898 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060957936 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076805179 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066319048 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059907077 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.074772438 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060739865 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071275274 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060026309 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064577757 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065804316 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.061923596 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069936449 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075404097 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059359803 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061077514 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076076291 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.202103139 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063872629 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071695317 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078229307 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067592025 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070696147 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073162795 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072393624 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066614014 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072030408 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062419604 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072011483 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064330678 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073717988 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061195676 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079927375 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060255583 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077310022 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061523367 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072971134 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062098835 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071391701 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062194562 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07860271 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063164824 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062198189 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073359971 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060030788 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071065453 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060514194 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067010896 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068821967 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.07133103 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063120038 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071320604 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062551845 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.070521028 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.066519733 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.069575775 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.070965614 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066186855 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.06062986 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070062723 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072288466 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070047767 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062580675 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063127208 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061816031 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071776558 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062776364 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062273872 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069840333 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066761941 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067541425 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062661237 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063099784 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062826426 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070399142 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071433226 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079515018 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070881797 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069453087 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071027889 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060631664 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077089576 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061378918 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071922519 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060189175 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066755914 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071522832 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061305415 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08065718 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062698141 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069482076 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074122243 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070190516 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065435605 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079481873 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064025394 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070238347 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069874015 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066209484 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068649633 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063102441 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070471851 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071342618 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072240872 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062261605 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069418553 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071029274 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062934022 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068175012 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062339121 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069631276 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062603859 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059688783 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066397738 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073102453 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066420044 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066440959 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060924228 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.05969949 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.06146433 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067273712 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066166004 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069996781 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076529238 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059353072 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061378427 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059892162 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064669379 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078005842 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070001783 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068719308 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065049011 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059192368 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061180762 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061476745 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.204395268 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065674806 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061221121 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061346239 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073202112 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062838271 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066256964 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061674138 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062174822 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072020377 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066017299 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062012608 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068782682 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061434052 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067113728 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060367938 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062865982 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066869277 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060498151 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065840618 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072418047 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078210034 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.06863879 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070769955 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06234368 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070150866 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077820953 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06758529 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062700811 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071256118 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060530938 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079912913 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070956823 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070519386 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071760831 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062339427 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.07867937 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066315222 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071440661 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077134915 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062137963 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067371307 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060776213 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077128331 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066582351 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061042117 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069632174 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069573638 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06744844 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073433926 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.062153048 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070183336 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06611253 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065193403 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.062929845 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.062600871 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070709578 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07760181 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061796213 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065610856 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070442936 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.07028466 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06630316 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07438272 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070149239 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062365219 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.062928766 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065142601 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062486635 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073800949 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062099812 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066614196 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06612637 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060496167 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068185635 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07790603 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071504351 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071472147 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.06076443 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060483848 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079159616 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.0659125 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064603583 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070375707 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071869022 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07453432 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071632187 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078673612 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062215358 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067583022 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074113667 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061998782 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061216452 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06517477 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062511269 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070676186 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071487291 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069690527 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062948901 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068707361 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075320073 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062126543 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066141093 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.065174114 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06169912 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071934556 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.06976963 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072726655 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061672235 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060026491 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064218253 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069527073 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068498568 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069230458 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060623857 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065266355 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.073258987 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068781628 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.203685797 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061730072 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06500591 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071399139 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065638478 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.060901728 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066825978 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066222501 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067579837 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071415633 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066354062 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060789664 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078744313 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.06960108 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070912367 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063114625 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06305873 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061908772 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060742421 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072869525 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060752228 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062817165 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066428125 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062598526 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079071567 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069873863 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07747326 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061904991 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066194244 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060590041 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071155006 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06612406 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.06133003 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.07178971 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060384844 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07735251 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073198773 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065945698 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060728367 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066682893 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069336739 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076707394 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071301475 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070523282 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064470275 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071653711 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062905337 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072693464 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060903185 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060155715 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071859147 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070158564 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074081595 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060546392 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.07168121 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062973717 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070093474 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069685041 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063009117 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062686943 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062814993 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071335408 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066363341 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071169868 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066278504 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.078726232 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.062311016 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073164388 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071118442 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072985877 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075862236 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073959434 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069923446 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062024799 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069538135 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069911312 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062551286 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06689741 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064901886 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083345775 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063054016 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062965115 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075942988 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.06768752 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061628554 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067688237 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066438319 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072063891 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062698365 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072503029 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065431084 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062199896 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066327338 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066351465 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060247285 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060654357 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061149888 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071215766 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065910731 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061460037 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080561224 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062531964 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070311481 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072378057 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068083164 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062837165 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059623765 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061896681 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074706676 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076976525 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064868091 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069873106 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061506378 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070249125 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058928886 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069028206 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068850611 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069111357 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.202902945 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062493575 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07753492 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078005964 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066675668 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071263749 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070940962 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063168299 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083966189 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071128419 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062912381 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072965423 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063736741 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060818804 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060476028 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063458547 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073384493 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061026361 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063516243 seconds)
  done (took 42.663271341 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099397861 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062134023 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060787092 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061271449 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068620092 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062287646 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061042403 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06186019 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061916273 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063811351 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061100106 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0636058 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067363143 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074079542 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068997705 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06446874 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061200397 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062050162 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061155152 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062017578 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067313086 seconds)
  done (took 2.876448875 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065767794 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064703844 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065037561 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065260712 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064381619 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061107863 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065017965 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061204792 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065675948 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061661142 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065500072 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061555931 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061842678 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061656027 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062114294 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062854663 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065547543 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064639714 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.06135106 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065126265 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062487644 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065292086 seconds)
  done (took 2.884613355 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063377715 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061611045 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070687355 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060214332 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060550866 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063888147 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060741552 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065841593 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065986193 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065812671 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070536692 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061520529 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060633816 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067024332 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060348282 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.06179681 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103464426 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062071246 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061758862 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060716427 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063408409 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070759608 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060414133 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060837653 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06585759 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063739036 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060347575 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063393231 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061256067 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065591788 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06170876 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060355148 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070669809 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069778415 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065706754 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065415074 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062193528 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06151609 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060302552 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060708985 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069671551 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062103144 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060961838 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062339033 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070281188 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060459824 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060601787 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070360282 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060290831 seconds)
  done (took 4.647212449 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071605827 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113223484 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066986183 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094448341 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073482884 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066577967 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067324837 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095222114 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062343182 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.062513474 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074289467 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074455983 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063722556 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064725693 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066949506 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063559728 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064211818 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062802042 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066217493 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062971197 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066273417 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067736513 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073187576 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07369556 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064167389 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062435105 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062747019 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064208155 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07354966 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066679497 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064660176 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065351305 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074001386 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.06786673 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06306751 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.0630659 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074249233 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063381189 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063221742 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062111086 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062865331 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064459576 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068170101 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074857625 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063557256 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068769382 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063655203 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061742697 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074664491 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063321233 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067006827 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.0749317 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064492539 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064223767 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064852362 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073936073 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063444259 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062493995 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063875649 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073641959 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062273851 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064384431 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077142628 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063058761 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066705792 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.0745336 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068812209 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064397531 seconds)
  done (took 6.284148157 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070171955 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095952234 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076220112 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.077201159 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071517163 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071406948 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071612526 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071360329 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07156999 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074589267 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071967099 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.132511729 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068234807 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072886724 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071546909 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071528893 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071294778 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071157882 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071127243 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071070319 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07124309 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076112232 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071282988 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076124812 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073562537 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068422903 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071445599 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071411735 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076674761 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071889549 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073781928 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071391696 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071741128 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076794534 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073687014 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071868952 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061933326 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071615866 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071510481 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071425252 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067974546 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076534329 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071402517 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06806644 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071504811 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071626552 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076569513 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073810336 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072902395 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074799056 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071648334 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07676437 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071569368 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071919764 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076563423 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078760938 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076458809 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076783338 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071795003 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076624314 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076515537 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078898368 seconds)
  done (took 6.12579871 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074711567 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066861076 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079853076 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060608486 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060653692 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070154406 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060567446 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061059631 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067088397 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067396145 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069862768 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070451258 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072224502 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068875866 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070366676 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073029518 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070689541 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070243628 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067028309 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070392021 seconds)
  done (took 2.89676179 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076494849 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080065921 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066806191 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070359896 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066492708 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070580733 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066441642 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066688914 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067079949 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066381112 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.07152105 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071387942 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067115729 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070680523 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071061395 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070392263 seconds)
  done (took 2.627433163 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06513852 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068470036 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.094177717 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062096476 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06377955 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061710566 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06212918 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060421639 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063109402 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075489523 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062008081 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06427998 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062031589 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060884356 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06132478 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064460336 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063157959 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061724362 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.06202692 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.092918983 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070031489 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062715302 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064217986 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061700909 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063751498 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070375273 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063410225 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063795934 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061581387 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063988191 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064160195 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068736297 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063837782 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062186863 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06103396 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062022133 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062018955 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064466725 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064369796 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062419219 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060650398 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067047674 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062077204 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062409228 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063814422 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064515101 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063410833 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067753614 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062099703 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.0641443 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062198449 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063576438 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062233896 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069556885 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063923127 seconds)
  done (took 5.080889476 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078643272 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066636316 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.0609479 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060666951 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066029547 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067024307 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066359341 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066468895 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066797868 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060607042 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066676458 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065807166 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066813349 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066345563 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066874265 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066493124 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060480381 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066769747 seconds)
  done (took 2.716692438 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.06754113 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066101475 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065266742 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.062759498 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062506915 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067314537 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061096554 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062288314 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06269976 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062944373 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062665302 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062340933 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06239483 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062075305 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066300514 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062815762 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061914951 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061100344 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062647984 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060871649 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066633363 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060807106 seconds)
  done (took 2.911422194 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.11731335 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084346708 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.155817592 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080270543 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089274561 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072872912 seconds)
  done (took 2.116982506 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094950321 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098128142 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066043914 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065800977 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070284044 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069061013 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068844971 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069373047 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072220686 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072396926 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069297055 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072602324 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072470317 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074175628 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07095555 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07104036 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06921794 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069227477 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066224406 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076396674 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069162206 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072372415 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068999487 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068737347 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069253425 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074115181 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072195208 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07260911 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069587903 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072607634 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070668737 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069165734 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07273019 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072793506 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066136805 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072683571 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069256565 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076211523 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070695446 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074217774 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066389667 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070977813 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07234703 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072411367 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072517003 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069646366 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07240716 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069641834 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070019827 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078340848 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071215748 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074421376 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071260488 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073115876 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072628493 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077971704 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073537424 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07464627 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071163248 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07311157 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075094196 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071371179 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074501985 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073612328 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071172632 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074477883 seconds)
  done (took 6.291892342 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105505202 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066777814 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069361529 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07309014 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074578966 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069876376 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069990041 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06963951 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069842032 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06723207 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104534134 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07007676 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07493885 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077342709 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069536365 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069252436 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069474517 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074574059 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067310142 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077770427 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069370858 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074426319 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074372637 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074979301 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073029913 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071150015 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069400329 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069197445 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069211434 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069155904 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072455794 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069634619 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074400246 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066695915 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074364406 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069637487 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068907043 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072263734 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06908192 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070735338 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074241009 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076583957 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069594847 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069240468 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073398449 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069335581 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069480479 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066473461 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069455451 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066803793 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073012875 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072912453 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073261634 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074774862 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069562861 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069639616 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069466647 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069518477 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069410396 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071410581 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074583066 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069619795 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078150692 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06980472 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069765115 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075151571 seconds)
  done (took 6.306694902 seconds)
done (took 131.429199582 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.233764103 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.19904239 seconds)
  done (took 1.927412452 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076122468 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.192868428 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.074988251 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.07447072 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.107764036 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107446854 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.103589845 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07204575 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07452202 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072121043 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138949984 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.104498915 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.092041223 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072191424 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071896876 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072305846 seconds)
  done (took 3.025407611 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108593053 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.211476973 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.08215922 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070150166 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.152173368 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076670856 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072532572 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076861813 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077012031 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070416174 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.10706522 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083038768 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075754845 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076714996 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072545381 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075764589 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076822931 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077039521 seconds)
  done (took 3.176424684 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104574558 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.091926603 seconds)
  done (took 1.731636326 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156764185 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105492887 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144469051 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.34402722 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.136107432 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138006966 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.141841552 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.136384872 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110977435 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133382745 seconds)
  done (took 3.070687414 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106796425 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105248892 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30594708 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102862417 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082411563 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078177699 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075536275 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079801595 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075273646 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076801274 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122218886 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075436374 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.303680376 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.119558113 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098019101 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106791163 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071202132 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078016932 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079969222 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071160526 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07549712 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079500272 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.175813378 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078268121 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.098626761 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075037707 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07656584 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074450562 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074223237 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.077826374 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078779645 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.098420713 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078132089 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08275257 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076300956 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.095537576 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071954571 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.097947931 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074458621 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072496161 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07582132 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.07845019 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072558012 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078101563 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075759812 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077426089 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.07980949 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071375844 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07557458 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074824735 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073093747 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076407804 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076197301 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076866522 seconds)
  done (took 6.531343386 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.11968869 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.112487853 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070404623 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117191722 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109622804 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070594914 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.122181529 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104692407 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122833501 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.0701496 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069921802 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06958023 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076541348 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079290644 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120360229 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.111745131 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071718387 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070371303 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.110993986 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111554628 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069210732 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10813595 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.113342734 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110507618 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068860603 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069945264 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068680892 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069379652 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076572855 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075266733 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069327112 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078966285 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081057823 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075443319 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068689842 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.0689008 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068810854 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075885212 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077987628 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078097051 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074702813 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068450111 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068632007 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069615594 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070101969 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068414067 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077708539 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075471048 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077798637 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06905242 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069438111 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068698684 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069317066 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075486464 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074736838 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07663902 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078834182 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069194576 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069208636 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070995491 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07948707 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076617136 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076018535 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070213659 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077548445 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069125529 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078755829 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081440945 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06909986 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069676282 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06934286 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069522358 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069447436 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074755573 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075280371 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06969838 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069517924 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068912932 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076703231 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074510709 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06892478 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076500421 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068381799 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068883158 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069249788 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069195613 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.076343112 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075674781 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069290093 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068457332 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067869875 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068110009 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067260122 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074852054 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07395192 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074174756 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.213507143 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070906728 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.078654724 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076010933 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070345823 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075074774 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069699582 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069601768 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070012751 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075084316 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074669756 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07690966 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06941508 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068823475 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075068845 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077814171 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06919439 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.074941719 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077348914 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.075387023 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.068828405 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078069293 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069195773 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077456285 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069101688 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077115618 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069705379 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075042465 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069549342 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068564816 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06918695 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077686189 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069737616 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069439693 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06943051 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068929249 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075175922 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080994834 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069797569 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075730653 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075493901 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070123894 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078038005 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069621423 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078058627 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069539801 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069971064 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06869016 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080441792 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069649863 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069215831 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069560879 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077163942 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069738615 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077235284 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074608472 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068806043 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078719873 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077233578 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074384028 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077743981 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069841223 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069179615 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068965621 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071839394 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077201629 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078129708 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069541379 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069160946 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074532237 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077564957 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069200899 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074850952 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075044072 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075297288 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069518841 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069314909 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077818118 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079567824 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.07502609 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077291766 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075475088 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069155935 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074440769 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077224941 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068580108 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080025772 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068747051 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078786388 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077778671 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074104005 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077429089 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.07810665 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075479861 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07540157 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077346753 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067560623 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067482027 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.213280386 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070144405 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069976365 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075486991 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070053452 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.07005475 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.07962025 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069829141 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078003035 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068949288 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075390899 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068693062 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06978113 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079708719 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069128482 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070029102 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074950934 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069553318 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074546746 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077778452 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07485811 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069399194 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069715355 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078500098 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07763958 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069699214 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069457031 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069465366 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.077045546 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.076715111 seconds)
  done (took 18.756041878 seconds)
done (took 39.76099004 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.168518053 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.114693495 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208953901 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198838902 seconds)
  done (took 2.31714386 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101332305 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065735223 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.107599703 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.117824124 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06596214 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.103533022 seconds)
  done (took 2.137481848 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200078251 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174364519 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.241001864 seconds)
  done (took 2.19083365 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.36665952 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148352099 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.214834663 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.499884805 seconds)
  done (took 2.903612109 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.137180924 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.12815756 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077085568 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.13908129 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.084044789 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062912332 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.132060784 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069624748 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.09835985 seconds)
  done (took 2.564727595 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.138216881 seconds)
done (took 13.822349827 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.390945693 seconds)
    (2/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.1432119 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.313293611 seconds)
    (4/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.255424883 seconds)
    (5/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.35052582 seconds)
    (6/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.13879892 seconds)
    (7/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.235899279 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.155589886 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.093628998 seconds)
    (10/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.297216348 seconds)
    (11/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.190608119 seconds)
    (12/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.180220678 seconds)
    (13/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.273687717 seconds)
    (14/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.109357875 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.088319785 seconds)
    (16/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075608821 seconds)
    (17/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.079063702 seconds)
    (18/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.336235265 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076753433 seconds)
    (20/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075457219 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078102868 seconds)
    (22/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.208564336 seconds)
    (23/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.276827831 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078742498 seconds)
    (25/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.065734078 seconds)
    (26/341) benchmarking ("sort", Float32, false)...
    done (took 0.138217612 seconds)
    (27/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.247431496 seconds)
    (28/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.159462873 seconds)
    (29/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.0762638 seconds)
    (30/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074166352 seconds)
    (31/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.218501195 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094965514 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075000299 seconds)
    (34/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077656343 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.145803155 seconds)
    (36/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.18218113 seconds)
    (37/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.109916675 seconds)
    (38/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.216735561 seconds)
    (39/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145882392 seconds)
    (40/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.202348243 seconds)
    (41/341) benchmarking ("sort", Int8, false)...
    done (took 0.184800322 seconds)
    (42/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.183065657 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073674032 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.07391579 seconds)
    (45/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.088392335 seconds)
    (46/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.079988464 seconds)
    (47/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.189816225 seconds)
    (48/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.257429025 seconds)
    (49/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.199234303 seconds)
    (50/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.244304405 seconds)
    (51/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074362539 seconds)
    (52/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071224751 seconds)
    (53/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152185075 seconds)
    (54/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.146116784 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.08738674 seconds)
    (56/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068991566 seconds)
    (57/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.080981404 seconds)
    (58/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.17210109 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.255755014 seconds)
    (60/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.069134815 seconds)
    (61/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.151803525 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.095966733 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.090170179 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.08424277 seconds)
    (65/341) benchmarking ("sort", Float64, false)...
    done (took 0.13970183 seconds)
    (66/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.213224422 seconds)
    (67/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.067358641 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.090359807 seconds)
    (69/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.287826879 seconds)
    (70/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.201246799 seconds)
    (71/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.07523652 seconds)
    (72/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.189338772 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.06645714 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069125869 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066567445 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074891882 seconds)
    (77/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.197028253 seconds)
    (78/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.073795341 seconds)
    (79/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.086418095 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.0661447 seconds)
    (81/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074233482 seconds)
    (82/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.19103837 seconds)
    (83/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069951339 seconds)
    (84/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.148631477 seconds)
    (85/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.079011228 seconds)
    (86/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.156970703 seconds)
    (87/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067002682 seconds)
    (88/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066798117 seconds)
    (89/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07600555 seconds)
    (90/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.213557277 seconds)
    (91/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.07472125 seconds)
    (92/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.156505923 seconds)
    (93/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.132396507 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066987408 seconds)
    (95/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.16260887 seconds)
    (96/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.237306164 seconds)
    (97/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068666554 seconds)
    (98/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.083640775 seconds)
    (99/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.073729763 seconds)
    (100/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.163946893 seconds)
    (101/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073059561 seconds)
    (102/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.071043294 seconds)
    (103/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.203167338 seconds)
    (104/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077541792 seconds)
    (105/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.073907569 seconds)
    (106/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073029885 seconds)
    (107/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.152198569 seconds)
    (108/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.089465636 seconds)
    (109/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.070573322 seconds)
    (110/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.08406664 seconds)
    (111/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.197783323 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073794784 seconds)
    (113/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066368574 seconds)
    (114/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152780386 seconds)
    (115/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.082395308 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.06639937 seconds)
    (117/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.066544974 seconds)
    (118/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.0776595 seconds)
    (119/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067385678 seconds)
    (120/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074579752 seconds)
    (121/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.16899307 seconds)
    (122/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.0704789 seconds)
    (123/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.164697964 seconds)
    (124/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070826461 seconds)
    (125/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066587141 seconds)
    (126/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067801803 seconds)
    (127/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.125571835 seconds)
    (128/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066833851 seconds)
    (129/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.066918287 seconds)
    (130/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076277682 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070364467 seconds)
    (132/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.220290584 seconds)
    (133/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.202617621 seconds)
    (134/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.157161719 seconds)
    (135/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074599671 seconds)
    (136/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069409815 seconds)
    (137/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.076633434 seconds)
    (138/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074367949 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075331164 seconds)
    (140/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.224775416 seconds)
    (141/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.085781063 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.213289518 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.065507112 seconds)
    (144/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065501731 seconds)
    (145/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.196075218 seconds)
    (146/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078743987 seconds)
    (147/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.084632827 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091615895 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073620195 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074843052 seconds)
    (151/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.067130279 seconds)
    (152/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.065350766 seconds)
    (153/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.370889229 seconds)
    (154/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.068472995 seconds)
    (155/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.066084411 seconds)
    (156/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.086162679 seconds)
    (157/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095738324 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075640741 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 0.144075857 seconds)
    (160/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.092445787 seconds)
    (161/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081075752 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066466424 seconds)
    (163/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073646318 seconds)
    (164/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075922307 seconds)
    (165/341) benchmarking ("sort", Int64, false)...
    done (took 0.067518463 seconds)
    (166/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.147479418 seconds)
    (167/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.066250972 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066442552 seconds)
    (169/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077039945 seconds)
    (170/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074810379 seconds)
    (171/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.145510966 seconds)
    (172/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.159255312 seconds)
    (173/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07389469 seconds)
    (174/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.068876223 seconds)
    (175/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065924298 seconds)
    (176/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.07131964 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.142864848 seconds)
    (178/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066398589 seconds)
    (179/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092972577 seconds)
    (180/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075498401 seconds)
    (181/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066608934 seconds)
    (182/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.07810686 seconds)
    (183/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.06865962 seconds)
    (184/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068518614 seconds)
    (185/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064789832 seconds)
    (186/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.213587441 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067728314 seconds)
    (188/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.228311759 seconds)
    (189/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.07114138 seconds)
    (190/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.066845909 seconds)
    (191/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088646257 seconds)
    (192/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066601988 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151646957 seconds)
    (194/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13310538 seconds)
    (195/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.200721714 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147381683 seconds)
    (197/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067368169 seconds)
    (198/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067676496 seconds)
    (199/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067183944 seconds)
    (200/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.066941778 seconds)
    (201/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.066566559 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.219531162 seconds)
    (203/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.06673477 seconds)
    (204/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.085931639 seconds)
    (205/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.082725018 seconds)
    (206/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066427032 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.122067847 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085043417 seconds)
    (209/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065100564 seconds)
    (210/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076076488 seconds)
    (211/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.067743199 seconds)
    (212/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.227174346 seconds)
    (213/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065503586 seconds)
    (214/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.06712887 seconds)
    (215/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.06584295 seconds)
    (216/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078305588 seconds)
    (217/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065312084 seconds)
    (218/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.066952622 seconds)
    (219/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074786064 seconds)
    (220/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066077102 seconds)
    (221/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074022665 seconds)
    (222/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067375588 seconds)
    (223/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092891417 seconds)
    (224/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073457387 seconds)
    (225/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.066476004 seconds)
    (226/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.164940539 seconds)
    (227/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067682318 seconds)
    (228/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067124828 seconds)
    (229/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.065869411 seconds)
    (230/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077315081 seconds)
    (231/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066447445 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068572324 seconds)
    (233/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073242927 seconds)
    (234/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066726245 seconds)
    (235/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067560282 seconds)
    (236/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066745268 seconds)
    (237/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066463566 seconds)
    (238/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070580672 seconds)
    (239/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075093922 seconds)
    (240/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068878841 seconds)
    (241/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.082244698 seconds)
    (242/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.072796328 seconds)
    (243/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074066069 seconds)
    (244/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.164058174 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076507956 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078319615 seconds)
    (247/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.066806825 seconds)
    (248/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.06678443 seconds)
    (249/341) benchmarking ("sort", BigInt, false)...
    done (took 0.262296479 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.095039125 seconds)
    (251/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066512941 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.07257587 seconds)
    (253/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088419252 seconds)
    (254/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072764201 seconds)
    (255/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069972873 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.147710578 seconds)
    (257/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066131361 seconds)
    (258/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.068288143 seconds)
    (259/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.15086821 seconds)
    (260/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063814293 seconds)
    (261/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.07334373 seconds)
    (262/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.243084917 seconds)
    (263/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.069750884 seconds)
    (264/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.20658645 seconds)
    (265/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076260494 seconds)
    (266/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070853573 seconds)
    (267/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135905832 seconds)
    (268/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.067734014 seconds)
    (269/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071318578 seconds)
    (270/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.068178885 seconds)
    (271/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066735481 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153700582 seconds)
    (273/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.084762656 seconds)
    (274/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067581322 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066225237 seconds)
    (276/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068588626 seconds)
    (277/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.066322593 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064947714 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.12030263 seconds)
    (280/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.180872982 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132687301 seconds)
    (282/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066544831 seconds)
    (283/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067213127 seconds)
    (284/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.086862861 seconds)
    (285/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073165949 seconds)
    (286/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.157578837 seconds)
    (287/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066674056 seconds)
    (288/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067710689 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.208515474 seconds)
    (290/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066133396 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115894583 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066631278 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151915928 seconds)
    (294/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067205251 seconds)
    (295/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.066472058 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.186500109 seconds)
    (297/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067033057 seconds)
    (298/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091877324 seconds)
    (299/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068768822 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097451418 seconds)
    (301/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065411338 seconds)
    (302/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.08102558 seconds)
    (303/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.0669531 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.09410596 seconds)
    (305/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066209437 seconds)
    (306/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.205818925 seconds)
    (307/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067706148 seconds)
    (308/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067214692 seconds)
    (309/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066393953 seconds)
    (310/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066745164 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066267637 seconds)
    (312/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.06642064 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122862899 seconds)
    (314/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.069346347 seconds)
    (315/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067116356 seconds)
    (316/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066469176 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109433791 seconds)
    (318/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.066423488 seconds)
    (319/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066608806 seconds)
    (320/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068978588 seconds)
    (321/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066418029 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085847273 seconds)
    (323/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067477597 seconds)
    (324/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066721699 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085074395 seconds)
    (326/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.06653853 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077578175 seconds)
    (328/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064900298 seconds)
    (329/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.067141385 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.250230828 seconds)
    (331/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073542976 seconds)
    (332/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068304185 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.187408139 seconds)
    (334/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066657389 seconds)
    (335/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068416959 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.09086145 seconds)
    (337/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066798466 seconds)
    (338/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067311022 seconds)
    (339/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077533619 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.066249477 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087986481 seconds)
  done (took 39.17833975 seconds)
done (took 40.771456083 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.12516564 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079795438 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078633206 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074788151 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078617139 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077278019 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078252461 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076450481 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077585794 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077489516 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.106685887 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065787046 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073909703 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080971156 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074837495 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.08133561 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077996733 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081439955 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066446417 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079814678 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089703579 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077714259 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074516734 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079725573 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066278836 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075621626 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119352466 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.085195674 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070332584 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075288814 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073625461 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084201807 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074036277 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072402405 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075602071 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.07204816 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075642656 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073319688 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.118905096 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.071757897 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066070937 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077870714 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073135043 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073809667 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074511623 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077582333 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071401441 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079211182 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065601281 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077204782 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.11903798 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070923749 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.070535932 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074455404 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07135953 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075488056 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070184975 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07685249 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071369401 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077373683 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074740764 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07425255 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065572818 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074550901 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.072947739 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073482476 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064709086 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071035919 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065599205 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065818554 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065128231 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074367151 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072887431 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.07095037 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065302193 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065819095 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065068754 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078109507 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.07193173 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075275041 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06629559 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.07154324 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070752184 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066479188 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07128592 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077187083 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065009343 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066743735 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065114678 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080244163 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072670112 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065900094 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.07728266 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070843544 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070619041 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066043237 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065064829 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070720087 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073980447 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065993695 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.064989423 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071075299 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070543748 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074121724 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065861205 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070468767 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070280269 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064474564 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074325716 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072736087 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074315421 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078229703 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074380615 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076227897 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065139459 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063732076 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074430202 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.064772714 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069393216 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.220105253 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072019089 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074816137 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066669105 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065253028 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072039511 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072576669 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066483877 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066871961 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066089031 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075311345 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073312368 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064673457 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06555432 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074362122 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074528785 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06482934 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065197861 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074514278 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066102042 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072221223 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071761032 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074571809 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065599427 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065956103 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.065064113 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065344739 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065116828 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071329888 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071067933 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066598834 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.074863186 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072205115 seconds)
done (took 13.052482892 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069174743 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108313081 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.114467029 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.111039568 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079688017 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067595041 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070595662 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08486426 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.069746355 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090274265 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091968648 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088044678 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.131031454 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065321369 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067118795 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.067760101 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.06498806 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.078263346 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.113032528 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089727144 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.101688944 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066181833 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.082219131 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086214404 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080488406 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083930658 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067721187 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067451841 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069483902 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084551427 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091799768 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066239813 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067710337 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083729843 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080949101 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074190408 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067544232 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072199365 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069969719 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06607531 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068349509 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083645289 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072437642 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072858627 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067528611 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.067518411 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.066750932 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072957826 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083492218 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071753559 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077800223 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.084615171 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.067952649 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066851543 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064825959 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073451639 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.066525699 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067384333 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067299294 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066926949 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067238073 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069329292 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071711188 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.072709773 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070457178 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.073198245 seconds)
  done (took 6.756073531 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084983907 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.094047304 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081149456 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.080973966 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066388114 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067219339 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067074446 seconds)
  done (took 2.249559114 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069652276 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.106475686 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.114159406 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.113651427 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.120632653 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.111272797 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067134633 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098089665 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066094265 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.106753143 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.120739614 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.115145693 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069868582 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078870205 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066964578 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.114239525 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067667187 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073999256 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.110190363 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.116098195 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071153535 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098251683 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080517684 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067465717 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.113046384 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106640251 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069299319 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067862763 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069172831 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066718845 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066461809 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088965454 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.105851153 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.073110537 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067922036 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06682136 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104362051 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068127248 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.10328738 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076131933 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.104155062 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069070203 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.069512358 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.066713926 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068270307 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.10831607 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.067946421 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067123317 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06661624 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.107495224 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066436143 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106518302 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069386779 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071694661 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073853224 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072906925 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074195202 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067216809 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.107704787 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076589562 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068523332 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.116953718 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.116718011 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.104407774 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.116748385 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075316267 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.107636292 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.104794413 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06688219 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066058258 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067323081 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.117370636 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069785171 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068886047 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071656208 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074159688 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.108262048 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.119527929 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.118463942 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.078804665 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068283163 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066408082 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.07132627 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.271856969 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072435493 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067420679 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068021232 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066856994 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072077505 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.069197315 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07164159 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.066878475 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.077440926 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069790148 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.06904735 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.113751671 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06728604 seconds)
  done (took 10.069509425 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071057717 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069124966 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068203739 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068292474 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068579491 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068014906 seconds)
  done (took 2.145951121 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092188327 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067573629 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079283725 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067335638 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088992346 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.108572527 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.108879638 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069533212 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083385724 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077725886 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.109297669 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.111403748 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.111388662 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.068998684 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.109160494 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068518961 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.109581623 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070394639 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077304953 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069634323 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083520067 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069107069 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069604415 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.115073263 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070541683 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068524252 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068583849 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07765842 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077589978 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069118921 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069309788 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070545492 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07614912 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069223647 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110174662 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076243105 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067489455 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.0729719 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069906258 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070348873 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112253342 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069252614 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069955832 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072679916 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069429773 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075784352 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072402251 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070799866 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.115121411 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072231589 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072194113 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067581378 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070049024 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.072376794 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075875949 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069050676 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.072386235 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.109776175 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068759591 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.07610667 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067540847 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070162245 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069000227 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069878841 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071952763 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072412645 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075978844 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069472923 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069533252 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067338406 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.07253163 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067754122 seconds)
  done (took 7.377590839 seconds)
done (took 30.287751505 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.549452682 seconds)
  done (took 2.246640155 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.935068368 seconds)
  done (took 2.665665231 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.070260572 seconds)
  done (took 9.810037622 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.350427766 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.42461164 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.738776763 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13360121 seconds)
  done (took 3.418002595 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.754309185 seconds)
  done (took 2.503260078 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.237010618 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223222267 seconds)
  done (took 2.21644803 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.383108694 seconds)
  done (took 2.122358231 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.190368027 seconds)
  done (took 2.930021343 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236125465 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164436208 seconds)
  done (took 2.14836586 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.641063529 seconds)
  done (took 2.376478893 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.511482115 seconds)
  done (took 6.25685405 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.245398775 seconds)
  done (took 2.034701097 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233455315 seconds)
  done (took 1.985952219 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.018829573 seconds)
  done (took 3.763320332 seconds)
done (took 48.239870067 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087480926 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087834086 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08751912 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082508093 seconds)
  done (took 2.060928505 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077454047 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071320686 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074540637 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074830344 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072432949 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073901436 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07383303 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070960487 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072226937 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071533703 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069459234 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.07121822 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073787121 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071040244 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07386761 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074591919 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071153816 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.070923889 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073210026 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071302239 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073484106 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071074105 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069318043 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070788948 seconds)
  done (took 3.475877558 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.08180185 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073036882 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07664939 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072133659 seconds)
  done (took 2.059193056 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080390046 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077230283 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085805961 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090938469 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076904517 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077852964 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084830588 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084936184 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066785191 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087542144 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069126811 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068209405 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06814631 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087137139 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084205599 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063245393 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06433103 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078081393 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077360071 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080412727 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069308487 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066538634 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.076921889 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077947105 seconds)
  done (took 3.598058506 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.085015966 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066599204 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082306037 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092153708 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092703237 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066694243 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079778485 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094129961 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128860909 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066810095 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073236695 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06624539 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105969485 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067077138 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082313839 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110620756 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113713803 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070852222 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099895624 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066557927 seconds)
  done (took 3.473392394 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.081660706 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070527552 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071443218 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066637929 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077328038 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073923242 seconds)
  done (took 2.204651402 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.071343143 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06914438 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.071552728 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073651406 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068885352 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069099732 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068602332 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067117333 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067080488 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067866949 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067767149 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068562799 seconds)
  done (took 2.585870822 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.214578732 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070262174 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071073192 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067456264 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.068917623 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068111418 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081290086 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.06950077 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084620825 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067516539 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067554545 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069963457 seconds)
  done (took 2.756710021 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107462381 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111147939 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144124063 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117240247 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11693105 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096631073 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.160260853 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094591397 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161322035 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137321147 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116885865 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094193409 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086857333 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070781597 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101023982 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118527092 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137581767 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073580897 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1135506 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.204859176 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131589744 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.133605389 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147178858 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117128842 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090195203 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147146271 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097808929 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102194937 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124698111 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12663457 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118734015 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098317256 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072793832 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071581523 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149370563 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10418558 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120372078 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094132173 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105465377 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08888193 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108186841 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070275547 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.084301273 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110616022 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08467369 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131125076 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088654032 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114172264 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08015884 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.135081666 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.277457362 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136074908 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087305408 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105769254 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137427151 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111866504 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132757421 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107307482 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083229005 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119080592 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103258852 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100957608 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107324757 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080764048 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.176843097 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089192691 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112489157 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111695675 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.094267794 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095432328 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107775042 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136535941 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125944303 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.125382492 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138358444 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095886066 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121505373 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100022414 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130110638 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105090708 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074078925 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.12099009 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129635001 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099153022 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101758699 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129323152 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093085294 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077978007 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.09927138 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118848034 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081110898 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.11216826 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080807068 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.110082957 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131906871 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097472493 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111770453 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115835657 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077528823 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.310027149 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10984472 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074446774 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118432995 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113973613 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156732108 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095789368 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07783259 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101684207 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103768804 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149413715 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10657051 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080820997 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11045037 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138950739 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095502716 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.209890715 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095883621 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140988725 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111463587 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088291365 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075850951 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091170513 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113427989 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108540186 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112926879 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091157874 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.08503997 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088456437 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112009135 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093312236 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081603541 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114601809 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099708217 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075526594 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08908503 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080381309 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142376146 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079218766 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138040481 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125771075 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077227385 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107258818 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098676726 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109782094 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098712062 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117559395 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14051597 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11423985 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090650352 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.094151832 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108820847 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.145120475 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126786805 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090669049 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075869712 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09866562 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.272308973 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098687307 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125839213 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096700055 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108844982 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103349249 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14119578 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14360668 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100588642 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10122464 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106955744 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.122604477 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076983997 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155947966 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104049936 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119325876 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085574738 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141354499 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.112696934 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09041998 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088271106 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101153455 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104586795 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107978529 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145078877 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097345536 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074235066 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09395016 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144922133 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077294498 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110289385 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091605546 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094136685 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119478007 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093707328 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082288672 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069365195 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126538608 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.158477797 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071093217 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11542906 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.108591476 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103264432 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.121080444 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070539166 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122496807 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140205959 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118392961 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140488895 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14353751 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113485782 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.278935711 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.114658581 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107062024 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080986208 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126035259 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134803976 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096321536 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092947322 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134871589 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119587043 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135852961 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.115398923 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114608572 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105152574 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107626585 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10335974 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102387722 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144284812 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121639432 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124554491 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086842319 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106558465 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119160339 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137011756 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083132539 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142625773 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084668484 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118693372 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078167662 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124006688 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077918113 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109814722 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080516482 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10150857 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070598674 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075450651 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142554173 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113343142 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106152618 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100342186 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138236462 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137118929 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079557457 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10876969 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115786971 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101726275 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118194095 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109687903 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089955709 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095517466 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108755748 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085020107 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.0811891 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.274643262 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09540027 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126995103 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085544569 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076584881 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14032368 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104938328 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095222549 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078627808 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107296315 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122667415 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093231727 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088074804 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114546913 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105054411 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140941836 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.09155835 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098670375 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124199616 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080867829 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092744214 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070331477 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086320815 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076779424 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.126840076 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076859329 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116193668 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070255774 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13121222 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087975893 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093928763 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102965131 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112352534 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128924807 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095782082 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141428755 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090213434 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118671385 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108203235 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095579593 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089430562 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104560774 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101210169 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123441314 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097487286 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123652005 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144823641 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104887526 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14240312 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091841711 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122215794 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10777091 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124700869 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112356515 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14374034 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134496673 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.270080817 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113923852 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076802937 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096016832 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106034472 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111865532 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173924524 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12467911 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073259721 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105592019 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09528665 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107256457 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105085124 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08319224 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145554603 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101491064 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089108136 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112617342 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090850832 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104748818 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07682535 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095886511 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101294192 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095371083 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099174712 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116263854 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128549438 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113917292 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143653728 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.0997762 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093584739 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119508945 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112153974 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111143029 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086341954 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087323072 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137500619 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118605041 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.126321313 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10128516 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109591068 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112200306 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101390833 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125658372 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108980649 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.127419116 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081164685 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077052105 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069357259 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07316815 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123860076 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109165685 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109306785 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097036397 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072298912 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.261374158 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108043635 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073947541 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089882747 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094823137 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09604049 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092304761 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106099884 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.112656333 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091683087 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104029303 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099977959 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145924128 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100821217 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088944711 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143393513 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148348197 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087673706 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092316947 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072249036 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079543434 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112405122 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148477431 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150219881 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078060033 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08764868 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.086091467 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087647381 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072465155 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087900377 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.089896297 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106292189 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100135717 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113270841 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106068369 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076200266 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103827235 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099695328 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093304411 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105126061 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119227428 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125245075 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.141240776 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111375041 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107037631 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077247569 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082707712 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077015594 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080573448 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102767845 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080350943 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077067536 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143289037 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092663561 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105486111 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109335474 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089300403 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076062139 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131389592 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068978033 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.296044575 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.073187959 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083382315 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.084200182 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080294607 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0937893 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137963178 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109615719 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11269653 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106969565 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104502763 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139581514 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1554297 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080074136 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1434757 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076155382 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076267781 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076497497 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113799411 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090034052 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114714335 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139312762 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091777749 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10386687 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077982496 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143823367 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097721036 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105383068 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087793703 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080181626 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144373617 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080563814 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081068206 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091301503 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112155669 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.074064381 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105383399 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086095185 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081011525 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143068482 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.63151884 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091125235 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076433845 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096320217 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.14388364 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128164401 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095862373 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109252477 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119370198 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100591816 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096172917 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108731025 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.182940685 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075010001 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094081059 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.10213409 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.258846734 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103529091 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099186671 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087032612 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093504526 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088325712 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080664146 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107879191 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08992428 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096451245 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106980467 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083620628 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087212808 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130706569 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.103528019 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082294324 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088541846 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103709499 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089250637 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100471534 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069989662 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113493849 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091665355 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116509234 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095386766 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107413318 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126818462 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090914661 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137623338 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.106733744 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122922548 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088490557 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079032664 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125663673 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.089062618 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078384167 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144238098 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.095625606 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091830631 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104258742 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097811819 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113913023 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117167943 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112331407 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097784016 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080137792 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100723541 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.10324069 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085844662 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079354029 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075241282 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077481573 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108487018 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086113718 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083682891 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11469782 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089374243 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103918426 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100876172 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.284157116 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08492088 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101981008 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110907562 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092780033 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110772979 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10191097 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.128651876 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173534568 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124942281 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129022405 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134501152 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077698443 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076280803 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070222961 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115696287 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080822841 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089410335 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082207452 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133944293 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083015109 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111555527 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231121724 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081872218 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094307228 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09796341 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071368999 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0844034 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108499157 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088712618 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081256754 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119569945 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08438359 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129233351 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112429309 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100053811 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095499032 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081994208 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114930745 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103854013 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.13029761 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095831548 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076407121 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114862262 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104370148 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138413956 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074010187 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081960369 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130708423 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104588366 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133189949 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081275481 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151242493 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142949955 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099037769 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131048199 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070823846 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.245044782 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090334836 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127759971 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085279293 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111370715 seconds)
  done (took 68.55101817 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.159278112 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.145912765 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083102772 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105680798 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199252771 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.212157195 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132252434 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.10707943 seconds)
  done (took 3.051371192 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071412758 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084223249 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.08187331 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.24943378 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.097437678 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.069039446 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074188209 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083049307 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068832979 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067953442 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102756205 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068701447 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.06844104 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.524919936 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067208124 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073540744 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068232089 seconds)
  done (took 3.82754463 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.339580983 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.085054208 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.251208336 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.327893697 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.147930957 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.557820484 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078277269 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084831571 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.695443105 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.373731143 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.144126484 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089894538 seconds)
  done (took 20.083355358 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.079923104 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.122654653 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.121870175 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076408353 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.076154584 seconds)
  done (took 2.389090096 seconds)
done (took 121.880050026 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.086706529 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.175480961 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069584226 seconds)
  done (took 2.179032911 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.124672535 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.119473658 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.119026383 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.117177018 seconds)
  done (took 2.385364675 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077754509 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077816592 seconds)
  done (took 2.058535721 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.223265585 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.215907428 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09157302 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085225591 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081213818 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081912976 seconds)
  done (took 2.165802376 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074888098 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072439089 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072817077 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073224871 seconds)
  done (took 2.191991755 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.170540272 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067971156 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070472984 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072514567 seconds)
  done (took 2.282233217 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.090143219 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.088541005 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.118036644 seconds)
  done (took 2.203954418 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.086343224 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084495575 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079272189 seconds)
  done (took 2.157200208 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.11284515 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097896048 seconds)
  done (took 2.111106126 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083006008 seconds)
  done (took 1.991538637 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.09474766 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099446578 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.183788151 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.150101624 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.184636616 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170555576 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078141459 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078491854 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073973888 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07364708 seconds)
  done (took 3.091759516 seconds)
done (took 27.337807577 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.088351084 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.380846162 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360535798 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088220373 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674019098 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357731081 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.019639992 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091760372 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.10231325 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06880143 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086215712 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650555443 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.011426268 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326525645 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.996647133 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.330391685 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655537729 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070193067 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069172638 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070086743 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.004274049 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069266662 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069259505 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069710152 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652290531 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374761786 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069793417 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.330795352 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068872572 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072725599 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358229538 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070220566 seconds)
  done (took 16.588509256 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078786727 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.130170986 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073752275 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085588965 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071393482 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070375487 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07287559 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069946868 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113504517 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070151583 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086736536 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068769901 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073082319 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071295125 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089156001 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069069658 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072098673 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073317349 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069382565 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070413747 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08771141 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068901344 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070051772 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070103004 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069562213 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082510719 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070377123 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068984889 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06925239 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072939441 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074329881 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070797618 seconds)
  done (took 4.376702797 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.1321391 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.133359435 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074141288 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110616455 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119734695 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07131714 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.153082405 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092386647 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116155753 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069358808 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086704623 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069622655 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105362538 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070654131 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089999825 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069554629 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071881641 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07002764 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069636306 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069794923 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088175746 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06900213 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069796213 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070202417 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069981524 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084413134 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070550554 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069591881 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06970007 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073328357 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074198862 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0704704 seconds)
  done (took 4.649075889 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072506347 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072553685 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.07947176 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082119919 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.067536966 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070104834 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070976001 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06764433 seconds)
  done (took 2.512311126 seconds)
done (took 30.056522739 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.082412543 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.068762986 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072041852 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088476373 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074797165 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.111449773 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.06606355 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076030304 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072149668 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072287659 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073657377 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067841153 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.070718598 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065652845 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073001594 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.06689104 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112280552 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070745638 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.110351462 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.112302695 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.068690758 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.07230529 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075572066 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.111145997 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.111183469 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.111408528 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075875943 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072817145 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066999261 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069599413 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.17006332 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.182919404 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075195436 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116578441 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066953085 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066638086 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07119035 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069236824 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113194773 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075937797 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069126369 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075782901 seconds)
  done (took 5.484727721 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.190441506 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.194689454 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.187231612 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081127993 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.092740448 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.081212879 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192232843 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078400171 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076484225 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.191701629 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073046652 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.076545961 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.079268182 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.069909834 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.07754361 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.072958293 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.078238321 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07113239 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077125207 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076520552 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.190600175 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.069987027 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081378729 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.078310638 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.072076058 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078025097 seconds)
  done (took 4.631837746 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.076053216 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089667886 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093722115 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.149131569 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110832386 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084217087 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083460738 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.094709914 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102165253 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069374653 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072962176 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096043614 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097747586 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076135835 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107188986 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087078735 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080957394 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070507647 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075466323 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103534292 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091849568 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087499985 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101557736 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088954557 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068122078 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078155647 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075540806 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084983267 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076210293 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080560032 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072655451 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072182917 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069356061 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080965705 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075690425 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.107516676 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090675867 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080945793 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083377859 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106880455 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078715977 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070725881 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.096510988 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134431686 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068426028 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071207582 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072708361 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080933397 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070235656 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099254472 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084931375 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068363951 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087859666 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070762041 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070314022 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085298399 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070437044 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071202945 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.08068673 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074960763 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089756028 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073962292 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090177888 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06866049 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079847959 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070261705 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070144874 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067611357 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103149596 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07571405 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120021169 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.06962589 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066810665 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080817727 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080161173 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075375062 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068661929 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088559473 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08103492 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072673021 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080211848 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071471367 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071978996 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104970959 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067539561 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066707843 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066552642 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071002269 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072205207 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069152068 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081932969 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.06791864 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072177716 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084231698 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06870261 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069522315 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071038957 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069906659 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068325513 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078960786 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072551703 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070862162 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080944232 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069923345 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072531875 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083915919 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.0784134 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068230027 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069788677 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070486919 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069872169 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072598157 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071643932 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070000764 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075153179 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075846206 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074018621 seconds)
  done (took 11.361543874 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.209904557 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.19601047 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070789479 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.191026997 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077306857 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.119363532 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.191882546 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.131005383 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069161684 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070485004 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068997645 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.13849953 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.134469688 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.145842664 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.115308439 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069720138 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094480484 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.144785574 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.193264211 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.188946632 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092900735 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.0768486 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071677982 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070587876 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070620458 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078256035 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085508625 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077245004 seconds)
  done (took 5.229410081 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.07929567 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084541654 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073169798 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093937922 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086812371 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069625032 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071654453 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070581181 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08668896 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075878681 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069226046 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073890471 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.072671412 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069921579 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070133053 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075846653 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075989729 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068558604 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073148034 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073818482 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079774143 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.157028297 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073461211 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069257383 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072168952 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069436249 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076048603 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078025167 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068968464 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101993941 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066701641 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07374396 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083535794 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070569626 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069220323 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069765595 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069129683 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069243194 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069204217 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067277366 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.066819971 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074736957 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067629626 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074679062 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083296648 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077521929 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.0703449 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074765811 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071754189 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065729726 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072636233 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072705484 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07180665 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07764279 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072844616 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.071654967 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070582627 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096602847 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075289955 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068535905 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069089754 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067193698 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.070912512 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076915255 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085786492 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.070775735 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067406236 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069161164 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076157339 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08357882 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068636923 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074555326 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066034441 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069319674 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071667014 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.07234559 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070773716 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067568415 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069279949 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069132274 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.06978476 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069258119 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069141912 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071715974 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066806354 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067773906 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070179028 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070467213 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075071323 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068159687 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.07179824 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070831022 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068226986 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071929415 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074960363 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.07214554 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089519254 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07752692 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.06997925 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067438277 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084068381 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071488011 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068689466 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.072186304 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07367428 seconds)
  done (took 9.770765608 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.095152788 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070697575 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089363672 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096359031 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079469018 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.074371944 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084252352 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070142358 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085925596 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068388493 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07825331 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067825257 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082950043 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078751084 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.070713007 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079898442 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071853385 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090368815 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084115679 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067500892 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078523042 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081407609 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081709973 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087174853 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086803138 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087573691 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081904147 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071555578 seconds)
  done (took 4.242148014 seconds)
done (took 42.638551982 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.007480352 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.17798924 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.016444524 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.251824041 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.072482115 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.241033044 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.12239737 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.004887662 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.059870272 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.053137999 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.332537985 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.381055524 seconds)
done (took 68.724243074 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.100263706 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.146320122 seconds)
    (2/2) benchmarking "String"...
    done (took 2.224197628 seconds)
  done (took 6.325443935 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.605290435 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.003191836 seconds)
    (3/3) benchmarking "different"...
    done (took 2.05224981 seconds)
  done (took 8.596784258 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.127552013 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.795193106 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.246304041 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.001118347 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.005174423 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.349916058 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.823663967 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.468150659 seconds)
  done (took 33.623976891 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.087759985 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.192043159 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.685820836 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.718414703 seconds)
  done (took 16.660793164 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.607042156 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.266037489 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.266701074 seconds)
    (4/4) benchmarking "different"...
    done (took 2.255410446 seconds)
  done (took 11.384121927 seconds)
done (took 88.841010902 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.006628978 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.038291755 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.04940837 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.159827542 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.023515038 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.032392666 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.008878382 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.04155509 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.00988505 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.006808471 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.434629862 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.013198448 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.999202395 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.010832734 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.005829404 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.049426989 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.02558978 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.015282123 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.038685028 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.570723873 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.399616401 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.018696999 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.009039339 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.071574346 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.074711062 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.028111043 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.196587745 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.015285394 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.622071947 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.010579942 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.186763548 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.005179109 seconds)
  done (took 211.112504103 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.005817049 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.937760422 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.013418341 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.019166186 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.297326973 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.201356756 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.162762862 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.489406449 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.010522394 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.010065028 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.198697223 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.008853039 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.249303441 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.974723741 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.003835494 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.013256923 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.209020047 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.267529476 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.008846698 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.198366839 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.032923243 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.127373439 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.08116418 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.182740029 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.014315033 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.075083649 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.011347126 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.042324022 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.196737018 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.164036289 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.017059114 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.042994561 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.209965912 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.871567006 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.017981419 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.014343088 seconds)
  done (took 178.323348615 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.194812842 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.01936071 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.073823458 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.145214684 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.779050024 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.748807387 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.010056782 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.009830276 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.010262127 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.016678612 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.016066673 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.078948277 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.010675162 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.700905394 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.041292084 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.010035886 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.012144773 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.705452611 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.015920561 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.009975443 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.011043635 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.075614183 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.383581038 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.147440789 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.011723853 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.023018142 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.148157131 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.017885235 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.012310539 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.148248626 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.011646371 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.09193293 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.147166217 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.019886389 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.092342621 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.019108164 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.504777086 seconds)
    (37/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.009190962 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.013426504 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.012498698 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.014642773 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.077371084 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.011682936 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.120294504 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.10611274 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.009759244 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.02563202 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.087173484 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.694578545 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.016262423 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.015445157 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.01139233 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.01488986 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.014837299 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.601472655 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.013684347 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.037578079 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.657326882 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.017790291 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.012529744 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.015092344 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.014530268 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.018390277 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.020702649 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.053714014 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.829511353 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.198657057 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.401965549 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.818025155 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.01632853 seconds)
    (70/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.015421791 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.730004424 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.07319709 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.01728178 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.095367999 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.015234257 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.016439374 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.016772579 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.016813772 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.113992891 seconds)
    (80/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.014695016 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.107071078 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.014097 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.152466381 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.016565053 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.014660239 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.154773845 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.669184885 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.018397494 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.028742639 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.07170231 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.015177983 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.016699583 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.025192997 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.114335544 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.015865636 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.015894293 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.015216656 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.121583879 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.018848727 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.036922717 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.238221024 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.087859799 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.263608541 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.242922725 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.020058874 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.017501494 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.033063572 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.01888927 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.018658945 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.028216241 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.016499399 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.01820046 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.019052707 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.01970079 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.017008839 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.022844439 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.033212831 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.01719524 seconds)
  done (took 437.126022194 seconds)
done (took 830.733304274 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.653692725 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.836155162 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.603287946 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.646059596 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.611093613 seconds)
  done (took 15.295771056 seconds)
done (took 17.242630285 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.037651813 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.034233253 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.020903454 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.041564053 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.041715897 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.036832647 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.069110485 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.06282635 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.058036656 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.039310082 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.047382313 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.040900076 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.043355891 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.061477873 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.048494187 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.048540211 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.040848321 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.032233736 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.047849028 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.041713894 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.03932073 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.037888821 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.040849876 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.048343088 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.052363334 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.043160247 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.037134428 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.042881163 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.043662326 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.041018167 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.078972813 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.050380004 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.072386987 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.048920607 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.047490812 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.049763076 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.037653347 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.065360446 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.040220594 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.077172494 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.050032578 seconds)
  done (took 85.889248031 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.029111549 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.168917118 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.244106987 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.061209542 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.026774653 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.247259337 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.081742995 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.154689674 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.160497234 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.249494007 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.25493302 seconds)
  done (took 25.633171362 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.029264855 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.167785009 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.254217004 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.062526395 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.05202666 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.247859085 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.091445208 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.161905551 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.175884081 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.252291064 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.307453498 seconds)
  done (took 25.761981106 seconds)
done (took 139.234985812 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.418287881 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.054235137 seconds)
  done (took 6.42098671 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.023063517 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.04260647 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.172565353 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.023933623 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.022471252 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.025636231 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.024586421 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.02325778 seconds)
  done (took 18.309096546 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.023257408 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.024351516 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.023729213 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.021330921 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.026498492 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.024337006 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.025222442 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.023175377 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.023264637 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.023562763 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.025013117 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.023702637 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.023487586 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.024378423 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.025782627 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.024414177 seconds)
  done (took 34.338776694 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.025063466 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.023616585 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.026351182 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.027458664 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.025699551 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.025684405 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.028773704 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.025980207 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.024103147 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.028242474 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.024675718 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.025404818 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.026527174 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.028457045 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.026226405 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.026643726 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.02703672 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.025845442 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.028809822 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.027457531 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.025212007 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.026658766 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.031238972 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.026593135 seconds)
  done (took 50.590378437 seconds)
done (took 111.618437358 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.256186024 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.815406411 seconds)
  done (took 9.026112594 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.029499836 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.027349751 seconds)
  done (took 6.07619404 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.026548333 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.02458913 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.026743073 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.025719004 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.024409343 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.025770211 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.02748034 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.027251666 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.024437996 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.026162265 seconds)
  done (took 22.212337255 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.026622149 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.026979691 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.025526052 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.026586822 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.025368901 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.02592729 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.02640088 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.025583612 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.026304871 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.026492166 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.026852552 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.026653103 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.028453497 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.520871837 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.026366377 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.026883157 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.025963825 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.025261069 seconds)
  done (took 38.924521271 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.027474529 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.026732729 seconds)
  done (took 6.009343376 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.025979031 seconds)
    (2/7) benchmarking "second"...
    done (took 2.023162386 seconds)
    (3/7) benchmarking "month"...
    done (took 2.024430315 seconds)
    (4/7) benchmarking "year"...
    done (took 2.02650464 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.026199046 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.026631878 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.023980008 seconds)
  done (took 16.131707826 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.026164 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.213471556 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.272128508 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.627659183 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.026206529 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.028071808 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.893152991 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.030455074 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.030072814 seconds)
  done (took 22.099409412 seconds)
done (took 122.432447597 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.893573353 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.029532868 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.348748928 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.093346885 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.101511454 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.373109327 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.070573965 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.573758602 seconds)
done (took 44.439279095 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.151786676 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.024731582 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.054962825 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.053001055 seconds)
  done (took 23.087787168 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.02935917 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.375664971 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.045268574 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.022479218 seconds)
  done (took 23.442827496 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.402112076 seconds)
    (2/2) benchmarking "read"...
    done (took 2.362225108 seconds)
  done (took 6.723102465 seconds)
done (took 62.361967986 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.02924886 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.030057593 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.026762869 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.02630643 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.027580591 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.028293771 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.027562597 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.029026077 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.029093927 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.027854894 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.02929093 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.0293748 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.027481338 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029715219 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.029193143 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.029325365 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.028128945 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.029546486 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.028076273 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.029062703 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.029306409 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.029152006 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.030320783 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.029555402 seconds)
  done (took 50.646022964 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.029979671 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.028711092 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.027535577 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.029251314 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.027771451 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.030152864 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.030850457 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.028788693 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.029360344 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.030236246 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.030075647 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.030936747 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.030984222 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.029795259 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.033262055 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.031930789 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.031720819 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.031828281 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030739779 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.032329181 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.030667223 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029654476 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.032331971 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.030296589 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.032559889 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.033057962 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.030034621 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.028745015 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.031165377 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.031752208 seconds)
  done (took 62.874737031 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.03065485 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.031883345 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.032259843 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.032181583 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.031174794 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.030652199 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.032616625 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.031735717 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.032764989 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.029576764 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.030595461 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.028752579 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.028470267 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.030550259 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.032118026 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.032769438 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.033527067 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.031165323 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.033267549 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.033810325 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.03103681 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.030782963 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.033075084 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.033041915 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.029677475 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.031572127 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.030092966 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.03105935 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.032494546 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.030618461 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.031189353 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.03013063 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.031081791 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.032051387 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.029732378 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.033225775 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.028397316 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.033975669 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.041355947 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.031519997 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.033225444 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.031963785 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.034422869 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.031569705 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.030752378 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.033356826 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.033065092 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.031610127 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.032139332 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.033096551 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.03307934 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.032214937 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.033702763 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.033605481 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.032949837 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.034208346 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.032284633 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.03263724 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.032100823 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.03267156 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.032492528 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.035763352 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.033993794 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.032619107 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.033792438 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.033348883 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.035115349 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.033534378 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.034162236 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.036930916 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.033834606 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.035823842 seconds)
  done (took 148.293477583 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.03375954 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.035187871 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.034922365 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.032473874 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.034151477 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.032817229 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.034576414 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.033103145 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035219231 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.035084817 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.035740254 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.033523754 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.035832913 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.032697135 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.034192471 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.036905768 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.035624574 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.036680686 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.03624218 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.034272678 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.034724256 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.034036498 seconds)
  done (took 46.724066307 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.035789071 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.035834699 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.033845543 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.035321179 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.034630867 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.035986991 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.036144278 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.035288089 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034797926 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.034861815 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035749319 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.035233865 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.03661855 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036574028 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.036426974 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.035744579 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.036050921 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.035971962 seconds)
  done (took 38.604810506 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.037397481 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.035783359 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.038386286 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.036396405 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.036614325 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.035383308 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.036005161 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.037132474 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.037031347 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.03592335 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.035808417 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.036005664 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.037115886 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.037768639 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.037205756 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.035298424 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.038033321 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036663122 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.039812144 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.037330931 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.036137176 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.038391351 seconds)
  done (took 46.778421191 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.038178846 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.038176306 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.038297405 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.035405583 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.037764862 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.039113742 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.036658694 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.036240901 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.038386179 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.036501236 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.037940174 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.03748416 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.03734718 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.036311217 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.038417237 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.036443204 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.038731945 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.038696019 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.03610671 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.038872009 seconds)
  done (took 42.716756528 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.037704755 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.038833894 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.037029114 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.036895057 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.038659011 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.040047116 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.03723522 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.038065729 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.038691279 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.039880937 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.039732236 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.039057948 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.038931417 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.038369786 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.039471383 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.039882709 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.038181554 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.038944807 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.039067808 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.040765676 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.040928144 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.038529201 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.037902113 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.040349514 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.038521289 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.040309354 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.038755878 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.040026628 seconds)
  done (took 59.055395147 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.037715795 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.038589876 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.038920456 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.04021561 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.039894139 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.039688761 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.03941288 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.039275195 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.038502124 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.041770925 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.040745182 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.039323855 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.039542883 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.040022568 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.038668751 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.041157599 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.038878615 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.037874336 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.039112888 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.03980003 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.041551604 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042040367 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.041107477 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.040469095 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.041337836 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.039522992 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.042062879 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.041416099 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.041201638 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.063818794 seconds)
  done (took 63.18999694 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.066613242 seconds)
    (2/2) benchmarking "in"...
    done (took 2.06381259 seconds)
  done (took 6.100957045 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.051133457 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.04564415 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.045180665 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.044482261 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.044853707 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.06104757 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.053955171 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.053942525 seconds)
  done (took 18.373111538 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.053111075 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.058736262 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.048214497 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.050598335 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.049948214 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.057768716 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.053770581 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.051293767 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.051263998 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.052385016 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.054413252 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.059614888 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.057882765 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.053562301 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.047336863 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.059103138 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.05276416 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.051770099 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.048846135 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.049349386 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.058055955 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.047507133 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.050167768 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.045981565 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.048197468 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.056788403 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.064170974 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.049873964 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.050457952 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.0499823 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.063673467 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.050013322 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.050024727 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.052852503 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.051546125 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.061260353 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.057263861 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.053093301 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.050338825 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.051889346 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.053114965 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.045926587 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.044977812 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.048529434 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.041064471 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.050857916 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.03759833 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.038531377 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.0403203 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.043657768 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.050401805 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.040525871 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.036061849 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.037852462 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.04052632 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.043904252 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.037373353 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.039829255 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.046946951 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.050352849 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.042270531 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.058800254 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.051043997 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.037185008 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.041595005 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.048063489 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.066494723 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.042115064 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.041892213 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.039731516 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.04665869 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.037370589 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.03829961 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.039112551 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.053511966 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.047052182 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.040590012 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.036243993 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.038476955 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.039959402 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.039390113 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.037737371 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.040562932 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.036698547 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.046866516 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.068410975 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.036678785 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.039060421 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.041248128 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.03862107 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.042012714 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.042297266 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.039351059 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.038665685 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.048193246 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.040118471 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.038701391 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.037231087 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.037433406 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.054193827 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.039339836 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.036616981 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.041144541 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.047889205 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.044247188 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.038183155 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.041457714 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.039376534 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.053977104 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.037654526 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.039405902 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.038293752 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.039840405 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.049106602 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.038633962 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.044412884 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.048944917 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.047151922 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.046160187 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.04226805 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.044650324 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.041550809 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.049562419 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.085248019 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.036519022 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.042094884 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.043731269 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.051350482 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.047751857 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.039521848 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.041891064 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.038644457 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.039598905 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.049160122 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.038248415 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.037699677 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.037403782 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.038900308 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.036357017 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.032416197 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.032861687 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.033964297 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.03632206 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.036778212 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.034461459 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.029977162 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.032129122 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.036981989 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.038025076 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.027757178 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.025928893 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.031303397 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.032118771 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.032669031 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.028745339 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.028520974 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.029318623 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.031576227 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.034015126 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.02806852 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.029224036 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.030271441 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.041956215 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.024432098 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.025019688 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.026056642 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.025610271 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.037998262 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.024917002 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.025483485 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.027058221 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.024536835 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.033406448 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.023331776 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.023577474 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.025407246 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.024490991 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.030907058 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.029341073 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.037147354 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.027402823 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.035131089 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.037647299 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.032305885 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.024827256 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.027830821 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.027668076 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.03561625 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.024844792 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.02494883 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.025664186 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.028009775 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.051444326 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.036067185 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.026134791 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.025816878 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.029847732 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.029150455 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.031371148 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.024135385 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.02529535 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.025939012 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.033400967 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.02531132 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.025817556 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.027807615 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.026336676 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.030196837 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.030385055 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.026653273 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.026486074 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.026806061 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.030911043 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.026862262 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.025128924 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.02182898 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.024069332 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.032877216 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.033906093 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.029132584 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.026874244 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.024903813 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.033460496 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.025282216 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.023276887 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.026478203 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.026946491 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.026080672 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.024970245 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.033427705 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.028571009 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.025966308 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.024868743 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.024093074 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.024490699 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.022916445 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.025635684 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.038160998 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.027108044 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.023546757 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.029959184 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.030689261 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.026451593 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.023356706 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.025019215 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.023747943 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.02894379 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.020963639 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.023267021 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.031081155 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.021745637 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.029072219 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.023152814 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.02903476 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.023613402 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.026807435 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.025701736 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.025439033 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.032177574 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.031283231 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.022834734 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.031552528 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.024094341 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.025688266 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.025444855 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.025948193 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.041781205 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.034157562 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.020785809 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.023652371 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.025370282 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.026939229 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.023623472 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.023138963 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.031325173 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.023946702 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.029958451 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.028252213 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.023996348 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.023020075 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.028545192 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.029472106 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.027610282 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.025197436 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.024005688 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.025110078 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.026310528 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.026703462 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.023818146 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.026019353 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.026739631 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.027647594 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.024686392 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.02530849 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.032099556 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.026453138 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.039882687 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.032946706 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.025733318 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.025385817 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.027067673 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.031629118 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.027393902 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.026914902 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.024138922 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.02594447 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.033067603 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.031103347 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.033343366 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.03074823 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.031502228 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.034039674 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.037727525 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.025636385 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.028408796 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.032862809 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.03164468 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.035779865 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.025368451 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.026022728 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.039162981 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.028856877 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.025386771 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.028007117 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.026152554 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.031441524 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.028725397 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.02574573 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.031488916 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.0295557 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.028440809 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.023520424 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.02413177 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.026072025 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.028874088 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.036903749 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.025281025 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.022618923 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.023797376 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.022225656 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.030130269 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.022784705 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.023989712 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.021739395 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.023212368 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.038685766 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.023148269 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.023981076 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.024977065 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.023625486 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.036094612 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.02144132 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.021275506 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.024962609 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.021143968 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.035686865 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.021138623 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.023934611 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.023933027 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.021729366 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.03453791 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.035551085 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.030928316 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.029223024 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.028251934 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.032512778 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.026474867 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.031889612 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.045442889 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.025730363 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.030662777 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.028553261 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.031289617 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.028907357 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.030472432 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.038038881 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.028834243 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.022426642 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.023062134 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.025016843 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.044764694 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.021982834 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.02010115 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.022549101 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.026725721 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.028528411 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.01989956 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.023067859 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.025624736 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.022605879 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.032474548 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.023458981 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.023526248 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.023721018 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.023973385 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.022504502 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.022760445 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.024309461 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.025226371 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.022335724 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.022664802 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.023390181 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.028941963 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.021209055 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.027293706 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.030525878 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.024866325 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.022605695 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.025931793 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.023870656 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.026677933 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.023363151 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.024131709 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.023632607 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.023535546 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.024037252 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.026252317 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.031979006 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.026017766 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.03540568 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.024219122 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.02646281 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.022082673 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.022545017 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.034372257 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.030613678 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.025966337 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.033095008 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.031918616 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.033154093 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.023277013 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.028718961 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.029812503 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.022964618 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.023290943 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.023320184 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.024131911 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.025661495 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.02299891 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.023761632 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.023886287 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.028275638 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.024072868 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.024584864 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.023443237 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.022197553 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.027047522 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.024762972 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.029325784 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.022826682 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.022451155 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.023981733 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.02399851 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.024843769 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.026130188 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.024521237 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.02337686 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.02658021 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.026238733 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.027537753 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.023694498 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.024474169 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.025493773 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.02326199 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.024801105 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.024581543 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.025641212 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.022769434 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.026856583 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.031616339 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.023633458 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.027328534 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.024809663 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.029335665 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.02496896 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.025183666 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.022111449 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.024009597 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.033655823 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.024579124 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.02490414 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.0254509 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.024497321 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.031247135 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.027294193 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.029492773 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.025816228 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.025414107 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.025203455 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.028623376 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.033684676 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.03001427 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.028086345 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.033559368 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.030980137 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.027919184 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.026183454 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.024638985 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.026166538 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.025849732 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.028427584 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.028315907 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.028549967 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.027732005 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.028632001 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.025470552 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.028760115 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.026241917 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.025543627 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.030370408 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.036295343 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.037183698 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.026737579 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.02913676 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.026654054 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.030313886 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.036792765 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.026827452 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.028280919 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.027256092 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.028193489 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.026684482 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.033277429 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.035884592 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.032688914 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.025616469 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.03252566 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.044504597 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.029543853 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.035857945 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.056030231 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.029778194 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.027196724 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.028767454 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.028832583 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.026329396 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.030139566 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.028034255 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.03616327 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.028445671 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.028713019 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.036684748 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.028065117 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.027086991 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.027677055 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.029168038 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.033841451 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.027713451 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.03541577 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.027399768 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.027929809 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.029162969 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.031963503 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.027404168 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.028248752 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.026852525 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.031409475 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.028976367 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.029499632 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.038793843 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.028196758 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.029787007 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.039725536 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.03831368 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.028050399 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.02829258 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.027972115 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.034630754 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.031998171 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.02837602 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.032357252 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.035859445 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.032121584 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.034227802 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.031234663 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.030085762 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.03216435 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.027235731 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.028886108 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.039983345 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.038617252 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.029683231 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.029799181 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.035932471 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.028558501 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.035931151 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.034769049 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.031975683 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.031906322 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.030820751 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.027751701 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.028620148 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.02924755 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.032835295 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.03646292 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.029220972 seconds)
  done (took 1213.349424441 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.029210734 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.028190768 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.029844929 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.027788009 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.028316509 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.029741849 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.029222505 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.029581124 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.028233194 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.029474627 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.030369956 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.03077829 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.030785535 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.030380488 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.030038244 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.029473531 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.028056217 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.029520803 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.029491116 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.030062594 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.030791921 seconds)
  done (took 44.577719267 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.030796089 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.030792411 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.03132059 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.031645183 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.030318413 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.031090832 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.032151998 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.031582718 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.030042559 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.030651061 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.029626958 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030667285 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.030848044 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.031104748 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029906487 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.032431075 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.028856566 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.030083998 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.030698667 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.030273421 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.031652948 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.032906279 seconds)
  done (took 46.638612166 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.031067525 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.033085714 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.033302878 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.031308718 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.032166212 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.03217477 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.030526157 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.03289635 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.031857324 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.033764191 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.038502685 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.03592727 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.030828217 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.036063284 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.029795491 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.033379996 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.176266547 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.034107391 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.032800846 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.031936337 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.033541834 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.040950674 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.032527447 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.031656609 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.033397047 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.031500241 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.032691792 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.033124956 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.03402882 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.034353513 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.037895477 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.032264776 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.035667924 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.035183175 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.032765588 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.034057273 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.03721265 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.034480615 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.032697987 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.033098473 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.043563467 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.053521705 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.032754534 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.034170328 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.042664923 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.031053246 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.031580365 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.037797142 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.039748905 seconds)
  done (took 101.79161569 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.033548668 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.032847776 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.034996892 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.032922085 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.034821598 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.034667311 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.033226746 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.03150825 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.032771633 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.032169733 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.034354898 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.034280763 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.035075402 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.034946108 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.033753063 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.033226058 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.034524084 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.025586973 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.030823572 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.033402071 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.035064257 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.034911963 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.035875996 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.036658877 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.036138851 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.036600159 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.034334117 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.035773578 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.033692979 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.035519983 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.035245355 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.034497564 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.034773099 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.034724349 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.033717244 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.034756449 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.034051018 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.034256652 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.033610799 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.033770115 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.033265815 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.034066803 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.035390975 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.034719686 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.036390966 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.035316783 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.035625759 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.034798525 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.035826724 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.035470932 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.03447243 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.035484415 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.036357447 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.035918494 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.036580787 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.035356149 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.035316072 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.035782647 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.036748332 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.035482997 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.035958682 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.034692016 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.037866563 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.037731893 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.037762079 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.037630004 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.038186962 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.03883857 seconds)
  done (took 140.332340643 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.03743178 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.036735713 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.035723633 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.038083286 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.037563268 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.038345009 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.03798043 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.038128835 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.037326435 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.039339436 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.039088877 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.037210658 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.038534169 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.039240103 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.039414753 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.037317949 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.038213616 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.038178994 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.040017371 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.039555524 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.038972385 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.039097697 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.037697628 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.038811044 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.038791234 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.03933071 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.038600689 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.039948958 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.036197868 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.037967595 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.037133821 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.037402922 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.040434003 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.038692262 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.039685719 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.039803508 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.04019158 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.038315979 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.038710986 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.039546744 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.039720778 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.039244362 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.039784874 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.040078754 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.039570774 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.039432232 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.038295973 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.039663625 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.040709506 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.039525765 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.040367832 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.041085217 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.04149244 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.040800184 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.040734506 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.041556345 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.039489384 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.038889191 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.041541726 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.040738446 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.042902836 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.040602606 seconds)
  done (took 128.39121281 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.040512962 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.041035283 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.041245758 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.042898128 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.040623736 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.039940418 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.040387823 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.040023926 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.040511817 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.039973689 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.039966745 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.039861461 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.042035982 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.038723933 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.042183637 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042608836 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.038544305 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.041146837 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.041326349 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.04125711 seconds)
  done (took 42.783356972 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.041454914 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.043119997 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.041134595 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.041564619 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.041350566 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.042946515 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.042538869 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.03902104 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041442459 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.041509704 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.04179787 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.042067288 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.04016307 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.041910933 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.040688038 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.042668517 seconds)
  done (took 34.634325502 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.042742866 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.042187688 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.041628538 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.042789764 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.0425729 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.039829752 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.042533631 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.043102325 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.042411407 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.042549421 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.042906583 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.042148289 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.042176269 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.042997824 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.039808118 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.041429293 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.043586875 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.041255908 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.040552501 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.04183771 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.04093133 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.041949303 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.044154471 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.041791952 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.042801052 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.04387726 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.041767977 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.042711443 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.043280383 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.04175147 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.041321052 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.042147727 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.042148681 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.041651707 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.041695018 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.04134473 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.042909571 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.043009334 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.042428413 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.041327427 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.043037163 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.041297398 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.042923653 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.044167363 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.041899005 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.042578714 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.041987008 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.04271858 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.043477225 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.043644132 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.04355223 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.042665895 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.043224591 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.044777783 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.044802093 seconds)
  done (took 114.303103294 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.042548661 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.044165654 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.044263999 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.044195973 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.045111426 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.043093965 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.044022752 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.044027704 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.044506719 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.044162475 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.045879425 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.047018379 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.046015352 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.04423123 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.04481154 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.045148307 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.046088824 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.045094046 seconds)
  done (took 38.775914303 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.045564809 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.044625118 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.045106131 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.045353666 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.045483768 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.046026223 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.044736953 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.046357395 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.059183254 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.044126769 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.045865857 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.045099699 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.044300462 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.046274986 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.042953499 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.044942439 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.044993847 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.043228505 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.042437476 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.044034873 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.042656589 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.045309435 seconds)
  done (took 46.971647679 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.047791309 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.047594854 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.059379962 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.064813543 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.063436093 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.078895855 seconds)
  done (took 14.333866916 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045775166 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047111972 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.046023309 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047132606 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045689577 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045183365 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045426307 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04386683 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045757052 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046231644 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045655864 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04502573 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046036754 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04669854 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04449016 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045550224 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047104959 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04703975 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045320571 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047057674 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046902409 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046628064 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048130022 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.047901406 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047603199 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047167001 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047747268 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047928928 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046021597 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048280673 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047482318 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046689428 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046765885 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048864778 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048780275 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046722847 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048487938 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047387124 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04725116 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047057156 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.046824626 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047737373 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048734473 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046432097 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044191326 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047041687 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049567331 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046954112 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049412695 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0480374 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046505654 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045826449 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046559587 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048936957 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048817564 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048253302 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049055916 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047151256 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047021287 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04997579 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04817617 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046544501 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049612562 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04782676 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046916935 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047432852 seconds)
  done (took 137.083446527 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048553656 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.048915624 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048182636 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050095374 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047392128 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046630854 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049042161 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049295453 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049266104 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050571649 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050098048 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047936762 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049446416 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048958751 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049768059 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04904772 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050252309 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048285658 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.05167449 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051702714 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052004881 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051231713 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051162544 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050456905 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049703472 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049634063 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049448479 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051534263 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050963194 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051006311 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.05033261 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050084607 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049299579 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.049890239 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051330877 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048980175 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050532263 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051352227 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052181018 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05044332 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050654816 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051962858 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.052086768 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049699978 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.05247611 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052506293 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0511072 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051510182 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.053096888 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050934815 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050709245 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051608245 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051093319 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051151586 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051404708 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049534532 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051623589 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.052511797 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051458262 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.052304466 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051447111 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051197253 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051092083 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049913585 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050203568 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.05227937 seconds)
  done (took 137.309948737 seconds)
done (took 2826.589389307 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.076685113 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.155615543 seconds)
  done (took 16.210174761 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.214851112 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.090642018 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.236711161 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.166389687 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.077129078 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.071022993 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.051762411 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.052507729 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.146166735 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.054802623 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.113124962 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.051283387 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.053476152 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.05365528 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.052069347 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.052990704 seconds)
  done (took 55.51900904 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.055748163 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.056092099 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.056020195 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.053165689 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.06505431 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.131422828 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.073195979 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.056540841 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.06810785 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.091378049 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.071204722 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.060659019 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.061324822 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.059291706 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.143124366 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.099995098 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.110732809 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.127536825 seconds)
  done (took 39.422226393 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.13098947 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.059897805 seconds)
  done (took 11.176585658 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.069218896 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.06032189 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.062234237 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.072964452 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.049271482 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.074954273 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.054923431 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.091169815 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.070411229 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.055896211 seconds)
  done (took 72.672378795 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.05743418 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.05794727 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.318302176 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.062827594 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.060173657 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.079715361 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.055586664 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.086411765 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.057201066 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.053030414 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.06403697 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.323381401 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.067551489 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.056973044 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.403981869 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.067685531 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.062832069 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.087832999 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.088750183 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.060967464 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.061024844 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.059225856 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.220948682 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.75169407 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.056121355 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.060344837 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.062764642 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.052642808 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.054452846 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.057465425 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.059828927 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.054821815 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.060779266 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.059282047 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.060943193 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.060839617 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.550432774 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.072016199 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.06548536 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.132802093 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.105050963 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.063672506 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.847694083 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.060174035 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.053703159 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.065187345 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.740624953 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.117439921 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.058493672 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.209505329 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.404696998 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.069911192 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.223970439 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.204092148 seconds)
  done (took 142.994273762 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.05508517 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.415870797 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.210146945 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.05840416 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.35722116 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.268708333 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.718287438 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.10158878 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.058686137 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.273951558 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.193054163 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.165958817 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.054388396 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.055609923 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.053163406 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.054442553 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.212856879 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.122135378 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.0583665 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.055291079 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.077452708 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.214461599 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.164772167 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.056949089 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.070111786 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.275431239 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.105333869 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.16480052 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.555212275 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.057132992 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.117485024 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.514067002 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.057077778 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.055468067 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.09951097 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.158140148 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.145718124 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.05838304 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.05800397 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.056359547 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.736616758 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.259881193 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.157350166 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.188261143 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.25481042 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.268694645 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.528518657 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.057330841 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.571043796 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.22722434 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.263939434 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.280745888 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.154975166 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.059567685 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.424836664 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.054726534 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.698303965 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.285962881 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.201986558 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.164296434 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.060949703 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.058920341 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.057138832 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.301287894 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.060934059 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.157581825 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.063553769 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.058824058 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.159705393 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.167622386 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.198577397 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.282721135 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.091749109 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.974132182 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.595760946 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.231212925 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.125746285 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.291924189 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.063961108 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.056532947 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.145219286 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.660110248 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.186725849 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.306744825 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.299331886 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.087072006 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.648645481 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.061238457 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.206019711 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.235831752 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.295978135 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.295234823 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.110635667 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.948528521 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.057992574 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.059148469 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.014062779 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.178776656 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.230008384 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.412282277 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.301554129 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.651888779 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.079719572 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.427530225 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.173373455 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.065078766 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.714204274 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.061039116 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.268605138 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.104395472 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.062839814 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.059972108 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.228653862 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.968689545 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.059721091 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.803806654 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.122330644 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.064200333 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.240409955 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.062114727 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.308968569 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.97444755 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.300060349 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.95394457 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.091480686 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.236890167 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.293971588 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.354459245 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.404774211 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.309098461 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.149288756 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.288975796 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.837802938 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.064550684 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.336855418 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.061242084 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.059929339 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.232363523 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.982427364 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.209696024 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.064765247 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.330589108 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.082350002 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.11499775 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.062138827 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.31031354 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.092080034 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.113010933 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.065653899 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.19251994 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.064956785 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.016251966 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.219864529 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.064522133 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.060793198 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.666428893 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.063302953 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.210101798 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.292266215 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.076207121 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.133018465 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.559942455 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.657809452 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.149906238 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.085429381 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.43177904 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.775500253 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.197603179 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.043804084 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.547366814 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.061494104 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.30438856 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.25260823 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.067628973 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.062236728 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.912231818 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.69263648 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.064370891 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.222552239 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.855045096 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.458765465 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.269496983 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.067057469 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.113715992 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.067816401 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.814622123 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.406133104 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.06169249 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.061599659 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.064374848 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.064711274 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.065546145 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.274324662 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.094090168 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.598962764 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.202684434 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.323592984 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.371140856 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.285730148 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.09848594 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.068845801 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.291645869 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.067287054 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.124546819 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.066613658 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.073633092 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.362198945 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.067257681 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.276695471 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.27417544 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.031866157 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.110407705 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.068911813 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.065099797 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.061899785 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.203326259 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.155963374 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.067057692 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.065550489 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.102978872 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.172195449 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.246326864 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.370339552 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.096097534 seconds)
  done (took 927.400220249 seconds)
done (took 1267.37338738 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.063724763 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.066268556 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.067823209 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.068991401 seconds)
  done (took 30.259686055 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.066871945 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.068041431 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.068996477 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.070106144 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.067539061 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.069102454 seconds)
  done (took 14.407127805 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.06895803 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.068124242 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.068458746 seconds)
  done (took 23.19865357 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.498709711 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.477278847 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.140272987 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.211070679 seconds)
  done (took 11.323197662 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.072637638 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.070225757 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.067576792 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.069427966 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.06807745 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.06821458 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.073171078 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.069464051 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.06920219 seconds)
  done (took 20.629384649 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.237533904 seconds)
done (took 106.047806863 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.479492876 seconds)
    (2/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.665253228 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.204074591 seconds)
    (4/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.077253543 seconds)
    (5/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.284699956 seconds)
    (6/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.303265655 seconds)
    (7/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.314581641 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.299315476 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.382875884 seconds)
    (10/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.313614443 seconds)
    (11/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.073288068 seconds)
    (12/341) benchmarking ("map", abs, BigInt, true)...
    done (took 9.111368621 seconds)
    (13/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.651735237 seconds)
    (14/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.292757017 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.453041743 seconds)
    (16/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.737547585 seconds)
    (17/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.398582385 seconds)
    (18/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.148760164 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.08495182 seconds)
    (20/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.079808185 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.082917626 seconds)
    (22/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.149732726 seconds)
    (23/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.222790085 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.093822144 seconds)
    (25/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.254535738 seconds)
    (26/341) benchmarking ("sort", Float32, false)...
    done (took 5.748570482 seconds)
    (27/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.349133169 seconds)
    (28/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.549301565 seconds)
    (29/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.946308783 seconds)
    (30/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.243878396 seconds)
    (31/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.068773033 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.017990863 seconds)
    (33/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.089835029 seconds)
    (34/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.905062821 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.318865893 seconds)
    (36/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.22024597 seconds)
    (37/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.076561254 seconds)
    (38/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.070534185 seconds)
    (39/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.231658127 seconds)
    (40/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.467697335 seconds)
    (41/341) benchmarking ("sort", Int8, false)...
    done (took 5.016954433 seconds)
    (42/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.350978899 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.154143954 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.306482787 seconds)
    (45/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.415960703 seconds)
    (46/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.754296569 seconds)
    (47/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.081839352 seconds)
    (48/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.481827042 seconds)
    (49/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.232140783 seconds)
    (50/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.22755851 seconds)
    (51/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.08328399 seconds)
    (52/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.1473564 seconds)
    (53/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.071070722 seconds)
    (54/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.195872813 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.494145141 seconds)
    (56/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.130067234 seconds)
    (57/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.071383263 seconds)
    (58/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.627152167 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.782487002 seconds)
    (60/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.358311326 seconds)
    (61/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.341801102 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.082289824 seconds)
    (63/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.46772482 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.313272421 seconds)
    (65/341) benchmarking ("sort", Float64, false)...
    done (took 5.783282474 seconds)
    (66/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.460968876 seconds)
    (67/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.280084113 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.310371012 seconds)
    (69/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.408822843 seconds)
    (70/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.301135757 seconds)
    (71/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.154195307 seconds)
    (72/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.614295273 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.420311676 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.793585498 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.317891006 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.086806626 seconds)
    (77/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.264756289 seconds)
    (78/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.156788157 seconds)
    (79/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.282908484 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.400716091 seconds)
    (81/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.08392688 seconds)
    (82/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.302043042 seconds)
    (83/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.150140399 seconds)
    (84/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.073869126 seconds)
    (85/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.47417093 seconds)
    (86/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.291047456 seconds)
    (87/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.406393517 seconds)
    (88/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.29058775 seconds)
    (89/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.094710232 seconds)
    (90/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.158518464 seconds)
    (91/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.159795877 seconds)
    (92/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.084776962 seconds)
    (93/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.185573769 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.404717541 seconds)
    (95/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.197170827 seconds)
    (96/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.074654167 seconds)
    (97/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.169322348 seconds)
    (98/341) benchmarking ("map", identity, Float64, false)...
    done (took 4.089166856 seconds)
    (99/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.177291871 seconds)
    (100/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.361034078 seconds)
    (101/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.152666089 seconds)
    (102/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.282324462 seconds)
    (103/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.397152503 seconds)
    (104/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.081506698 seconds)
    (105/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.39811049 seconds)
    (106/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.077543231 seconds)
    (107/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.097811824 seconds)
    (108/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.073877529 seconds)
    (109/341) benchmarking ("collect", "all", Int8, false)...
    done (took 3.890255459 seconds)
    (110/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.778553667 seconds)
    (111/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.500248391 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.086015121 seconds)
    (113/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.355299325 seconds)
    (114/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.074686371 seconds)
    (115/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.187454319 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.45851296 seconds)
    (117/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.114413113 seconds)
    (118/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.192223283 seconds)
    (119/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.074144228 seconds)
    (120/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 3.751298343 seconds)
    (121/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.174637229 seconds)
    (122/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.552991743 seconds)
    (123/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.278638716 seconds)
    (124/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.455820233 seconds)
    (125/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.280989936 seconds)
    (126/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.229561322 seconds)
    (127/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.178169747 seconds)
    (128/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.120978411 seconds)
    (129/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.098178792 seconds)
    (130/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.400665279 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.35970408 seconds)
    (132/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.847081738 seconds)
    (133/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.418523549 seconds)
    (134/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.112965183 seconds)
    (135/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.196121489 seconds)
    (136/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.250375408 seconds)
    (137/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.203721805 seconds)
    (138/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.153229197 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.091288131 seconds)
    (140/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.073043479 seconds)
    (141/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.916741206 seconds)
    (142/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.081355638 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.36704595 seconds)
    (144/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.504136368 seconds)
    (145/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.486816019 seconds)
    (146/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.689047798 seconds)
    (147/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.480238102 seconds)
    (148/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.995849044 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.178345206 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.328344044 seconds)
    (151/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.005649054 seconds)
    (152/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.312374765 seconds)
    (153/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.984981432 seconds)
    (154/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.388742322 seconds)
    (155/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.181899482 seconds)
    (156/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.283924377 seconds)
    (157/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.125815509 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.425867308 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 2.292828024 seconds)
    (160/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.078179128 seconds)
    (161/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.026126358 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.402517531 seconds)
    (163/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.096661089 seconds)
    (164/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.092282429 seconds)
    (165/341) benchmarking ("sort", Int64, false)...
    done (took 5.716026902 seconds)
    (166/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.172346161 seconds)
    (167/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.387769722 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.417746414 seconds)
    (169/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.079031861 seconds)
    (170/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.111764244 seconds)
    (171/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.181384238 seconds)
    (172/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.980261187 seconds)
    (173/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.106998633 seconds)
    (174/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.054287253 seconds)
    (175/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.303293536 seconds)
    (176/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.095197134 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.233206806 seconds)
    (178/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.540175226 seconds)
    (179/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.989267205 seconds)
    (180/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.106288972 seconds)
    (181/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.160299683 seconds)
    (182/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.861191402 seconds)
    (183/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.869899391 seconds)
    (184/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.56914751 seconds)
    (185/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.228610269 seconds)
    (186/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.076272609 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.078655845 seconds)
    (188/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.575777418 seconds)
    (189/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.345066943 seconds)
    (190/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.081816586 seconds)
    (191/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.240679067 seconds)
    (192/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.291718449 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.083736412 seconds)
    (194/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.081703762 seconds)
    (195/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.864599109 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.078101551 seconds)
    (197/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.084450415 seconds)
    (198/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.835835073 seconds)
    (199/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.391239055 seconds)
    (200/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.559114372 seconds)
    (201/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.059324462 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.491513871 seconds)
    (203/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.380048791 seconds)
    (204/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.077092152 seconds)
    (205/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.168962671 seconds)
    (206/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.197624625 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.171559001 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.005242762 seconds)
    (209/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.170164544 seconds)
    (210/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.088904118 seconds)
    (211/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.079585228 seconds)
    (212/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.476378302 seconds)
    (213/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.218306258 seconds)
    (214/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.094679876 seconds)
    (215/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.292051347 seconds)
    (216/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.242922037 seconds)
    (217/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.184758536 seconds)
    (218/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.080249009 seconds)
    (219/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.124791437 seconds)
    (220/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.210168839 seconds)
    (221/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.223481325 seconds)
    (222/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.078722112 seconds)
    (223/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 3.628878801 seconds)
    (224/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.092173179 seconds)
    (225/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.173766227 seconds)
    (226/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.206883154 seconds)
    (227/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.488579253 seconds)
    (228/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.409900954 seconds)
    (229/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.202955139 seconds)
    (230/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.084977002 seconds)
    (231/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.789277377 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.430298622 seconds)
    (233/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.10645153 seconds)
    (234/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.423685557 seconds)
    (235/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.086621193 seconds)
    (236/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 4.116148598 seconds)
    (237/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.26102508 seconds)
    (238/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.215853366 seconds)
    (239/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.082196932 seconds)
    (240/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.177977789 seconds)
    (241/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.235621969 seconds)
    (242/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.18858257 seconds)
    (243/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.091329936 seconds)
    (244/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.205060969 seconds)
    (245/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.384687652 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.709242651 seconds)
    (247/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.34818719 seconds)
    (248/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.860317588 seconds)
    (249/341) benchmarking ("sort", BigInt, false)...
    done (took 7.079750745 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.86026166 seconds)
    (251/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.253044858 seconds)
    (252/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.108580614 seconds)
    (253/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.093967171 seconds)
    (254/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.096715694 seconds)
    (255/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.164721859 seconds)
    (256/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.107652022 seconds)
    (257/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.083949505 seconds)
    (258/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.121857144 seconds)
    (259/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.211625992 seconds)
    (260/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.235022524 seconds)
    (261/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.094883111 seconds)
    (262/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.231244645 seconds)
    (263/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.081471184 seconds)
    (264/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.21692401 seconds)
    (265/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.092152569 seconds)
    (266/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.141189152 seconds)
    (267/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.180941832 seconds)
    (268/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.237637681 seconds)
    (269/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.167730524 seconds)
    (270/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.496118237 seconds)
    (271/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.385208977 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.108213151 seconds)
    (273/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.459061397 seconds)
    (274/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.518982875 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.194403516 seconds)
    (276/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.085115354 seconds)
    (277/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 4.335218882 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.097562832 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.216044463 seconds)
    (280/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.245911161 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.219088873 seconds)
    (282/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.237442592 seconds)
    (283/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.087383099 seconds)
    (284/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.200805338 seconds)
    (285/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.085100816 seconds)
    (286/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.802335993 seconds)
    (287/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.408346942 seconds)
    (288/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.325883189 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.153551966 seconds)
    (290/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.217167544 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.215860048 seconds)
    (292/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.471267088 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.085263853 seconds)
    (294/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.523999033 seconds)
    (295/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.391418148 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.014342776 seconds)
    (297/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.620046572 seconds)
    (298/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.097432119 seconds)
    (299/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.218988854 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.18568555 seconds)
    (301/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.09223995 seconds)
    (302/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.40104728 seconds)
    (303/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.311428333 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.821922384 seconds)
    (305/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.219623969 seconds)
    (306/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.08861232 seconds)
    (307/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.087952726 seconds)
    (308/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.353428875 seconds)
    (309/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.311132658 seconds)
    (310/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.045047899 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.434965718 seconds)
    (312/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.173084235 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.114570141 seconds)
    (314/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.981610212 seconds)
    (315/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.38432342 seconds)
    (316/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.740026364 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.203860272 seconds)
    (318/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.213869638 seconds)
    (319/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.403206637 seconds)
    (320/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.223113941 seconds)
    (321/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.423155984 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.106216074 seconds)
    (323/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.404480832 seconds)
    (324/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.285165211 seconds)
    (325/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.019559862 seconds)
    (326/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.301944737 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.980536271 seconds)
    (328/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.163313745 seconds)
    (329/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.084194098 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 3.907039773 seconds)
    (331/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.09419789 seconds)
    (332/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.086178981 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.214897618 seconds)
    (334/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.271487444 seconds)
    (335/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.037900342 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.989136873 seconds)
    (337/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.342433765 seconds)
    (338/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.389319812 seconds)
    (339/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.897842599 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.367956153 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.534697048 seconds)
  done (took 1170.290176101 seconds)
done (took 1172.37404493 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.107830345 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.093385223 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.59848456 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.105007027 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.095507176 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.100306288 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.606451176 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.124709855 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.113196017 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.606387599 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.10551128 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.095756926 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.110623764 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.132023804 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.108611777 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.110239945 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.09982012 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.12227045 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.130806796 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.101943765 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.142650617 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.1022495 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.097115044 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.147037409 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.097012712 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.11156357 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.111240977 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.143719796 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.143580231 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.098218128 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.102208664 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.449979999 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.150896229 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.101311372 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.107494536 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.112062082 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.102941543 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.112463926 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.110603035 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.112803253 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.098456757 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.10634655 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.101488484 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.100524688 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.098179316 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.097669059 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.100208676 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.222209636 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.111741757 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.432290468 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.155808886 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.11022692 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.146195629 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.101113577 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.100673857 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.099870365 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.145659923 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.103432982 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.103083514 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.433203975 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.189884326 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.113567251 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.432479884 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.163020171 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.1071241 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.107103841 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.099119604 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.109293161 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.450968227 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.646162112 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.13011391 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.118936713 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.1003399 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.100754506 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.111644875 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.604920575 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.110145978 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.676216592 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.121943273 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.113428652 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.104533463 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.100945749 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.10010367 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.115959619 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.112501025 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.099999034 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.105878501 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.106322677 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.113207762 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.451223844 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.145887257 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.597558161 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.105257888 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.113640253 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.112729841 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.677623017 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.124494271 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.111453764 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.102186728 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.452662278 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.143872288 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.113978411 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.102978423 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.113190771 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.216703447 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.113759302 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.114175484 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.099885081 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.121889511 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.107808366 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.101983639 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.115160509 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.122122199 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.136432483 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.117804643 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.099232865 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.109611867 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.105851037 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.11276528 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.110644867 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.106337278 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.112002428 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.100875023 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.153905117 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.115363593 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.116348768 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.217125573 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.108180206 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.227952801 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.117886521 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.109609687 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.10210884 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.437113613 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.147723656 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.123266163 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.110319113 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.125901957 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.124516799 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.118644355 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.105912871 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.118206852 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.103926103 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.153196942 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.10275806 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.12538646 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.152478843 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.116405565 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.109079627 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.114103113 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.13712504 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.121878825 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.107934104 seconds)
done (took 330.598105599 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.139694026 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.094743343 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.169132601 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.096059448 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.161334079 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.144560649 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.094256097 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.095244497 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.092644882 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.477705002 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.09583875 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.099575245 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.096364447 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.096079463 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.143642958 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.095003013 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.094544345 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.327620739 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.095842975 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.155880718 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.094767432 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.094219173 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.095016761 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.48338163 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.094946667 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.094290993 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.155853145 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.095954313 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.335925844 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.09594805 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.095854979 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.338152463 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.154777209 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.1096161 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.106718313 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.102741308 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.164099832 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.103961069 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.144543539 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.14442028 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.173957297 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.13307023 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.098253713 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.096265505 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.098532223 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.098181238 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.097887881 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.130422003 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.099138839 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.103381409 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.32888496 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.10516751 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.1016106 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.099191429 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.097407233 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.113201259 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.097195425 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.097990518 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.156762863 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.099201536 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.144158299 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.486947081 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.48053401 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.098180705 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.095500375 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.098469255 seconds)
  done (took 198.820674493 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.163071718 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.186165586 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.166931652 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.104313815 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.148388271 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.168945625 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.104006388 seconds)
  done (took 17.063491025 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.10720225 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.099208894 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.122547055 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.122865003 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.100132032 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.235950448 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.110452371 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.104493503 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.122772602 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.103079196 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.390670765 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.121938177 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.105371549 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.0985271 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.110472362 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.12797967 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.102032282 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.100004175 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.197439725 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.17756987 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.104304953 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.107470543 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.129760571 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.111298976 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.101149215 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.10245422 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.102546496 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.108451715 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.100261571 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.10094397 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.100425668 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.113930152 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.100549544 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.098549154 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.10046361 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.100178344 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.100629434 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.101599817 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.099180167 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.097770661 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.099350476 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.100698787 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.101049878 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.100647018 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.101184302 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.122502749 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.101084151 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.100141276 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.100419056 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.101381016 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.130975151 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.102298247 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.101319163 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.107221035 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.136612682 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.106180536 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.103288808 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.10379009 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.102321478 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.101843082 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.102442336 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.182091526 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.125184672 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.10207343 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.125125444 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.139234162 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.101395514 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.102671539 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.102899039 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.126033781 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.100585048 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.125265117 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.101866969 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.194065086 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.102248954 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.24328126 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.123955905 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.105809971 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.108032629 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.102199211 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.110287876 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.103424596 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.10521175 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.110776463 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.107120829 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.10377737 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.102608827 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.106030216 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.110027546 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.103906789 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.146931053 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.101786444 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.103835551 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.197431104 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.102493997 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.20065402 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.128494501 seconds)
  done (took 227.552724139 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.107848088 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.102876844 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.116394621 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.104432594 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.104157627 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.108444908 seconds)
  done (took 14.670514061 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.106043215 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.106477631 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.10343195 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.106241273 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.103902803 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.104081455 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.103376701 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.105399563 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.107488126 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.103574348 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.104857322 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.106305717 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.104437402 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.107097238 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.10523584 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.104668651 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.102564435 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.104668716 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.104437308 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.10540377 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.335320658 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.10411168 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.104577843 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.108113999 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.108132078 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.103833143 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.113040032 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.104506896 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.105188254 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.110216684 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.108462092 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.106978762 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.107943405 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.110297875 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.10837243 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.107318298 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.108165371 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.106603511 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.103893747 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.105760139 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.107734767 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.105618553 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.105575794 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.107020073 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.107519754 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.113479125 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.111026376 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.113558449 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.103971637 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.10675346 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.107229795 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.104893381 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.108235131 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.106586533 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.112107277 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.110520671 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.109766449 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.107320871 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.106955549 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.110276499 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.110164737 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.107214234 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.108870924 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.109849757 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.113813342 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.107332192 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.111796294 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.109384012 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.107616321 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.106748198 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.107351699 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.106118592 seconds)
  done (took 154.972568269 seconds)
done (took 615.097874416 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.12117681 seconds)
  done (took 9.150235236 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.287734237 seconds)
  done (took 9.396252152 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.340591931 seconds)
  done (took 12.375576392 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.130314448 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.11831669 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.121766314 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.106539139 seconds)
  done (took 30.520806601 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.345013335 seconds)
  done (took 9.376720953 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.117667371 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.100825564 seconds)
  done (took 16.312316672 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.202581853 seconds)
  done (took 9.236119331 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.586611499 seconds)
  done (took 9.654297523 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.121699215 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.123655892 seconds)
  done (took 16.298005641 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.108028659 seconds)
  done (took 9.139253101 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.952900816 seconds)
  done (took 10.061062155 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.118761886 seconds)
  done (took 9.171151994 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.191672949 seconds)
  done (took 9.224344818 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.957836501 seconds)
  done (took 9.990374808 seconds)
done (took 171.934622278 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.114930574 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.104486335 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.10568741 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.102272815 seconds)
  done (took 30.458897581 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.14281389 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.143782393 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.150920648 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.143651994 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.134138523 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.13556784 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.142852961 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.143912224 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.133339751 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.142662198 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.143452754 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.144169868 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.143870526 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.152953443 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.153796671 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.142973812 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.142765491 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.145023356 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.134144968 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.153749653 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.144762895 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.144211124 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.110585958 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.10852497 seconds)
  done (took 53.412308078 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.299843189 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.176414657 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.263515347 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.155844181 seconds)
  done (took 10.927370381 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.108691621 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.173913346 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.159926509 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.155955238 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.160527485 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.211803964 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.162306949 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.244768074 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.237925551 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.235597853 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.115719341 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.133069042 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.135476382 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.15697622 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.213633456 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.10951052 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.110021354 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.226006738 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.172632715 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.285534076 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.110279567 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.163892098 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.160692788 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.163031187 seconds)
  done (took 54.141752603 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.111225275 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.118733407 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.118869487 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.111770463 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.111486605 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.113090203 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.118772785 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.115027082 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.133632903 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.112840351 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.110899239 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.11048801 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.115973846 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.112658288 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.110076123 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.124679271 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.125612652 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.112203623 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.115898475 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.118601354 seconds)
  done (took 44.35739716 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.108005573 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.955509486 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.458536577 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.361690396 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.110676843 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.110194897 seconds)
  done (took 33.139249081 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.124879405 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.127243341 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.117632125 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.136755064 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.158354629 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.115844343 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.168183748 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.27524412 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.118708172 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.170533601 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.128669344 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.119813935 seconds)
  done (took 27.79711555 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.108668698 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.112538779 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.109989381 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.122413921 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.123928172 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.120331316 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.121391812 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.111055605 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.122790847 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.132743669 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.120470202 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.122248467 seconds)
  done (took 47.464452655 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.325580073 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.335979673 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.326041204 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.718449522 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.429619878 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.086162663 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.398521532 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.326547508 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.763024773 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.793855668 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.402983165 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.087972446 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.061333636 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.037378384 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.010016612 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.357389079 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115769394 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.971778697 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.369396822 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.153303465 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114156022 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.115296382 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.11858829 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.404516556 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.437264794 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118490208 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.325333976 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130273467 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.113717483 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.380171859 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.736563124 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.169969848 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.3169929 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.369545193 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.453927428 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.199774936 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.11601636 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.298109739 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.158238467 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.14953015 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.124787751 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.124897175 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.65000528 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.130551681 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.386753133 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114017737 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.168384571 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.086627062 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.039140808 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.408113648 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215221677 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.113408883 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.150917403 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.54858605 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.234758177 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.357989131 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.118964996 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.314847517 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173276776 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.343787917 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.29229701 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.116383358 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.325814133 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.04039199 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.444196979 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.224097333 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.115822959 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.119744068 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.815294725 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.358686133 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.195429347 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.412590718 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.865999064 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.116777598 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.117480227 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.161603848 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.217296809 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.114815652 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.414288386 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.107937504 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.041142588 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.214975981 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.515217488 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12249521 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.115655347 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.123112804 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.960747901 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.043157164 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.211271055 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.352165061 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.427441544 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.11807035 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.116598127 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.138192616 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120038076 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066456724 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.689739854 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.183346891 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.043556147 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.678110399 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.786283428 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.085348327 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.613062998 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.16215224 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.398383574 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.260622852 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.521559053 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.325556328 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.362465107 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.649062735 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.120130805 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.732555163 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.197672715 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193564814 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.115053569 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.676240416 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.312438102 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.400485663 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.219754481 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.116334153 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.043786465 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.127311068 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.320114906 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.735220697 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.176210437 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.115423141 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.121591364 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.117775917 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.120597894 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.281663823 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135049169 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.417054125 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.189735689 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.118657024 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.052519249 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.121149469 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.407813366 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.809635933 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176248788 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.373619516 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.382379898 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.83223002 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.714485288 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.162025927 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.391074064 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.186548779 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193196049 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.712352291 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.25144925 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.215522716 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117981762 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.241786335 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.127321673 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.121164514 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.53271539 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.531515746 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.548451975 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.16229891 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.11972177 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.161157525 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.310127934 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.361588296 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.150623625 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.145998601 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.124857114 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.204615291 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.34768546 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.118969328 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.044132299 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.371828926 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.363058982 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.415323144 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.528755541 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.146400699 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.193323391 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.129237838 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.332738606 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.202557704 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.777910806 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.666364301 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.343525332 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.70858938 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.086122365 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.766493577 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.350622199 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.486983378 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.137461936 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.572268804 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.312768139 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.840522643 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.150723628 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.64787901 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.046498469 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125784799 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.466349813 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.077435996 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.438824531 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.17680645 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13559329 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.121148602 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.121672488 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130126801 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.007039198 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.226475218 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.191639295 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1946403 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.049980562 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.793781924 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.159819381 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.124623689 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.122075129 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.429941429 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.932446079 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07504174 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.121668041 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200168727 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.865605881 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.675145986 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.125092894 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.126656821 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.724994221 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.1273348 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.035015456 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.180427846 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.863463838 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.149348667 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.361657953 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.809237768 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.417995468 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.191753588 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196725376 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.122699561 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13204589 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.824877835 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.131613755 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.822470433 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.412856481 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.396409128 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.565366068 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.179458035 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.334303085 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.137281214 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.124536926 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.581735469 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.148198119 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126035606 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327789117 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.644928627 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.42615916 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.756405001 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.207209471 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.124457901 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.397430634 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.127385315 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.777422502 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.820330243 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.119825853 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.125747206 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.374752396 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.809001506 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.124688769 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100459715 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129764479 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.337644196 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.327025399 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.404116737 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.421472012 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.568864506 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.051812685 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130223694 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.147397758 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.37410405 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.127711297 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.164238354 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.571331222 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.15827867 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.555520982 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.416926771 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.47901591 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.747552702 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.393925631 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.190391791 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.139490303 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.788804687 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.251993193 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.061093016 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.2453123 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.054819182 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.795600031 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.417648275 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.146558161 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.401241553 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.101486516 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.46522766 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.422696751 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.36099757 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.163404336 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.153392813 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.129267066 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.162348054 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.128741584 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.333869616 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.245171806 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.132028252 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.694322672 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167249613 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174514557 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.135229287 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.6093373 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.147758304 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132776474 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.839427114 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.152741764 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.249282079 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.2023397 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.853325744 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.784677758 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.156008471 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.083895225 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.782384313 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.403105281 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.181441346 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.591805047 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.168766276 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.5354393 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.130823307 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.34470011 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.135582032 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.713757269 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177219414 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.405829879 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086304049 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.343004255 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337391702 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.160137363 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.135804441 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058119348 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.233319583 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.992248403 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.113692498 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.133576481 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.813583333 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.535131842 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.352933838 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.584123326 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.954503938 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.134335524 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.423684013 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.523239686 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.771791635 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165020546 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134038235 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.44672898 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.253079751 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.4156384 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.417087858 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.141613868 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.157722594 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.344381037 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257796565 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.052275875 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.627494533 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.717620212 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.831872886 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.143944333 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.337358792 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.442245363 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.448829569 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167555156 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210336128 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.536058133 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.408384384 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.196377207 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.057775914 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.131659532 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.529778469 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.64159985 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.231479512 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.373443109 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.459339364 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.796606841 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.763360173 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.588068916 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.50743246 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.570148035 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.5355224 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.350997066 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.5091825 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.460794293 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.019684049 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.547168414 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.344660021 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.230012153 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.416402327 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.002609743 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.843759881 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.37863221 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.139957698 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.062133302 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.34277305 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.134969208 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.644450093 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.653263122 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.383889497 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.375007499 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.594751501 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.672958814 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.347537692 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.157420382 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.102051345 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.159189602 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.155331537 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.135429344 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.632162386 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.427516839 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.14978964 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075222815 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.80702491 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.063139144 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.348743515 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.343463758 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.167479241 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.691295658 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.376436341 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.224972979 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.431639737 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.390522838 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.169197406 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.060853334 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.852936222 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.080429346 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.168392983 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.559561724 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151185418 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.139228876 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.339376813 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.064890318 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.18032858 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.142356314 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.343232037 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.7187834 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.410177195 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257992138 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.384318189 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.438289442 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.948882995 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151636113 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.407936549 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.062719111 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.793860813 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.817301717 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.173597912 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207359032 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.137018686 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.142405921 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.408533812 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.457581643 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.225384524 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.868859421 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.166246118 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.161162582 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.445811698 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.216439551 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.138887713 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.142003531 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.645727073 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.367629005 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.13637664 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.108759756 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.347165374 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21066317 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.335264093 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.21483387 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.652132597 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.143973825 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.965597848 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225516657 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.092313203 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136373217 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.806222692 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.196803287 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.13984834 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.416803529 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.787128896 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.340088884 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.532575011 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.998611408 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.356764691 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.179386041 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.140445554 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.148641737 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.565698582 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.437215907 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.138828777 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.412860073 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.181273351 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.144978881 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.799001524 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.107774903 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.139223214 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.863960224 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.095908667 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.882502529 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.537900964 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.196191741 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.141257969 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.144230442 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.067064713 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.138187241 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.305996503 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.143714871 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.137633424 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.508960171 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.425413817 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.220814335 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.14382616 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.142590374 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.143517999 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.353800799 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.656343775 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.158145185 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.841058172 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.343010643 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.140850593 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.636800183 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.586381508 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.414387183 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.179604807 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.351887577 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.388517459 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.682494809 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.35811588 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.113862605 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.366165575 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.142302366 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.411645094 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.415156804 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.142468481 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.352408195 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.849486092 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.425405336 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.495405045 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.452047638 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.200822847 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.35774324 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.161464832 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.16049701 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.145484254 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.404487166 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.193039878 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.141122517 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.149619575 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.69517117 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.793099246 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.609993193 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.295207494 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.430670479 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.937697795 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.893853742 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.146793741 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.069450626 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.141494265 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.169205663 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.146246169 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.066927725 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.855387049 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.862061099 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.354356976 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.453316543 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.070101861 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.347553653 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.744347376 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.068243942 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.112294588 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.156953829 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.385167099 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070713754 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.145655863 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.096405734 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.387406763 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.884013357 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.412674872 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.143375409 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.086835479 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.146907178 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.144003642 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.145998093 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.229733897 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.144154096 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.260823343 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.405416618 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.48522708 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.23763043 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.784993424 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.881447255 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.080699032 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.187956417 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.701921546 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.712759563 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.392027442 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.265161606 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.85635951 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.0851349 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.147154238 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159209776 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.4043341 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.145891573 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148467179 seconds)
  done (took 2237.360221599 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.168882871 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.214947788 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.179741776 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.228711643 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.28215989 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.231319067 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.185498164 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.18578268 seconds)
  done (took 59.743711456 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.144080489 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.111178889 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.569302101 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.15551279 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.156185917 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.166335137 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.410466019 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.190826577 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.158353477 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.191452622 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.170190242 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.174597556 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.170571293 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.172715992 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.177787452 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.421812609 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.192113172 seconds)
  done (took 81.829390815 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.213132927 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.244588456 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.172794346 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.975262099 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.181510571 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.507581406 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.173001175 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.173696639 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.515952872 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.471577425 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.199288388 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.180195322 seconds)
  done (took 96.103344987 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.172543841 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.172001215 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.171118884 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.173102793 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.170976964 seconds)
  done (took 12.9545745 seconds)
done (took 2791.776048067 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.417974397 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.275235486 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.252402461 seconds)
  done (took 6.621071329 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.313674828 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.363723984 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.47688063 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.498059161 seconds)
  done (took 11.753343918 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.459960188 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.541156891 seconds)
  done (took 7.097173066 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.609154748 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.192839358 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.573637892 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.172279958 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.175965578 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.175139265 seconds)
  done (took 23.625176564 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.220890053 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.171379175 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.173681913 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.171453753 seconds)
  done (took 10.831623485 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.171465941 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.986209748 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.174052296 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.185255343 seconds)
  done (took 22.611866485 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.378537239 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.393778446 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.937521868 seconds)
  done (took 9.807069496 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.793720518 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.620466542 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.778299056 seconds)
  done (took 10.288065277 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.07335296 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.158128967 seconds)
  done (took 8.328221693 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.315326669 seconds)
  done (took 4.411934411 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.996710031 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.486264006 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.646710785 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.722695498 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.789370566 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.413410735 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.51219435 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.459348537 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.591323976 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.645474167 seconds)
  done (took 28.36124059 seconds)
done (took 160.6246597 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.611281248 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.199652643 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.382592132 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.5503062 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.422181902 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.38313517 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.468807595 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.53960562 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.226327972 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.208210117 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.547617927 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.41627506 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.41517203 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.197145195 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.420714374 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.198300239 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.416713779 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.628005761 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.23412571 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.473305729 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.476991845 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.193760473 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.392474116 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.216046129 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.418881406 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.332820857 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.799557549 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.200980434 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.384039565 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.815079772 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.334776412 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.61495996 seconds)
  done (took 179.219367542 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.05195767 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.175067511 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.175800775 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.175926172 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.439019467 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.175194611 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.176069128 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.176430748 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.440695201 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.423951911 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.176731422 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.430413497 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.177138381 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.175865147 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.177901348 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.176347546 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.553793618 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.087199371 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.176441651 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.176568801 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.178658508 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.311076576 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.177869997 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.332150768 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.541871388 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.177489756 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.176799377 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.177087724 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.176836983 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.176884639 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.177357114 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.177999965 seconds)
  done (took 217.602497781 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.177395758 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.177901003 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.177310912 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.177214386 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.176728082 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.176762638 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.176332701 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.17716427 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.056127607 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.046019138 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.178512085 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.179050481 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.17852288 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.178104721 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.179032316 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.177673639 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.178473458 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.178827696 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.178586845 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.177915689 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.179794704 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.837974521 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.17766953 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.853952411 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.179571878 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.180007926 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.178092439 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.178158047 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.177137984 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.178183565 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.178371322 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.179261448 seconds)
  done (took 230.884478242 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.422395183 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.180485522 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.180964185 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.182302491 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.180162015 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.179656034 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.187004465 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.428043625 seconds)
  done (took 22.044931046 seconds)
done (took 651.866385627 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.574922507 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.961196064 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.31605075 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.203810059 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.465916653 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.254344201 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.198810948 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.265691819 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.861364497 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.281150754 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.621959854 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.208133167 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.94911794 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.232784254 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.315925418 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.264798893 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.551638696 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.808441601 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.334769057 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.872100459 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.409787677 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.114584106 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.283844019 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.906670346 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.635797626 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.14163612 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.216380451 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.555394729 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.205411489 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.440776448 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.892372797 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.482285212 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.217171637 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.204164228 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.258382355 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.241634999 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.402520399 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.213584707 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.310783408 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.911137216 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.879085156 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.757235182 seconds)
  done (took 113.325805351 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.190254069 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.186967744 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.188368936 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.187279251 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.188393138 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.186516113 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.18763165 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.189385317 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.187246475 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.186017397 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.187005071 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.188713543 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.188024263 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.189219914 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.187761402 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.188880248 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.188992352 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.186841189 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.187949379 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.188704217 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.188395919 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.188326681 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.182491451 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.186693615 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.188674641 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.188409244 seconds)
  done (took 59.000949628 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.183647389 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.337011478 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.474388461 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.219522542 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.183865066 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.18661893 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.214048263 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.190508333 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.187349797 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.18684796 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.296696619 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.18712047 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.195614288 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.469371349 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.214692398 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.184001683 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.184282114 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.185376414 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.344737304 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.20204882 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.214061605 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.191548552 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.214457713 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.198294063 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.186653172 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.186287633 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.18721226 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.649168847 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.196886221 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.294090259 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.230795166 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.217776096 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.533290056 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.482757344 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.258971704 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.197234592 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.18578002 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.345660871 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.198173726 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.184670095 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.213278421 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.193812176 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.470760905 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.717415873 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.203122047 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.186655482 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.647274995 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.356918461 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.235989448 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.200790542 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.478607065 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.218241364 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.185128768 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.186174188 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.222940824 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.197341563 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.185124303 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.469528626 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.201898485 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.2147977 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.19405803 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.187983106 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.351716388 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.195797521 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.343607284 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.196542854 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.193359797 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.188256205 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.471914992 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.219216652 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.713484533 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.205406731 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.184917608 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.296903448 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.345607604 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.674381376 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.202987125 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.352773524 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.554546447 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.226295864 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.197151222 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.636629436 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.228912859 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.199795358 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.188952708 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.186530329 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.186585951 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.226339772 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.215235436 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.627864357 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.721691721 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.489947246 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.22790943 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.199873556 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.188598559 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.470469477 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.200940368 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.187640229 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.46837483 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.741201523 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.205309561 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.195300246 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.696348615 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.205951141 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.219618247 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.200602056 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.48235403 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.220038195 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.229829175 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.189095837 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.194633534 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.19221235 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.219225619 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.197986786 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.188169267 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.688897401 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.36800862 seconds)
  done (took 270.261499685 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.191775572 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.188485665 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.188906658 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.187817728 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.186825923 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.188979336 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.186745559 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.187577241 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.188694725 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.188930143 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.187130028 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.186850286 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.191196335 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.193025813 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.24161648 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.191397166 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.674719792 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.186996564 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.188969052 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.190134252 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.76345642 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.195095407 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.189472291 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.189706294 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.189305093 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.188101304 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.196617742 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.236489969 seconds)
  done (took 176.58396733 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.189768688 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.238626766 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.201593765 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.238051834 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.200292638 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.189902184 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.210844074 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.206347513 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.196621624 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.189619754 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.189383442 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.217706373 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.197472299 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.261198446 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.224141736 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.221413646 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.266176779 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.199477856 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.18987081 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.190672287 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.239570543 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.208205169 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.219185662 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.246620127 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.201726888 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.23766302 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.206407336 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.192318071 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.19164327 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.282028582 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.213019765 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.218849337 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.227899364 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.21005406 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.28832254 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.287151335 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.274834838 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.223412051 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.195864377 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.19222005 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.191992044 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.196115099 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.239879885 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.203411262 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.19182141 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.291906673 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.211811373 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.192570201 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.214202063 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.192365241 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.204904245 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.209220178 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.225320684 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.295288648 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.241959625 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.21768253 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.215819998 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.212336456 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.194028875 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.266012256 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.206859054 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.28526211 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.216185583 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.199066854 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.195723573 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.196664803 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.240936949 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.228454857 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.269590591 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.202205818 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.265609831 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.249751811 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.205061258 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.195290176 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.193559451 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.241039196 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.280564091 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.251241629 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.25400131 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.22984876 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.207781154 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.1954651 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.199818558 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.222934106 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.201681784 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.285882713 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.287555757 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.203044908 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.195624635 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.194830478 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.194656399 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.218066042 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.252386775 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.234726852 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.283589876 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.233291983 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.231557658 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.204770265 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.20950163 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.199221166 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.224761284 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.202225167 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.207522577 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.541786314 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.234686407 seconds)
  done (took 235.776086553 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.539744007 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.246495795 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.265722169 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.453024311 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.555233141 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.301586426 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.232788461 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.25657555 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.254604438 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.361446957 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.30551135 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.287321187 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.231588284 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.214190316 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.245244178 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.255974425 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.274730552 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.558985281 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.347944953 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.976223679 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.24411396 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.479139258 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.549124909 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.580354692 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.285305378 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.652178356 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.84463613 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.333582951 seconds)
  done (took 71.256967406 seconds)
done (took 928.306474526 seconds)
SAVING RESULT...
DONE!
