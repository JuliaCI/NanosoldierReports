cset: moving following pidspec: 27151
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.839608999 seconds)
loading group "shootout"... done (took 1.131227466 seconds)
loading group "string"... done (took 0.676841228 seconds)
loading group "linalg"... done (took 8.690172287 seconds)
loading group "parallel"... done (took 0.166314429 seconds)
loading group "find"... done (took 3.084499489 seconds)
loading group "tuple"... done (took 2.15963808 seconds)
loading group "union"... done (took 15.064480185 seconds)
loading group "dates"... done (took 1.465264195 seconds)
loading group "micro"... done (took 0.223064879 seconds)
loading group "simd"... done (took 4.828741974 seconds)
loading group "io"... done (took 1.10712629 seconds)
loading group "random"... done (took 9.795697165 seconds)
loading group "problem"... done (took 1.598649076 seconds)
loading group "array"... done (took 25.500477694 seconds)
loading group "misc"... done (took 1.831587112 seconds)
loading group "scalar"... done (took 44.081966349 seconds)
loading group "sort"... done (took 3.497297499 seconds)
loading group "sparse"... done (took 12.850219549 seconds)
loading group "collection"... done (took 19.510536643 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.451224496 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.119096905 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.168945458 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.118500732 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.218356187 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.126889855 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134409837 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.088579783 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.882459764 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.163072972 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.117252549 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.430607387 seconds)
done (took 5.463137803 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.18902854 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.251546555 seconds)
    (2/2) benchmarking "String"...
    done (took 0.170235226 seconds)
  done (took 1.638585461 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.092976578 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064545864 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068689526 seconds)
  done (took 1.456143604 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.068476284 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136651179 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.069069648 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06954805 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.069510438 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.069369999 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.0691368 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.069438801 seconds)
  done (took 1.781689788 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074287114 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.070127133 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.068329922 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.070553576 seconds)
  done (took 1.510410538 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066593009 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123328438 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06695189 seconds)
    (4/4) benchmarking "different"...
    done (took 0.06791444 seconds)
  done (took 1.54957504 seconds)
done (took 9.437268186 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.162775807 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.854557824 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.873747738 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.148413867 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.273776047 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.326586351 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124897745 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.20744472 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112207518 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077315409 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.149449485 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.081768989 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.488530586 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.476528235 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.075643849 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.176398886 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.65222768 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088937641 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.13640496 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.446076419 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.079747488 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089114824 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085984495 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072435241 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.321755331 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15845067 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.67005174 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097483771 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.07137655 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.195464484 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.076201959 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.081817494 seconds)
  done (took 11.192254952 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.115827108 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.116135266 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.07253674 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.127820872 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.098817331 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.073109011 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.078477225 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.070602464 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.092498823 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128281927 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.095403692 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.127342515 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.07024257 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.072424901 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.100470648 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.201678436 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081743531 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.084760209 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.070778383 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.085028522 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.110250531 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.082236332 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.08171531 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.081132298 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.136580523 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173956915 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098179959 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.100311184 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.0699434 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.082544199 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.119117467 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.129625963 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068358019 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066483179 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.123938954 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09943694 seconds)
  done (took 4.842330865 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.899157265 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.100154369 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.111506953 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.103003131 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110941966 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.11787601 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.151068117 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.127229465 seconds)
    (8/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.146614762 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.108947055 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072210073 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.180280705 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.678269855 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.239880591 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072652139 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.146169388 seconds)
    (16/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.067376879 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361089511 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.096160965 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071141934 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069476923 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.099471015 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072854623 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.139739264 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.071269341 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.178581549 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.601928748 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.182211079 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077551503 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.102312722 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.068348386 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.069413555 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.147736987 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.09870515 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074355833 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.574684944 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.069863214 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.067975539 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.092619097 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.097481323 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069839826 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.071013316 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081986458 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069314322 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111905141 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084021798 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.520255582 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.073282447 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.624768124 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.320950541 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.077216733 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.075399215 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.105131552 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067922265 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071288855 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.887221271 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.147091244 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.069671294 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.279055753 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071645819 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.071042003 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.072195888 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.106138372 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070373511 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07195399 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.076157032 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09914431 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.881293713 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.148907135 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099066483 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069815704 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.411706198 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076567053 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071092338 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072251594 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.096480166 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.133569372 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068577279 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068363269 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110986788 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096428962 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.08856831 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.199641553 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072573214 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070542128 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.326249053 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.181290208 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068907193 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069806333 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.495809458 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.066026868 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069670329 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07146483 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.094081831 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070947898 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06687129 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.068092682 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102918343 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072087209 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.337310852 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070595951 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.514614034 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.073329336 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.107388693 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122073612 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069587173 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103307531 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069641827 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066850875 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075542665 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067637084 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.067756524 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.073134631 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.069345646 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.070114847 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.068058935 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072554433 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.0717576 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.071151899 seconds)
  done (took 23.859191809 seconds)
done (took 42.02108826 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.408080774 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.082951223 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.082620958 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.082705376 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.202405764 seconds)
  done (took 2.139791776 seconds)
done (took 3.53125901 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.261311351 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.078630716 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066900413 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.208550461 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.091953692 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.17911584 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.220763186 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.159659491 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089406849 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089189291 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.088977503 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.222144763 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.233094592 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.092609289 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.16331402 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.23405624 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.092806102 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066865793 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.09172899 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.092117163 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.092378423 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.067181353 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.092151003 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.09173514 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.161122159 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.091046086 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.06632908 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.16188121 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091230854 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.1621383 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091078982 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.090365618 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091716863 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.162661614 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.090758464 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.160057353 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066555841 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.090306518 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.089976681 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.090125587 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.090162906 seconds)
  done (took 6.346009422 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.077539791 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.086193713 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08828452 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.065243471 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075096578 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085939588 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.065134614 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085228868 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.09480881 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085785107 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085329575 seconds)
  done (took 2.269909243 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072594847 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085888887 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087260545 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06463978 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.076258443 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.086395042 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064755143 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.086060698 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08893145 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086338741 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086640606 seconds)
  done (took 2.207537697 seconds)
done (took 12.129204735 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.194635251 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.093802792 seconds)
  done (took 1.591518435 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.268777578 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.531452303 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.000755916 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.117834039 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.099020329 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.113976635 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.226858648 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.095634027 seconds)
  done (took 7.954768086 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.131773675 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072485734 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070880173 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.07082825 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.072228538 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.072094783 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.071174316 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.071589689 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.070062759 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071780435 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070962695 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.07062732 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072687432 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.070394376 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.0714491 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.07077148 seconds)
  done (took 2.636052062 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.106896948 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.07228663 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.102858193 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064559076 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.075246231 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.065057855 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.074071651 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075840011 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072883836 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07385102 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074884997 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073030153 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.074091829 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073812742 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075784227 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.076039989 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.076127719 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.073452983 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075988089 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.076771395 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.075026791 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075734593 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.076129716 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.074411653 seconds)
  done (took 3.277311767 seconds)
done (took 16.779636431 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177671373 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.078106037 seconds)
  done (took 1.566891757 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.095480216 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.094979136 seconds)
  done (took 1.528405073 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074824859 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062898887 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080431486 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072525403 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063562041 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063685281 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079461719 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063805064 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063662949 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063539674 seconds)
  done (took 2.028940302 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.065736533 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071187344 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067471719 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066978932 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069355713 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064803523 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067290979 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065468443 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071321608 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064151608 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067831837 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.086047988 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067623351 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086353972 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067141397 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068241209 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069747102 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067236261 seconds)
  done (took 2.588406998 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.063808663 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063665797 seconds)
  done (took 1.46915342 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066799701 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063990404 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066032475 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066541033 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.064011959 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063569871 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064251546 seconds)
  done (took 1.790385569 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.43672304 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.188868084 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.430822896 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.072043359 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.080361482 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.262973886 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.067067838 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.071285454 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.071489999 seconds)
  done (took 3.063167936 seconds)
done (took 15.382508818 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.085751102 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.185842818 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.116485832 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.42130338 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094874615 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.070270029 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.115730954 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.212351364 seconds)
done (took 2.670736392 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.262932406 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.191594062 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.321100974 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.154307108 seconds)
  done (took 3.01562335 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.396799275 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.17236631 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078227232 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.069988355 seconds)
  done (took 2.07580151 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.067663532 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073845283 seconds)
  done (took 1.505541037 seconds)
done (took 8.228240783 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.098484666 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07345757 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065037143 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.063950199 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063719454 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.065989895 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066110609 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.065831652 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065026929 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066646136 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.06396472 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.066162733 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.066112013 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066047536 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065673495 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065849647 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066500935 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066142072 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066051338 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06589059 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.064172164 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066124647 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065249931 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066280171 seconds)
  done (took 3.00292341 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.082046041 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.068127639 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.069137861 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068776388 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069685269 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.069290585 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.069490538 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.0681681 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069483953 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067943881 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06999685 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.070091742 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.068209651 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.07062044 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068143116 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.070696363 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069846189 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068291307 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068272813 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070048718 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069240639 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068228193 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.070309703 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069933963 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.070147554 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070186077 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.068334609 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06906645 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.07013877 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.070051288 seconds)
  done (took 3.465289118 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.069323561 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061921201 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.0623675 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072785699 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062090247 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.06247603 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.06277364 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061733376 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062459485 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063585309 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063058835 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062655114 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063421191 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061967602 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062317825 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062916575 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067788776 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.083054344 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062390407 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062740385 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.067479647 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062668469 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062446821 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062605104 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063326358 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062276414 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062068717 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062963611 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062423993 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06295655 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062612562 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.067214031 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.068129754 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062208582 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.073230528 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.068075176 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062617018 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.071556606 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063523598 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06243743 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062488116 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062328969 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.06270472 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062440296 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.073580197 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062899332 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063648836 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063105577 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062729783 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062328803 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.063155505 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064481089 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.071556303 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.064189119 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062277652 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063577147 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062774618 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063430195 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062863278 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062609771 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.06259747 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066825586 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064022567 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063298833 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.083692783 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.06393918 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.073266517 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062637269 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063032108 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.066771608 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.063331128 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.081434495 seconds)
  done (took 6.048346789 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.074441202 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074121282 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081183 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072913188 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06690658 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063548505 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066732121 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06332439 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073029342 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067350202 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063885614 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066859088 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073111529 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06751705 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064757094 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.073895586 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067245401 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066418125 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063427459 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067325948 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064606797 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066912229 seconds)
  done (took 2.893585519 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.142022996 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068854772 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.109666047 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.07332374 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071994842 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.073458186 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069211984 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069159043 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069247738 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06994216 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069813564 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069240498 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071648506 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069810301 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069898422 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069556623 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069740899 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070348015 seconds)
  done (took 2.748204761 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.080123038 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068325102 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.092370998 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068313697 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068486612 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068636973 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072117045 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072696442 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06815349 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068773261 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.07485375 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069762406 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.070078501 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069023863 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069135062 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06898788 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068289697 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068622469 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072367109 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072255361 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.072473898 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.073101586 seconds)
  done (took 2.947495706 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080587348 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067408079 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.083579343 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069443559 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062296789 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062690427 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.069502668 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.068081104 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.069481656 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.068038449 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068125864 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062800125 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.069673503 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068195352 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06991177 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068094196 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067931975 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068694094 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068166275 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06290672 seconds)
  done (took 2.747949644 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.100668886 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065152836 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06499297 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070510287 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06606445 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.066025806 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08207391 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065869858 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065857707 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087528626 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065993614 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066154065 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070989628 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069208073 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065709299 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070730863 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070652346 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070481577 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065128356 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065262562 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087226983 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06525963 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070526167 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06499255 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065220954 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065419105 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064938314 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.068364867 seconds)
  done (took 3.337384193 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066978044 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065695594 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065799375 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065949968 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06595558 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065843831 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066149599 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066232061 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065561943 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066186315 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065656061 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065743222 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069165017 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065834038 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065783802 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065720094 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066171167 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.067604441 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066841329 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066825294 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.066361987 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066257033 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.066800901 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066912133 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066653001 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.067671877 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066545838 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066266208 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06619621 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066417172 seconds)
  done (took 3.373914527 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075867894 seconds)
    (2/2) benchmarking "in"...
    done (took 0.07361033 seconds)
  done (took 1.52608726 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.065649873 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080292104 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061698403 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074695041 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070888495 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06632114 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07186314 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071155102 seconds)
  done (took 1.933413807 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.096151078 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.121431191 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064200498 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064488162 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.094681854 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.130403714 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.105221759 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076213734 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078752102 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066791824 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064250726 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.104754271 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063452562 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077916521 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065055216 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073465303 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07186165 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082461922 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077648616 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062256359 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076806998 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064733075 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062565411 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064491095 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063429866 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071000576 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080298277 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.077093663 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073433958 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061663242 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.08310478 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062393012 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063926724 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073188862 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.094878986 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063084944 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100972187 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.06321557 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068192796 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062425359 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075980736 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084636931 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.078043754 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081844048 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064513519 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064694478 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062573605 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065080275 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.067118009 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072975456 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062775293 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071505519 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062144554 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064204632 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.074507696 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063349121 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068374725 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072930076 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077771673 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.074558619 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.076022666 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079917936 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072984118 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070827736 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06393927 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.085049692 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065204435 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07720257 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079680063 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064456954 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077140963 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062530147 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061729689 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062564841 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097355603 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06464534 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063885821 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06290179 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062758265 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064166498 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073203814 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068055894 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07122488 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06633497 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079918715 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072724036 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062789884 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069049021 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081284831 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.067110979 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062849288 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079747951 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066230159 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061372875 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080270509 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072606321 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063881761 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062982317 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065877828 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076072459 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063260302 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060567776 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071128943 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063624618 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.090816864 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066286097 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.215365692 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.064822187 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.075655947 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.069048253 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06567172 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.062882401 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.068996673 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.064381718 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.062026625 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073519492 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.063385148 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078813211 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.070175438 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.078685496 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07886609 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07460596 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.080000915 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062872961 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.062126393 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.081793095 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.073279793 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.064561924 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081584097 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062124634 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.077158779 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062433994 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.064106156 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073013058 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061992038 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06498151 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062585406 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068314306 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064146891 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065001988 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.069218236 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.072677513 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.076295792 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06421537 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072686584 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062996327 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079166621 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073708969 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067808488 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065907655 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.06380128 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.076040593 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.070677319 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073178857 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062551518 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063947859 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063036753 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.074790586 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073957712 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064878693 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070513146 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.068174505 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063852568 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063621153 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064415142 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.067134802 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066571642 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063807891 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071638344 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072706989 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.078017896 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070305578 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.073223339 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062141712 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.063243452 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06477153 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062694676 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.068057944 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072932728 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079826764 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.07563277 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.085155455 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063412353 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073771039 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06462644 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.081085456 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.077268462 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064122885 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067974134 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.06198759 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064565346 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072873294 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074882346 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077116647 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078606024 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067859262 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067854189 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06241444 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078505734 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063409338 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072132456 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072766949 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067305516 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.06294379 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064304508 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072393746 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.069360999 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062316878 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078591569 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068294147 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061953743 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077109058 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062430293 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07315305 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061636371 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066265034 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067902377 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06370231 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072131416 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077996713 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060670322 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062434116 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078315958 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.21089227 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066220894 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.073541216 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.080516036 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.069020768 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.072348898 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07504068 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.07433183 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067902641 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.074090906 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.064365742 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.073302904 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066566166 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.076006637 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.0635136 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082334712 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061845791 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.078864476 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063521482 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.075078205 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063523171 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072835254 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063640013 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.080700048 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06492726 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.063910026 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.075441375 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.061825218 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.073185387 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.062212747 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.068733827 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.070338441 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.073669678 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.065128665 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073624596 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.064708152 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072830697 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.068162782 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071517894 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072787137 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067940971 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062432545 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.07214701 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074509338 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072079373 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064486739 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064249854 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063641202 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073390053 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064720932 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064423193 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071939912 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068588743 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069719682 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064396567 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064853216 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064584829 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072264307 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073721667 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082137746 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072848951 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071693149 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.073306144 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062633233 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079855463 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063300847 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.0742339 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062351668 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069222646 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.073325177 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063480275 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083259211 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064337169 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.072145306 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076578874 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072582939 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067307363 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081953857 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066431356 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072326542 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.072179545 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068733598 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.070383143 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065148348 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072515683 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073744819 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074970636 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064183084 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.071656037 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072946436 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064818943 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070688389 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06479444 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.072425982 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.06485698 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062071605 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.068560276 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075241416 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068478108 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068752427 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063232442 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061821048 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063253331 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06948973 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067853601 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072088201 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078915924 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061084142 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062918095 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061536106 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066368103 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080240089 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072187191 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.07065206 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067416718 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060770916 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063452412 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063815629 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.213048283 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.067850003 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.063322744 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063876592 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075615333 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.066039957 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.0701213 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063582172 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064411167 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073987494 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068092519 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064199754 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.07104077 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063055184 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.069033732 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062179822 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064593148 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.068277496 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062476631 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.067347045 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.075109425 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.080618353 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.070450257 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072877707 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064254499 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071569489 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.079397804 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070056946 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064022568 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.073135249 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062279217 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.082523708 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.073495945 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072492582 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074023584 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.064206747 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.080940394 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067933874 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.073682099 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079318344 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064207427 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.069546098 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062337362 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079495685 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.068399225 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.06254106 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.071989236 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071786733 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06987243 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.076080679 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.063936245 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071803587 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068699157 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067337712 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064625254 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064340077 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072566761 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080338085 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064031967 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067425028 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071854292 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072411491 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.068288469 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076434097 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.072584762 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064396227 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064885056 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.067151727 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064414546 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075497599 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063657685 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.068142025 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068234917 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062575557 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070266197 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080367124 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073482372 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073778753 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062536531 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062422853 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081901141 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.067357315 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066626145 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071955334 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.073797951 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076560601 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073846394 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.081028362 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064023555 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069932456 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076441903 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063971104 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062865047 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067557363 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064500692 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.073049216 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073927504 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071654044 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065414378 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070814473 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077412753 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064644436 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.068149707 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067573316 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063445302 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074026875 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.07184366 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074679306 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063683379 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061465036 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066095265 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071876321 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070245035 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071555216 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062943241 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06789646 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.0761469 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070299422 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.211925899 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.06362894 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067314199 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.073484705 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068042778 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063252788 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.068811202 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06761402 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069846063 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073338262 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068868717 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062709294 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080982789 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071792557 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.073360106 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065118569 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.064934022 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063530498 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062641943 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074669589 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062421025 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064651218 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.068663828 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064519865 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.081532105 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.072212428 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079616808 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064134955 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.068186786 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063475385 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073164935 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.068040275 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.06327302 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.074551353 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062155922 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079272955 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075860802 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068280713 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062332069 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.068872286 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071440623 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.079091049 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073372367 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.07298243 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066204328 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073635572 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.065053247 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.074932208 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062715699 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061986554 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.073902156 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072762987 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07658444 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.06253147 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.073827725 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.065094538 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.071907961 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.07144664 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064923634 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064620883 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064871741 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073020029 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.068064593 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.073022704 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.068317391 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080564516 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064438068 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075210605 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073008533 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074630352 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077789596 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076180985 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071804225 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063721236 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071253535 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.07197792 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064150396 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068715081 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066533934 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.086018864 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065035021 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06528732 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07858932 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070099853 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06357021 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070000353 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068348445 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.074133951 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064145506 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.07421869 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06748237 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064007166 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067906304 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068610748 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061994387 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062754728 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062870408 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073421433 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067982502 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063149949 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083179624 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064583541 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072597448 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075147032 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070093555 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064439881 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061542947 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063396429 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076488298 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078377546 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066402434 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071588537 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064115621 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072213574 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061016966 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071536631 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070804707 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.219304357 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063629855 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064478632 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.079537366 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079882059 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.068904303 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.073770054 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072934242 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064346241 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085977434 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.073221198 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064964857 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.075171766 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065604573 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062526109 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062824721 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064705201 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075015166 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.06281599 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065331295 seconds)
  done (took 43.896020892 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100603883 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063635121 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063280777 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062513735 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070571825 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06355808 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062615267 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063713404 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063423568 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065463226 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062896108 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065819566 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.070737845 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076166098 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071172082 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066425407 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062876975 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063688515 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062713935 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063748561 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069213554 seconds)
  done (took 2.912780845 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066811008 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.06642933 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066909949 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067290066 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06640744 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062774571 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067334073 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063060101 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067410594 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063556483 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067530441 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063261767 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063150286 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063297197 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063619933 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064859525 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067298529 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066515483 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062966812 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067054572 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064436515 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066779319 seconds)
  done (took 2.926689929 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.065160941 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063302427 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072220488 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062022549 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061747127 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.065885984 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061839991 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06725485 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067398269 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067560085 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072141323 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063205269 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062125272 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068799894 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062072964 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063283712 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106188669 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063759177 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063236658 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062354277 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065280552 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072546564 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062320666 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062441885 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067296206 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065905895 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062425811 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065074791 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063229978 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067192363 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063483861 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061952614 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072493199 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071379606 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067603571 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067730026 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064063434 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063604163 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062126514 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062665497 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071830119 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063577886 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062841161 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064077714 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072213654 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062237601 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062136184 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072047631 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061866163 seconds)
  done (took 4.73084804 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072827214 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113303811 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.069190072 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096925201 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075915145 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068603477 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068867011 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097710944 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063681335 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064493957 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076972838 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077024318 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065422537 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066974746 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068967664 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065585085 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066039368 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06449962 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067989134 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064775266 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067841579 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070724186 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.07573097 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07635897 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066201463 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064274303 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064893395 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066274429 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075589289 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.06852452 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066801111 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067122522 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076174195 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070642223 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065057015 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065310747 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07675227 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065829935 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06533341 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063872022 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064945719 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066869382 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070126145 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077482637 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065754404 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070825819 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065699698 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063444902 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076765314 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065400622 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06934871 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077489185 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066563895 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065766746 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066838068 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076528545 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065671576 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.06463975 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065679944 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076335163 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063932607 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06651962 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.08006083 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065114613 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069347287 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077963861 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070989016 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066788627 seconds)
  done (took 6.434094635 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071301499 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096354144 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.078617375 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.078994132 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073959837 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073917163 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.074165044 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073767706 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073991444 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.076767633 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073766078 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.136635949 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070428639 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075184829 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074117653 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073670135 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073956993 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073573605 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073579079 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073732515 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073897084 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.078851516 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073971053 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.078840711 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076094953 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069974412 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073787613 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073477721 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07889036 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073639332 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076010018 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073519084 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073548926 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.079090942 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076381122 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073152705 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063335552 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073254177 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073540149 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073661725 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069969306 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.079351271 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07388074 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070132978 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073808285 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073611279 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.078938973 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076271254 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075368657 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.077092689 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.075010063 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.079413594 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074118433 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074054647 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.079283484 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.081575422 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.079483764 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.079570392 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074159155 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.079295624 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.079522886 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.081880781 seconds)
  done (took 6.27489488 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075618896 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068206526 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082077328 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062295263 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062708725 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072572111 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062684524 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062642087 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069294388 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069283013 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071302022 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072414138 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074433744 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071115493 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072549207 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074720024 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072593291 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072643359 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069581432 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072723386 seconds)
  done (took 2.938478915 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.079871311 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.082300165 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068636433 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072689005 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068772766 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072713601 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068311145 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06864527 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069537962 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069185427 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074064655 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073533182 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069201844 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072938579 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.0737405 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.07259382 seconds)
  done (took 2.663461066 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066740432 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070824867 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.097822382 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063858685 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065631836 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063310568 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063941307 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062397614 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065027647 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078001146 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063696787 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066474065 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064408324 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063129864 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063330085 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066250192 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064903187 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063845584 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063755936 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.096999633 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072651533 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064536843 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066538878 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06357301 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065703516 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072433786 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065495815 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065842098 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063451587 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.067104628 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066631587 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070540148 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065764537 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064364121 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063011732 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063672222 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064050438 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066622586 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066946397 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064111283 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062535185 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069160012 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064245618 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064903699 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065231931 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066711613 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065420597 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070257642 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064676254 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066172683 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06398031 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065452169 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064328786 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071669872 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06651104 seconds)
  done (took 5.193400346 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080736663 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068935309 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062291813 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062266574 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067845344 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06886463 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069050514 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068457227 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068851425 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062562187 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068628571 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068046216 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06898937 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068446962 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068974138 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068599489 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062190969 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068348193 seconds)
  done (took 2.753465114 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.069776729 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068380937 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066978394 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064712899 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.064188648 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069135176 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062863015 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.064049493 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064068143 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064463981 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064703772 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064339722 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064361971 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064214844 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068682364 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064858151 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064259831 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062641385 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064583802 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062616234 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069058133 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062652189 seconds)
  done (took 2.950952168 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.11960374 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086893747 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.161022886 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082608256 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091766892 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074930602 seconds)
  done (took 2.132555511 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.097190157 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.100754274 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067874029 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068331064 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072961291 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071505693 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07109553 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071488096 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074813819 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074791864 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071040502 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074893077 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074553624 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076814741 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072738106 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073152515 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071085278 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071513318 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068194417 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078844293 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071618542 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074685441 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071286787 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071354823 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071427314 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077030968 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074785323 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075246411 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071214581 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074941946 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073094989 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071575143 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075204383 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075488362 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068285343 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075294056 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07156491 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078977956 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07316151 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077517988 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068246061 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073497879 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074689747 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074394159 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075283695 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071696455 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0746972 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07160284 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071627655 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080349864 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073586297 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077044201 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073517895 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075709282 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075261293 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080656786 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075678982 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077379986 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073614577 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075554134 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07714199 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074182771 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077479715 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075516684 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073223199 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077100001 seconds)
  done (took 6.43469064 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108665816 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069067842 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071550484 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07535798 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07699808 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071794614 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071967046 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071838355 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071627128 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068646338 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108271573 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072011948 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077069697 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.080463328 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071830323 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071401224 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071752896 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076785339 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068690452 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080128159 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071679595 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076921581 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077010844 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076753485 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075597842 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073652 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071777741 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071817895 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071592814 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071589107 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074922561 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071631182 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077064593 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.070031596 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076814253 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072128923 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071679031 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074804208 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071542166 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073224997 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077102498 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079403141 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072182267 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071577192 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076276057 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071840028 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071845464 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069134548 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071704521 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069296978 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075488295 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075662541 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075970211 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077214396 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072118215 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072200665 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072313577 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072561368 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072595116 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073996656 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077223002 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071900884 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081009041 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071915809 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071984189 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077634911 seconds)
  done (took 6.457277638 seconds)
done (took 134.078130338 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.236535424 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.198649455 seconds)
  done (took 1.917500484 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.077487065 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.197065464 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075089886 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.076385778 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.111482006 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108284219 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.104581117 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072491682 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07573752 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07448812 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.14172915 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.105027137 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072541321 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.094895342 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074368046 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.074643883 seconds)
  done (took 3.039863602 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.111247563 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.216282064 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084734767 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072928011 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.156047905 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07982895 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.074780309 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07944419 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079370061 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072393329 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.11000384 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.085848197 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.078523953 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.07945977 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074507947 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.077981578 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.079028837 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079193898 seconds)
  done (took 3.219655707 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.106547887 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.094762497 seconds)
  done (took 1.726675695 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.161160424 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105669906 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145461799 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.346799893 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137742459 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.13876131 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142951145 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.137836481 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11320152 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.13395412 seconds)
  done (took 3.075197357 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.108708366 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.107282241 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.312775687 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105759045 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.085142803 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079939707 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077450566 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082248027 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.078005234 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078661298 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125659905 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077827413 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074664036 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127778259 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102282631 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.110082545 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073107807 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.080519463 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082284066 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073213693 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077860015 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082411824 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.411689238 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.080599504 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.103288677 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.078017295 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.079270849 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076835705 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.076934254 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.080520049 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081320019 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.101850012 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080619202 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.084861891 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.078935494 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.099468237 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.0740917 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.101487046 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.07662833 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074633532 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077571829 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081444246 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074505284 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.081015692 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077338614 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.080042667 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.082513991 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073394448 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077947535 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.076582619 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074877807 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.078643024 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078059814 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07966466 seconds)
  done (took 6.66926377 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123410191 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.115394687 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072387077 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.12051905 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.112506615 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072867226 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.126134843 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.107895234 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.126007596 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072471207 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071382296 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071747868 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079513014 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083835107 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120832571 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.112735734 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072610018 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072792683 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.115022021 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.115002803 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071949821 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.110956847 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.117318487 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.113929539 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069130026 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070676868 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070149273 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071570329 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.079394092 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078528829 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071620757 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.081897775 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.085680216 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075704987 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069453955 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071031855 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070957966 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078132209 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080482781 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080619909 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077820548 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070850907 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070786918 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071093417 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072301545 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070131794 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.08044009 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078265305 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.080943123 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071039697 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071913796 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071351132 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071681399 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078329333 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077549335 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079803946 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.081839623 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071321374 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071188364 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072929411 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.08291364 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079822677 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079558046 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072743291 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080360189 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071661374 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082069782 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.083860908 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071729595 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071533998 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071448977 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07163901 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071756465 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077747732 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077761203 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071874787 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071213266 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071177663 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07948695 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077187716 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070983836 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079249674 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070567724 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070958023 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07172732 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071064931 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.078675027 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077507685 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071438627 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070093342 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070434866 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070465558 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069751539 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.078242087 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076754506 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.077583202 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.221482674 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.073018833 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.080711409 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078271997 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072179064 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.077786294 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071115848 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071693596 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071706437 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077601876 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.077301067 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.079123137 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071344962 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070765477 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.078029828 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080369915 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071372322 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.077147808 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.08032944 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.078168705 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070812847 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.08083948 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072076062 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080160798 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071479867 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079913778 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071775242 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077489839 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071569673 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070765069 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070960585 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.080554216 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071832525 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071310459 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071635351 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071092929 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077877089 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.084167913 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072279899 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078208283 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078181275 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071898109 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.080917488 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071523941 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080691697 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07186589 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071898684 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070637001 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083656931 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071136154 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071475121 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071251012 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080570281 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071683721 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079558294 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077543356 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070680998 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081779079 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080010903 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.078010761 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.080512585 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072718532 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071137391 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071940806 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.074702374 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.080172571 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.082090192 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07213345 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071416092 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076843301 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080340933 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071045843 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077468623 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077306023 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077945926 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071676974 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071212065 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081524843 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.083374587 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077938014 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080485281 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078668277 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071388006 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076752262 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080536248 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071317236 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085329053 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071474618 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.082110935 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.081093278 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076418721 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079973484 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.08041518 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.07918845 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.079364164 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.08083624 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070742144 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070355021 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.222615021 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.072510438 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072108215 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077810461 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072262463 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072089148 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083899217 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06975212 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079528656 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.070932018 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.078700676 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071128181 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071537199 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083283527 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071944167 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07151108 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077856261 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071658996 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.077331325 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081067917 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.078383271 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071414575 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071380664 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.081065611 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.080716529 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071999423 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071069402 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071661109 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07985627 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.079542603 seconds)
  done (took 19.317858687 seconds)
done (took 40.495644135 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172810794 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.118428023 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.215981668 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.20580956 seconds)
  done (took 2.333284588 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.104402587 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067614817 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.112441565 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.122626554 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.067897652 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.108150956 seconds)
  done (took 2.150332258 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203158955 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.1794299 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250834661 seconds)
  done (took 2.200855898 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.373362029 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.154296534 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221220588 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.509367175 seconds)
  done (took 2.925586359 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.143905313 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.133158813 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.080742928 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.144657128 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.087990552 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.064821879 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13677288 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.071880031 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.102119835 seconds)
  done (took 2.594866335 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.142873677 seconds)
done (took 13.907912203 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.164913483 seconds)
    (2/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.106939184 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.341527671 seconds)
    (4/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.28372858 seconds)
    (5/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.320944027 seconds)
    (6/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.116061121 seconds)
    (7/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.290889343 seconds)
    (8/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.129021299 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.128450511 seconds)
    (10/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.214095283 seconds)
    (11/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.098112996 seconds)
    (12/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.284757726 seconds)
    (13/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.320197137 seconds)
    (14/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.132240387 seconds)
    (15/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.250933751 seconds)
    (16/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.114228387 seconds)
    (17/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.183031351 seconds)
    (18/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.244242645 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.078894854 seconds)
    (20/341) benchmarking ("sort", BigInt, false)...
    done (took 0.274997313 seconds)
    (21/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.079190373 seconds)
    (22/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.076456376 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080419579 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.287940944 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.188174558 seconds)
    (26/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.113014852 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.080594687 seconds)
    (28/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.082588306 seconds)
    (29/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.298368037 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.163829207 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.121097026 seconds)
    (32/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.076909913 seconds)
    (33/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.091399594 seconds)
    (34/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.081070999 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.077540058 seconds)
    (36/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.114622367 seconds)
    (37/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.250459458 seconds)
    (38/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.20991792 seconds)
    (39/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.081097877 seconds)
    (40/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073343582 seconds)
    (41/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.085888485 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.184091407 seconds)
    (43/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.206151213 seconds)
    (44/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.067106458 seconds)
    (45/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.079938214 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.081981837 seconds)
    (47/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.204855694 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.081426716 seconds)
    (49/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080261587 seconds)
    (50/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.239194273 seconds)
    (51/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.258009745 seconds)
    (52/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073332167 seconds)
    (53/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.161118228 seconds)
    (54/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076006323 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.084053644 seconds)
    (56/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.31730482 seconds)
    (57/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.075631846 seconds)
    (58/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074622943 seconds)
    (59/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069942445 seconds)
    (60/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.214379059 seconds)
    (61/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.214503742 seconds)
    (62/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.312343803 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.200478068 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.080057879 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.094957585 seconds)
    (66/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.088475199 seconds)
    (67/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.186435037 seconds)
    (68/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.270481745 seconds)
    (69/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.151647779 seconds)
    (70/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.0687479 seconds)
    (71/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.068546884 seconds)
    (72/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.224179242 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.128739183 seconds)
    (74/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.06906844 seconds)
    (75/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.246654607 seconds)
    (76/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075282005 seconds)
    (77/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.088913083 seconds)
    (78/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076792853 seconds)
    (79/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.079101735 seconds)
    (80/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.166908006 seconds)
    (81/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.160599946 seconds)
    (82/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.241976062 seconds)
    (83/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.205127837 seconds)
    (84/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.077211517 seconds)
    (85/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.243366055 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076613441 seconds)
    (87/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.076441271 seconds)
    (88/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.166084797 seconds)
    (89/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075545769 seconds)
    (90/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.088052347 seconds)
    (91/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.131411329 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.099993286 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.091214374 seconds)
    (94/341) benchmarking ("sort", Float64, false)...
    done (took 0.140858189 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.091880818 seconds)
    (96/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.152435664 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.106381101 seconds)
    (98/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.088098128 seconds)
    (99/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.080523511 seconds)
    (100/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.067854948 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.06804972 seconds)
    (102/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073007575 seconds)
    (103/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.09121095 seconds)
    (104/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.068424757 seconds)
    (105/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.224895204 seconds)
    (106/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.077196921 seconds)
    (107/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.081257156 seconds)
    (108/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.068559181 seconds)
    (109/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.068403129 seconds)
    (110/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.069431417 seconds)
    (111/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13538799 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.096270563 seconds)
    (113/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.077022942 seconds)
    (114/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.094178187 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075841502 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.152793915 seconds)
    (117/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.070592373 seconds)
    (118/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.069245935 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.154893562 seconds)
    (120/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.068570994 seconds)
    (121/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.06673976 seconds)
    (122/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068860525 seconds)
    (123/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.068879871 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.090996565 seconds)
    (125/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.191034623 seconds)
    (126/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.078542975 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.07296441 seconds)
    (128/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.082710853 seconds)
    (129/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.230465611 seconds)
    (130/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.212850054 seconds)
    (131/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.087955283 seconds)
    (132/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.079761573 seconds)
    (133/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076085053 seconds)
    (134/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068288156 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.0777311 seconds)
    (136/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.168880984 seconds)
    (137/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.090737313 seconds)
    (138/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076963587 seconds)
    (139/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.077317672 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.093904304 seconds)
    (141/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.216105848 seconds)
    (142/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.072038272 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.068215921 seconds)
    (144/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.076725177 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075572319 seconds)
    (146/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067164032 seconds)
    (147/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.068229653 seconds)
    (148/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.15946826 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077556376 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.121506711 seconds)
    (151/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093044438 seconds)
    (152/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115320978 seconds)
    (153/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.070097411 seconds)
    (154/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.249822015 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 0.151146438 seconds)
    (156/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.171845759 seconds)
    (157/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.070706952 seconds)
    (158/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.077696768 seconds)
    (159/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.078305949 seconds)
    (160/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.208160683 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.077170872 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.079758599 seconds)
    (163/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.079077606 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 0.070927485 seconds)
    (165/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.077216452 seconds)
    (166/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.070738966 seconds)
    (167/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.090066323 seconds)
    (168/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.169891501 seconds)
    (169/341) benchmarking ("sort", Float32, false)...
    done (took 0.142809586 seconds)
    (170/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.069092459 seconds)
    (171/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.069170418 seconds)
    (172/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.227941883 seconds)
    (173/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.164898014 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.206389509 seconds)
    (175/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.06889974 seconds)
    (176/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.068758194 seconds)
    (177/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.208692539 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.068258914 seconds)
    (179/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.087139148 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.087631009 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.089674932 seconds)
    (182/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.069520772 seconds)
    (183/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.090142038 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.103822832 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.188686145 seconds)
    (186/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09823729 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078379062 seconds)
    (188/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075477426 seconds)
    (189/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.098015381 seconds)
    (190/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.067165966 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.137379698 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.155402236 seconds)
    (193/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.08097146 seconds)
    (194/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.068728749 seconds)
    (195/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.164663262 seconds)
    (196/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.069896762 seconds)
    (197/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.07374431 seconds)
    (198/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.073873235 seconds)
    (199/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.145963312 seconds)
    (200/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06916702 seconds)
    (201/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.068581192 seconds)
    (202/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.152908446 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.151083333 seconds)
    (204/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.167501906 seconds)
    (205/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.069142922 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.068731487 seconds)
    (207/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.149644916 seconds)
    (208/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089710645 seconds)
    (209/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06933047 seconds)
    (210/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073088657 seconds)
    (211/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.176464557 seconds)
    (212/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071566383 seconds)
    (213/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.070732525 seconds)
    (214/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.079442222 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066470814 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.136425195 seconds)
    (217/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.068907648 seconds)
    (218/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.068833681 seconds)
    (219/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.077672515 seconds)
    (220/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075368155 seconds)
    (221/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.06871978 seconds)
    (222/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.067779483 seconds)
    (223/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076116641 seconds)
    (224/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.156022037 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.075452585 seconds)
    (226/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.068664272 seconds)
    (227/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.069293846 seconds)
    (228/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.0693272 seconds)
    (229/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.073106239 seconds)
    (230/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.07822307 seconds)
    (231/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.150549695 seconds)
    (232/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.069246256 seconds)
    (233/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.076069358 seconds)
    (234/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.068213206 seconds)
    (235/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.168767815 seconds)
    (236/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068780794 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.07066689 seconds)
    (238/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.205255159 seconds)
    (239/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.07126146 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.128499245 seconds)
    (241/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.070713358 seconds)
    (242/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.069742467 seconds)
    (243/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.222224539 seconds)
    (244/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.068496125 seconds)
    (245/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.172518028 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068246326 seconds)
    (247/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.075802659 seconds)
    (248/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.228871128 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080057743 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.078448784 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068052121 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090017207 seconds)
    (253/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.068213974 seconds)
    (254/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.27802149 seconds)
    (255/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.327913226 seconds)
    (256/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078124953 seconds)
    (257/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.069101418 seconds)
    (258/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.077269862 seconds)
    (259/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.071865866 seconds)
    (260/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.070626091 seconds)
    (261/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.071685315 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069630796 seconds)
    (263/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.070117074 seconds)
    (264/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.076278379 seconds)
    (265/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.072026258 seconds)
    (266/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.076004756 seconds)
    (267/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.073040819 seconds)
    (268/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.069300809 seconds)
    (269/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.069758276 seconds)
    (270/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.206898415 seconds)
    (271/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.068559507 seconds)
    (272/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.069238331 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068543053 seconds)
    (274/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.066728344 seconds)
    (275/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.195556032 seconds)
    (276/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06884352 seconds)
    (277/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.068733359 seconds)
    (278/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.068645963 seconds)
    (279/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.068275003 seconds)
    (280/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.068435895 seconds)
    (281/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068079218 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.068383752 seconds)
    (283/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.157339363 seconds)
    (284/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.069636271 seconds)
    (285/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.073751257 seconds)
    (286/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073222268 seconds)
    (287/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.068481074 seconds)
    (288/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.068793122 seconds)
    (289/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067572575 seconds)
    (290/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.068432238 seconds)
    (291/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.069220514 seconds)
    (292/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067969428 seconds)
    (293/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.066521574 seconds)
    (294/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.097632907 seconds)
    (295/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.070086072 seconds)
    (296/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.069162569 seconds)
    (297/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.068797268 seconds)
    (298/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.073305408 seconds)
    (299/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084069102 seconds)
    (300/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.067374415 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.068242481 seconds)
    (302/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.068684814 seconds)
    (303/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.211867995 seconds)
    (304/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069024635 seconds)
    (305/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.066636151 seconds)
    (306/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.154158388 seconds)
    (307/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.068626643 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145684462 seconds)
    (309/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080472988 seconds)
    (310/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.070329674 seconds)
    (311/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.068025044 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.093594684 seconds)
    (313/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.0680889 seconds)
    (314/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069515556 seconds)
    (315/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.068500404 seconds)
    (316/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.068757507 seconds)
    (317/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.073199769 seconds)
    (318/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.068063524 seconds)
    (319/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070762955 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089298904 seconds)
    (321/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.070878121 seconds)
    (322/341) benchmarking ("sort", Int8, false)...
    done (took 0.15367015 seconds)
    (323/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.070750178 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.095102599 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151263816 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.069266421 seconds)
    (327/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.068465929 seconds)
    (328/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.068228531 seconds)
    (329/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.068974893 seconds)
    (330/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.076516566 seconds)
    (331/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080228842 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.112502883 seconds)
    (333/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.068863868 seconds)
    (334/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.068724861 seconds)
    (335/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.06720031 seconds)
    (336/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.068363125 seconds)
    (337/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.067996368 seconds)
    (338/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.070072802 seconds)
    (339/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071355129 seconds)
    (340/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.068207405 seconds)
    (341/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.068650749 seconds)
  done (took 40.280140904 seconds)
done (took 41.867088043 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.128976513 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082505204 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080634325 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077275781 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.080799868 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079407492 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.080351712 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07841104 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080337443 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079033839 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.112109541 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067520131 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076118999 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.083538741 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077050973 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.083863948 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.080597346 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.083667771 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068363154 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082292991 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092758273 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080137676 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077016286 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.082073345 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.068710806 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.077501788 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.124742062 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087530678 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073392479 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.077967444 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076303532 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.087248527 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07599949 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.074707357 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.077759607 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074258956 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078104375 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.075309324 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.12432474 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073805093 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068309246 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080182431 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.075513867 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076125078 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076730242 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080009717 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073652181 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.081545114 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067374407 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079202129 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.124600222 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073271898 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072635561 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076435615 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073264792 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077420045 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072276016 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.079672094 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.07314355 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.079816118 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077263308 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076780724 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068162484 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.076990934 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075386985 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075440755 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.066927049 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07322405 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067711368 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068046298 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067214952 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077119079 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.074885934 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.072929578 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067204452 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068100614 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067379704 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080474893 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.07446593 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077447916 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068585439 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073351557 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073151215 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068438374 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073633328 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.07973149 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.067084009 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068519671 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067928571 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.083156907 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074853711 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068109447 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.079784096 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07375256 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073539839 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068189769 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067368198 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073583626 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076213492 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.067983109 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.06717108 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07353695 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.072652637 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.076902454 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.068699737 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07311564 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073356745 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066850979 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07666358 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.075235176 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.077182503 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080277083 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075852646 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078932976 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067491074 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066068058 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076868992 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.067565752 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072906639 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.22881886 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.07451166 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.077092501 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.07041523 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.067188659 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073549256 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074692077 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.069001504 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.068430911 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.06833541 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.077439318 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075637 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.066962824 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.068101505 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077095415 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.076934694 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067089456 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067110443 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.077476986 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06848966 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074296615 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.073927815 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.076608028 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.067527779 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.068176981 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.066740583 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067150759 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.067321029 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.073555249 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073487555 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.068835402 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.076740128 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073998714 seconds)
done (took 13.428858319 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069407802 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.111344817 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.119385475 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.115383218 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.082232873 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.069722646 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.072840789 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08805409 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.072162399 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.093938899 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.09452708 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.090815728 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.135229406 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.067650164 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068678884 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069664087 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067164132 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.080937203 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.117518039 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092584096 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.105555961 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.068463409 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.084961672 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.088832536 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.083205505 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.087136843 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070023912 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.069289196 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.071328422 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.087226528 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.094529236 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.06791273 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.069532514 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08750587 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083839601 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.077281708 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.069548548 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07447069 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.071863264 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.06822339 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070296176 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.086389046 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.074602779 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.075078412 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.06926981 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.069617573 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.06898125 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07614867 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.086330789 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.074211426 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.080735551 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.087689467 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.070388914 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.068957318 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.066882837 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.075828051 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069780759 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.069346552 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068963847 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.068792238 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.068993062 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071363318 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.074116691 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075832565 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072540335 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.075384382 seconds)
  done (took 6.92655474 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.086202756 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095523486 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.083540573 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.083781493 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068358198 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069306631 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069363536 seconds)
  done (took 2.26634772 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.070445646 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.109519277 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.116115672 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.118491689 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.125307319 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.116301214 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.069512935 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.101420848 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.068555505 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.111408407 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.125710903 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.120356726 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.072086886 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.081369478 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06910815 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.11889014 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.069553345 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076098129 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.11524836 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.120853381 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073042695 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.101055635 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.08248816 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069352568 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.117553132 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.111716696 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071196461 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069256892 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.071609524 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.068589852 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068486297 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.091865636 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.110505314 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.075932799 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069356723 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067936467 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.108993287 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069933468 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.108722312 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.078158025 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.108824417 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.071189675 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.071561243 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069212855 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070430253 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.113387595 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.069986279 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.068745177 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069034744 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.112252791 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068051335 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111342892 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071473122 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074450092 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.076300601 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07544029 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076546769 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069497586 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.112718881 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.078955753 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.072282825 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.122667627 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.121854091 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.109515147 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.122449021 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078069703 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.113187087 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.110246265 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06880774 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068627078 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069426847 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.122272175 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072414008 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071258985 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.073973747 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07599803 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.113447398 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.124774143 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.124881193 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.082461323 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.071179058 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068420686 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.074951534 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.282216487 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074915197 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069744058 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070730272 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068799833 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074125213 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.071065667 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07407998 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069075243 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07991965 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071873649 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.071157016 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.118982795 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069137062 seconds)
  done (took 10.385950407 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071665169 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.071513007 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.070335963 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.070359083 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.07052925 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.070580953 seconds)
  done (took 2.158787598 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.093615542 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069780059 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.08091216 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069102788 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.092084229 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.113982487 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.114724548 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071597478 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.086061665 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.080072824 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.113929703 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.116678641 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.117185604 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071534555 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.114544878 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070176241 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.114908693 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072395025 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.079958396 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072089637 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.086445278 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.071752152 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071650267 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.120677163 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.072731653 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.070638115 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071164545 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080253929 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080184925 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071772206 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.072052312 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.072594256 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.079732587 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071836001 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.115190233 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078391131 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069820723 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075022008 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072480612 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.072532451 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.117707523 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071745353 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071672896 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074893372 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071304867 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.078063897 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075383443 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073296424 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.114626807 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.079630103 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.074714559 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070559473 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.072168243 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.074793927 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078814525 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071537645 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075202699 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.11441345 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071000072 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078536762 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.069469454 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.072429157 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071378339 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.072397006 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.07519727 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075311912 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078898371 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.07166821 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071879376 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069919391 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.074913063 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069677038 seconds)
  done (took 7.585419236 seconds)
done (took 31.016843327 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.551335774 seconds)
  done (took 2.242464967 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.942022304 seconds)
  done (took 2.676533713 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.197924017 seconds)
  done (took 9.939530972 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.350607911 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.423098711 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.748921442 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13830058 seconds)
  done (took 3.444920703 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.768687919 seconds)
  done (took 2.514931655 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239553528 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.230177263 seconds)
  done (took 2.225358084 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.378982774 seconds)
  done (took 2.115228718 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.215913243 seconds)
  done (took 2.94944092 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.239745944 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.169294068 seconds)
  done (took 2.156274173 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.65176887 seconds)
  done (took 2.392237809 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.566548247 seconds)
  done (took 6.314106495 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.249438746 seconds)
  done (took 2.040624299 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.234776468 seconds)
  done (took 1.974517961 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.063855764 seconds)
  done (took 3.798021742 seconds)
done (took 48.537785586 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.088181441 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.090303838 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.090499512 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.08565968 seconds)
  done (took 2.064234229 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077677706 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072830147 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.076441551 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076844692 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.074384193 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076035365 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.075892956 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.07275 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074168882 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073200554 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071996743 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073056994 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.075585614 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.072843248 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.075924772 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076823857 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.0732503 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073549421 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075507174 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073035004 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.07571896 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.072938115 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071167702 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072811877 seconds)
  done (took 3.521135395 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.082144677 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.075037326 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.078419215 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.074232154 seconds)
  done (took 2.063891885 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080188061 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07930222 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.088551745 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.093946463 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078947817 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.080289258 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.087698451 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.087834134 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068681573 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090259544 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071418543 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.070044884 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070240224 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.089311592 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.086811506 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.065045186 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.066543315 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080322636 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.079453907 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.082456125 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.071285696 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068238095 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.079104897 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.079819911 seconds)
  done (took 3.647390728 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.08610279 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.068505414 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.085602653 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.094508822 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.095795067 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.068220894 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083513931 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.097258686 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.13246836 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.068446174 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075300342 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06856423 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.10860868 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068582226 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.085784974 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.113657488 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.116459593 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072822343 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102344224 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068803191 seconds)
  done (took 3.523625035 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.083223653 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072402561 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073279326 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068587402 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.079932761 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076843209 seconds)
  done (took 2.219812699 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.071889971 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.070906219 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.073383015 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075483667 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070742148 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.07125125 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070208928 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069252987 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069130287 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.069947698 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.069982427 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070030096 seconds)
  done (took 2.607731312 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215889973 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072726629 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.07241056 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.069536283 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.070756472 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06970189 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.084033368 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071454125 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087472029 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.069720614 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.069789632 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072077452 seconds)
  done (took 2.781103962 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108729368 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.114580095 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148093248 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120655598 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120726079 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099998135 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.166384546 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096542811 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.165547509 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.142911019 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121044097 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097605802 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089837104 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.072821281 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103325397 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122114859 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143970763 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076339488 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117440944 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.212191941 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133589111 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.137369045 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14951727 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120540111 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093510774 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.151764624 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101182278 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105477742 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128437084 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129973696 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122702547 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.101598797 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074541491 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.074315464 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153882739 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108473331 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12514794 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.096541303 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108499942 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091980593 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111481949 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072710598 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.086643141 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.115286869 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088660208 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135682956 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091906671 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118149255 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083540066 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.139917985 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.287542075 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141487585 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089747615 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109649185 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141979113 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115237056 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138034464 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110695265 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086054426 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.123609608 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.106062644 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104401501 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111072098 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083387968 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.181380919 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091990666 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11596134 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115578738 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.097742345 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098176981 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111458311 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.140295412 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130404908 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.129872636 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142399137 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099146012 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12594527 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.103944624 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.133961304 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109274832 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.07641691 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.124920117 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134539102 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103131727 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106170738 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133263564 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096372096 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081129211 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.103619007 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.123475512 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083386956 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.116508724 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084102618 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.114007857 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137366395 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100731842 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115383405 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119656726 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080385361 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.322117548 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112764837 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07621424 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.12171312 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118220706 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161291155 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099682247 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080009088 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105272189 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107860012 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.152925106 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110419609 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083027596 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114167818 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143482277 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098273115 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.217368825 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099198348 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144944577 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11487071 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090975421 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077903288 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.093419837 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116375674 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111795005 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116934368 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094063513 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.087805927 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090718985 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11573492 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095986693 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084400763 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118135294 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103492603 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.078150263 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092238255 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.083191524 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14664535 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.081595914 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142223536 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130127275 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080672503 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111469141 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102123568 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114393614 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.101632854 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121220926 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145381574 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.118540743 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093811957 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.098153605 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112995225 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.150308807 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129596737 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09426225 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.079005614 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103419535 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.284281202 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102201659 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129709997 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099305759 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112230147 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106311108 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145225499 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147803853 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104110261 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106436789 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110383412 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.12657339 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079619832 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160328863 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107878658 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121996247 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087539831 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145398111 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.116539458 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093113623 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090841753 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10419106 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10775147 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111883105 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149027107 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.100487143 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.075861833 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097176552 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.149749467 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079898772 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114755186 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.09463912 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.097221757 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123285659 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.09743961 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084626629 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071497237 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131145845 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.164513094 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.072707287 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118672135 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11224021 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107659367 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.126024875 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072988166 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124123349 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.148135208 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122494057 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145603667 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149256266 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118400077 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.289959869 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.119345873 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110085565 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083589739 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.129810674 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.138930172 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099646355 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096121052 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138654033 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123181104 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.140501944 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.118998897 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117791389 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.108334601 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111228446 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106506167 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.106354362 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149517365 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126032156 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.128409382 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089402764 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110442472 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122166515 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140225841 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085790512 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147091806 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.088040463 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122521619 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.080614389 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128124476 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080886535 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113172713 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083263899 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105448019 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073567129 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.077443966 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146952365 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.116992863 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110613646 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104127819 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.14295098 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.14122179 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082443267 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112511047 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119991631 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105677212 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120968521 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113460068 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.092896748 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097331681 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11264385 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087926806 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.084260714 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.285171359 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098532511 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131221002 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088018996 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078819177 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144549368 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107676454 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098424337 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081301811 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111150781 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12482095 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096245141 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090914942 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118407805 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108404431 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145318914 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094022 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101437012 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.128403957 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083504143 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.095292882 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.07438252 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088775308 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079494667 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.131249334 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078805936 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119888851 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.07171317 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13478655 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09050952 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097109843 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106262614 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117688114 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133226983 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099080953 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146306373 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093431742 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12233981 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111690646 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098160468 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091989044 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108019071 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104867453 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126960019 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.099926781 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127395503 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149367993 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108462439 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146804594 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095078094 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127759179 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111848525 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128715303 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116293213 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149527985 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138815412 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.279459679 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1170931 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079282882 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099299045 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109521003 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.115275663 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178576633 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129060087 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.075436846 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109229795 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097765247 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111459321 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108045424 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085473049 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149592963 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105363405 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.092015522 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116438231 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.09455967 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107841544 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079199252 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099450749 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.10466514 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098339048 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101966475 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118914566 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131918476 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117046864 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147827302 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.10243801 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.095906313 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122780533 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114884092 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11444577 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089712297 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090061035 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142786079 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12334654 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.130554557 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.106411499 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113710292 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115962827 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104944868 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130977131 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112473811 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.132274854 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08388598 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.0803033 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.071846589 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.075419986 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128123453 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111510152 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11376777 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100707209 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.07624803 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.271628215 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111573194 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07589425 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09242177 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097828271 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098840199 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.095029025 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110687407 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115791088 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.094443881 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107752565 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102977446 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150111124 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.104577341 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091776497 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147762284 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.153086644 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090297342 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095880171 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07434693 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082142428 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116541554 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152914058 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.155116478 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080724327 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09033922 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.089002706 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090058241 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074484252 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.090056142 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.093733631 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110121058 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103617452 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.116868359 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109880804 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079002469 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107523151 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103292404 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096230293 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108940117 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12295689 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.130054758 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.147044974 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114370775 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111344141 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079563901 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084148843 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079349446 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082910346 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105859119 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.08332916 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079596511 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.148271199 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09587893 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109110022 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113525262 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092006844 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078296588 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135949169 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.07144639 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.304050679 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075265176 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086019389 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.086375721 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082573995 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097219091 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142555374 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112581887 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115868354 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111065111 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107694744 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144324483 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160033861 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082892537 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147183933 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079197396 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078805449 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078846139 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117187803 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093089051 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119063172 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143491363 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094882641 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107797518 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080292042 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147930046 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.100872575 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108960601 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090747849 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082740246 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148299216 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085106647 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.084402058 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094090251 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115585562 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.0759058 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108987449 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089150951 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083497039 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148189528 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.634945103 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094153042 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.079280114 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100390755 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.148402825 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133039552 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099781294 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113452904 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.123728106 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104370889 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099595021 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11272124 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185901133 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07694113 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097316318 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105860611 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.268393692 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1066849 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.102452933 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.08927455 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09711793 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.090623334 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082672528 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110965505 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092517992 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099916683 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110639042 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086361355 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.090510049 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134259704 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.107245429 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.085372048 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091558317 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.106621803 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091980825 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103922762 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071952991 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116727936 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094192648 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120644876 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098184238 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111180392 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131219021 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093386395 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142458178 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.110271821 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126806027 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091614911 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.081912252 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129830163 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.092469636 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081284455 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149402226 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.099373188 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09443928 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108355145 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.101048718 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118194993 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121006826 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116994667 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101684754 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082957172 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104950724 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.107658144 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089681301 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08276689 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.078541024 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.080090533 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112310401 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089570077 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08712176 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118809599 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092972438 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10747635 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.104541831 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.290599248 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087997137 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105458345 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115092831 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097052518 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113949128 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105624675 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132437456 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178686572 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128902747 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13319161 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138173986 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080579195 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079013099 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.07192508 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120692297 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082958316 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.092616348 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084888728 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138075793 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.085424551 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115198141 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.235826889 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084174007 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097784218 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100264669 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073250228 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087009384 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111939222 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091653689 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084269725 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123410666 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086915317 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.133621337 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115816626 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104265098 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099241738 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084852213 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118424021 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106603065 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.135289463 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09875606 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.078821471 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118904269 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10729681 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142904102 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.076101455 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084358181 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13469373 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108239858 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138433658 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083940317 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156243645 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147000473 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102799708 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136097577 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.241256048 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087797709 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093404809 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.132120688 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087977781 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114682268 seconds)
  done (took 70.75072137 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.160000544 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.14589779 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.0830552 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105133279 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189689044 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.200242701 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.124159754 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.139975824 seconds)
  done (took 3.05131572 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071881421 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.086782256 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084074542 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.255871684 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.10065301 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.071227037 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.076370417 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.085221158 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.070819881 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.070589309 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.105060314 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.071287564 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.070718489 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.542381794 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.069499167 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.076281102 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.070704547 seconds)
  done (took 3.880566439 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.339062621 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.124676122 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.263595094 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.404535704 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.147982208 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.558445587 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.080739156 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.086951328 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.708163188 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.374136845 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.141069745 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092553117 seconds)
  done (took 20.232466866 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.080893072 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.127396328 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.126919991 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.078373017 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.077799361 seconds)
  done (took 2.388690851 seconds)
done (took 124.488979572 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.087877369 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.181134563 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071881699 seconds)
  done (took 2.185770236 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.126277673 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.125065463 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.124282763 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.122677231 seconds)
  done (took 2.403547823 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.078700933 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079885817 seconds)
  done (took 2.062528828 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.229798191 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.222691336 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.095751254 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085897737 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083127424 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.083547333 seconds)
  done (took 2.170375657 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.075257999 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.07443863 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.075201918 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.075412008 seconds)
  done (took 2.19932777 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.175172973 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070260742 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072241877 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075017814 seconds)
  done (took 2.302091811 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.090590058 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.092437998 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.122552602 seconds)
  done (took 2.215700682 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.087093247 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086628384 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081238396 seconds)
  done (took 2.164258524 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.114257116 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.10133912 seconds)
  done (took 2.117923534 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083613687 seconds)
  done (took 1.994001697 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.095109364 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.103085803 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.191290865 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.157852197 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.19270275 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.179037185 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.080098674 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.08143431 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.076527348 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07533189 seconds)
  done (took 3.135914126 seconds)
done (took 27.486999226 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.088734444 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.380579832 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.363372886 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.091493773 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675992849 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.361951501 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.005408473 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09534692 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105557253 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071684156 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089544208 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652076409 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.99664834 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.329647971 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.982523873 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.327060036 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.656576976 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072500198 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072098183 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072452064 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.990552925 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071096916 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072003896 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07201482 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652890948 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.379443084 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07331178 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.323687727 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071768958 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075828572 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.361453189 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073007333 seconds)
  done (took 16.593496815 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079744788 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.133070912 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07587526 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088716919 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073839182 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072775058 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.074696712 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.072218828 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117243889 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072207288 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090395061 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071134269 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.075703525 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073087127 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09252714 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.07200031 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074051676 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.075941302 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071660609 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072792288 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.090758049 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071415951 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072544052 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072767061 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.072475026 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085002172 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07273808 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.072042597 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072080114 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.076084833 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076626144 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07356585 seconds)
  done (took 4.471115239 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.132242612 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.136656338 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.076747845 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.114187489 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.123090615 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073930863 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156448975 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095651134 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.120067124 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072036454 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090631198 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071798822 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.108431846 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073738516 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09309728 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073685792 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.075286132 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072715663 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071923518 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.072727918 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091618081 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071668238 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072781128 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073301891 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.072424933 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.087576035 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073216101 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071952049 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071854442 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075990917 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076693186 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073293708 seconds)
  done (took 4.756150124 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072919919 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.074502328 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.08102452 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.08411957 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06915926 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071886647 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072732367 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069918749 seconds)
  done (took 2.53963614 seconds)
done (took 30.295316878 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.083208716 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070674915 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073902134 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.091251733 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076759028 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.116610675 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067807288 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077878431 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.074210582 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07432573 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075963267 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069737633 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072923772 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067610331 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.075020178 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068426502 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.118026524 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072970353 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.115745514 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.118606379 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.071215895 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074415985 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07738707 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.11671176 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.117470726 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.1176416 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07817783 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.076134353 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.069802751 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.072101228 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.176063805 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.189923685 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.078746658 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.122728822 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.069014836 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068944457 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072894613 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.071522363 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.119493246 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.078211317 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.07156936 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.078516496 seconds)
  done (took 5.62933038 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.195260301 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.201914135 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.194403458 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084377241 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.095888747 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.082792656 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.198951349 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080480129 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078649549 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.199791837 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.07456469 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.079511296 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081371332 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.072362381 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078688205 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074944428 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080619112 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073339382 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079367999 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079457655 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.197766145 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072122746 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.084210606 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080441332 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07386384 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080216899 seconds)
  done (took 4.730884513 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.076325809 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.092531855 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.096384449 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.15298718 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.113457301 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086101656 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086177894 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.097540426 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.104819012 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.071319859 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.075155828 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.099671319 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099753766 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.078005562 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109562745 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088991011 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.083639716 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072374334 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.077737553 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105987218 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.095329526 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089509037 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.103774808 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090957293 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069801569 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080026156 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.077663726 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086731259 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.07817005 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082692055 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074602096 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.074278323 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071280739 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.083595008 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077937841 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068353917 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.136042104 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083258044 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085171626 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.110019804 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080831819 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.07230452 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.09925858 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13755239 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.070514203 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.073502717 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074799923 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.083216606 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.072142132 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101248462 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087908863 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070564456 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.090437752 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.072354575 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.072438383 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087943647 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.072273081 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.073013621 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082703307 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.077252017 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091798456 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07610453 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.092845221 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.070836358 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081959801 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.072093609 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.072242774 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.069725397 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105624427 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077963866 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.123580712 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.072097331 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068455919 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.083045443 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.082571397 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07796196 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070491443 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.090929248 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.083310756 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.074317375 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.082094843 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.073427156 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073939189 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106733272 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069593751 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.06866589 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06848271 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.073237853 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.074101041 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.071057706 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08454561 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.070066576 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.074376802 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.086797696 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.070892063 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.071496962 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.073285614 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.07202526 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.070359328 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082098553 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.074960588 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.072568134 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.083745437 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.072051319 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.074303605 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.086123708 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080880398 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.070142852 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.072239982 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.073004154 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072214807 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075109758 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073524818 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.07263915 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07752516 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077612449 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076472401 seconds)
  done (took 11.633298017 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.211957773 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.203504461 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.072298347 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.198367474 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.079864699 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.124555092 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.199314748 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.137255202 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071231582 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.072485545 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.070134008 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.145121101 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.141109515 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.154792308 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.121904171 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071389836 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.097217396 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.150883096 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.200238483 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.19696134 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094743859 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078771756 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073735193 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072508002 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072300655 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080267187 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.09000575 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.080063369 seconds)
  done (took 5.358880476 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.07891405 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.086963917 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074974908 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.095952055 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089425994 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071663785 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.073397584 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.07227993 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.089050694 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.078125742 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.071178541 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075728192 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074854722 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.072000021 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072384982 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077824227 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.07803709 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.07046855 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074863405 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075916555 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.082163224 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.158136564 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07589795 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071589283 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073794902 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.071644976 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.078660722 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.081189033 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.07154719 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.105701945 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.068541444 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075734213 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.086030134 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.072519963 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071013919 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071947729 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070865604 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.0709812 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071531184 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068935539 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.069053288 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077054584 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069649832 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076847243 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085605623 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.080141834 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072658475 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.076927045 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073707035 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.068066688 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.074624943 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.074358242 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07422853 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07978141 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074843845 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073713254 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.073052527 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100073343 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.077569377 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.070936635 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.07109161 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.069611062 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072899157 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.079900578 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.088212201 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072946457 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.069607011 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.071469974 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.079773438 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.085847625 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.071077553 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076418001 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.068212515 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.071170747 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073765021 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.074141865 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072840142 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.069795309 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.071295083 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.071302642 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071996293 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070815963 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071240837 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.074343948 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.069233295 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069262795 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.072106043 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.072646574 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.078222846 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.070724669 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073974596 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.073062833 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.0700927 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.074192214 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07730509 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.074389053 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.091992982 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.080499135 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071910737 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.069370856 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.086460712 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.073419744 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070582684 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075037689 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.076092081 seconds)
  done (took 10.004071704 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.095051346 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072633526 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.091618298 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098715264 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081597754 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.076344748 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.085686057 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.07200976 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088087132 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.07062275 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.080226 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069645398 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.085045438 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080525178 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072495689 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.081816757 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073355662 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.092005738 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.086081514 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.070259529 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.080387283 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.08415373 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.084212821 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.089877685 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.089130956 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.090115895 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083702579 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073859016 seconds)
  done (took 4.297636202 seconds)
done (took 43.583136455 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.035096901 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.191928526 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.020164488 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.251837079 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.065612005 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.272352981 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.107161392 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.008213707 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.235396369 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.03864661 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.34279082 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.381863568 seconds)
done (took 69.958281063 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.106508636 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.160034872 seconds)
    (2/2) benchmarking "String"...
    done (took 2.230954265 seconds)
  done (took 6.331217226 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.60452356 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.002862641 seconds)
    (3/3) benchmarking "different"...
    done (took 2.053053619 seconds)
  done (took 8.595484858 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.098972817 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.641298921 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.259200802 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.005369289 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.009501999 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.414832632 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.852492504 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.479866237 seconds)
  done (took 33.59896533 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.309647821 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.200482388 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.809639831 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.846267856 seconds)
  done (took 17.159751831 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.610087267 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.266413748 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.268119266 seconds)
    (4/4) benchmarking "different"...
    done (took 2.2663385 seconds)
  done (took 11.409935183 seconds)
done (took 89.341587916 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.007547909 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.111505067 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.045568434 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.155199321 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.038700896 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.035340262 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.006111239 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.026744111 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.004576942 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.006782323 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.429228138 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.020688721 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.016363107 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.018009102 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.005166691 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.008991476 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.072255271 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.016362725 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.063569512 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.598665959 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.436035616 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.01942191 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.01554302 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.053633191 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.214191744 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.041376982 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.523092152 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.026837031 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.614166716 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.007582525 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.184872011 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.001521551 seconds)
  done (took 211.761157859 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.001342106 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.934138817 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.987492 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.017481052 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.668451594 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.18892364 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.151910729 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.715533458 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.998419648 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.010932103 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.137587086 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.996207264 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.162888607 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.929742765 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.997809131 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.008022441 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.157234775 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.186137183 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.002765958 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.189508088 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.022204451 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.919017036 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.887336314 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.138198279 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.015932502 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.03024751 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.007777823 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.035844332 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.187089437 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.134411055 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.015638877 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.049500343 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.205439877 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.861989441 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.018339985 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.015689832 seconds)
  done (took 177.918206033 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.184565246 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.013012256 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.062419756 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.14341558 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.781149376 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.73791659 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.003684477 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.002389177 seconds)
    (8/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.002149704 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.003217314 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.010018833 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.003549909 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.073480165 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.615080045 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.027421588 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.002270237 seconds)
    (16/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.005433606 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.005327222 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.598340515 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.008857433 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.004645516 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.004183096 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.068715638 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.373836258 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.137096913 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.003974321 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.015268942 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.141756494 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.011421111 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.004871403 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.004567277 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.140926741 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.005824843 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.084129002 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.136658106 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.013159454 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.086703932 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.007484037 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.511557639 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.00498707 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.005738464 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.007362452 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.068142491 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.998871485 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.118845754 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.096329355 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.999870749 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.018735863 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.202977432 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.686856435 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.003664671 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.006321243 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.005673378 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.005469396 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.005304848 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.247388859 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.000911984 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.031633654 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.642081425 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.005333642 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.005673016 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.008020947 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.005796431 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.006786949 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.013225109 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.044419296 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.818043969 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.018759463 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.391588983 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.820256792 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.007351502 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.321043101 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.065615387 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.008753891 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.086339479 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.001748597 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.006181499 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.005216816 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.006660922 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.102413214 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.091710137 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.00317459 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.142485822 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.008076433 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.006484876 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.581478641 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.424623519 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.009756953 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.021423578 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.059622849 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.008037793 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.0092732 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.015049614 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.09817928 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.00451424 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.009256458 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.008618717 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.108933184 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.009291887 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.080640475 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.223978918 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.075725299 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.254009744 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.238202867 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.004790022 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.010580632 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.024049983 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.009968423 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.007155502 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.019909888 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.009603082 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.007628796 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.010422892 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.010122261 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.008842516 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.008682343 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.010812217 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.02401795 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.006827509 seconds)
  done (took 436.381355352 seconds)
done (took 830.237506845 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.696621536 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.759983315 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.596398727 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.629007643 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.597492161 seconds)
  done (took 15.217291001 seconds)
done (took 17.15363396 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.03083911 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.025957376 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.01389887 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.033207499 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.03182816 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.031887809 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.062703275 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.055510668 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.047483192 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.025714978 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.036061807 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.032452676 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.035229938 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.051610631 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.038810062 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.038199403 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.032784009 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.021911893 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.038652746 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.033937318 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.028714745 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.026644451 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.03198699 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.038392553 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.044708555 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.035017018 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.026762111 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.035019298 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.034476698 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.036447741 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.070843146 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.040510501 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.064649875 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.041344021 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.041165199 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.044439318 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.031436977 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.056857672 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.03265855 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.074177153 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.039607048 seconds)
  done (took 85.531428328 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.020665629 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.158373636 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.235236469 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.052301902 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.018721968 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.24663993 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.076509512 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.149542698 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.166172114 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.23646111 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.240201703 seconds)
  done (took 25.544242314 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.018424088 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.164716975 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.242586533 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.056424305 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.025015593 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.253190581 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.083396299 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.173324125 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.16029132 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.240361983 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.250649307 seconds)
  done (took 25.620236276 seconds)
done (took 138.63516292 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.410507717 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.044038048 seconds)
  done (took 6.392337401 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.014141903 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.029420502 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.165967761 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.013904983 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.012221237 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.013287381 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.012401533 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.013595767 seconds)
  done (took 18.212786769 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.011347927 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.011041777 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.009734556 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.009585233 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.009425296 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.009063907 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.008785101 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.010208502 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.009704813 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.004068359 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.003846553 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.004107438 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.004670787 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.00446752 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.003895851 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.002148209 seconds)
  done (took 34.053376462 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.003090409 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.001746751 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.998108082 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.998448968 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.000110574 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.999399605 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.005099039 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.001130656 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.9989689 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.999264936 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.998333927 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.000730418 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.997703949 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.997153726 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.99979955 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.997561407 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.000711118 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.999161857 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.999975557 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.999943838 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.998727769 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.999707784 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.002729351 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.998721685 seconds)
  done (took 49.927105008 seconds)
done (took 110.534797099 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.218691772 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.802175009 seconds)
  done (took 8.946410664 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.007616113 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.998218558 seconds)
  done (took 6.001106512 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.99937981 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.000207087 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.003741869 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.996290708 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.996809932 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.99645977 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.995740307 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.997727924 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.995282011 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.994797324 seconds)
  done (took 21.900472797 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.994768039 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.994664749 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.995568796 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.994723695 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.994085888 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.994618415 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.995594956 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.99495655 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.994739391 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.993518322 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.993277218 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.995678979 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.994919134 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.995507691 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.994614219 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.994337851 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.994341942 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.994939742 seconds)
  done (took 37.826066148 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.993264972 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.993685837 seconds)
  done (took 5.907266015 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.997858711 seconds)
    (2/7) benchmarking "second"...
    done (took 1.993585624 seconds)
    (3/7) benchmarking "month"...
    done (took 1.99395249 seconds)
    (4/7) benchmarking "year"...
    done (took 1.994425766 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.994552951 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.99491021 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.993571158 seconds)
  done (took 15.883947087 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.994938923 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.163597636 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.21806584 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.636686728 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.995663191 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.997517532 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.879692828 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.996464965 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.998888143 seconds)
  done (took 21.801930386 seconds)
done (took 120.191308716 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.32368014 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.994132571 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.358943816 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.078628819 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.060321517 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.294516266 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.033242685 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.545722375 seconds)
done (took 44.609594966 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.05363026 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.992350097 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.028681003 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.027890678 seconds)
  done (took 22.969585854 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.995183346 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.337605604 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.007183459 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.984499219 seconds)
  done (took 23.257444315 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.374031607 seconds)
    (2/2) benchmarking "read"...
    done (took 2.353205884 seconds)
  done (took 6.650403841 seconds)
done (took 61.854184325 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.991183697 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.992294969 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.994758774 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.989927176 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.988844311 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 1.989826003 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.989177083 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 1.994262527 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.987891053 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.988882335 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.988692961 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.988989394 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.992154778 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.988519335 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.988372964 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988453836 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988165238 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.990278512 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98433377 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.985675474 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.984263448 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.986244989 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.984908095 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.985166658 seconds)
  done (took 49.648473849 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.986295901 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.985201843 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.986233153 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.984608946 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.984726431 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.985316349 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.984682168 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.989180767 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.983824184 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.98407133 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.984029464 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.983696597 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.990123849 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.983407516 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.983278272 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.983148667 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.98343468 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.991223283 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.983401368 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.982975963 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.982364658 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982833557 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.982923258 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.984586248 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.982756499 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.983187563 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.983331802 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.985218225 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.983316885 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.983740956 seconds)
  done (took 61.450988458 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.983140935 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.986138938 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.982382916 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.981781114 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.983386274 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.983116088 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.98885757 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.983344056 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.981334028 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.981886773 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.982380054 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.988229438 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.981564168 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.981446123 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.981935489 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.983071142 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.983292622 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.982889367 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.981963186 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.9814043 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.982036597 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.982792171 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.981600849 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.982846328 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.982777099 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.981436988 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.983098503 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.982263097 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.982630266 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.981846896 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.98236825 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.987337217 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.981835848 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.982039409 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.981644045 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.981178268 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.985438574 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.985222527 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.989474605 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.980798747 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.981594199 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.986578601 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.981348487 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.981197379 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.980356832 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.981099307 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.980212513 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.983217117 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.981058476 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.980496613 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.980677663 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.980757926 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.984483634 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.980487215 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.981208397 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.980768304 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.981208819 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.983059682 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.982502517 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.980555973 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.979661537 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.981396827 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.987205444 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.98136938 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.981889811 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.979933408 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.981261861 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.987466069 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.981156587 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.983561685 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.980308526 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.980383724 seconds)
  done (took 144.656256298 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.980416923 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.980401114 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.980786656 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.97901734 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.981978105 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.979516524 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.980146485 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980384323 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981210523 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.985741073 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980471909 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.982183773 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981168717 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.980529653 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.985932872 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.979836191 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.979652128 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.982749805 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.980505894 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.981084383 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.980237185 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.979743747 seconds)
  done (took 45.493432258 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.981103548 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.981864057 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.980388709 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.978204141 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.980129347 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.980528966 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.979621219 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.977833267 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980853595 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.979995703 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981761221 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988594702 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.981242949 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981727832 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.980993613 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.980230397 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987614883 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.981149309 seconds)
  done (took 37.572110531 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.979478512 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.981487877 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.981377718 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.979635595 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.979647633 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.982459134 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980037979 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.980600888 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.978866141 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.979180749 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.980185225 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981140861 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.987049214 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.98087977 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981381383 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.980374627 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.979912396 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987506124 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.980854837 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.979710862 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.981071225 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.979803908 seconds)
  done (took 45.491314387 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.980970814 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.980376924 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.980964567 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.980703669 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.979399493 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.982178159 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.981229762 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.980450136 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.980729942 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.981263588 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.982950943 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.980145013 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.980356521 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.982130967 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.981231199 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.987921823 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.980946137 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.982219557 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980209438 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.980659192 seconds)
  done (took 41.537350921 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.981171467 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.980653051 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.981228098 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.980980432 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.982408519 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.982438045 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.981308216 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.98270745 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.981107791 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.983475792 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.981875055 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.982393427 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.982642742 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.98257916 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.985912727 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.984008553 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.982623097 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.982841443 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.982477197 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.988607821 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.984026946 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.98271073 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.981797309 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.983046732 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.990341157 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.983446694 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.983479254 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.983781027 seconds)
  done (took 57.441674909 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.985053377 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.98228976 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.982976298 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.982374267 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.982816139 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.984418682 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.983126473 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.983396997 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.983023133 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.983831973 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.987445291 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.982767932 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.983820976 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.982104383 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.984543221 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.98979411 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.983486144 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.983752157 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.984356104 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983754526 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.991824507 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.983815425 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.983845465 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.984340838 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.983510574 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.988768036 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.984509263 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.985152095 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.984083016 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.985734053 seconds)
  done (took 61.446671855 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.00302234 seconds)
    (2/2) benchmarking "in"...
    done (took 2.003060732 seconds)
  done (took 5.920665045 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.983721402 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.988182951 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.983979143 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.985984842 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.983430428 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.985023839 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.991238865 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.984557025 seconds)
  done (took 17.797955771 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.984245409 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.989047841 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.991006067 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.984491564 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.984840684 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.992734354 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.98590529 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.98725237 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.987478273 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.986704318 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.988331076 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.988155815 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.990867023 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.991682642 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.986245714 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.985871862 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.985940013 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.98805135 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.98786361 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.985995657 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.989186778 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.98555657 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.986249267 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.987077846 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.984901416 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.988008376 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.994708022 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.988257664 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.991902185 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.986397743 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.992300914 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.986215328 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.986023157 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.994042055 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.985918441 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.986227815 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.994156501 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.987882432 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.993019011 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.985878866 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.98943987 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.989364871 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.990330542 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.002418592 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.987163416 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.987322455 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.98649853 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.986527604 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.994108465 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.991064049 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.993155205 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.987199817 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.98687072 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.993653047 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.990565242 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.988434367 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.986569315 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.988343042 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.994881197 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.994822256 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.990797607 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.006042627 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.99590499 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.988599396 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.988641091 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.996927872 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.009040482 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.991425031 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.990106862 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.988315525 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.995563053 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.989340564 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.987846204 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.988754508 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.000094001 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.995643878 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.988337607 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.988474545 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.988704921 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.988965281 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.990861626 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.989006662 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.988855936 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.993970364 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.997321614 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.010182628 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.989042351 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.98855951 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.995454146 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.991107544 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.992385181 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.992086017 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.989657669 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.994737649 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.990500534 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.991964938 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.989820872 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.989705857 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.997938405 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.998614585 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.988760404 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.98933036 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.992367847 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.003856336 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.989527577 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.990191757 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.990604801 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.989803983 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.005794767 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.988706184 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.989208136 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.989311006 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.992136311 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.999903796 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.990853812 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.992759072 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.997130826 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.996811595 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.997732348 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.99431865 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.995590888 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.993069897 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.000177869 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.017340525 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.99098491 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.993999466 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.995117872 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.001371494 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.996819026 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.990968926 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.992342357 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.989967125 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.990313703 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.994265048 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.989510901 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.991187985 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.990565142 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.991069608 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.990766409 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.990558328 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.994554679 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.993252766 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.993468646 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.992829938 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.996312569 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.990678303 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.993382337 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.999346172 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.993641127 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.990226447 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.991337134 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.994592502 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.992380989 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.998093846 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.991826203 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.991201906 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.991528846 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.993947845 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.000559476 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.991626962 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.992326432 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.993308222 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.995863007 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.999800103 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.992801867 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.99423455 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.991577399 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.992788448 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.00201853 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.994405247 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.994940952 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.993520928 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.996936506 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.001720525 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.992819937 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.992955699 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.993098184 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.993763616 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.999478172 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.002635073 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.996588207 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.00164798 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.992869823 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.008661994 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.993293917 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.995618606 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.995245241 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.993860036 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.000888566 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.992904424 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.993307331 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.995655722 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.012917127 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.011859145 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.997174109 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.994449767 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.997123179 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.997281217 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.00751004 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.992845796 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.994092356 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.996577689 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.993180482 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.00170012 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.993644799 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.99752314 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.994040393 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.993711984 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.003507988 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.994090056 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.993845256 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.995305929 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.995128022 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.999121683 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.99323325 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.993527985 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.99593335 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.996731928 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.003714743 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.998127362 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.99487676 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.993939596 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.998054617 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.996768016 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.994137252 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.995989523 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.998978606 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.995731784 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.995639265 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.002258214 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.996997466 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.997052141 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.995199817 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.996087876 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.998282702 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.994420503 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.999569852 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.002351465 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.999038831 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.995366704 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.001538432 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.995292025 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.999471062 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.995928771 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.996674714 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.996095319 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.997425663 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.99580281 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.99660952 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.003140807 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.996869303 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.997320935 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.994875754 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.998799421 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.998119039 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.999495188 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.995422149 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.999176457 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.003571086 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.002441058 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.998281212 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.000278384 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.99896499 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.998182947 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.000144693 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.997310133 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.009200591 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.005806903 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.998265451 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.997029695 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.996533026 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.000744073 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.997508124 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.996202649 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.004512392 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.998452749 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.997814183 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.000761051 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.997107654 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.996897633 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.003588798 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.999588071 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.001310955 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.000689977 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.000023165 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.998485599 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.998096607 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.999984096 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.997395213 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.99952863 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.000548904 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.997947705 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.998980119 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.99917765 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.005658544 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.998880849 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.000438987 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.005542819 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.000363473 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.998244156 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.000446174 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.998452307 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.999578932 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.000768956 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.99921041 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.000278221 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.999225037 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.00266328 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.007799674 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.002680936 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.007453797 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.001044005 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.010554621 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.998596527 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.999528449 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.000234086 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.002719768 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.006897287 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.999512014 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.999395264 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.006700702 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.002055247 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.000295053 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.002553318 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.997781465 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.999000972 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.000673446 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.001673889 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.004201303 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.003750163 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.000202988 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.999799348 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.001560671 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.001679793 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.004794417 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.003643196 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.001406859 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.002242631 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.001525235 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.999477053 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.000340359 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.000995701 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.001699852 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.00045001 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.000344416 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.007952039 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.002465884 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.002858544 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.004936445 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.000689333 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.010350595 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.001828088 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.002578779 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.002649071 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.002145827 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.005145296 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.00128236 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.00162444 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.00294 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.002436377 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.003103583 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.01348686 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.01022978 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.005396154 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.004993739 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.002267108 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.002924937 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.010946298 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.022302035 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.002064248 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.003974662 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.005501583 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.009030135 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.005467218 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.008442323 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.005111534 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.009429201 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.005148396 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.003009353 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.006383759 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.015048017 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.002796598 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.004344787 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.002686836 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.00783862 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.005907658 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.003879194 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.005827885 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.00680343 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.005031925 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.014042007 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.003479315 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.006938896 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.004387267 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.003547843 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.003259932 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.002656234 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.006412274 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.006127845 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.003577186 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.004280023 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.005519535 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.009457008 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.004825911 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.007912736 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.013383839 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.004804702 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.004322314 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.006333526 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.00527946 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.00677903 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.004677077 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.00529421 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.008652991 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.00409553 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.006493027 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.0081532 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.012590678 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.007750483 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.004937024 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.003822843 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.009877606 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.004555808 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.005434291 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.00769222 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.014389597 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.009378599 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.015928134 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.015659084 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.006186852 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.007282184 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.012148786 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.013565588 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.005805183 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.006447257 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.005552967 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.008786824 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.007825636 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.007183969 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.006903498 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.007420224 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.010926299 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.005784431 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.007205423 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.006917059 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.007754791 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.008319748 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.008574265 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.012044851 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.006887705 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.00629264 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.006780718 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.007338268 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.008497902 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.010663405 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.00729464 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.007259556 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.009876862 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.008873153 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.012578445 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.007294179 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.007638696 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.009119995 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.007680819 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.007087854 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.008066421 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.008574894 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.006945413 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.012130281 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.014892835 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.007621382 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.008292657 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.00786796 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.012220552 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.007511357 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.009878071 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.007244983 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.008006638 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.016100256 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.008676083 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.007670858 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.010704788 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.007820294 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.014031868 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.010257545 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.013111704 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.009689633 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.009990121 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.007971673 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.011904057 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.016622715 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.012132144 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.011702735 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.015156542 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.013187801 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.011548168 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.007912113 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.008804765 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.010885056 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.011346418 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.012677395 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.01109339 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.012883658 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.008526542 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.010670471 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.008990857 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.012742594 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.00835558 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.008499046 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.012871629 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.017949451 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.019828849 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.009846419 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.012067536 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.009530966 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.013319117 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.018487705 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.009798031 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.01093993 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.010194228 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.012117419 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.012926924 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.016266185 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.018847735 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.014950672 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.009950524 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.015969603 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.027670353 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.013536205 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.019377638 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.038359823 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.0137497 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.01067642 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.013544512 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.011797166 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.012948839 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.014363805 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.012343489 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.018789279 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.013549327 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.011464577 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.019695199 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.012154976 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.011817343 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.011212825 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.012871919 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.0176233 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.011183942 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.020183884 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.012215367 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.012442976 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.013082907 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.015801242 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.011701356 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.011600273 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.01262666 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.014783719 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.012409918 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.011812173 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.020700314 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.011080219 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.014027802 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.024554152 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.022266868 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.012405759 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.01151339 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.012517965 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.018047 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.015199474 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.012425646 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.01640962 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.019567883 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.016005707 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.019587557 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.015439719 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.015122027 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.014050179 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.012414697 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.012338205 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.025121377 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.02296287 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.015297108 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.013783736 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.019494889 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.012264341 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.019803831 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.019189296 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.013944101 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.015172854 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.012388187 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.012368962 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.013395383 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.012464986 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.016406283 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.019193956 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.013145278 seconds)
  done (took 1195.000181033 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.012845744 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.012476266 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.013621926 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.013787457 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.013313815 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.014704554 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.014065395 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.013936151 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.013312602 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.013051115 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.014460523 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.014526494 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.015239112 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.015233068 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.011803921 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.014450898 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.014889727 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.013358176 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.01408792 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.012237453 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.014911639 seconds)
  done (took 44.229794965 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.01398443 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.01406982 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.013812375 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.014241124 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.013123571 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.013099391 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.014577688 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.013986615 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.015128391 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.014410911 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.017256776 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.015447504 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.01571326 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.014941122 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.015210263 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.014997704 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.015271982 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.014814877 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.014992733 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.01545445 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.013874689 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.014314855 seconds)
  done (took 46.263181341 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.015512606 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.016271145 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.016464868 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.014388854 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.015734077 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.015258624 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.015493307 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.018619313 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.016555475 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.017256271 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.023376951 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.023017145 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.014438658 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.019817757 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.01560671 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.015840298 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.167417379 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.017807898 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.015170696 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.015393186 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.016703205 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.021893844 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.016562606 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.015397971 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.017242624 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.016758377 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.016271171 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.017122259 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.015698774 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.017847504 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.021005707 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.017307527 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.018838932 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.020544419 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.018345642 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.018115944 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.022377245 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.017455743 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.01657475 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.017122114 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.027171652 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.037137153 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.018195949 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.01861565 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.025792429 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.016280689 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.017840968 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.020675718 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.023844297 seconds)
  done (took 100.997754658 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.017488143 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.018664338 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.018842115 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.017492068 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.017957607 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.017217929 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.018757768 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.018262386 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.016976406 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.01808936 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.018868934 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.020175479 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.018108597 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.019454422 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.018339744 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.018242443 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.018369671 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.019115942 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.019744176 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.018346346 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.018232099 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.019160484 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.017775819 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.019487761 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.019371334 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.017351425 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.019402581 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.019047064 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.019673634 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.018433888 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.01921032 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.019986139 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.019471018 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.019849392 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.020020258 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.019366583 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.021023359 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.020041681 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.020524834 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.019117479 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.020603673 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.020329899 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.020893955 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.019761727 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.020624409 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.02036959 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.019255923 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.020363394 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.021082984 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.019773076 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.019659962 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.019367693 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.020727749 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.021163257 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.020154179 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.020141705 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.020768299 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.020084971 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.019737183 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.022235525 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.020604491 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.021156688 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.021689632 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.020950364 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.020584035 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.021985352 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.020967973 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.020863647 seconds)
  done (took 139.276989704 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.020411401 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.020606985 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.021237627 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.022664101 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.020956274 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.02199279 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.021607873 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.021896162 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.021863673 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.022855446 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.022396648 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.02119185 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.021456347 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.02197423 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.021763834 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.021378832 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.022420474 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.02265498 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.022727632 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.023408881 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.023224747 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.023303889 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.022792876 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.022713682 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.023800125 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.022123528 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.023233266 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.022451463 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.022994851 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.022563988 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.022143911 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.02250389 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.022667847 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.023712821 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.023939065 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.022892969 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.02289819 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.022926804 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.023336926 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.023455482 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.024133964 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.023910228 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.023206242 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.024027091 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.023838978 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.023523567 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.022702871 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.023746703 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.024034068 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.024036991 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.022992648 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.023638372 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.023949468 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.023378642 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.024495214 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.023891364 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.023921187 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.023654442 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.023676495 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.023022131 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.023578146 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.025034103 seconds)
  done (took 127.369639047 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.023283574 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.023174986 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.025419707 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.023986199 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.024012622 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.023366921 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.023616458 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.02354745 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.024634789 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.024656504 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.023056896 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.025471296 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.026483652 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.023981716 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.025769276 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.024970897 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.025065661 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.024839693 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.025659815 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.024452779 seconds)
  done (took 42.440149393 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.024769999 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.024598881 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.0254767 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.026290364 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.024199458 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.025012409 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.025407522 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.023933578 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.025860709 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.025774838 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.026496945 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.026466649 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.025133047 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.026202039 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.026328965 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.025514154 seconds)
  done (took 34.358681888 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.025104608 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.025182201 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.026528551 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.026411587 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.026533292 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.026285727 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.025846042 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.026511726 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.025644546 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.027485931 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.025919071 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.026333707 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.02536721 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.026949507 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.027433472 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.025037265 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.026479861 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.026622884 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.026450466 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.026479759 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.028025653 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.02537792 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.026159754 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.025832381 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.026149922 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.026509343 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.02666766 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.026557194 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.027468102 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.027192555 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.028005398 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.027177992 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.027008705 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.028065963 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.026390723 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.026847962 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.027832358 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.029026913 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.027979632 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.027617375 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.027625847 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.028091397 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.026645375 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.02745913 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.028915908 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.02743227 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.027646931 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.03038301 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.027008571 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.027389029 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.028699423 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.027242202 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.027041551 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.028631941 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.028050634 seconds)
  done (took 113.437819289 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.028061344 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.028719575 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.027595937 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.027580301 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.028038166 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.027438268 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.02917009 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.02956032 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029680965 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.028275526 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.029439944 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.029709408 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.028703498 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.02886882 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.029542035 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.029476432 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.028029919 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.030169692 seconds)
  done (took 38.472165024 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.028499839 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.029319511 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.029413559 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.029525888 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.029292953 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.028877806 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.029646687 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.029634779 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.028988996 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.02994287 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.028993799 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.029464567 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030265208 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.029746092 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.029214791 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029429128 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.029098395 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.029173693 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.029534591 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.030372153 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.029232108 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.029736501 seconds)
  done (took 46.60213359 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.029946231 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.029578829 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.043948342 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.051311427 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.049064806 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.062974497 seconds)
  done (took 14.22282438 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030989024 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.031842612 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.032149189 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028828415 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.029801257 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.030459811 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030048022 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.031524985 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.029378479 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.031671177 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.029509589 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03109962 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.032135699 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030831574 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03058267 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030788062 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032580485 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.031744596 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.031833869 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.031349034 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030829306 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03153011 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032034277 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.031572434 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.031184212 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.030032691 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.031894135 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032063491 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.031577799 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032510352 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031647111 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031915911 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.031514233 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.033568964 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.032544896 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.031812851 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033792057 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.032734267 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032515552 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032246806 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.032036712 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033701499 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.032154226 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.032188298 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033168397 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033768512 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032308454 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03339684 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034338867 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033058241 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033094071 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.031975962 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.032755597 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032258932 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033303102 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033642523 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032398643 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03450612 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033058932 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033558251 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03401795 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.033109546 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032778885 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033653639 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033795477 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033714107 seconds)
  done (took 136.079450488 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.034349328 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.033113183 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03369189 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034154569 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03299333 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035692935 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03369048 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035244103 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034366122 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.033413773 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033961094 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.032484317 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034350938 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034205202 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03417081 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035467794 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035182288 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033819645 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035619489 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.034832316 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035263405 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035114761 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035250831 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035057704 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035176958 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.034897601 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034721606 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036117273 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035774588 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035789174 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035334133 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036177179 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033854708 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.033543666 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035610637 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035658537 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035547233 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035841445 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036568401 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.033907295 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036155786 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035030213 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036769911 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036094828 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037202885 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035600857 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035339528 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036292704 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03538939 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03508317 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0372591 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036605612 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036963818 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036404875 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037180964 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037080884 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035927004 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037600958 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035419642 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036838215 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037164458 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035806885 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037322211 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037008499 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036277718 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036482279 seconds)
  done (took 136.297209931 seconds)
done (took 2785.424349671 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.105379973 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.10769928 seconds)
  done (took 16.175316574 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.201673273 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.059872571 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.219132903 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.156341003 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.066481726 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.057022521 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.035254067 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.040078355 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.132244152 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.037634251 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.042602645 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.036344943 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.037992394 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.03830735 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.03958696 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.039034278 seconds)
  done (took 55.208699674 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.040530576 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.042745572 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.040607442 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.04065995 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.052583128 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.112551983 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.057482888 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.045197398 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.053801318 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.073423158 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.055948983 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.046385533 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.049052397 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.043859678 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.126340467 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.081757356 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.094506478 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.110274607 seconds)
  done (took 39.130567285 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.118942343 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.053511577 seconds)
  done (took 11.142831273 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.062655164 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.042555194 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.044055432 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.057631066 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.038512576 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.043502329 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.041702813 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.037301557 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.065908263 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.04106963 seconds)
  done (took 72.485753329 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.043789729 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.044922367 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.295271859 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.047616263 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.04896686 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.065577801 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.042545473 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.071931994 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.044775485 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.040906296 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.048092648 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.297854315 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.049558837 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.042586468 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.387371091 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.054473445 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.048390604 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.071627404 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.073356965 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.048060067 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.050193898 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.045271266 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.205550799 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.741931992 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.041410589 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.042765919 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.05015785 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.041342812 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.04026012 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.044677234 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.045482757 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.043034716 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.046585214 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.043665177 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.045920424 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.048200752 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.537655176 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.059980034 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.05171906 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.123333756 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.087765674 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.047315987 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.862551077 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.041956687 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.042485218 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.049835646 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.721114624 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.121428381 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.044491083 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.195136636 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.401547906 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.054854855 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.226996019 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.207509359 seconds)
  done (took 142.290213283 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.041196241 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.40441675 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.196134396 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.042453598 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.342766987 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.250668421 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.704888312 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.086568477 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.040788403 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.260517533 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.176254235 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.153616515 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.044171238 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.044519616 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.037161938 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.037798546 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.198626781 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.11099589 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.04067382 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.042318179 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.064787789 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.199279049 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.148855804 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.046859797 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.058235835 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.256923127 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.086602613 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.151576989 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.539319729 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.04207181 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.10446968 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.493998304 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.044204716 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.039991447 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.08305261 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.14188562 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.130838893 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.040864309 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.042208664 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.042820901 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.722255199 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.242684798 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.143833516 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.169115064 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.242485252 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.255822904 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.515254826 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.043963134 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.556944692 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.214145811 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.247136668 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.261282609 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.136112795 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.046901635 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.421339126 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.043139121 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.686765466 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.272155459 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.184943178 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.148989651 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.040558242 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.043016125 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.041312134 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.286407842 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.042924775 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.142587792 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.042714803 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.041526377 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.144491691 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.151434058 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.181908254 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.267416317 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.075298844 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.990036959 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.577311088 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.215818789 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.107854944 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.274585353 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.045070603 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.042694526 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.130076691 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.642656167 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.17222737 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.28845873 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.279896731 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.065003326 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.633408678 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.045080297 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.190188027 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.216545719 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.277409816 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.255910331 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.092387389 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.929766799 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.043853277 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.045364755 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.010871537 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.164851155 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.215179896 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.397784267 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.285045465 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.632803259 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.064296871 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.410958265 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.153303659 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.045119058 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.699456937 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.04645358 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.254657179 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.08839125 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.047580118 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.046821295 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.209467656 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.952493005 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.047204508 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.82634743 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.105074141 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.046267528 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.224802007 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.045032472 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.293043633 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.945740526 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.28509839 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.966866053 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.076732701 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.221490531 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.253468722 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.335982982 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.388223246 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.290380477 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.132570756 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.269544784 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.817931465 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.047627512 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.317865295 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.045594708 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.046931247 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.217494179 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.968374547 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.194654115 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.04755826 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.316870112 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.064841053 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.10021697 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.04712538 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.290051444 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.075822712 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.096642978 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.048932974 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.178251928 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.050795493 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.970425539 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.204046753 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.048847225 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.048052023 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.643047386 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.048917031 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.197359882 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.276362301 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.057637293 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.116854725 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.543354439 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.641870395 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.136699974 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.06741925 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.411344424 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.759714673 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.18160867 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.02830172 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.536070827 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.049001261 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.286486237 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.234484117 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.051644117 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.047885648 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.899836933 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.684343063 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.049072181 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.204892887 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.825601215 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.443342396 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.253102969 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.048770785 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.095871459 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.049281056 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.798416601 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.391050871 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.047419813 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.048925614 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.048962466 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.050359161 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.0535753 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.260378627 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.075452753 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.583006478 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.186671698 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.30942252 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.353763032 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.27013939 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.081449693 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.055526227 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.275537751 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.048402608 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.112787709 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.049870628 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.058727386 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.340313846 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.051249405 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.262125105 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.25507966 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.033762108 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.097358341 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.050183116 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.050558949 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.049517227 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.185196935 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.136523107 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.050404615 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.050004552 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.089616044 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.152165729 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.226889645 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.355185054 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.046841258 seconds)
  done (took 923.846350518 seconds)
done (took 1262.240656619 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.049739291 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.05189043 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.052767129 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.054472027 seconds)
  done (took 30.187958862 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.05398747 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.053545458 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.053109604 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.054902616 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.053344256 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.052708167 seconds)
  done (took 14.299828025 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.052012753 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.052870518 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.053459878 seconds)
  done (took 23.135683532 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.47982082 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.456511481 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.13166548 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.193792576 seconds)
  done (took 11.241882234 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.057112153 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.05397089 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.053871997 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.055061586 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.054262619 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.054607923 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.054861164 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.055263838 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.053822264 seconds)
  done (took 20.479772227 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.18332113 seconds)
done (took 105.507212907 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.062203558 seconds)
    (2/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.133962621 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.184204211 seconds)
    (4/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.153809226 seconds)
    (5/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.450670135 seconds)
    (6/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.054495823 seconds)
    (7/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.2590546 seconds)
    (8/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.088236955 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.360165224 seconds)
    (10/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.362795901 seconds)
    (11/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.908576884 seconds)
    (12/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.277517284 seconds)
    (13/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.243190678 seconds)
    (14/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.677999831 seconds)
    (15/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.153008131 seconds)
    (16/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.282660356 seconds)
    (17/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.143479949 seconds)
    (18/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.365422453 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.070861931 seconds)
    (20/341) benchmarking ("sort", BigInt, false)...
    done (took 7.055052294 seconds)
    (21/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.186426183 seconds)
    (22/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.131354427 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.069189454 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.179476482 seconds)
    (25/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.054328957 seconds)
    (26/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.961841813 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.076042922 seconds)
    (28/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.727089224 seconds)
    (29/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.465204435 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.07604859 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.9557695 seconds)
    (32/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.163080211 seconds)
    (33/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.441126967 seconds)
    (34/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.727560685 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.185238834 seconds)
    (36/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.34771301 seconds)
    (37/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.3286435 seconds)
    (38/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.204159715 seconds)
    (39/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.804838784 seconds)
    (40/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.074841474 seconds)
    (41/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.18600735 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.167831934 seconds)
    (43/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.466591215 seconds)
    (44/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.132352119 seconds)
    (45/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.057513604 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.191425531 seconds)
    (47/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.27371056 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.288014855 seconds)
    (49/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.833984342 seconds)
    (50/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.025599189 seconds)
    (51/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.595650956 seconds)
    (52/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.132796613 seconds)
    (53/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.768931125 seconds)
    (54/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.071517066 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.480239525 seconds)
    (56/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.443280859 seconds)
    (57/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.199454127 seconds)
    (58/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.068700654 seconds)
    (59/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.153136012 seconds)
    (60/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.464672353 seconds)
    (61/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.057908461 seconds)
    (62/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.27577093 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.057806853 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.269967275 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.05485066 seconds)
    (66/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 4.01433042 seconds)
    (67/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.213939902 seconds)
    (68/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.406405053 seconds)
    (69/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.314082591 seconds)
    (70/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.145474541 seconds)
    (71/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.38044891 seconds)
    (72/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.057425673 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.075377716 seconds)
    (74/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.86503986 seconds)
    (75/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.316122288 seconds)
    (76/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.135692619 seconds)
    (77/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.333150562 seconds)
    (78/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.067409084 seconds)
    (79/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.078135962 seconds)
    (80/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.822261373 seconds)
    (81/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.069164011 seconds)
    (82/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.060599918 seconds)
    (83/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.493366548 seconds)
    (84/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.067935964 seconds)
    (85/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.093169945 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.15809507 seconds)
    (87/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.139752753 seconds)
    (88/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.523195182 seconds)
    (89/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.076828553 seconds)
    (90/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.264301779 seconds)
    (91/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.062855555 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 4.544029227 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.369101646 seconds)
    (94/341) benchmarking ("sort", Float64, false)...
    done (took 5.768380269 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.347420084 seconds)
    (96/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.301216361 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.142656183 seconds)
    (98/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.43572699 seconds)
    (99/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.189278824 seconds)
    (100/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.265467428 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.404619712 seconds)
    (102/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.195290727 seconds)
    (103/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.460650247 seconds)
    (104/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.473285867 seconds)
    (105/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.512844356 seconds)
    (106/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.173855041 seconds)
    (107/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.039208157 seconds)
    (108/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.154652724 seconds)
    (109/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.298747314 seconds)
    (110/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.058611129 seconds)
    (111/341) benchmarking ("sort", BigFloat, false)...
    done (took 8.610903768 seconds)
    (112/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.917372066 seconds)
    (113/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.81945968 seconds)
    (114/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.160247492 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.070877272 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.083682047 seconds)
    (117/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.060962723 seconds)
    (118/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 8.714025421 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.061001038 seconds)
    (120/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.265558776 seconds)
    (121/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.167510625 seconds)
    (122/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.338504847 seconds)
    (123/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.281521571 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.070584234 seconds)
    (125/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.160704806 seconds)
    (126/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.361553556 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.340365804 seconds)
    (128/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.057753895 seconds)
    (129/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.137491154 seconds)
    (130/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.058245913 seconds)
    (131/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.667629932 seconds)
    (132/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.066009883 seconds)
    (133/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.393177251 seconds)
    (134/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.191794194 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.076723095 seconds)
    (136/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.346065647 seconds)
    (137/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.068929008 seconds)
    (138/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.082862519 seconds)
    (139/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.064311752 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.943818812 seconds)
    (141/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.062855716 seconds)
    (142/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.11892165 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.456723159 seconds)
    (144/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.852612275 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.240585686 seconds)
    (146/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.366959212 seconds)
    (147/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.392331768 seconds)
    (148/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.074309619 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.314515218 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.193897189 seconds)
    (151/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.076316692 seconds)
    (152/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.193595734 seconds)
    (153/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.032084697 seconds)
    (154/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.324362996 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 2.278446911 seconds)
    (156/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.266079196 seconds)
    (157/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.373263324 seconds)
    (158/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.458126821 seconds)
    (159/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.07034488 seconds)
    (160/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.46019992 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.089526609 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.076711966 seconds)
    (163/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.066115806 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 5.723998832 seconds)
    (165/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.073748365 seconds)
    (166/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.065014412 seconds)
    (167/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.461348958 seconds)
    (168/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.261026272 seconds)
    (169/341) benchmarking ("sort", Float32, false)...
    done (took 5.711803816 seconds)
    (170/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.35340489 seconds)
    (171/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.265345074 seconds)
    (172/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.062449265 seconds)
    (173/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.975794136 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.201511587 seconds)
    (175/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.063765907 seconds)
    (176/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.115692032 seconds)
    (177/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.371141321 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.273666272 seconds)
    (179/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.349038999 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.197484069 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.980485678 seconds)
    (182/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.114227404 seconds)
    (183/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.317832899 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.771792691 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.94839244 seconds)
    (186/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.153539361 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.150495172 seconds)
    (188/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.06584657 seconds)
    (189/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.833279265 seconds)
    (190/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.235951648 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.194836099 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.065281384 seconds)
    (193/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.061501681 seconds)
    (194/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.227364537 seconds)
    (195/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.842446805 seconds)
    (196/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.141901128 seconds)
    (197/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.545239913 seconds)
    (198/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.143384285 seconds)
    (199/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.147116295 seconds)
    (200/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.494655969 seconds)
    (201/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.063208026 seconds)
    (202/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.604975165 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.159613881 seconds)
    (204/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.187422481 seconds)
    (205/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.49063208 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.365776605 seconds)
    (207/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.159688239 seconds)
    (208/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.08333635 seconds)
    (209/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.35711459 seconds)
    (210/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.198361078 seconds)
    (211/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.573329406 seconds)
    (212/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.125031009 seconds)
    (213/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.012253594 seconds)
    (214/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.088084387 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.081923672 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.197953874 seconds)
    (217/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.760702188 seconds)
    (218/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.222223515 seconds)
    (219/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.080167184 seconds)
    (220/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.068892799 seconds)
    (221/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.37594522 seconds)
    (222/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.226737418 seconds)
    (223/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.211536124 seconds)
    (224/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.066474341 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.141430218 seconds)
    (226/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.009765402 seconds)
    (227/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.576712234 seconds)
    (228/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.390653691 seconds)
    (229/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.177694938 seconds)
    (230/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.896397339 seconds)
    (231/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.438388356 seconds)
    (232/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.264811722 seconds)
    (233/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.169961254 seconds)
    (234/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.31278943 seconds)
    (235/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.189340402 seconds)
    (236/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.399967953 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.38380398 seconds)
    (238/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.426431077 seconds)
    (239/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.00487862 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.077813693 seconds)
    (241/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.162895723 seconds)
    (242/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.914072124 seconds)
    (243/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.063090855 seconds)
    (244/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.286794701 seconds)
    (245/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.52846408 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.464333291 seconds)
    (247/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.157739176 seconds)
    (248/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.068591168 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.69191359 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.372081679 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.417153466 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.511235534 seconds)
    (253/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.449095655 seconds)
    (254/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.281554017 seconds)
    (255/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.07099801 seconds)
    (256/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.078771033 seconds)
    (257/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.203290529 seconds)
    (258/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.084544085 seconds)
    (259/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.291711017 seconds)
    (260/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.075665566 seconds)
    (261/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.1890255 seconds)
    (262/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.552444391 seconds)
    (263/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.066467205 seconds)
    (264/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 4.131910254 seconds)
    (265/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.140579409 seconds)
    (266/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.083689913 seconds)
    (267/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.157140847 seconds)
    (268/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.487197113 seconds)
    (269/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.066123129 seconds)
    (270/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.855578266 seconds)
    (271/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.282723507 seconds)
    (272/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.194445162 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.310112197 seconds)
    (274/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.146951849 seconds)
    (275/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.194946791 seconds)
    (276/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.759718227 seconds)
    (277/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.176460066 seconds)
    (278/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.416682826 seconds)
    (279/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.22846435 seconds)
    (280/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.279876984 seconds)
    (281/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.373487657 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.304054598 seconds)
    (283/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.068025119 seconds)
    (284/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.545532074 seconds)
    (285/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.337144563 seconds)
    (286/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.220128111 seconds)
    (287/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.183599283 seconds)
    (288/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.261715445 seconds)
    (289/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.194396207 seconds)
    (290/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.178931589 seconds)
    (291/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.375792417 seconds)
    (292/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.241632387 seconds)
    (293/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.086155454 seconds)
    (294/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.795687636 seconds)
    (295/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.252893401 seconds)
    (296/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.295430547 seconds)
    (297/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.063249287 seconds)
    (298/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.275831972 seconds)
    (299/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.927838185 seconds)
    (300/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.163032206 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.371135824 seconds)
    (302/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.100479811 seconds)
    (303/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.16964843 seconds)
    (304/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.40933271 seconds)
    (305/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.178900567 seconds)
    (306/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.073321196 seconds)
    (307/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.197460246 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.208724135 seconds)
    (309/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.66730316 seconds)
    (310/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.073939069 seconds)
    (311/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 4.42273876 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.320165569 seconds)
    (313/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.154193575 seconds)
    (314/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.074894595 seconds)
    (315/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 8.66235737 seconds)
    (316/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.497208679 seconds)
    (317/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.44350556 seconds)
    (318/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.190871231 seconds)
    (319/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.172177107 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.182961894 seconds)
    (321/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.989163591 seconds)
    (322/341) benchmarking ("sort", Int8, false)...
    done (took 5.156832646 seconds)
    (323/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.209982469 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.995374733 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.106007125 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.413257425 seconds)
    (327/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.266964504 seconds)
    (328/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.537850705 seconds)
    (329/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.860111537 seconds)
    (330/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.079561879 seconds)
    (331/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.924172527 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.193038168 seconds)
    (333/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.069858581 seconds)
    (334/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.404006397 seconds)
    (335/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.077003158 seconds)
    (336/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.281516357 seconds)
    (337/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.212472435 seconds)
    (338/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.267356199 seconds)
    (339/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.223544615 seconds)
    (340/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.393895955 seconds)
    (341/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.3982284 seconds)
  done (took 1162.378726525 seconds)
done (took 1164.441979062 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.098091127 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.080322983 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.571560973 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.085044945 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.083943545 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.085049165 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.574509196 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.104615119 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.098617457 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.579461698 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.086341222 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.079461294 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.095524605 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.115972128 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.091624811 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.096024703 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.085606655 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.103833914 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.113575007 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.088525349 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.129491528 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.086771358 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.082143436 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.131569201 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.082214632 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.095298704 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.098728288 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.130932676 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.129435816 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.084807069 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.086246657 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.433631191 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.130964778 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.08439033 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.092895827 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.096277746 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.087183145 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.097544993 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.095319857 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.096576594 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.083451532 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.095591612 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.088060912 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.088872193 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.082667781 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.084145989 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.083997666 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.208302369 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.095326991 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.414789923 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.13383828 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.095157298 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.130284792 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.084560241 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.084414112 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.08501518 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.132046621 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.089527356 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.085383402 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.417244581 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.170701141 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.09864268 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.417867336 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.140891944 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.094518956 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.092402488 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.082481613 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.09617184 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.4340549 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.616552583 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.112492347 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.105269469 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.086318756 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.085813197 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.097747756 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.577729443 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.093732522 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.647797169 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.105480056 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.098476007 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.089240752 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.089510405 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.087123815 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.10334813 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.10013187 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.084687975 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.088500215 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.09235171 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.099593339 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.435539664 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.123998146 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.574519714 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.090370067 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.098197627 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.100141838 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.651515307 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.105875816 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.098152658 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.089837664 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.43404883 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.122719664 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.100087725 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.087104087 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.096575332 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.20131948 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.097665427 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.100481326 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.08401095 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.105526005 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.093317973 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.08809592 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.100417534 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.107610798 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.122981744 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.103355491 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.086729638 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.094947428 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.093710754 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.099126515 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.097835681 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.098098569 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.098466807 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.089121334 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.139840721 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.098977942 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.10365528 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.205602184 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.094668591 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.212012146 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.103150155 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.096036744 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.087038392 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.418842529 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.12672982 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.109775968 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.091710518 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.110743312 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.108478535 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.105683592 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.090366396 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.107120878 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.088647636 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.139965884 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.089431339 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.112918877 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.138275643 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.101663105 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.095088607 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.100413769 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.124787799 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.110107646 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.093018011 seconds)
done (took 328.206125469 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.127421448 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.0796454 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.15607367 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.080660753 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.150589468 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.135732259 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.080371018 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.082676979 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.081254751 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.477325933 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.081242004 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.0882169 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.083166298 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.081244772 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.133767286 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.082315566 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.080139556 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.32007937 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.085609745 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.142827873 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.082109673 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.082684378 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.079762457 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.482688754 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.083149395 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.086634567 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.142115472 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.084363404 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.328651776 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.0843394 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.085374825 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.326796589 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.147129682 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.098623476 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.090707753 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.093679067 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.15241576 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.096569376 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.131237773 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.129720168 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.16035652 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.122307724 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.084578326 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.085952682 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.088528044 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.083340622 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.083747508 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.121283338 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.083433347 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.095525872 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.319252562 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.090877709 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.088849279 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.084201255 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.083832495 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.101888871 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.08397395 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.084695453 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.146237509 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.08868216 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.132981366 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.482881307 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.480573007 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.087054908 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.085843505 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.085543592 seconds)
  done (took 198.061717659 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.150273826 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.174331621 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.150720881 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.090477951 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.137661352 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.148928096 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.086707198 seconds)
  done (took 16.944384996 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.091912295 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.084845026 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.109738779 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.111468815 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.084542721 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.228169635 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.097693031 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.091095197 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.109251512 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.086608305 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.379445044 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.108555422 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.092369497 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.081261402 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.096719052 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.113476588 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.087927424 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.085584901 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.186747184 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.165022188 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.091115554 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.092085492 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.112753813 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.096965549 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.08622496 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.087581472 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.085667619 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.089233127 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.085114604 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.083745646 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.08674293 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.098731543 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.090086135 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.088361318 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.085436432 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.083869827 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.087480653 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.085899414 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.088318721 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.084884642 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.089789799 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.088395768 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.088172371 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.089359792 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.084706103 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.109365874 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.088703155 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.086416666 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.086426046 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.088319456 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.117404201 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.090303763 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.087107356 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.093438232 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.122893167 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.096627305 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.086927131 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.086170608 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.087936207 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.085645355 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.087842476 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.168738408 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.109427169 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.091090826 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.112899358 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.125609281 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.088775109 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.088665087 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.08552877 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.11306692 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.090382247 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.110907583 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.088220588 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.180497883 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.091168896 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.229896285 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.112555329 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.09433895 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.093458796 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.086699624 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.096380275 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.093382302 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.091143957 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.0953009 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.095650595 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.091495633 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.088261953 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.090357702 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.099097366 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.088382412 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.134707839 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.086268141 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.090371482 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.183303869 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.089107412 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.192880743 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.117738434 seconds)
  done (took 226.222194584 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.093963606 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.091592018 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.103847382 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.093830516 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.091225922 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.095371517 seconds)
  done (took 14.583551004 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.094675942 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.089780256 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.092408723 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.090367033 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.088194874 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.090221441 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.088114692 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.092406218 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.091891096 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.092937029 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.091276838 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.089190594 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.091929824 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.09106169 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.092421594 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.088942626 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.091376285 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.092021409 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.088719334 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.091538885 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.32510454 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.09251885 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.089798107 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.094892882 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.096210597 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.088994405 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.097079534 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.089140517 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.090943494 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.099517466 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.094919352 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.091747429 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.094068364 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.101341287 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.095154445 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.096409936 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.095468552 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.093152412 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.090636925 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.094531598 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.093887359 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.092937981 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.094511854 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.089731701 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.09609931 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.097397517 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.094689954 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.100233829 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.091492569 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.091825675 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.094027055 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.091671535 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.092015127 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.092267695 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.097470805 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.099625406 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.096049087 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.094809359 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.093171716 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.094282731 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.094187452 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.092499413 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.093809418 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.098211495 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.102136211 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.094237965 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.100034598 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.09583754 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.096130216 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.09324093 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.095115139 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.092071742 seconds)
  done (took 153.981664509 seconds)
done (took 611.80082357 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.137410091 seconds)
  done (took 9.153560662 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.178388535 seconds)
  done (took 9.278189096 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.223854608 seconds)
  done (took 12.247923191 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.111651196 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.110153824 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.10497859 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.093190166 seconds)
  done (took 30.447864819 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.344884508 seconds)
  done (took 9.361806188 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.104792827 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.08978183 seconds)
  done (took 16.272248665 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.140407227 seconds)
  done (took 9.159013695 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.137710336 seconds)
  done (took 9.181405285 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.103891416 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.097916818 seconds)
  done (took 16.234567689 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.094778104 seconds)
  done (took 9.113328164 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.850432256 seconds)
  done (took 9.941598955 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.103376194 seconds)
  done (took 9.136757834 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.156370585 seconds)
  done (took 9.175696665 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.890271538 seconds)
  done (took 9.909432603 seconds)
done (took 170.628678526 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.102246466 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.092161297 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.096063125 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.087808831 seconds)
  done (took 30.399552924 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.130848567 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.129424275 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.139253491 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.132463616 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.120334238 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.118105275 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.133654125 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.133434607 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.124846185 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.129913931 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.131441302 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.130642035 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.130122375 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.143918391 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.142261031 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.13656502 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.131546866 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.137032506 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.125517412 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.141117719 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.131434735 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.137271461 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.098121806 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.096569886 seconds)
  done (took 53.12432864 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.28923668 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.164650249 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.25054656 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.144602777 seconds)
  done (took 10.866811764 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.101392774 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.161780466 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.149629071 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.146056354 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.147551933 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.203985233 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.152437684 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.23505364 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.230734523 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.22153769 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.10934798 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.122013988 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.122027864 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.147010027 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.205604639 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.098907873 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.09832248 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.213858538 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.163031029 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.291362272 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.102889864 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.156551957 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.149467633 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.151650619 seconds)
  done (took 53.902910413 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.101199212 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.109845638 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.110718012 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.100736561 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.103106383 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.103347186 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.111951279 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.103402742 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.128950355 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.103493136 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.101974087 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.106915945 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.107590697 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.10626711 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.106399441 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.115087158 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.119477442 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.106248686 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.107788119 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.110091234 seconds)
  done (took 44.187782392 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.102293444 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.94712167 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.448116288 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.356287928 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.101350019 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.101939 seconds)
  done (took 33.085236502 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.116367823 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.11938714 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.11007888 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.127208413 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.147319695 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.107484889 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.163590133 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.263542259 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.107659298 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.160104636 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.115805884 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.108975563 seconds)
  done (took 27.672923707 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.104271469 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.105263417 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.105202686 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.113851253 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.112102778 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.109333499 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.110947153 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.103487487 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.110977273 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.121197809 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.107997903 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.117470796 seconds)
  done (took 47.348659327 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.314252882 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.33500178 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.322948221 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.643666918 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.416547484 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.08148758 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.392894826 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.320641312 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.741961608 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.76424013 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.38984227 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.077307742 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.051501913 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.028221664 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.000785499 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.351302752 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108568299 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.957732657 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.350642745 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.147686224 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105278979 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.106565726 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.108991069 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.392928801 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432337851 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109985823 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.320825856 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118380093 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.135346615 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.31428109 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.642852935 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.152825689 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.307075995 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.364712794 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.437612074 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.173485151 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.111954154 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.230982381 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.143614618 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.1427573 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.113628095 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.117335757 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.653042762 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.1207492 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.376422416 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105658515 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.133678317 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.098503879 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.028479334 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.388088976 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.208596926 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.105945852 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.142606024 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.550390985 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226882843 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.352552077 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.113336164 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.229077961 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161634954 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.328069448 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.241990056 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.110410938 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.323018283 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.032097759 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.413624899 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.217974411 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.110486561 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.110986664 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.805223109 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.351226221 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.190621617 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.394887015 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.858817017 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.10530991 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.106803045 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.152003382 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.206076345 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.104895396 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.402741172 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.098539936 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.033019116 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.209542412 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.507509219 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109559768 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.108559633 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.118142923 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.955458099 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.037554928 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.205401647 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.328986941 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.420602794 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.111161837 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.110473868 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.133529817 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113107311 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058689235 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.611572657 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.168859796 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.035145431 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.672736961 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.669985517 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.068304451 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.525805726 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.147115419 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.389328184 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.254250765 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.515886621 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.323640811 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.359568192 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.700175091 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.112503548 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.723555452 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.197776164 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.191572892 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.108801332 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.670247921 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.236642799 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.366381946 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.215848162 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.113501479 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.039729394 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.124834192 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.316695759 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.666013998 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.16131806 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109414772 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.115944151 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.113163535 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.115716384 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.273414288 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125962313 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.40428634 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.183816468 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.11444898 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.051433389 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.112830205 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.395988346 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.66630762 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.169744132 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.360797177 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.373628095 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.815361578 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.706660984 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.059413386 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.3846424 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.181646422 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192628251 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.688323721 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.244822616 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.211134779 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.114027002 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.242386122 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.118430203 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.116641579 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.408366203 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.531206667 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.544417789 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.158324773 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.109042691 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.15228743 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.238727191 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.352854503 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.13420834 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.142115056 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.11655919 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.194113516 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340909681 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.116146995 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.038158257 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359394732 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.357427381 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.40469178 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.521901782 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.129204821 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.185065143 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.127015931 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.328728312 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.198010289 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.760831099 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.66248951 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331634841 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.637310568 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.078835514 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.762356709 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.335586961 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.48653599 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130976045 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.569524563 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.244804402 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.743386174 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.144917781 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.643916142 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.042313156 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117166037 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.454074522 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.069754874 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.43122082 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.167479475 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135069828 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.119260761 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.118406813 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125330494 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.994061402 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.216868 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183661519 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188675818 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046774685 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.709672514 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.15269369 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.122999335 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.119006627 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.385113509 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.858837859 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066930254 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.1193049 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199070384 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.326397282 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.66733404 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.122268885 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.123149783 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.718121484 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.123261036 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.998076574 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.165996425 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.841227205 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.145503125 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.342163205 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.807923608 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.404420916 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.194666633 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199069708 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.12354616 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.127396595 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.823987609 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132525629 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.821521665 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.409045921 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.390403772 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.560375542 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.176934968 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.334559828 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.141324385 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.124493048 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.592027666 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.143416865 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125602479 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.330568034 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.640556271 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.411730899 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.75639171 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.206672865 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.1224568 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.394017846 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.128548225 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.668607262 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.8043078 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.124042844 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.120617658 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.387051114 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.807784592 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.126281137 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.099616896 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129388445 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.337005385 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.329635358 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396422589 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.416773832 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.569344191 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.049989948 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128274296 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.153719143 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.369815921 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.125250551 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.156378705 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.56920498 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.152430682 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.548694486 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.410633513 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.462459643 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.745688238 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.383348045 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.183128281 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.133931237 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.776601442 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.248556532 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.052551731 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241374337 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.048358889 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.832847892 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.40842499 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.138913622 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.392879156 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.102492671 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.455876201 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.415940116 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.351704359 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.161405451 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.147590767 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.124722522 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.17189053 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.124720159 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.255902418 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.245003116 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.128817869 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.619132575 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162151739 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.173633555 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.129212544 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.60596844 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.141195521 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130786344 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.8210398 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.141558154 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246114478 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196480679 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.851381411 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.701926778 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.218008757 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.997510719 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.774958377 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.389213588 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.176934302 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.576836327 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.160329487 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.530764169 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.12858468 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.33951781 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.132167264 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.639664812 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163776258 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.395875859 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075585262 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.334269745 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.326852121 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.146338744 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.127913928 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.052431061 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.228785287 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.999903636 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.105422583 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.123858808 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.806914605 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.519285153 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.28117826 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.57032491 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.942735942 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.129900962 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.424594993 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.514457875 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.690285612 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154714719 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12633771 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.409953661 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.242117418 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.39846427 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.403394484 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133027653 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.151901568 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.339315441 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251105536 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.04198733 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.610993173 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.71103724 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.823924056 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.133384661 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.328729699 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.409387419 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.35347652 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.155028912 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.200909668 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.525606749 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.39280011 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.186162774 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.051628732 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.124221695 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.524965587 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.632237606 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.22373333 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.364934756 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.441793634 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.659815414 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.687343967 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.510579881 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.468383992 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.561365736 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.524842509 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.338284644 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.491035891 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.450494073 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.013067169 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.540419553 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.339479473 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.22920234 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40075644 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.995459834 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.837211853 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.370661243 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.133415869 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.055884377 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.335611981 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.260558183 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.422389457 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.645258183 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.368031616 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.338937494 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.588442929 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.664310643 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.26360666 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.146227844 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.091184432 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.152510616 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.146338999 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.130576782 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.617837353 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.414497485 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.140457527 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068006707 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.797946259 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.056981819 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.342236273 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.267827998 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.159656147 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.684250914 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.348756518 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.213788023 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.427843545 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.323672309 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.160797871 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053122136 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.832647684 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.068858003 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.147501476 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.551724395 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143134478 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.133161541 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332926827 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.05406142 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174378594 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.134772559 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.326715141 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.702044391 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.393604243 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.248225201 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.37268524 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.430564204 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.915969205 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.142899547 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.403360467 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.054773404 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.708332601 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.804265186 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.171309007 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200180988 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130190946 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133129581 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.402920231 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.40998215 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.318425974 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.713034349 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.154943997 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.155234463 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.40946775 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.210609919 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.13292615 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.136605782 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.576211073 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.358028929 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.133300251 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.115143495 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.341999786 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.211707066 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.325973672 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.20661433 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.645579091 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.133638038 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.934227279 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.217110026 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.088539206 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.130171406 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.790797262 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.186479582 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.132886012 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40099031 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.783260694 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.333793935 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.527740656 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.992115094 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.273694471 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.169817184 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.129626195 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.248843307 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.419535188 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.431955816 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.131813681 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.399695077 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177995901 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.136194817 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.79586683 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.09964166 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.127915632 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.842568756 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.004509373 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.858487422 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.527027731 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.141418864 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133051564 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.134339875 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.05662028 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.133663718 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.300861844 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.11917627 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.241493965 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.393986566 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.404423848 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.213652609 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138077741 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.131170597 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.134710673 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.343818839 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.648538612 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148710129 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.830233563 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.336893354 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.138958183 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.620778647 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.573180565 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.336657741 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.168293907 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.267433847 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.373617156 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.674033054 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.274813883 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.102030715 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.357137556 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.133618342 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.402979742 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.40560966 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.131954104 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.342037997 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.677805533 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.419281376 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.484809445 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.446160329 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.189526759 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.273595889 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.015902159 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.134287015 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.134311672 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.395151154 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185111501 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.13723768 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142637693 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.688385093 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.847362939 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.598723128 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.290446638 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.419422533 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.861767584 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.884821197 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.133583815 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.063610767 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.131380816 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.157426051 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.135346699 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.057577018 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.780056885 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.857834177 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.349184774 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.448370105 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.061276535 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.338043615 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.718729554 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.056386269 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.101466948 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.134578731 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.386562922 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.064533821 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.141740397 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.088385072 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.377343673 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.820923829 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.402099973 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.138290072 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.083089114 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.138323508 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.139508685 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.135488714 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.221992896 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.136749568 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251706269 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.397579428 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.465947062 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.232347506 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.776593156 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.776243805 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.063921463 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174019969 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.757045507 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.705636891 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.379501091 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.254209653 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.784243814 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.072326239 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.134590853 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.152408808 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.378771926 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.134997886 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.135054012 seconds)
  done (took 2228.856527197 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.198097706 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.200172739 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.181459467 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.191404769 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.271755171 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.238101857 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.210596908 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.205483471 seconds)
  done (took 59.755631675 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.139985718 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.127230621 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.143084032 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.140383826 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.137651396 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.152998727 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.323854765 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.160274847 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.137708132 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.172599138 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.13950607 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.632469098 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.155616604 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.147685771 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.157634495 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.439873839 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.173696609 seconds)
  done (took 81.558314568 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.205762431 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.412270694 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.156070261 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.953103964 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.203841058 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.476008914 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.159406531 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.154483303 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.508334241 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.450376642 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.178455832 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.165997985 seconds)
  done (took 96.138317438 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.157357622 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.152372625 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.158498403 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.156991991 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.156546523 seconds)
  done (took 12.856368856 seconds)
done (took 2781.823556951 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.550463294 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.258345951 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.235638356 seconds)
  done (took 6.565392498 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.298771863 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.349014509 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.460214108 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.466686404 seconds)
  done (took 11.659209718 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.444423165 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.530857441 seconds)
  done (took 7.054072363 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.578780275 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.164587728 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.551522518 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.155366982 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.157389724 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.158125022 seconds)
  done (took 23.552992261 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.153545612 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.155179072 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.152280372 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.160187853 seconds)
  done (took 10.693523977 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.153974697 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.936981619 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.149182448 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.164023735 seconds)
  done (took 22.48018821 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.346603683 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.208787593 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.921654755 seconds)
  done (took 9.551899827 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.781218416 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.599729962 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.776241139 seconds)
  done (took 10.23296496 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.383054496 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.974830746 seconds)
  done (took 8.433896273 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.296378326 seconds)
  done (took 4.367854903 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.988694565 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.466156785 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.630949051 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.668151769 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.738086079 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.368797663 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.48926968 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.43677797 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.55461145 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.60231923 seconds)
  done (took 28.018258521 seconds)
done (took 159.528045233 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.581695426 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.178920553 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.367861148 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.540852801 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.394934466 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.368232898 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.431843936 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.527621205 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.212203417 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.195731146 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.53241089 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.401093429 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.390838776 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.183514453 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.396917641 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.170807762 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.402518888 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.603381947 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.217741754 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.430199631 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.457327117 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.183282232 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.374501334 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.202205465 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.40227883 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.323531075 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.785664741 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.168218937 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.370207159 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.794054681 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.373008349 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.584387123 seconds)
  done (took 178.622981735 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.157357875 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.150375302 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.156588413 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.153543547 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.610723976 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.15647247 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.155831492 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.155763801 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.391502658 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.38382601 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.157395322 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.592236227 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.159287427 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.154485985 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.158964593 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.158545815 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.513242014 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.154778491 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.157509452 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.156577119 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.159441195 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.470223882 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.175572961 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.483775016 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.497695443 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.157855451 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.159730509 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.157237041 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.160734055 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.154316628 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.156317579 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.157713494 seconds)
  done (took 217.805100023 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.157666008 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.160163455 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.158625018 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.155363539 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.157080133 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.159147404 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.158716753 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.158637182 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.846119636 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.833247796 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.161201003 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.159298276 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.162117684 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.157570383 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.156069044 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.154781952 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.153999366 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.157097604 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.157165014 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.156698101 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.156415175 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.017109705 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.160387897 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.060149534 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.159985056 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.15990026 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.158972513 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.159741823 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.16176019 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.160926195 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.161427186 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.155943113 seconds)
  done (took 230.27651149 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.399512492 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.164061797 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.165479816 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.173024563 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.158669244 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.163110192 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.167852679 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.412192801 seconds)
  done (took 21.888948232 seconds)
done (took 650.686605183 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.546520665 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.909678976 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.296996662 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.183586913 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.452798908 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.225082656 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.186933508 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.248777199 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.829908269 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.260282976 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.582669787 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.186288397 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.88756293 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.215549388 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.299571135 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.245650356 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.556185136 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.81203616 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.316937643 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.875561541 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.386408786 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.108709971 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.264377811 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.900187815 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.585059413 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.122333499 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.219320134 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.557390897 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.189251518 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.416989465 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.866832779 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.454360966 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.195832646 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.186776262 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.242646847 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.229004225 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.406138272 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.191749939 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.299526565 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.895838905 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.866662121 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.711029258 seconds)
  done (took 112.496232455 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.170690485 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.172804072 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.168304233 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.172430892 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.172206188 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.173235129 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.173466538 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.173092492 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.173027363 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.17287742 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.168443425 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.172547474 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.169185356 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.170463252 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.169272378 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.173892958 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.169793586 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.169114669 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.174324785 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.169076535 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.174539946 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.172935226 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.165432986 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.175660123 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.17171519 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.171414691 seconds)
  done (took 58.551021 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.164871 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.346627446 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.455376577 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.197545608 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.170310906 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.172192519 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.196922327 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.173635659 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.168647729 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.170959148 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.276171591 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.172738682 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.177340408 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.451176727 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.194729699 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.169549104 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.161529594 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.169320287 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.35135223 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.184452688 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.198795603 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.177800031 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.196797648 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.184775569 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.16943713 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.168527091 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.172589391 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.575744834 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.180615018 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.280710394 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.224455068 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.202556045 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.521548978 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.461858769 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.234377036 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.174214038 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.168950987 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.32320506 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.179546694 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.167104072 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.19674843 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.17891947 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.447852472 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.677100773 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.189789065 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.165918401 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.571900388 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.336100071 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.219336016 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.179217093 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.456700776 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.197804749 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.166234033 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.169552989 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.204695638 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.175575911 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.170512835 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.414109447 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.182011536 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.198427537 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.179522855 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.171777633 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.35733546 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.179170712 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.34317862 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.180911572 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.180499421 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.16859359 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.458421661 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.19621651 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.668945116 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.185128157 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.168918711 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.277962253 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.352440377 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.600544553 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.180893251 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.354963565 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.542266448 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.205557777 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.180038925 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.556037226 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.207238764 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.183398648 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.171286748 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.164512566 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.172133075 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.212368028 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.199625996 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.591304814 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.670787646 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.430797336 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.208209054 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.186534015 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.1714439 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.412221599 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.176941152 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.168501304 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.451545321 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.696063717 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.18412252 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.171267809 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.657190342 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.194752682 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.200468448 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.183138731 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.465455951 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.200144738 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.211671682 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.170858002 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.177109742 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.17390467 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.203384926 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.180914892 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.17047858 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.653980801 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.344493145 seconds)
  done (took 267.784965491 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.172845891 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.166932698 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.16693309 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.165276567 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.171531955 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.17217944 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.167434451 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.172116527 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.176180778 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.171747452 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.17186043 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.170505073 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.169741951 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.170514885 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.199358031 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.174837696 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.66403521 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.173924387 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.171685034 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.166831958 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.737481358 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.18069954 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.177855324 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.169540759 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.171645539 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.1704328 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.175334399 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.199383392 seconds)
  done (took 176.012875023 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.17267083 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.221294444 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.177701854 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.21631033 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.188503223 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.17266066 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.195290105 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.18371942 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.17960124 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.172604011 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.167992723 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.198771702 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.181804958 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.249081972 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.196532764 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.205041293 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.249097754 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.172932071 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.17648953 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.171941503 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.219504458 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.189313473 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.200466788 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.22575544 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.18278999 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.22410076 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.188330643 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.174358356 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.174337667 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.265816998 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.194035654 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.204263078 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.211106801 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.191349368 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.269858949 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.261578188 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.247542831 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.197587951 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.18005982 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.178160162 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.17716028 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.182456091 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.223691757 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.18558919 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.174936981 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.277723638 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.195395285 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.177055691 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.194192024 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.176563337 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.188487468 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.1968187 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.215344456 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.276028199 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.224083586 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.203462024 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.197891371 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.197148767 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.183127949 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.247210568 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.182867035 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.269636162 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.19433742 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.180268259 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.177980729 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.180752299 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.223030128 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.208816356 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.253790274 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.177753322 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.251480828 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.22497959 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.184421386 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.171874929 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.179047917 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.219786598 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.260161522 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.228255643 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.235576036 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.210033962 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.192754136 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.173036381 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.183072032 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.209904359 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.181817236 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.265122035 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.270654233 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.177218034 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.178519063 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.176873662 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.178161835 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.203166881 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.234831359 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.215502481 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.26746696 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.207839185 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.21203451 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.179545389 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.190365563 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.179685385 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.206677331 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.180290407 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.186763961 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.521095048 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.212795589 seconds)
  done (took 233.818074134 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.547204418 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.222955441 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.250273678 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.462565837 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.569873758 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.291753227 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.214240596 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.234955126 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.24125372 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.350190346 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.282094975 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.270636678 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.212932718 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.198940471 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.231101984 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.240235347 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.255874898 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.525632598 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.324677735 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.943787216 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.21909427 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.490186905 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.508948023 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.564482 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.265497115 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.631733482 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.84580454 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.323908165 seconds)
  done (took 70.821112764 seconds)
done (took 921.565807384 seconds)
SAVING RESULT...
DONE!
