cset: moving following pidspec: 383551
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.812304297 seconds)
loading group "shootout"... done (took 0.827268261 seconds)
loading group "string"... done (took 0.234815538 seconds)
loading group "linalg"... done (took 3.260879707 seconds)
loading group "parallel"... done (took 0.022376195 seconds)
loading group "find"... done (took 1.224069323 seconds)
loading group "tuple"... done (took 0.721424172 seconds)
loading group "union"... done (took 3.127863015 seconds)
loading group "dates"... done (took 0.157726465 seconds)
loading group "micro"... done (took 0.057995842 seconds)
loading group "simd"... done (took 0.39317305 seconds)
loading group "io"... done (took 1.41824352 seconds)
loading group "random"... done (took 2.409754443 seconds)
loading group "problem"... done (took 1.204129415 seconds)
loading group "array"... done (took 4.709493501 seconds)
loading group "misc"... done (took 0.995305314 seconds)
loading group "scalar"... done (took 3.52637553 seconds)
loading group "sort"... done (took 0.313848173 seconds)
loading group "sparse"... done (took 3.601996805 seconds)
loading group "collection"... done (took 6.204043161 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.557727851 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.076362897 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.264533036 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.082931609 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.288621253 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.084705023 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.09173649 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.072722517 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.040877634 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.168085658 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.22155053 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.398805219 seconds)
done (took 5.110088899 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.265842226 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033978268 seconds)
    (2/2) benchmarking "String"...
    done (took 0.130223153 seconds)
  done (took 0.791581051 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.14343089 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.016371922 seconds)
    (3/3) benchmarking "different"...
    done (took 0.023316263 seconds)
  done (took 0.805502025 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020967793 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.097886087 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.022208731 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022678747 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.022621981 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.022037531 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021903497 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021781878 seconds)
  done (took 0.853910451 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029731637 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023506253 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021516781 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.0229091 seconds)
  done (took 0.722361102 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023196673 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.086403678 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020915562 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020661218 seconds)
  done (took 0.768902253 seconds)
done (took 4.866590135 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.203453115 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.793100605 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.999787641 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.186872798 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.363063321 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.309647717 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.078877294 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.248581062 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.153600585 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.032480069 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.190477629 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040867021 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.528110521 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.463417279 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.029557729 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.14615133 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.58113051 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039655101 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.07155171 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.214988647 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.040495279 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039846521 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.044636688 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027895055 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.151763044 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.141521216 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.588816522 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066359147 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.026947779 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.136611331 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.029756886 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031290016 seconds)
  done (took 9.66529028 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.155229088 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.151292821 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.024610155 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.060585227 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.051910135 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025532709 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.030874492 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023642409 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.044026647 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.090240079 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.047063769 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.165426742 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.022053328 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.025391935 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.143844443 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.118633929 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.038841829 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.038328091 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.023498767 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.03778096 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.050339295 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.036258631 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.033848647 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.033654831 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.069838013 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.09165754 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.042373992 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.068741322 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.02365087 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.035579244 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.05232594 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.064716098 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.023940226 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.022104052 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.067126368 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.041796807 seconds)
  done (took 2.730392462 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.736188594 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.052161057 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.144408566 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.135439443 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.065434232 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.05245571 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.186903612 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.080090535 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.056638824 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024603419 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.215550621 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.67269277 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.176947359 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.095606783 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028696793 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.188440111 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.924143756 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.948822221 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.024419988 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.024649287 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.140372934 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027246259 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.181767563 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.022505819 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.137866393 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.830391224 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.027067928 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025330873 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.054638442 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.149341145 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021956278 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.099421953 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051319603 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025976529 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.562314247 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022349314 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020503826 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.04267448 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.052245707 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022783372 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023811166 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.035092249 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021957048 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.075868352 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.037203716 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.523863929 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.026010123 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.713860276 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.845990057 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.031814954 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.028576642 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.058776625 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020591311 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.024168352 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.595756598 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.111962696 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.023370721 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.298833987 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02623035 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024966479 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.025148813 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.057921092 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.024088168 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02551631 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.027452747 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.042459394 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.980977997 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033269901 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.045622769 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.022763725 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023314865 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021919816 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.412648558 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029783836 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.02573629 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.021385406 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027851651 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023663069 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023054988 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.068876154 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.050793182 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.048431043 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026897347 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023929155 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.147331233 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.541241067 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.937555803 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025338472 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.02456635 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.496851392 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020917401 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022974171 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024665459 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.044908763 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023994622 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020402492 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058579469 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025447273 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.131758149 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.529085843 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.025639625 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020731444 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.477907443 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.025078545 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.055134521 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.078110816 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023843437 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.062319244 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.023647474 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020768408 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026899021 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020551685 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024844837 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021709729 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022488898 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.021639574 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.02365125 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024572724 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023390266 seconds)
  done (took 20.211770682 seconds)
done (took 34.966058786 seconds)
(4/20) benchmarking "parallel"...
done (took 0.786230343 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.220131562 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.050204689 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.020048643 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.169918145 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.045369749 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.140750247 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.18256523 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.132817427 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.047148458 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.046931091 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.047348432 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.189958242 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.200004671 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.048306616 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.124992724 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.203752621 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.048939262 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020557828 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.047826182 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.048355018 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.048509796 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.020573424 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.047811326 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.048395609 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.12572966 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.048920299 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020417767 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.1270733 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.049757556 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.127890635 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.049639771 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.048413998 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.050326963 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.127756814 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.050934224 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.127737482 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020995335 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050729651 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.050735105 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.051433096 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.050606314 seconds)
  done (took 4.116210774 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046738791 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039083732 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.041280798 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018663622 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028807253 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039127617 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018690283 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038606013 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.042759931 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039083665 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039002102 seconds)
  done (took 1.164398973 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.041310284 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039883003 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.041265588 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018527856 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030493144 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039660655 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018476444 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039279877 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.041974103 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039696962 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039609807 seconds)
  done (took 1.102458387 seconds)
done (took 7.075159455 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.157463431 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.127057232 seconds)
  done (took 0.991604821 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.561512748 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.227054726 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.136820573 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.259015916 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.129561056 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.161657982 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.293957934 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.166568788 seconds)
  done (took 6.694123111 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.077053608 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.14709478 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.025346568 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.023457717 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023606964 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.023683443 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.025347048 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.024004063 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.023290359 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.025780488 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.025360368 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.023425372 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.02426327 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.025475617 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.0234951 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.023780918 seconds)
  done (took 1.420192291 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.029357717 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.026244604 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.027664041 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017686349 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.028301988 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026869509 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.028054463 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028603637 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.02764609 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.027133825 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.025286361 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.028299981 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026982744 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025745784 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.028546102 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.017681055 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.028452148 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.02779856 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.031492711 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.029420017 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.027981156 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.025293494 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.02937384 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.026706422 seconds)
  done (took 1.374497647 seconds)
done (took 11.192705404 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.142630298 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.030452672 seconds)
  done (took 0.889502006 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.131826826 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.131776478 seconds)
  done (took 0.987872227 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.029093785 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.016520235 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.033057681 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.02479281 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016644747 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.016480874 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.032204382 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016800642 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.016646668 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016716383 seconds)
  done (took 0.947477496 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019771489 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.023698221 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021644534 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019855647 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.021526353 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.01752463 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019922636 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017976851 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.023537611 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016915731 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020696493 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.038981607 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020271831 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.039409007 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.020269866 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.02072371 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.022198344 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019956614 seconds)
  done (took 1.131212061 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017964378 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.017378523 seconds)
  done (took 0.764501668 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020999564 seconds)
    (2/7) benchmarking "second"...
    done (took 0.017494597 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019319068 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019105055 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.017070445 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.016522439 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016999528 seconds)
  done (took 0.850408793 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.398056048 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.091367079 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.326113974 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.025390943 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.039200891 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.238207137 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.02048854 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024824702 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024703297 seconds)
  done (took 1.913413862 seconds)
done (took 8.210139417 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040962384 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.146007905 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.153731582 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.460655282 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.035245493 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.023272522 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.053408824 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.235940539 seconds)
done (took 1.887330069 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.482573012 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.285090745 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.194600364 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.024504366 seconds)
  done (took 2.237146062 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.316813062 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.146571024 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.031591342 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023841418 seconds)
  done (took 1.262615868 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022357965 seconds)
    (2/2) benchmarking "read"...
    done (took 0.02830454 seconds)
  done (took 0.791562797 seconds)
done (took 5.516294325 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030518 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.017381573 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.023861644 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018906864 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.018479307 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017999258 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017944977 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018821619 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016944421 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.019122611 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.019070438 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019073375 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018744374 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01871951 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.01821924 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019003543 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.017038915 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.018661644 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018739339 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018758468 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.017005244 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019094845 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018213397 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018715275 seconds)
  done (took 1.189119563 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.036639763 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.021618946 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.022271051 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.022018304 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.022670457 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.022058625 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.021985424 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.021272176 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.022077992 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.020902919 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022766604 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.022790203 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.021060944 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.022875844 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021110074 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.022910642 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.022423082 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021644851 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021081051 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.02291017 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.022249233 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021582896 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.022860384 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.022285562 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.022826139 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.022766797 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.021155309 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.021801167 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02231228 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.022744743 seconds)
  done (took 1.417524039 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023449183 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015549461 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015808047 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.026135093 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01550617 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015679445 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.016175082 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.016347019 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.016495733 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.016985673 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.016212998 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.015539516 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.016256124 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.015379351 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015456881 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015938047 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020739258 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.036841853 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015903913 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015529413 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020452241 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.01585428 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015623245 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.015570672 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.016016553 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015521754 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015354525 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015846667 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.01552716 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.016104138 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.015499671 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.02023565 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021892257 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.016057635 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.026123348 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020859412 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.016098831 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020186291 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.016500036 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015355987 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015322408 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015296555 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.015540028 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015525338 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.026254038 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015783811 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016700629 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015972364 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015720863 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.01530017 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.01549199 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.017097074 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.021433432 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016853826 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015489537 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016815623 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015650505 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.016358337 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015668102 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.01554355 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015518652 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019779733 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.017068796 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.016406575 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.037817114 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.017151197 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.026584102 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015877287 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.016187955 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019988463 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.016283155 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.03617947 seconds)
  done (took 2.042666308 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028068268 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026298668 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.035142688 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.02579184 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019128473 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016465219 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019536174 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016443898 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026137599 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.020205318 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016584769 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.01971715 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026142199 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020295169 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017680574 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.02610964 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.020290139 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019456023 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.016547347 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020120038 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017628109 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01977714 seconds)
  done (took 1.217755189 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.105091967 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.022267075 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.066986897 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.025335514 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024188963 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.025459642 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.022174358 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021952333 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022221527 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022822132 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022788645 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022188117 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.024253812 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022970911 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022704426 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02260933 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022171164 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.022613402 seconds)
  done (took 1.282763915 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.034396964 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021918656 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.049709969 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.021636282 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.021661974 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.02125729 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.025041621 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024990745 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.021330595 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.021997072 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025740456 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021537385 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.021423672 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021885307 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021452574 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.021893805 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.02140819 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02192013 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025561843 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025483944 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.025446255 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025479421 seconds)
  done (took 1.286156556 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035602804 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020914496 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.037689762 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.022579447 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01600911 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015923431 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.022426771 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.021155353 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.022239412 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.020552327 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021197696 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015989779 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.023308385 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021318547 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.023497876 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021386421 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021014972 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021538151 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020936212 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016163377 seconds)
  done (took 1.184943583 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.135418962 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018529055 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.018137209 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02265839 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017982869 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017952972 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022528323 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.018088967 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.018092008 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.042914636 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018251788 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.018135408 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.022803039 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020976171 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.018114576 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022809209 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02265573 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022706086 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.01807905 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018095687 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.042950484 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.018424433 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.02335169 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018425502 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018398391 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.018333359 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018389154 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021451399 seconds)
  done (took 1.456416931 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.039907633 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.01545664 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015626855 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019656486 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019539054 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.025519171 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019513888 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019323854 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015109639 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.01563517 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017667772 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.015299886 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015218494 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.025033661 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.015216214 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.01766678 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025159082 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019729378 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025864406 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025777851 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017663345 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024980037 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.017597126 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015793067 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0259509 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017680067 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019695607 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020588545 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017667997 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.01565416 seconds)
  done (took 1.349131009 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030254225 seconds)
    (2/2) benchmarking "in"...
    done (took 0.027235068 seconds)
  done (took 0.801854145 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018896342 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.0340299 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.015425436 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.029061294 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024488856 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019783914 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024517402 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024307383 seconds)
  done (took 0.936407167 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.130721829 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.155407466 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.017760378 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017733713 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.128782529 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.085830439 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.140765503 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.02970447 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031971237 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020443804 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.017638449 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.140047534 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.017461409 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.031256309 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018894971 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.027213313 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024938493 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.035624825 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.030712152 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.016240262 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.030123324 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018045089 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.017201099 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.018133143 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.018373934 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.02418596 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.033420529 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.030039795 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025744537 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.015516443 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.036544901 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.016468325 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.017152535 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02579742 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.131491326 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.017309384 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.055455842 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.01676116 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021103336 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.016268693 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.028815194 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.037902937 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.031133118 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.035050951 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.018051708 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.01849043 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.016290913 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.018109228 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020535703 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025799706 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.01658601 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023985822 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.016164078 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.018000305 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.027206528 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016654925 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021492256 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025944634 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.030284327 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.027261479 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.029106922 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.032274117 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.025503988 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.025606426 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.017289978 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.03691411 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.018290401 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.030008836 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031661059 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017777077 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029875881 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.01639704 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015663776 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.016509572 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.051288372 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.018137326 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.017432122 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.016647861 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.01691672 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.018072764 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026175544 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021606865 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023988963 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019787003 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032781155 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.025942638 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.016579709 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.02452096 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.035556891 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020679142 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.016644834 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.034146081 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020607545 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.016346293 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.035033465 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.02720027 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.018162618 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.017276869 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020478112 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.03040467 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.018054957 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.015697871 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025125515 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.018192133 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.133453174 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022381871 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025516507 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016924762 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.027621625 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.024050883 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.018663434 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.016065206 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021813069 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.01795865 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.016019675 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028114344 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.017909847 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.033056908 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.024318573 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.032181432 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.032553707 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.028063672 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.033727311 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.017024013 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.016111618 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.036359937 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.026728804 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.018406182 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.035973497 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.01695609 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.027827555 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.017058865 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.018576383 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.02652613 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.016308861 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018778259 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.017175314 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.023836683 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.018656944 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018800085 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.023092578 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.025670024 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.029769103 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.018421644 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.02620446 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.017640996 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.033891287 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.027188542 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.022409361 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021082958 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.01812304 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.030023739 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.024341694 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.026557066 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.017182013 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.018102412 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.017209318 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.028677305 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027224905 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.019306377 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.027699165 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.022321657 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.018113039 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.017286801 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.018396835 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.021221781 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021093405 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.017918478 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025126675 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.026402339 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.032513161 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.025722205 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.026579067 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.016591122 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.017090098 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019215742 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.017134073 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.02208536 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.026746017 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033480947 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.02974081 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.039671464 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.017626771 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.027269323 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.019325702 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.035292783 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.031183314 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.018445341 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022675639 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.016415542 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019323184 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.026959733 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.0292621 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.032363588 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032892149 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.022434032 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.022275782 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.017179755 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.033040944 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017841635 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025966546 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.027002199 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.0243528 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.017202544 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019375197 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.026669039 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.02227197 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.018476222 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.033674189 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.026067252 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.017236411 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.032151879 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017700578 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.028531884 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.017244958 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.021235405 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.022821349 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.019567044 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.027096774 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.03327413 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.016392317 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.017731479 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.033666002 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.01947645 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.01928988 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.025550363 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.179335917 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021774691 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024541569 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027044677 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027367094 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021412886 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.027163077 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017184867 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025722914 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019163622 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028263673 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016446183 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.03463563 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015506009 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031809821 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016918644 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027445501 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016612579 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025741914 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.017017907 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033485084 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017598621 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.016809092 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.027774368 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.01536133 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025357181 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015909121 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021648309 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023176335 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.025395163 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.017631734 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025469154 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.01745 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.025037453 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021181926 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.024784883 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025261975 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021037665 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015900802 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024402831 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026798582 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.024145436 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.01742208 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017339438 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.01632009 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.025272146 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.017387463 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016893339 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024102808 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.021116532 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.022295157 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017317773 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.01735955 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.017303167 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024331443 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025372919 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034100295 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024584521 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023461438 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.025130899 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.01594155 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031625753 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.01588942 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023463036 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.015292406 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022374388 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.025167194 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.016197815 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034931525 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.017404165 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023819347 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027816547 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024512082 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020185765 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.034034085 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.018959613 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.024320131 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023891667 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.021004473 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.023047393 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017475681 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.024292558 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.025449237 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.026425908 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.016668688 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.023424055 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024924082 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017748075 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.024459937 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.017765014 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.024728377 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.017999869 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.015674563 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021390724 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027603875 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021598971 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021828699 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.016639123 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.016553809 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.017495634 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.024265572 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.021896254 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.025238247 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032203717 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.015683133 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.017243193 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.016304584 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020576566 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.034911272 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026339093 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.024516076 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021785569 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015941189 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.017998758 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.018217865 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.016652095 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019796641 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.015988051 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.016377042 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027396356 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.018257197 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.02150421 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016792774 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.017624304 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.026619307 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020987501 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.016947413 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.023772626 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.016426625 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.022136873 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.016008562 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.01815213 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.021523628 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.016283175 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020655473 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026992766 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.033534214 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.023780129 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.025635426 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.017461069 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.024667713 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032328737 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.025318856 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017607231 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.026208492 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.016167465 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036559853 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.026881198 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025695786 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027033036 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.018021735 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.034658031 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.022015773 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.027390419 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.033141621 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018129781 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.026259077 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.017018848 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.033311292 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.022040354 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.016927205 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.025956568 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02500332 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.023585844 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.029236616 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.01801146 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.025883124 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022746363 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.021334693 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.018949655 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018828685 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.026043385 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.033856153 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.018052913 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.023406877 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.025206948 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.025472992 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.022098464 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029690778 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.025340547 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018108249 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.018823742 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.02098816 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.017956939 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.029916198 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017622136 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.022211509 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.022181101 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.017147948 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.024689057 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.034496241 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.026829384 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02699089 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.017178944 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.016526186 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.036234074 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.021340836 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021200607 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.025548881 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.027248979 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02996872 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.026895778 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.034890023 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.017737239 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.023624341 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029861995 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.018257368 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016976232 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.021257872 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.01896933 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.026541854 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027271029 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.024671733 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019331992 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.024524708 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.031108122 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.018889164 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.022309791 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.024207599 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018244134 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.027950494 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.02530325 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.025891015 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019105065 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.017094645 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.02093052 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.026116662 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.024725777 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.026318144 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018198574 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.027013706 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.032590283 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.024897225 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021108358 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.017096819 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020979386 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.026490134 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024491137 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.017280708 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.022510558 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021308814 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0273444 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.02702869 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.022354931 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.017204638 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.035414514 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.026337425 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.026580717 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019224925 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.01939825 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017671992 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.017187148 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028980319 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.017246283 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019126514 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.022677179 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.019351916 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.036175561 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.025617617 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.034052798 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018481157 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.022217324 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.01721996 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027105639 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.022384886 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.017297638 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.028210546 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.016690796 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.033400975 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.029885305 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.171995537 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016412537 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.022093732 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025030737 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031907305 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02613476 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025384262 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019272455 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025933932 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017709215 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027355847 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.01619971 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015363178 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026313655 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024944933 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02831396 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016046468 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026166469 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.017676474 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024424104 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024678786 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017429176 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017410624 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017310995 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025410398 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021172353 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025364985 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021258458 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033035566 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.016854066 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027025567 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025065697 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.026860202 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029928387 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027993706 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024490338 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.01635299 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.025130967 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.026177205 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017401093 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021774407 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.018908228 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037990639 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017451179 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017376101 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02989903 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022889478 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.016061493 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.02256913 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.02112283 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025931296 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.016731333 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.026243907 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.02069114 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.016675304 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021005459 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021051538 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015344741 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.015780302 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.016149042 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025540166 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.02114601 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016041464 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.034877095 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.01725549 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.024636019 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026683855 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.023069182 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017266878 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015207563 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.016731979 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.029417351 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031471287 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020402556 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02454636 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.017663531 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.025211063 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.01530381 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.024632564 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.023915213 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024485662 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.01586737 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016145849 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.03106237 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03155501 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.021257632 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032987832 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.025284888 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.017784759 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.038633322 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.025433674 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017393828 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.027445793 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018571387 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015904443 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015764428 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.017954604 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.028014482 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.016277847 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.018437854 seconds)
  done (took 15.703485601 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.061656369 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017405202 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015876617 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015802328 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022875977 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016969754 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015779083 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016962542 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016996967 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017973609 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015994444 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015930712 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021522829 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.031411356 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.02398318 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019741123 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.016043969 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017303055 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015967975 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017335496 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.022094994 seconds)
  done (took 1.238072265 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020196214 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.020344342 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019585827 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019850086 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019163099 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016069299 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019587241 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016091625 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019771784 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016367535 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.020047882 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01622781 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.016557472 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.016517048 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016566767 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017680359 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.020146949 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019422607 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.016198112 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019774707 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017668361 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019742644 seconds)
  done (took 1.188064468 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018659713 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.016643064 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024617265 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015492684 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.015427321 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.018257378 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.015433718 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.02031785 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.020312851 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.02031164 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024497907 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.016201894 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.015381198 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.02164391 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.015361639 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.016126196 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.061331183 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.01663906 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.016613873 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.016430061 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.0189639 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.025808875 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.0160879 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.016124458 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020528902 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.018576568 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015748246 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.018128535 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.016245008 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020537246 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.016511427 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.015483666 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.02464826 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.02391294 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020623977 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020467636 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016938731 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016396986 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015661996 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015620287 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023990315 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016920885 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015951232 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016856692 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.024713648 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.01593194 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.015683157 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024870497 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015709371 seconds)
  done (took 1.735174767 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028574932 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.069422345 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.022186959 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.051555547 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.027811734 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.021229143 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021876568 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.054421392 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.017017866 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.017426067 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.028977946 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.029126411 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018407354 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019695638 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.023036147 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018365787 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018980354 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.01770261 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.020694118 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018051182 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020820465 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.023424722 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.028750378 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.029165655 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019646427 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.018015044 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018224969 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019922086 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.02873671 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.021637976 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.020137228 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020613851 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.029089677 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.024008971 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018284404 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018446444 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.029580106 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.019095739 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018663338 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.017185696 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.01834734 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019835822 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.023442105 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.029816821 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018854262 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023936718 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018891431 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016852124 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.029291104 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018625001 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.022348748 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.030244434 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019836745 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018978711 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020146993 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.029338052 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018935881 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017645527 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.01899503 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.029013794 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.017158497 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019631477 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.029822547 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.018318636 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.021862344 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.030024072 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.024146174 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.02008483 seconds)
  done (took 2.523551115 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.025352264 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.052641772 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.03018436 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029933827 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.025468614 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.025575153 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.025769767 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.025828224 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.025779338 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.028546268 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.025842999 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.172622599 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.023384346 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027721345 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.026096135 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.026087574 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.025984538 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025969698 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.026350819 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.026321551 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.026358721 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.031050781 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.026284637 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.031056681 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030731716 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.022899839 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.026069849 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.026276493 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.031178682 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.026254751 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.030745858 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.026286647 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.026274941 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.031171212 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.031041787 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.027736413 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.017198656 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.026498967 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.026480334 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.026328582 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.02292832 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.031373666 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.026565827 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.023112106 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026755211 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.026498141 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.03152626 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.031281593 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.028519686 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.029671134 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.026633308 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.031607272 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.026574053 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.026947982 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.031991614 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.035070784 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.031772779 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.032021971 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.027008017 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.032000633 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.032137847 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.035467045 seconds)
  done (took 2.697186953 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030777027 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021613591 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.035139997 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015607023 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015502513 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024801657 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015495245 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015484526 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021549408 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.0215704 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023019359 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025136992 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026950069 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023168071 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.025195736 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026991293 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025150639 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.025180756 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021769097 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.025124777 seconds)
  done (took 1.269660777 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019337102 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.02114072 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016386427 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.032476744 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016465451 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023899998 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.016349088 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016377578 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01628639 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016320287 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020885415 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021074528 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016580965 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.024745062 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020137291 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.024183934 seconds)
  done (took 1.1109838 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020678478 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.024781461 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.131062224 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.017462494 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.019004972 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016319423 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.017132346 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.016214841 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018473481 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.030666045 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.01731949 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.019450171 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.017361732 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015925228 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.016495446 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.019300594 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.018538897 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.017310208 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.017307422 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.13253694 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.026101442 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017906842 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019502564 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.018008062 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019194053 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.025922644 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018877428 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.019286192 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.017406256 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019712817 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.019241509 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.028969064 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.01929571 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.01802781 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.016087059 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.017040346 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.017495934 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.019649633 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.019644897 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.017508447 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.016294416 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.019231274 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.017516099 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.018838074 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.019772077 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.020204624 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.019046748 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.0280659 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.017351622 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019314499 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.017536145 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018632657 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.017845927 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.028969214 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.019760876 seconds)
  done (took 2.08511325 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035270791 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021568417 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015556463 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015497937 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021017507 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.021724056 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021203074 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.021262862 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021725011 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015569179 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021878579 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.02075007 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021820659 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021414295 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.022001736 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021453471 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.01564396 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.0218201 seconds)
  done (took 1.176399823 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.02461769 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021295638 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021655121 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.017599286 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.017462475 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021407161 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015903922 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.01700965 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016974773 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.017625194 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017616307 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.017256391 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01718113 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.017160999 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.021201188 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017662755 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.017252416 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016502535 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017948731 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.016113288 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021748701 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016141938 seconds)
  done (took 1.196517079 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.195335953 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.154725298 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.04102874 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.036034842 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.027670996 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.053080058 seconds)
  done (took 1.299814218 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.053462634 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.055336362 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021401278 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021202587 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025202373 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02362351 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023587441 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023717566 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026612379 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030511961 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025326935 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027789637 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027191493 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028947689 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025509777 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025581665 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024170634 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02418506 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021568628 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031690564 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024381695 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027682863 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024595676 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024386697 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024516701 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029377791 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027552622 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030370627 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024378752 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02765181 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025977102 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024475047 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027749517 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030327922 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021673847 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027482354 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024524324 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032096966 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026078921 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029407569 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.02152576 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026006566 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027584968 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027338017 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027983032 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024831918 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027691029 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024751821 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024796338 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.036356144 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026469809 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02957838 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026326182 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028114865 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027921144 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.036247986 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030820917 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029870863 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026488134 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031119462 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030235018 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026760708 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030255636 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031342005 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026899142 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030255065 seconds)
  done (took 2.637710951 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06181124 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021696843 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023885523 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029199667 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02813505 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023688915 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02385257 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0239967 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023922937 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02300252 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06325301 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024480077 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028838665 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02879017 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024217338 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023967126 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024107242 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028675316 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021725864 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034916004 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024427956 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029191114 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029252568 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029185099 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030519712 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026119038 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02457566 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024484481 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024406876 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024347429 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.145528489 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025213789 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029513802 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021967131 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02939414 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024580715 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024401654 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027408315 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024420871 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025990019 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029325793 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032109316 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024690601 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024544642 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030638757 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024639199 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024630985 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022122824 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02462658 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02211405 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030591105 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030562612 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030586607 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029721507 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02475011 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024899921 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024707298 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024800728 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024908168 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026324548 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029686791 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02470912 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.036758192 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025069016 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025061475 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030265433 seconds)
  done (took 2.742198085 seconds)
done (took 53.506356316 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.183990541 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.177688131 seconds)
  done (took 1.146608989 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.14228933 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.140790856 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.169766083 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.024521494 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.082384361 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.176342936 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125030156 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026505445 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.024399241 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025848722 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.024053593 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025624911 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025705985 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.024211451 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.087224483 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026500154 seconds)
  done (took 1.949152366 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.074076317 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.281592981 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.059702028 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.0233364 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.105125967 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.0296297 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024674477 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.02907984 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.029772148 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023606744 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.071360101 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.037054077 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.028542274 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.029064199 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024751575 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.02812623 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028900792 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.029372447 seconds)
  done (took 1.758148267 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.066994854 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.034529041 seconds)
  done (took 0.905563326 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.140060315 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.064211698 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.106321364 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.311047436 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.09608185 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.299101654 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.101295467 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.098108304 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.066301044 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.095343087 seconds)
  done (took 2.174472452 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.062782869 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.058071158 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.290499405 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.055985843 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.035577647 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.03050596 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.031161927 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.03112133 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.031262938 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.030328608 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.077128972 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.028822598 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.025015653 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.07416477 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.052376636 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.060253086 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.024300744 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030348849 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.033508827 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.024050385 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.02899024 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031193411 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.139306885 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.031029 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052630464 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.028793826 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.030461449 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.030395158 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.030399861 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.031572774 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.032066045 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.05532718 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.030544724 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037847094 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.030021791 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.051409504 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.025261092 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051192158 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027958541 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024958173 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.028553162 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.032090353 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.025685627 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.031632093 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.031458277 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.031219953 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031719792 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.024267628 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.031616019 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.028284465 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.025212595 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.029975672 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.02954141 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.030641421 seconds)
  done (took 3.114548634 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.078047407 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.068356599 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024821699 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.074737112 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067086842 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024980696 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.080881416 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.061838261 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079793385 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024657647 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024005981 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.024022093 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031855783 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.035915603 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077987639 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.070868673 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026249757 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02465784 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.069929474 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.070656177 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023740631 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.082832077 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.072026784 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.06949054 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.023542594 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024924927 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023421646 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024236664 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.032597309 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031867902 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024076768 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035054082 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035997398 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031790663 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023283178 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023678341 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023505513 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.032832827 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034160117 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033818509 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.031006952 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0231736 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023467965 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.024170221 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024648507 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023029553 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033956308 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.03188636 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.033794639 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024169681 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024236734 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.02346678 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024434816 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031600973 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.030313186 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.032020043 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.03526756 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023962496 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023915219 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025598581 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036299461 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032960791 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032781463 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02511913 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.034059696 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023949694 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034930006 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.037333029 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.02396793 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.024454054 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024009953 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02397249 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.024327963 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030930729 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030994635 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02452911 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024714714 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023958201 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.032478246 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031241244 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023873414 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033345235 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023368636 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023981707 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024774063 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025084478 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.036090591 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.033988336 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024861534 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.024155015 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024062099 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024054633 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.023265056 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.034620873 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.033564735 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.033713206 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.035754679 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.025018509 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.036587539 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.033952235 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025202189 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.032851843 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024602339 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024909735 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024942177 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032934594 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.032450918 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033953481 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024632419 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.024055101 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.033667539 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03664236 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.024426505 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.032402745 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034382364 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.032931363 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023850424 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.035744433 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024502589 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035933559 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024853544 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036001876 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025090904 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033631113 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024937306 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023852241 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024725939 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.037290325 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025360493 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024738888 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.025158425 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024727166 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.033618919 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.037921149 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025521147 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.033895276 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.033756942 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.02532985 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.036081168 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024929789 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036005234 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024981141 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025104912 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023825193 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03805357 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024659496 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.025109544 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.024740536 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035597119 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024794614 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035443852 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.03295311 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02414653 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036970449 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035536794 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.033036544 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.035990427 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025643367 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024848367 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02450631 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.02488294 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.03650538 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.038065166 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025776526 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024825635 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.032534241 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.036529751 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.024209643 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.032909776 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032899714 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.175179157 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024459104 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.0241552 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033548441 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034783313 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.030417069 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.032680057 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031159936 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02371308 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.029957087 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032801397 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023792331 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036314754 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023806287 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.0337898 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033265348 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.029319868 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032816761 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.034006068 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031989187 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.032461535 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.034379453 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023230631 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023422161 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.030103708 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023311378 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023654327 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.029825316 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.024034167 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.024085094 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.036136451 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.024081497 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.032863734 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.023094809 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.030697601 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023058159 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023982047 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035141202 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023655989 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023983118 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030278691 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023616268 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.029808125 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032652844 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.02995586 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023378598 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023902099 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.033546199 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.032531032 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023510894 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023304181 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023955392 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.032274667 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.031604591 seconds)
  done (took 8.039438316 seconds)
done (took 19.89793055 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.145699963 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.074237868 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.146877934 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.086417005 seconds)
  done (took 1.254466987 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.05786885 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.020002438 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.146991897 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.159129266 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.02060811 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.141643457 seconds)
  done (took 1.362249606 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.260645555 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.155834387 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.164606374 seconds)
  done (took 1.40163684 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.154280029 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.286732787 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.556047142 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.147958896 seconds)
  done (took 1.971596821 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.175382649 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.170346548 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.032794911 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.193045973 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.040041506 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016871917 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.110494975 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.017761117 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.054066352 seconds)
  done (took 1.691406352 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.101040832 seconds)
done (took 8.600911213 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.187118551 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.145018338 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.034469634 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028591187 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.135748709 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.138831859 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.145963955 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.03067941 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.136586116 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.301100384 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.166896352 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.049180214 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.161562085 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.044825637 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.27121752 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.032474241 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029840565 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025497599 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.143009082 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.134662419 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.249798678 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.029700319 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.098143312 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.031096394 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.10223887 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.081947829 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.173103168 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.30203832 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.282599045 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.031495151 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.130860199 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.043980175 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.117110703 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.135083069 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.139957183 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.049700071 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020808872 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.24992907 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.111757387 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.317719333 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.154329365 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.028209013 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.143149337 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025969402 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.020102498 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.149970654 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.036371506 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.02799853 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043930786 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.028065903 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.043513951 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.02820324 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.144203284 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.024764603 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.094111106 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.145639526 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.168011817 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.098839118 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.027105541 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.040807628 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.030310619 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.160527776 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.039831686 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026900508 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.033295731 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020759631 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.143107879 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.041004847 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.02126691 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.031188725 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.029198291 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.112913094 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.161165549 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.067883411 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.032988327 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.120414217 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.096265279 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.048201255 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.050731312 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030857762 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020425426 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.175102176 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.026473706 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.039664862 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.027887226 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.053585195 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020775118 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036569701 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.158297338 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.151439877 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.089913614 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021800129 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.3985821 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021984809 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.046304888 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021437266 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.02057419 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.168254094 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020362924 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020426556 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029970858 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028814861 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.022067201 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.152424578 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.101800838 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028214715 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.02754851 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020457898 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.026427545 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.02149398 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020559533 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020461344 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.095909039 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.039192326 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019808181 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.109244769 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.12854619 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.031887749 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.036687762 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.086108443 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023640187 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.02963522 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027470698 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.12846307 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028870031 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.138043504 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021844798 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.043816954 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.121223335 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.094982582 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.108424066 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.020400726 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.157844943 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.03055399 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019828579 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.0275932 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.048622598 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.030063625 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.038681758 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028556011 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.15813239 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.031547589 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.026199412 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.121096016 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019762675 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.118537781 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.095016673 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.131687261 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025794387 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031272479 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.093892817 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044511253 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.049278044 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.043526627 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.024685412 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.020377209 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.020295972 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.034948001 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019508391 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.020390068 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.034007269 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027174916 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019971307 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.249217464 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.0310447 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024959376 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.265268396 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.033162524 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.099195714 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041317451 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020953177 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.103392048 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.022499156 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.041617661 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.086762578 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.021138222 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.096157896 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.021255157 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.020840737 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.028225439 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.022468532 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029654928 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.034580153 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.021252166 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.034249442 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028468961 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020743235 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.102197695 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022602408 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.17333553 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.100646547 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.114937261 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.021215731 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.039903348 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020546193 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.138285345 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020943072 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.071524458 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.112299416 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035779797 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.041205039 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021851762 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.094915426 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.035362855 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.020324847 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.100616577 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.134735876 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.098920124 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.028384207 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.253839566 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029962699 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.021106915 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.027980286 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028935404 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.0212532 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.097381472 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.025703853 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.020139203 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020399137 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.02228644 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.020011216 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.045831308 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.020357746 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.028180242 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.020611324 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.02366172 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022661426 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.020093374 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028575442 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.097445578 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.13363277 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.02747427 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.041407087 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.034559585 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.032598652 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.069358124 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028404582 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.147148048 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.020333892 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.03028974 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043613014 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020601945 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.025783709 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.020785576 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.039367323 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.024519214 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.02243723 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029429407 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.021214062 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.021242596 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.02094449 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.021229313 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.029274463 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.022511114 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.020567876 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.020587852 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.02108759 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.025992745 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.026441556 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.032024445 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.041844051 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.488367368 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.023154608 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.023319702 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.021024318 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.020912158 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.02137627 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.022814515 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020982143 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022940544 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.021173065 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.020585759 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.050922569 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.026253759 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.021752621 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.042533792 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.021114122 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.03077004 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.131856317 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.03844825 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.026285359 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.0204009 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.44055986 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.11168492 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.042498401 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.040791418 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.021006654 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.031146563 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020923282 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.021288157 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.020031207 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.048654546 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025371588 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020998621 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019846612 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.020236032 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.068605522 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.028860506 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.020297245 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028800908 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.02029045 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020593479 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.0485745 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.021402683 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020355063 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038078835 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.03222073 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.104805548 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.032173831 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023548359 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.072679131 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019726115 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020256331 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020593758 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.119061979 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033772976 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.022580968 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.021127676 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.02829212 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029080354 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.07503961 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026711719 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023162028 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.02816845 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019594424 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020429909 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.045007455 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.047946608 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021426675 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023884699 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.020008569 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.02042483 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.096831506 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.028074056 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024920084 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.107195719 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022195237 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027749774 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019482015 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.490424505 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.025307467 seconds)
  done (took 22.685190942 seconds)
done (took 23.521008182 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.173759523 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.035199915 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.033772617 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028992577 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032484819 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.033070449 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.034215726 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029736767 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032869257 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.032281639 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.147036078 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.020496662 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.028123477 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.035730689 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028975655 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.036731643 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.033060751 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.03612726 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020773255 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.036253598 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.031377216 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.033757887 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.029284762 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.036259235 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020716925 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028930595 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.161609861 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.041284386 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.024857525 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.030353689 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.028331972 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.03441947 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.02835701 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027791012 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029952274 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025854227 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.030569505 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026885298 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.162258903 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.026498141 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020960327 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.03386111 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.02799856 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.028345745 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.029163476 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031973098 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025867596 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.034646357 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.020611273 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.03350493 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.161926977 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.025402827 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.024382509 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028980359 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025988299 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.029988094 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.024148567 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.032464568 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025786352 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.032979448 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028977162 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.028392339 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.02023065 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.029056604 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.027941059 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.028245524 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.019525433 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024918123 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.02023295 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.020186425 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.019734053 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.029702205 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.028841475 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.025967858 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.020097546 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.020348692 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.020071729 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.033116434 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.027750236 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.029421921 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.020769835 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.026043837 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.025469573 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020861624 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.025048799 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031946537 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.019955999 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020791106 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.019920383 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.032111088 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.027163189 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.020294194 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031953445 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.025089815 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024695658 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.020373737 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.019995028 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.02493592 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.028358677 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.020366712 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.019536303 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024984799 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.025731228 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.029220724 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020810471 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024911106 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024640407 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.019635418 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.029103162 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.027853192 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.029575169 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.033639054 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.029150566 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.0319675 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020947214 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.019580231 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.030417866 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.020714256 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.025233153 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.028533147 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.025945603 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.028401212 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020881604 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.019963261 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024906676 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.026455115 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.020767239 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020885481 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.020758252 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.029401032 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.027980522 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019680506 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.020252741 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.029341541 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.02921801 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.020092147 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.020002633 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.029297543 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020938047 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.026530188 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.025928011 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.029489679 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.020503813 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020736557 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.019926599 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.020350394 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.020067679 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025991651 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.025112577 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020900008 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.029430243 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.027986665 seconds)
done (took 5.676404701 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.035826084 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.066076333 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.184136487 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.147505285 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.03485428 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.021516458 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025866928 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.042001555 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.024421322 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.047155432 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.04714886 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.043639112 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.169431741 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.020012128 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020689877 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.021606587 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.019193455 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.033133354 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.151829637 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.047144759 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.066638851 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.020695327 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.038287142 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.041709267 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.034243841 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.040686158 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.022103387 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021784858 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.023715004 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.039224574 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.048089524 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.020513485 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.021797293 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.041754272 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.037873857 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.030470919 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.021487924 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.028233734 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.021534809 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.020577003 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.022586676 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.040179606 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027965294 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.028217163 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.022152779 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.02143451 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021358741 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.029433189 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.035757869 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.027854123 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.033958475 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038728322 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.023042984 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.021396044 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019700746 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.029163363 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.021210766 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.021421659 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021478286 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.020591864 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.021421973 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023542679 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.027072316 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.031984935 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.024956723 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.029023262 seconds)
  done (took 3.428435509 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.040894465 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.049554143 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035702241 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035895258 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020327172 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020844087 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020760291 seconds)
  done (took 1.150732588 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067971435 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.14291615 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.151389516 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.152540644 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.163709312 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.150212732 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.034567842 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.051748584 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.020523484 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.164303557 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.160561102 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.155865491 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.02556261 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.034072053 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.054767889 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.159957362 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.034919136 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028907428 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.149443461 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.156792618 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026613215 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.052925526 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.03357249 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022007911 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.153522808 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.14678581 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.025502639 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.022123095 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024431759 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021537688 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021500922 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.045380699 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.145936796 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.037158687 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022774664 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020620587 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.143244497 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023238737 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.146591113 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.029419084 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.14625163 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024469081 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024334845 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021852462 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.02300165 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.149179677 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.023254673 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.022368112 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.02150572 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.148755241 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.021226334 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.147388873 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024878608 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.027171262 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028883612 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028462834 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.029015931 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022160477 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.149606954 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.032465436 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02372555 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.158439304 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.158123012 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.147807351 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.159181377 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.031208625 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.147985562 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.147207488 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.02187432 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029848519 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022278406 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.160784341 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.026160876 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.024517502 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.027518408 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.02943983 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.16549266 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.166666215 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.16649326 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.037012787 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.024521884 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022317716 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.163231987 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.166599026 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02919463 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023101867 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.023446577 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.038781182 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.047928915 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024613329 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.027065113 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.022232516 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.033006151 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024675241 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024807535 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.159936835 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.022449122 seconds)
  done (took 7.985465419 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028816026 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022089815 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021577731 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021974242 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.022287322 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.022101878 seconds)
  done (took 1.171860814 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.049479755 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.022623726 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.035216565 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.022424745 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.045486641 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.14741132 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.148536337 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023970535 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.03929932 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.034909117 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.148425741 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.153305746 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.15189677 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.023764268 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.149173092 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.0348561 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.150052843 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027791337 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.034005599 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023968246 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.036610323 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.02333368 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023607906 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.157975646 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.025064268 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.034194911 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.031767106 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.034263903 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.033540751 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.023324802 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.023144653 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.024276634 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.029120265 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.023295531 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.150242011 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.02963041 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022705395 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.026685122 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.024849409 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.024372589 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.15498375 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.025195756 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.027952276 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.026894268 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.023585965 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.029326607 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.027038477 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026449241 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.15178537 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.027343744 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.026801878 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023108432 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.024453987 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.02669603 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.029368452 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023417098 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.026619588 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.152021575 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.024110697 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.029695658 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.022966722 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.024655844 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023513745 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.024601681 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.028089434 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.026691867 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.029454566 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023862888 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023834213 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.022848396 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.027060733 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.02309116 seconds)
  done (took 4.419408045 seconds)
done (took 19.091357839 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.508253744 seconds)
  done (took 1.447454645 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.014449157 seconds)
  done (took 1.982838354 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.053454173 seconds)
  done (took 1.018229598 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.305999617 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.538800549 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.740568658 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092520383 seconds)
  done (took 2.630246756 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.854434972 seconds)
  done (took 1.834485612 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.217061169 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.18019445 seconds)
  done (took 1.397336125 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.50079585 seconds)
  done (took 1.462331689 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.341560188 seconds)
  done (took 2.312674616 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.204998038 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.138581175 seconds)
  done (took 1.314296152 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.61677435 seconds)
  done (took 1.584050707 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.592715318 seconds)
  done (took 5.564322234 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.191388844 seconds)
  done (took 1.225808732 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.196860062 seconds)
  done (took 1.168037048 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.699335657 seconds)
  done (took 1.668961387 seconds)
done (took 27.590428845 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043949454 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.040537979 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.040531495 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.035895268 seconds)
  done (took 1.124903675 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031306159 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.025778353 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.028080336 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.028495893 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.025731455 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.027543652 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.028347443 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.024578213 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.025598605 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.025067597 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023441329 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.02483023 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.027363671 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.024471 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.027072937 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.028493579 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024980007 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.025750864 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.027127212 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024569741 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.027487198 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024935507 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.025036525 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.02628259 seconds)
  done (took 1.603636972 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.034745431 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.026432626 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.029754144 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.025454845 seconds)
  done (took 1.088592136 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033658274 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.031784779 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.0407578 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.045324797 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031520933 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.032136588 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.038888769 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.039175498 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.046062745 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.041785074 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.022304216 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.022003318 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.021284787 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.04071752 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.040273513 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.017146904 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.018310221 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.032460567 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.031390873 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.034241928 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.02437766 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.01992823 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031638678 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.032172328 seconds)
  done (took 1.740439644 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.038274363 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.020154401 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.036979896 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.045834198 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.046402763 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019946275 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.034477398 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.04673301 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.084647551 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.020005289 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.026206174 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019861313 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.060129255 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.020083629 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.035718482 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.066364185 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.070280823 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.024561755 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051698031 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.020153461 seconds)
  done (took 1.769299675 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029100446 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024572426 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.02583462 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019775504 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030955557 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.027420719 seconds)
  done (took 1.137768848 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.02479222 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021954939 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.021786877 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.026153651 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021670512 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021563308 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021669516 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020470489 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.020523882 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.021240464 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.021154031 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021642146 seconds)
  done (took 1.240027504 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.168195688 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.027192684 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.025245718 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020372385 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.022028903 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.021232705 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.036614422 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.02327426 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.039988375 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.021067091 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021460549 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023684242 seconds)
  done (took 1.430679047 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061595259 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067707909 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102462151 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072269629 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072728756 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052606802 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.205243999 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.034164596 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.123243571 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09554715 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074210325 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047593349 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041448098 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024515476 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057233616 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075501584 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094572103 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02783061 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071231845 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.250047103 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092350949 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.095790722 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107410248 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075309779 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.049472949 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107816736 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05256045 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060757037 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08161238 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08613909 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077464506 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.055701419 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.026191126 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.025776253 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11227698 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.065255775 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078595029 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.049465811 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062537616 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045298155 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084551934 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.025346153 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.039832921 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.070048187 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043101007 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093704238 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.049715823 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07484583 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038054722 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101797652 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09103823 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.184185126 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044136566 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06498575 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105512805 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075398773 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102212997 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067628941 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.190226326 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.077165867 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.061515832 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056659954 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063298242 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035488288 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136207207 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044207906 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.073752337 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071397865 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.051228349 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050527977 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063235873 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093873368 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082573128 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.082954616 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093421831 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047394067 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07900304 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.055482285 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.081055167 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05991971 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.027380274 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080688134 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086025865 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056373982 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.05761745 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09398978 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049155217 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031220961 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.058393559 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.077849237 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035701711 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.072698883 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037365106 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.089073177 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098964984 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056387964 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070363039 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076885416 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034030795 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12701125 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.065118301 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028189342 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074467465 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071760655 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115195344 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055516517 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030903919 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059169049 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064142447 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.117580702 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0699537 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.038544039 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072984125 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107749235 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054961567 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.270132144 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055756723 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.26092649 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070138787 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041413641 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030225439 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046158429 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069696713 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062516866 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07046033 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050100549 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.039232888 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041009678 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073932148 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048219069 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03562083 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070193074 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.058483768 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.02954462 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043157191 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.031450226 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102765217 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.033452095 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091825829 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082067714 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.030350532 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062014481 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051028244 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060864425 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.053295673 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073927681 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095368219 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.141373593 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045751888 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.050178945 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06404405 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104997343 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085326668 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048071093 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.032716697 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057301191 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069298204 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.057753349 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083861708 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051123297 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066077526 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061360105 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10341311 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106330079 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059691026 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059065588 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066941383 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.08251289 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030389371 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119942529 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06205333 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078288497 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043624503 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103829391 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.070639417 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068032023 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.043693102 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059291175 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.065694855 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067304721 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111159853 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.05381193 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.028093044 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055256486 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116605094 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035499504 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076079871 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.049012649 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.206428245 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075088421 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.04959506 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037526175 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.02331759 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083443359 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11483497 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024931951 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069177774 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.063361276 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057807403 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.077387283 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.024000513 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074170433 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093534927 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072899531 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099086163 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148466943 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074777451 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073794177 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.070482913 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.061736547 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034215349 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.082921185 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094143225 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053390732 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049044583 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095197925 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076441438 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.097300034 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.077506477 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082653885 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.06503922 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065121273 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063006244 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.063793374 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107741637 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081789761 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.085361772 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040083752 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064862218 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076780738 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096867295 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037184812 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105445999 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.044234525 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108027873 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.035629068 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086737465 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.031870758 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.130661912 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036326958 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059991595 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.025639316 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.030992459 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107899382 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.079851889 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070477042 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063644781 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.253354672 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094667046 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.03311055 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066919224 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070277135 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056862907 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072199644 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063413173 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.044551495 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050390074 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063231125 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040019337 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.036033749 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072400997 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049943091 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081367411 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037818129 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029320687 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09503404 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059997122 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050272838 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031042717 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062105808 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.082110013 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047631026 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040924639 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071089106 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060199044 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098797165 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.045202029 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.054169816 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082798987 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036904814 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.049197572 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.02474699 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.041844971 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.031753306 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089394996 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031788298 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07642819 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023910478 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090386714 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044577656 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.050369885 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059598673 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068725044 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088218995 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05097961 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102767346 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047421307 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079800049 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065414265 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073176167 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04335859 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060622859 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058661712 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081518331 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.052382892 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083309073 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106156265 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061938406 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106695034 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049387614 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084164171 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067466211 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088213919 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075647848 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162594351 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107761119 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.225702012 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066311084 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030138582 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050670731 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061374355 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.068206092 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132472805 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080192548 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.027520191 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061439796 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049621763 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064882526 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058949574 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037159758 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101093135 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057744274 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.042153586 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066896015 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.045695514 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059169985 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030810568 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057250845 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.055327888 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049810753 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052393619 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069507977 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084416022 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06846995 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101670911 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.058121712 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.047592003 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.076848141 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06892298 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067091356 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041479944 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041840379 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101677514 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078043351 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.085188715 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.05538055 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068062093 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069638774 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058210903 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085396184 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066213897 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.088092599 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036381844 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.032743835 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.023449318 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.027022783 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083605004 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066517148 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069603805 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063561959 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.027419925 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061068007 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062378484 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027480887 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0424659 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053347745 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057428545 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.051598084 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068231904 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.073452181 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.054503202 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064432559 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057210181 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11597261 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.058693107 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049167843 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.263539459 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107853423 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043592751 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048249547 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.026319748 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03386166 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071556452 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102067107 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113396346 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.033606458 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041359898 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.04088464 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041719138 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025923319 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.043667374 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.044650348 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060707338 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05253122 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.069855744 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060223754 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031809108 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058180757 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054709433 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047648355 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.062274655 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07564579 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082357637 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.098792485 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069494726 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065070859 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031411315 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.036397711 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031364449 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034745183 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.057590747 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.034311214 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031305595 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106690509 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.048057238 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063005752 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066333729 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044172136 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031104421 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09486818 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.02465129 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096675161 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.026174049 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038346028 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.037488374 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034405184 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051810247 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100332569 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06833112 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071270627 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064622981 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062842852 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148490162 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122041168 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038861462 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103349064 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031559053 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032410131 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031760542 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069650667 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048565609 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074499761 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109963407 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047250963 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062572347 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03591044 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111901056 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.063109843 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.210981598 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041159714 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034441499 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101175778 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034735161 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.036721111 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044530917 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065732522 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026919359 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057331609 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037970236 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034229942 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145785428 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.663513554 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052136951 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.030414306 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050791568 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09755863 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09305999 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051643028 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06265637 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.075612591 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056404817 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048772268 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063606784 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.156313601 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028615821 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050066827 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.05837907 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052175337 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057396243 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.054265093 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.044364673 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.049504966 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.041641923 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03455848 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065105528 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042375207 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053732131 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063430122 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039108863 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.043833398 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090332959 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.060329858 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.03937902 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045168339 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.060946672 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042309441 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064082188 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.025149528 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070742539 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045622592 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079530357 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.056985525 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06601036 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085885947 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051166458 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098625108 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.067452412 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082021668 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043078957 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.034003458 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087967328 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.049437949 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033834287 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111180755 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.058678196 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.062084444 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063842679 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.052204785 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074876032 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081135765 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074048523 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.203121583 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033534589 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056625136 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.059186983 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041750636 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034251431 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.029180845 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030271454 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062356084 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040960198 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041134362 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069094495 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043801438 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058283692 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.054537182 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077921647 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043997943 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057019656 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066038553 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046995351 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088451164 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056351261 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085551752 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.384324853 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08074558 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086013017 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091400217 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.032968935 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.030599791 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023665625 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07043195 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034713705 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.044605103 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034086765 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093931256 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.039606648 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069348711 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.21408863 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035775378 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051549332 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053982631 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.025034315 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039111477 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064568032 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042283408 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036098009 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076297144 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037617965 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088725188 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06962468 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057138389 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.05262185 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037108354 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072688924 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.061280772 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.089130533 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.052208646 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.031398514 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083533141 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.060861205 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10365939 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.030014375 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03709613 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090175757 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061704411 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095910498 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03772217 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127513208 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108514358 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06161339 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102291114 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027420564 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047002099 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049788896 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.233498018 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040634001 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066008538 seconds)
  done (took 42.681924902 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.141440985 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.138033171 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077839926 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.091412977 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.245540478 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253990641 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10680859 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.07812574 seconds)
  done (took 2.229813639 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.025072026 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.038756159 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.036154045 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.290473966 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.055786544 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021503876 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.026441867 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036590054 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.021534216 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.021037642 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.056781184 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021341281 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.021688333 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.458805995 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020559793 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.026637931 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.021710062 seconds)
  done (took 2.307713438 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.314181109 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.574886198 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.365416856 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.460511848 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.103873302 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.561367825 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.03003176 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.035008181 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.636630372 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.362710453 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.099259832 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.182053332 seconds)
  done (took 17.822750796 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031758076 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.162037283 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.161624994 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028919736 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.028207342 seconds)
  done (took 1.565306353 seconds)
done (took 78.788869318 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.0412483 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.126829597 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021571294 seconds)
  done (took 1.27539022 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.163946268 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.160416717 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.160177753 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.163192727 seconds)
  done (took 1.742961173 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.031011567 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.030774282 seconds)
  done (took 1.159748455 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.172372249 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.257211817 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.045938013 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040575734 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035228348 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.036589917 seconds)
  done (took 1.21470814 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.027387144 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.025428821 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.025662351 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.026133512 seconds)
  done (took 1.201818524 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.140988119 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.02044516 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.02282216 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.024504384 seconds)
  done (took 1.302886806 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.041493137 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.041466 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.072169412 seconds)
  done (took 1.253325224 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040244114 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.039711032 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.034260832 seconds)
  done (took 1.213426574 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.064886911 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.05146627 seconds)
  done (took 1.215179259 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.03688982 seconds)
  done (took 1.134113639 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.049368471 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.053831937 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.226552597 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.193197137 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.231016679 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.214760872 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.034830907 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.031725728 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.027421854 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.026278134 seconds)
  done (took 2.181643814 seconds)
done (took 16.51094772 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.037063337 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.144134433 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.39533868 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.042917852 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.61024143 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.392387194 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.679932885 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.046169628 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.05531028 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022662329 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.040011848 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.587272535 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.685378733 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.106573304 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.670350336 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.099401648 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.517686316 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.024059165 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022277599 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022879096 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.662361448 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024810855 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.023275382 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023256282 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.514518016 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.290401619 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.024529913 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.090754078 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.023963425 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026908417 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.270261651 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.024385964 seconds)
  done (took 12.291092799 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026660717 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.077877032 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027569892 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.038650949 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.024463914 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024355269 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.026366723 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022897483 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066417615 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0228173 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.040205102 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022036284 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.026863806 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023508823 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.043229137 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022320318 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024683268 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023102161 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022585413 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023052036 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041932108 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022251801 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022904086 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022988533 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022885063 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.03791073 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023789739 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022361161 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022864677 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026765635 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.028152307 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02425466 seconds)
  done (took 2.055147007 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079542232 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.080106941 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.028695446 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.063374244 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.075293553 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.025646347 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.107239568 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.045154844 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.069322838 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.023319983 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.040365292 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022674903 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.060360455 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.024288857 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.044326674 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022745552 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.025341592 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023421856 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.02253323 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023222777 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.042552832 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022648411 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.023206578 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023287582 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.023382795 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.039411912 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023831303 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022651384 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022710021 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02669741 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.02849871 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.024436389 seconds)
  done (took 2.340947176 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.026115003 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.026897367 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.032660816 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.035956867 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.021111073 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.023508647 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024803161 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.021153922 seconds)
  done (took 1.324867051 seconds)
done (took 19.12735546 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.036205969 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022915794 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025974122 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.042001598 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.029307655 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.149370724 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.020058218 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.02791673 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.026382818 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025586491 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.027763076 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020739729 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.024697119 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.019461469 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026683291 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020780717 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.152213552 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025707343 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.151176952 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.152760932 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.023938708 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.027055199 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029594041 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.151404666 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.151983634 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.151709992 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.030699853 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.027138763 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.021159959 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023933923 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.148983957 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.152045953 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.024015474 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.147986745 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.021609633 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02121453 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.025612848 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.022709708 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.154986782 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.031514629 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.023578481 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.030327637 seconds)
  done (took 3.568521071 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.154196427 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.16113458 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.15368941 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.033739716 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.02975091 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032987866 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.159513976 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.03051381 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028917596 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.158815481 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024796658 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028692162 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030923461 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021545275 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028242292 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.025067701 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.032174848 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023448653 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028706164 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.028821365 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.159234445 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022440205 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.029575491 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029978599 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024391105 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030534205 seconds)
  done (took 2.637778162 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030935621 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.044356258 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.046567452 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.10089697 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.064796753 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.037265059 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.037835222 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.048512693 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054775494 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.02209554 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.044595356 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.051309567 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.050754658 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028908926 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.061884668 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.041542737 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.03515427 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.023735126 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028538559 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.057036173 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.045740012 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.041793151 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.055679906 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.042425032 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.021381079 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03185493 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.029795362 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.039139124 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.029888854 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.034649107 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.026050236 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.025477066 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.02281362 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033129878 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.026013977 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.020278405 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.045908688 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035123074 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.038189882 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.061960139 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.03241202 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.023329409 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049029622 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.087252839 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.021441268 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.02479159 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026093884 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.03476842 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.023296044 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.052503856 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037481274 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.021511931 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.041477414 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.023433536 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.023404411 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037633998 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023447664 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023882419 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.033902685 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.028182132 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.044032412 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.027729808 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.042628718 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.021593611 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.033589818 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.023491214 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.023592458 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020694262 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.05658345 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.029587674 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.071692905 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023144446 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.020366834 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.034643849 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.033730544 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029379146 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021607368 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.040938592 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034759452 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.025758498 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.032945109 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024803321 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.025236108 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.058340072 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.021280401 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.020292399 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020250375 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.024589683 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.025148078 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.022506309 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034899217 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.021288957 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.025279088 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.03650319 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.025726673 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.022556713 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.024712936 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.023430535 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021161346 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.03399151 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.026257074 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023976065 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.035184737 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022978417 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.025358764 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.037513067 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031646724 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.021293538 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.023316251 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.024570818 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023503818 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.026361169 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.025210375 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023974789 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027371743 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.029507737 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.028075463 seconds)
  done (took 5.075981446 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.248664285 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.238733626 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.023111585 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.235952978 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.031248378 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.165382856 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.238308518 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.239073189 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.023024743 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.023562182 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021720412 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.179422074 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.175061357 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.187276766 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.167963744 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.024927785 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.049461606 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.186941838 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.245094012 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.239295868 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.04862064 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029922679 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024776633 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023857714 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.023185445 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.031550285 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.039595673 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.03182454 seconds)
  done (took 4.331260251 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030965927 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.067517952 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.026330424 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.047766141 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.040069143 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022699221 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.024275397 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.023102783 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.039474319 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.028090714 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022282449 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.026386652 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025970016 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024686534 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022664363 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.029080607 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.02914218 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.030222255 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026116518 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.027318913 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.034746638 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.047430239 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.026564449 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.022542814 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.025982647 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.02239473 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.028037834 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.031336852 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.022136219 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.022095563 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019606442 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.026936414 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.037913336 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.023717281 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.022316268 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.02305035 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022941233 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.023008092 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022847865 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020981671 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020835345 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027734793 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021128091 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.027721325 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.036566951 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024910258 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.024381702 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.025243532 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.025120195 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019551804 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025615925 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025723538 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.025046099 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.031013991 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.02629859 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.025297479 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.024069076 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037446193 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028724847 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.022233292 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.02179781 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.021166431 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024713281 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.029417827 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.039057213 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024823086 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.021006623 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022876625 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.024180232 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.036278508 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.022007552 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.02803823 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019654359 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022797339 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.025283244 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.025611679 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.024161917 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.021206407 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.022332878 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.022000317 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022718535 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.02243643 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021889518 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.025082168 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020747571 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.021157794 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.023235904 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.024531678 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.028338023 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.021620814 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025448721 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.024356581 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021403295 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.025266712 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.028180991 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.025531001 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.043254838 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.030918981 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.023461691 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.020548132 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.037982974 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024577883 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.022080533 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024754574 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.02708663 seconds)
  done (took 3.958031357 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.053017622 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024892353 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.044708817 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.055879409 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.033343079 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.028587611 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.0365255 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.024114441 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.044795377 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021892142 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.032101651 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021063106 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.036099899 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.031726027 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.024678941 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.032739308 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.025390094 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.043752194 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.037941908 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021511015 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.031547313 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.03537928 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.035687429 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.040753854 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.040085134 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.04164597 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.035330235 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025606806 seconds)
  done (took 2.10188503 seconds)
done (took 22.777865389 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.173331201 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.379811101 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.143189266 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.876585448 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.208298995 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.242759741 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.338462596 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.132138422 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.689156536 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.224578095 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.789260992 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.799000828 seconds)
done (took 60.222232512 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.254000724 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.302485871 seconds)
    (2/2) benchmarking "String"...
    done (took 1.381667245 seconds)
  done (took 3.828390953 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.593117903 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.154939998 seconds)
    (3/3) benchmarking "different"...
    done (took 1.194036857 seconds)
  done (took 5.065407085 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.433999448 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.696253984 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.424256913 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.145516152 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.150829094 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.591155357 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.319152325 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.800938391 seconds)
  done (took 27.256085963 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.147465795 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.410599215 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.483717044 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.570989229 seconds)
  done (took 17.816906725 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.597172353 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.596932115 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.593805656 seconds)
    (4/4) benchmarking "different"...
    done (took 1.855960804 seconds)
  done (took 7.889046635 seconds)
done (took 71.695705204 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.141909577 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.463746236 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.188053508 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.330431863 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.161888271 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.24372969 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.151993328 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.189359984 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.146309104 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.149833966 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.14753147 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.153770668 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.150972882 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.195457588 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.152594459 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.198035624 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.446604514 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.155438821 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.17453536 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.970315341 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.481048362 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.152345024 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.145315173 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.217911564 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.592603022 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.212820355 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.603716982 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.154914919 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.760038964 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.1489218 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.151514467 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.149499222 seconds)
  done (took 183.808847529 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.140910371 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.06390409 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.05179037 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.162988016 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.530314181 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.500456767 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.019743287 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.551778409 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.152146212 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.161693945 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.184979322 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.147751195 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.190579807 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.709577112 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.189620303 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.203836931 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.056807035 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.958464098 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.193644403 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.087538929 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.152698126 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.720916784 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.715040127 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.987553079 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.169558972 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.165971633 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.16405337 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.191607803 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.643395055 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.032918998 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.171812435 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.175222594 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.335408477 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.388506153 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.149810649 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.146874443 seconds)
  done (took 154.701399414 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.358961801 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.150136789 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.183067782 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.254187008 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.136640948 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.005396886 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.145480204 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.143243209 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.140887714 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.146678689 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.141923022 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.209445361 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.145554814 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.257314357 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.173204587 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.143241743 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.143843523 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.239940793 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.167923818 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.151935492 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.147555781 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.246417805 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.486981364 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.257788486 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.150967532 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.151308542 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.252101816 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.153765563 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.145854721 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.142676572 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.251431572 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.146471464 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.274464002 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.255823606 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.152623746 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.201812905 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.154085304 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.380450774 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.151313152 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.145494044 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.143455235 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.190813042 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.146569224 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.258250606 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.248983363 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.15086626 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.161320995 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.615607503 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.745857236 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.150238212 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.142720096 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.145654743 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.146061079 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.143325837 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.149168645 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.153567967 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.176222359 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.812790845 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.152247828 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.144524895 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.144661546 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.140863296 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.14305858 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.147673271 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.181393076 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.748311241 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.064907373 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.499572242 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.907223492 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.14899029 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.140095731 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.141249365 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.981930804 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.20583576 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.143262453 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.141490024 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.318048262 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.150778615 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.141794956 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.063975966 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.060254604 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.146842967 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.255421066 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.146083896 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.141013963 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.203599669 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.256148407 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.1524241 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.160774312 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.197127276 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.148516334 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.141114621 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.147500875 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.065793595 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.147363053 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.154018868 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.485065796 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.145926245 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.141996569 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.265390334 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.507426758 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.146293436 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.222960979 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.554442294 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.062631014 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.146494365 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.141017404 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.159398848 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.14242637 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.156870012 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.154869275 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.144168027 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.141999667 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.151118832 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.146675956 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.140770519 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.142707676 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.164001002 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.142343223 seconds)
  done (took 331.144909666 seconds)
done (took 672.291112345 seconds)
(4/20) benchmarking "parallel"...
done (took 1.142908325 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.39702116 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.150029198 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.257578811 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.399583086 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.34999388 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.320457517 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.350401835 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.438456705 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.374964728 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.315962316 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.370808632 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.322673971 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.435411521 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.402691956 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.443238952 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.402053929 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.339499743 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.856200242 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.362775309 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.322136021 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.35458735 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.315417652 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.307208215 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.375405893 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.450986731 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.320556373 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.548345216 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.394649513 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.353239727 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.397738122 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.417447561 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.430960989 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.361640014 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.431480631 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.393569709 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.45197446 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.309712825 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.417245129 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.337536648 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.359580294 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.376752055 seconds)
  done (took 64.841896371 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.539738035 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.337635785 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.449924612 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.448365701 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.875616267 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.44651098 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.538677085 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.334805001 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.336407387 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.455041689 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.468522229 seconds)
  done (took 18.386244462 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.3819168 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.341749115 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.45770735 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.467112853 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.575683641 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.502446867 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.503333049 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.33598556 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.345963372 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.461309855 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.471396022 seconds)
  done (took 17.988437266 seconds)
done (took 102.3581896 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.719912466 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.219730887 seconds)
  done (took 4.062215185 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.17331564 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.16106876 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.153807548 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.161414431 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.155954414 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.155747209 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.205945808 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.171619321 seconds)
  done (took 10.461415689 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.153748373 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.15391244 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.157669488 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.154252482 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.153581119 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.15415251 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.154969037 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.159030138 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.156815822 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.154119299 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.15417071 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.157352867 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.154914399 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.155139398 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.15456362 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.156884474 seconds)
  done (took 19.611793208 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.152767188 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.154524803 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.158848795 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.157966217 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.15442669 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.153029371 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.154210099 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.165861329 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.154085835 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.153511193 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.153462857 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.157872931 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.153486942 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.153401013 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.154186164 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.154265849 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.159717153 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.154257273 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.154386896 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.154842068 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.157267625 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.153416893 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.155449584 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.156864697 seconds)
  done (took 28.856234369 seconds)
done (took 64.158431592 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.717178197 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.146414303 seconds)
  done (took 6.986869706 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.157383038 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.159484111 seconds)
  done (took 3.546805495 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.154435394 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.156705546 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.160096101 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.153718723 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.15563048 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.153446224 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.15467732 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.160623002 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.155226523 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.155669522 seconds)
  done (took 12.683765028 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.156486966 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.155650597 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.156282864 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.15528532 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.157529797 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.153570393 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.156532129 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.154357988 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.155811703 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.158310903 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.153586488 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.345082309 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.154332883 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.384230289 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.157981006 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.153632912 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.155684747 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.156676071 seconds)
  done (took 22.345488755 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.15964222 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.154274589 seconds)
  done (took 3.436855278 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.154406297 seconds)
    (2/7) benchmarking "second"...
    done (took 1.154465388 seconds)
    (3/7) benchmarking "month"...
    done (took 1.154259092 seconds)
    (4/7) benchmarking "year"...
    done (took 1.154396596 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.158488248 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.155745468 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.154739633 seconds)
  done (took 9.212357841 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.601403895 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.316782075 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.372456988 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.625333831 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.810741536 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.099254192 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.811555564 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.09860213 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.981193688 seconds)
  done (took 16.84259822 seconds)
done (took 76.202638229 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.821374165 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.131784254 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.805325079 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.237224744 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.141394094 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.496719574 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.134566785 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.726154313 seconds)
done (took 37.661314633 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.258965557 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.141500562 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.186226415 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.18569335 seconds)
  done (took 19.646006889 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.143037197 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.699500022 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.187432756 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.185230486 seconds)
  done (took 19.437341726 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.656841489 seconds)
    (2/2) benchmarking "read"...
    done (took 1.569286582 seconds)
  done (took 4.365211405 seconds)
done (took 50.855250319 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.154920214 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.154432414 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.15469218 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.157390688 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.154742051 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.153710131 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.153964012 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.158299708 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.155938099 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.155071636 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.155549065 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.155458799 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.159538279 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.154114317 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.154905193 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.154456769 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.157072827 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.154343491 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.154708421 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.155741872 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.157473844 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.155426498 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.154038353 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.1561117 seconds)
  done (took 28.859194001 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.231516254 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.217435661 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.232407385 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.23218506 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.259342703 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.233647957 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.227752958 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.187758837 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.239076648 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.203689037 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.191919186 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.247012066 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.199389291 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.250578096 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.194288598 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.250060953 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.235152879 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.188504751 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.195019567 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.253227488 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.231774087 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.188570058 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.246657676 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.190239514 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.24767726 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.188814341 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.203889665 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.214366107 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.19871363 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.244526838 seconds)
  done (took 37.754618859 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.18675067 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.155823829 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.158320405 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.244293849 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.155625153 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.154477826 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.158599263 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.155839244 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.154888916 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.154602723 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.158081156 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.15426129 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.154082325 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.154932658 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.15798603 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.156051667 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.188229649 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.337905654 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.155101651 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.157742894 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.207658543 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.154889019 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.155697552 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.160678195 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.155492305 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.154672941 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.154890367 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.158673087 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.155244059 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.15426298 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.159335671 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.199490055 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.194432094 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.154804408 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.272396452 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.215969794 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.159197595 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.186540724 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.156321163 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.154751757 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.157263915 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.154485386 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.155072157 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.155529541 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.213602114 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.1543577 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.154890035 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.155163499 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.154658435 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.158459441 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.154731581 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.154586 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.169630593 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.159080303 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.154830676 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.155548265 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.155285494 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.159043371 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.155131478 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.15556119 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.156412622 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.22354872 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.156589983 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.156583638 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.526394163 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.159076985 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.220320042 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.155754476 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.15394935 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.372778832 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.159400736 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.364224335 seconds)
  done (took 86.037482398 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.154082265 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.159864324 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.23476338 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.238171213 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.157645754 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.160034987 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.155427194 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.155448068 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.82369471 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.159488533 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.15619792 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.156158663 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.829447179 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.158806686 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.15472445 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.237574516 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.15608107 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.158566282 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.160692789 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.154649541 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.15474986 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.157822522 seconds)
  done (took 28.160006764 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.196007297 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.170432787 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.194076217 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.170882988 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.170542165 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.169863766 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.192871251 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.171153688 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.192581303 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.19125051 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.190793584 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.19944753 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.169635063 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.192630831 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.198314114 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.233236115 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.195235444 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.231389008 seconds)
  done (took 22.55504136 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.335931335 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.321560596 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.238365665 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.197252846 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.420372481 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.391522549 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.261167776 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.330802353 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.205590642 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.320907703 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.331725117 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.197821219 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.393359715 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.198843007 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.197151818 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.417925965 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.240918256 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.196089825 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.266677668 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.259825535 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.336144341 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.267954446 seconds)
  done (took 29.453699911 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.190296848 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.203209979 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.233169695 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.227593544 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.157441123 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.159027605 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.21402511 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.199701128 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.169637077 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.194300348 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.199171341 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.155521973 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.244235449 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.211842337 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.249074099 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.200033725 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.207318629 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.212077353 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.190408352 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.1560907 seconds)
  done (took 25.099694774 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.158397715 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.157640535 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.155018065 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.156243066 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.154794516 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.157995507 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.154843238 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.154404618 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.154532347 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.427994538 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.155069996 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.155785197 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.154813017 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.160468 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.155661396 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.155297326 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.155501349 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.15487591 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.15820269 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.155523667 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.42450105 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.155458063 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.159938636 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.155624177 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.154263082 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.155516597 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.157794376 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.154448 seconds)
  done (took 34.035973357 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.217697141 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.158584006 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.155280706 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.155692062 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.155737015 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.224312079 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.158607159 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.156077143 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.155733019 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.154408783 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.15825137 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.155765891 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.1573379 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.215219353 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.160291642 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.155068038 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.26055986 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.160156488 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.229588204 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.147934414 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.160447457 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.277395586 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.160191684 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.154526554 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.147527694 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.15987333 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.154867339 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.15436769 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.15450968 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.158895433 seconds)
  done (took 54.299674566 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.175610062 seconds)
    (2/2) benchmarking "in"...
    done (took 1.172993719 seconds)
  done (took 3.474928414 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.155561861 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.256386658 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.156469408 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.357953988 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.323197535 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.332403098 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.322026982 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.255325747 seconds)
  done (took 11.288159769 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.155846119 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.505393404 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.170655289 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.15582896 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.157423241 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.591944681 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.106344265 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.010567466 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.880365303 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.141354637 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.264730388 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.716507615 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.157799908 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.475125657 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.275946807 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.00297842 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.367749966 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.673061354 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.205142432 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.281967638 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.857231189 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.258374126 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.158254272 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.155247814 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.154759561 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.072097414 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.061303385 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.574361713 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.291620475 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.283336401 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.934911813 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.238838083 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.156264276 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.384526405 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.273529936 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.155374375 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.305544544 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.264139306 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.155652449 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.159505081 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.893741332 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.789671171 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.456753639 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.40194544 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.244888535 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.161330927 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.156514006 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.160305522 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.419557115 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.792541055 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.159537521 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.122786725 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.296471547 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.155117286 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.857969277 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.165844316 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.158283884 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.072882235 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.707483026 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.39290327 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.54428122 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.314689122 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.151924707 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.28603437 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.157422944 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.372294138 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.000107816 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.016378532 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.927121405 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.268879601 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.649632753 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.172956663 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.155800043 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.15886591 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.104375027 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.471426956 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.160325638 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.162348961 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.156934754 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.155737049 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.38692449 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.275899322 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.986808425 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.297427583 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.343242023 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.601256315 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.288490409 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.157062076 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.822488732 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.025028321 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.271270047 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.807200897 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.37156166 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.298002231 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.127856788 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.420710265 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.192059889 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.159034142 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.995753657 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.792536223 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.165426751 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.155451915 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.527126996 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.219121831 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.161924792 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.155539293 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.842324469 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.288213162 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.266377029 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.203533586 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.156144413 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.157076663 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.77890305 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.278134012 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.159570562 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.650823219 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.163363429 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.681829252 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.442014923 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.370041564 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.554779218 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.136224896 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.436061648 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.999987039 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.159897765 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.689435633 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.038918133 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.794100497 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.410860212 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.286760636 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.02449877 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.223862842 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.156112612 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.279371473 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.2367733 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.157250152 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.158788915 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.157342091 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.156846762 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.155641946 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.285448019 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.504367132 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 5.00737828 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.170536858 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.393333979 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.27997776 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 5.017455238 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.4717294 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.855670831 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.297321301 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.156410878 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.90790658 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.462215071 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.852882618 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.287574239 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.155894298 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.15643756 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.023354093 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.157689164 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.259425297 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.158926595 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.785691416 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.278424919 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.160286255 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.159995684 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.621420184 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.29692968 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.16396526 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.244674584 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.927189137 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.051166768 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.167990777 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.490051137 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.276103579 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.155920397 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.15620773 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.156205238 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.943588888 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.819857076 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.325341149 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.803817109 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.925222271 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.255415735 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.308787859 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.255296891 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.402576897 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.387853142 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.299694937 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.157166219 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.15722236 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.160356603 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.668859612 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.039018989 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.215347796 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.014437674 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.18178597 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.143902034 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.267008745 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.959247038 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.170404753 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.860388511 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.141601476 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.263362475 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.157301514 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.155756672 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.344199087 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.340968315 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.304554117 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.732126985 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.1704139 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.157403195 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.810971059 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.289231791 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.835277051 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.271747349 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.985343623 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.234151793 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.28596492 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.287085329 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.780523806 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.290696171 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.157704705 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.840914077 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.308654537 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.156674989 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.197931348 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.874837303 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.955896219 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.901863764 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.794362928 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.12238277 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.711761976 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.412061809 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.302950327 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.007599052 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.263783868 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.432104044 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.242955931 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.654087431 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.174519281 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.918276408 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.173538997 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.916332548 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.168623006 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.129104867 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.284299199 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.612155228 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.278667701 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.157000051 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.337503971 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.255954079 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.799172631 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.288354081 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.29834381 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.498463607 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.068076965 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.262590449 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.423345123 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.243194712 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.078205064 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.135205748 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.51105626 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.086101605 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.171766238 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.272769713 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.917870357 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.34414165 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.414038031 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.297988685 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.157232378 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.157047781 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.317249382 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.247522138 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.160647558 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.565878969 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.148941271 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.211647843 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.267930917 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.160301561 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.158071887 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.371922887 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.288209948 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.442345904 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.620796728 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.738045544 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.950614961 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.292509394 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.785957149 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.293318222 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.864344337 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.27944389 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.160292092 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.811237178 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.291855609 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.43820713 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.308747719 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.272097829 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.817849785 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.262236741 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.453355579 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.274599175 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.283665162 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.909251087 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.701722817 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.409048809 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.589609314 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.197695427 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.697047176 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.247770143 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.732229962 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.187838743 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.87453189 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.239170141 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.214680778 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.157498603 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.160288814 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.694505169 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.160629378 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.1620852 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.9397024 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.874755364 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.080947286 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.918694619 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.283294907 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.160961252 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.157384169 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.15743927 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.070431602 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.243830468 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.513557929 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.297408274 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.158671978 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.157726906 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.123931942 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.494032359 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.970785038 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.032154777 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.15385402 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.299018534 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.158285719 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.158725279 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.157861575 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.1620985 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.157664559 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.158470084 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.66607582 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.169015514 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.789363283 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.282286519 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.161819407 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.360664227 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.224854749 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.158881224 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.394696061 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.244278694 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.29996427 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.228351461 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.158671941 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.563925099 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.300849162 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.13260425 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.482447181 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.534870558 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.406982776 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.665831312 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.208430395 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.565203551 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.490993907 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.959158499 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.164632982 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.077190488 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.272459074 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.95033522 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.156354331 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.608813927 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.776668661 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.181846103 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.493435409 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.063081582 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.565959075 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.314940803 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.227415154 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.15789061 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.158374785 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.217418758 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.443666855 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.210491679 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.45449469 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.365224069 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.147719918 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.487574571 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.259903552 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.388120105 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.1885204 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.173054995 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.158213929 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.157803034 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.631174244 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.034450401 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.252168177 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.160803428 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.073716376 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 4.024185758 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.065370515 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.807074352 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.098502271 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.297192074 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.160837389 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.371175871 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.210133023 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.943383795 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.179046572 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.932893356 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.524385876 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.205588072 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.370261907 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.567420942 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.876308969 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.530731908 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.280045545 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.158448688 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.538840333 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.169348207 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.302225746 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.076532027 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.486488102 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.724991174 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.655761493 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.420539005 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.277263015 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.069809898 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.737377596 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.183366347 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.164836045 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.007617369 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.303211563 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.460691028 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.128908193 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.435684592 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.301978405 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.818540084 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.881599542 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.299842256 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.782438912 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.304718566 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.159737072 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.988992512 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.083401659 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.316899462 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.283583963 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.163763279 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.177550986 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.828883947 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.759590936 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.388532292 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.236689845 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.158745744 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.956661204 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.887640841 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.278928866 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.162346141 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.162186333 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.612450898 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.207246388 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.160061112 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.567674356 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.775150288 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.300165669 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.68282863 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.301799396 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.302224189 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.416095471 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.568340318 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.369665505 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.222039057 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.162629763 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.158703307 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.158746539 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.732188699 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.169395815 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.158766656 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.762023065 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.30159945 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.930952922 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.085663236 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.39489954 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.230800366 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.571480942 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.303143321 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.664164568 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.077963848 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.271593934 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.446521345 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.247274792 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.257835343 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.914770688 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.270564967 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.159109118 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.096725075 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.51325013 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.523083597 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.537612381 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.444688057 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.250321542 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.833420861 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.272344821 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.94325056 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.176503831 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.1586404 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.664641755 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.306608097 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.602968839 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.31291327 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.631827746 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.278039399 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.501055996 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.437702108 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.25536781 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.15947922 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.158231928 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.139453491 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.203045982 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.75622963 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.105291661 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.639377124 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.293932131 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.018403351 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.777662693 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.041246414 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.352383366 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.481186781 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.479591671 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.192925992 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.126871759 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.546028453 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.244221364 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.330042897 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.258029136 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.954358279 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.234795207 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.159936797 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.740280575 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.169456785 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.159505666 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.15942495 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.072786772 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.958160893 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.267921358 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.44685065 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.259577953 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.160281953 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.773150417 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.440128207 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.199910082 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.160329846 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.158863578 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.022663296 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.273404877 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.159712676 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.508071345 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.316337487 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.449164254 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.986541783 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.614764442 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.252274284 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.159511318 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.162544675 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.867929797 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.743020557 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.195213401 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.519572581 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.226499587 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.689705836 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.174416443 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.639906677 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.691118898 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.134026846 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.285567922 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.160467272 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.214571815 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.067444589 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.095655322 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.929604835 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.616914674 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.25424406 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.955467183 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.159081523 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.225834507 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.310257816 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.234252674 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.16016459 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.159639256 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.160374113 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.657111194 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.180996018 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.165799876 seconds)
  done (took 1465.323100007 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.453343409 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.159972578 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.162718913 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.159739874 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.159020364 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.158724317 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.166014638 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.158791547 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.162650265 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.159734155 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.1627446 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.159608515 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.159968712 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.458968732 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.164718862 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.159573381 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.159817518 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.159286467 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.160247358 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.162985312 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.159695558 seconds)
  done (took 26.098359067 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.160120898 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.163935865 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.159625902 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.160502434 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.159811709 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.163056361 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.159572955 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.16246327 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.160099025 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.161510802 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.161120742 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.160090528 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.159416447 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.159770887 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.163236169 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.160414097 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.160108764 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.160725578 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.164477212 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.161060286 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.160671301 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.159127488 seconds)
  done (took 26.670551053 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.160200667 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.160083095 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.873925927 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.286795942 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.167291233 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.15953334 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.163717783 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.372251072 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.200085685 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.065860417 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.603538316 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.23184249 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.164154507 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.349924203 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.258667365 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.160349974 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.287838619 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.160985331 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.159798481 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.162155938 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.163853973 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.383671257 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.302672737 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.161811797 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.006847924 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.304962443 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.166712362 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.159400067 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.161126307 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.137332523 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.266616261 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.164106682 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.990433624 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.913772514 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.510684335 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.068078643 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.280168166 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.163814624 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.159884026 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.161956871 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.364701592 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.964544102 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.163543236 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.159820723 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.49067399 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.279673336 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.160739155 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.532897218 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.232067651 seconds)
  done (took 91.259053667 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.160350004 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.299826632 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.218025169 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.163353162 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.291156055 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.160395945 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.225847413 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.163877774 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.159698624 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.160090583 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.303574276 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.322353021 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.162086026 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.161208842 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.255277736 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.164795682 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.159765811 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.159502604 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.161684557 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.163412681 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.159734533 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.212803112 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.286577092 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.321940945 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.161633792 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.159548533 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.160875086 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.162325994 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.313408122 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.162179094 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.160164507 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.160275502 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.300400449 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.275522353 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.161729376 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.160401622 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.299401148 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.161225946 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.161428837 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.16058873 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.162788445 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.160241668 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.212034612 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.303949731 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.165134476 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.260973816 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.160191576 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.160549592 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.313471238 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.162171248 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.160107978 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.332458 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.165979824 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.16082882 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.161045239 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.293713926 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.160919623 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.162903255 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.160558159 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.303872435 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.160430143 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.163428743 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.316107586 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.161273106 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.160603667 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.331131616 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.261074468 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.161232573 seconds)
  done (took 83.092666633 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.1650129 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.298451929 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.336759798 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.337910617 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.302009834 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.278432498 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.300973711 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.297104238 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.300293673 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.301857987 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.297572973 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.264075718 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.271403902 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.262030404 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.299211192 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.283224648 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.282038022 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.279229307 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.302064113 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.303111874 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.280198275 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.335866113 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.298471278 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.340352372 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.527748466 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.268407242 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.297354363 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.304125316 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.339544866 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.298025747 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.526343343 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.303311208 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.297308825 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.339836337 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.527342927 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.29489719 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.161812086 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.296732269 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.305091663 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.29824651 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.270026017 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.344805597 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.297963413 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.267746235 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.285202153 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.295785928 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.341804177 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.523745925 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.26269958 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.301262143 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.300009226 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.338948842 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.294700589 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.281257153 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.339921174 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.267854987 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.335577281 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.342786946 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.302574179 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.338249832 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.338922191 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.26966564 seconds)
  done (took 82.478959394 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.160952786 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.161070511 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.247558195 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.161049673 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.161313203 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.245285683 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.165136364 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.160877728 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.160337779 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.16015551 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.160763143 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.248451891 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.519060663 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.16378713 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.248191722 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.520359172 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.248715826 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.251554149 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.162665504 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.245305517 seconds)
  done (took 27.68381778 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.164219217 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.160578486 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.160240989 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.316380501 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.163837177 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.295897882 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.161187457 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.16125662 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.163844353 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.160263901 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.16002317 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.161563178 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.162817194 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.317318087 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.166662819 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.297255987 seconds)
  done (took 20.30389171 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.163974484 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.160396617 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.16073553 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.160924412 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.164060103 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.160436769 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.161062308 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.162309775 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.167488022 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.618135321 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.164684753 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.161785096 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.165024841 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.161155832 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.160189615 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.160037038 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.1641514 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.162194213 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.161471174 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.159898072 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.732968806 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.165126253 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.162423929 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.162184939 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.162216978 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.740376013 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.162102646 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.161050609 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.164203111 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.161583026 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.160590267 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.63513432 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.164558634 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.161081225 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.160836308 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.16139579 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.161986298 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.162862429 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.161253518 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.161426688 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.161505721 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.167267574 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.161259239 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.163449009 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.161057326 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.165626403 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.160072879 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.622253718 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.163283263 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.164372072 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.161621314 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.160876508 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.161323482 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.640791496 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.162063334 seconds)
  done (took 68.074115581 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.202662999 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.225947829 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.16767908 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.161616352 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.214993131 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.20752499 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.203926905 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.175063085 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.202630566 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.161668619 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.227002237 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.177681401 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.205992425 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.216667264 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.223950763 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.203127935 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.161769675 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.239054387 seconds)
  done (took 22.709802038 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.160576473 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.161503252 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.161081444 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.164748989 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.161019601 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.160451791 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.160950494 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.161509362 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.162803881 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.161682605 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.161057825 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.162357823 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.164846652 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.160791516 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.15984511 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.161281338 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.165427662 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.161096114 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.161481816 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.160903718 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.165151654 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.161648461 seconds)
  done (took 26.69748282 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.192304288 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.205768315 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.16523448 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.163474845 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.161703816 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.183600772 seconds)
  done (took 8.202198665 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.224387952 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.233077058 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.202292646 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.220167234 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.239087776 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.247956956 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.24542007 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.246581542 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.233493552 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.464632256 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.25062735 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.244498795 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.236633326 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.293551687 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.233156579 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.24100547 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.252021089 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.245719259 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.218695855 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.243832037 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.258738332 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.236910849 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.255992159 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.242500754 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.252320002 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.29268621 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.234932974 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.470504746 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.2560267 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.238666714 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.240913421 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.249078718 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.244788104 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.464281502 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.214126703 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.232937185 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.247550326 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.242204813 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.240582119 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.290271889 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.205950758 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.234767056 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.231686033 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.250497811 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.236505289 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.256431638 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.248087438 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.252244964 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.251771144 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.477192575 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.239826817 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.291570687 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.233407531 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.242596578 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.232986645 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.472985064 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.469409335 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.285658886 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.236153338 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.466099453 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.29011138 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.240406418 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.289966005 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.467589493 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.23494572 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.287555027 seconds)
  done (took 85.205226519 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.287024659 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.198991465 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.251477895 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.475958553 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.287765092 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.250459691 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.249591843 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.252455134 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.242886852 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.222721082 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.247952916 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.25920324 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.292320652 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.292649038 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.249997286 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.248853821 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.248718617 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.286920562 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.215461841 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.47493605 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.24963053 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.290228376 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.292084739 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.290053351 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.465720446 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.248222194 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.255574267 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.254002463 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.239539722 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.254227536 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.262954778 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.255593581 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.2895722 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.197748374 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.289239898 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.251548795 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.254321966 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.257204728 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.255297408 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.24330854 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.29316854 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.243848587 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.255570981 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.241134167 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.464936402 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.242362566 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.251699986 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.216417066 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.254338208 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.216031183 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.466021734 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.465142993 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.473685225 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.288924642 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.255718036 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.25233167 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.255209411 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.25049727 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.254379628 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.241896175 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.287184408 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.243160543 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.473489141 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.249628804 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.253812922 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.291854663 seconds)
  done (took 85.752388394 seconds)
done (took 2481.716313716 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.219670484 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.271832154 seconds)
  done (took 13.621043384 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.161933093 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.163387768 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.316508675 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.167331944 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.186349989 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.170487631 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.160668321 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.169165344 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.160616841 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.245359192 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.163410177 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.296804316 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.266113415 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.162359262 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.174479456 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.172159877 seconds)
  done (took 40.280741387 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.260904003 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.726879445 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.131931971 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.963194408 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.194212611 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.016877117 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.473270647 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.858608633 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.464217231 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.616924588 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.420344169 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.061373973 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.973666035 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.32051948 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.65601159 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.701797161 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.800450752 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.864631734 seconds)
  done (took 61.638050502 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.152734955 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.314975174 seconds)
  done (took 8.626087503 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.15876734 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.169856809 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.187674894 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.187998312 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.188600551 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.191387496 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.184414355 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.188505271 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.162111359 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.175582304 seconds)
  done (took 62.940437415 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.313248021 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.623138061 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.470305423 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.6191055 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.795872039 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.636938886 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.33573698 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.55122738 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.258350071 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.151714801 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.366273383 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.544745902 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.031031253 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.432135642 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.779708737 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.397490861 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.882783043 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.5770332 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.48660791 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.579542903 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.432391445 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.255871794 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.581212689 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.055268736 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.168268342 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.771781415 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.356959198 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.296411923 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.233238689 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.304052002 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.518632111 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.175987435 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.4335693 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.163645532 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.328719134 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.7119081 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.825417667 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.36161829 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.635216041 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.509686825 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.548359505 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.824892934 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.224272254 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.809814855 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.315039196 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.549912359 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.215864817 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.38825696 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.246348995 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.277645312 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.810503446 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.34344946 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.306171614 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.28692761 seconds)
  done (took 157.237955915 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.15065596 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.564244743 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.331505584 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.154738616 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.549372375 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.371203398 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.894111499 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.694125332 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.171827858 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.36833961 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.331654664 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.286621628 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.154423916 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.161213627 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.155873643 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.1541532 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.346085986 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.71329618 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.166687343 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.154865894 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.36955957 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.409899393 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.287251736 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.155650515 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.322517029 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.41116924 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.565680576 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.285205699 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.549098097 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.153879142 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.59822657 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.165794334 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.159593152 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.044637397 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.552688188 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.50118307 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.582982898 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.159541137 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.919388788 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.155028002 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.859062605 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.359759291 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.492755189 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.310998759 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.312140117 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.392275893 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.755283302 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.154713802 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.939836114 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.32983415 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.380104837 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.374403664 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.436991162 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.160231209 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.659711988 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.155830337 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.154639779 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.446113822 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.310076026 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.313740731 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.154673849 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.155997875 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.160474809 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.406319296 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.154177059 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.273474721 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.156931955 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.157056326 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.277389253 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.286474718 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.306415966 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.404069271 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.409628356 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.115012486 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.514324486 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.397506029 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.573360375 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.421582747 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.159499791 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.154570027 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.616520535 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.607687213 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.324122087 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.401886761 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.469961876 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.454596782 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.73134799 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.152697213 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.386917866 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.330936781 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.389508643 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.312254785 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.523374002 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.0510082 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.152040815 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.156000238 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.410562312 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.297340096 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.159560842 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.665699327 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.423793595 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.769397635 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.331676544 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.619289784 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.272001226 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.155957771 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.719983715 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.155159193 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.38133241 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.447302334 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.165266912 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.16023383 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.314402629 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.912977431 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.154336051 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.171713247 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.575103686 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.161395538 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.318836509 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.157642142 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.411700264 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.023661554 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.391562903 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.159309157 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.437050114 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.346962921 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.308218843 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.158771848 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.549993909 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.427948392 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.562304242 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.389630897 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.71858873 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.155849605 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.465181619 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.157970641 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.154241339 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.336487302 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.073612112 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.331872953 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.160381983 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.42375354 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.32130771 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.538099126 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.153987928 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.39867998 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.408778128 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.532441205 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.154388097 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.295888672 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.15524082 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.106586727 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.327279751 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.153526385 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.159158516 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.991758724 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.155792141 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.310719208 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.388967833 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.859874202 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.533769287 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.513042496 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.150922358 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.5763537 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.353043788 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.619379341 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.646130548 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.33220035 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.156574489 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.156449665 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.155040273 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.403086659 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.339493597 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.155770818 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.157081253 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.88588858 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.261550748 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.155933817 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.347360453 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.963293323 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.582374602 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.375761456 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.156002496 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.521201127 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.152808843 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.398264364 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.66452747 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.425308806 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.159370701 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.155217564 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.156352493 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.157511943 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.367219606 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.41024392 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.719309503 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.309554022 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.458668574 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.374270229 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.477159847 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.625907268 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.164678014 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.421624511 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.155476849 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.553926713 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.159613431 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.342658089 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.421100898 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.157340374 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.476506678 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.515587346 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.237340824 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.562920489 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.156563288 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.158377512 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.155656398 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.331821789 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.619710779 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.154447686 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.255696501 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.524542073 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.283046183 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.354617754 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.393581921 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.170195063 seconds)
  done (took 739.060509739 seconds)
done (took 1084.556183611 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.150501068 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.156201892 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.158445592 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.155515325 seconds)
  done (took 25.753416531 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.140260747 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.218436592 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.327757786 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.163944277 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.510796766 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.211817016 seconds)
  done (took 11.70976559 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.660697143 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.157287976 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.156326942 seconds)
  done (took 18.105852748 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.431583481 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.625840366 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.335997007 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.254703986 seconds)
  done (took 6.784579845 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.167566305 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.161924562 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.16296811 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.162268159 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.167467766 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.161636746 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.16424425 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.16223124 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.166089081 seconds)
  done (took 11.614017503 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.859172407 seconds)
done (took 79.983323714 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.453088642 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.469106009 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.230059432 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.32420719 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.30372056 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.476320002 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.274258761 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.182821348 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.503945423 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.587662896 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.670450861 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.251321265 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.436915649 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.618504985 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.400901803 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.186825238 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.177508298 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.225688737 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.664642494 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.370655021 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.162280852 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.294216738 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.919326676 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.184502906 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.037931047 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.275241403 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.410290349 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.135058676 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.339948463 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.18073724 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.238495077 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.673400676 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.337919898 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.45525437 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.255285511 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.955480017 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.608276787 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.194862933 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.318684382 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.600219408 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.429329186 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.288126168 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.153948399 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.33475718 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.585362142 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.175262405 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.134994135 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.31913934 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.587230728 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.346446959 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.500705268 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.166660077 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.791734849 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.234182205 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.248570632 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.154509777 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.131887651 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.693303313 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.317918237 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.454583411 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.182278064 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.175698345 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.063516336 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.190281519 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.504371238 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.468772778 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.572749401 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.252290352 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.64611294 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.18779881 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.179236392 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.189132734 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.853653008 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.289280469 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.288873705 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.163360574 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.419372385 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.273175028 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.154113951 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.490254784 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.376328566 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.154684607 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.300086369 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.51612939 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.319920024 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.499398663 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.668538842 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.536663257 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.598630626 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.213813739 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.894882103 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.177116424 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.258949595 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.159441976 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.169052117 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.959016588 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.181264362 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.683564435 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.292071595 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.756713799 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.185697736 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.179037057 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.50095754 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.461554296 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.89988735 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.194328333 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.300556274 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.153136205 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.464376008 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.0792228 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.256206725 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.778402826 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.164018753 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.218358163 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.675104687 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.159957085 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.474315877 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.587511393 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.24677964 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.154406416 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.465626921 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.169141144 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.286697447 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.749736181 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.544979591 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.420609968 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.157010984 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.351754521 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.158440647 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.356342927 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.163287729 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.729225252 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.689817425 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.192852308 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.414681275 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.290226296 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.317649288 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.29448474 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.217622336 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.292101447 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.493227263 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.461961365 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.277934304 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.153203206 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.506209686 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.159562347 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.375624212 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.469151668 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.322900036 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.479403856 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.253030023 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.175571949 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.085537561 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.599710796 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.759603427 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.78063066 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.401979437 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.287717747 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.684047535 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.509897149 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.986351246 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.257350959 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.216714457 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.159927564 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.17481486 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.224252215 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.150571055 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.157085667 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.465354869 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.287412198 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.698669574 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.917183247 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.868385343 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.421912435 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.30981527 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.07277414 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.735101012 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.16213299 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.477872987 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.654400626 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.295779035 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.190066361 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.154258875 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.231337359 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.891509603 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.196679323 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.50108843 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.630212163 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.390620023 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.565937291 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.395057156 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.199277068 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.538305494 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.418102085 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.411071961 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.387724846 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.584913969 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.277865483 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.478196625 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.236110446 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.417043176 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.15949433 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.109045028 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.419060092 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.642281462 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.534540357 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.384394175 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.32598376 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.474704771 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.161715488 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.564685318 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.255324909 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.550819173 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.18206306 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.542566118 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.2507902 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.500041644 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.080466241 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.275022848 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.415385193 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.26711404 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.207859457 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.621135577 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.17944243 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.494318927 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.320738085 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.341225768 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.381784122 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.188874576 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.294926231 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.349022382 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.296092688 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.392844202 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.026344163 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.583275326 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.904066224 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.281897339 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.150926351 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.560880036 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.18345892 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.1749898 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.442938536 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.365845809 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.474296206 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.279897326 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.327492816 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.15385693 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.193565115 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.586235045 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.026401333 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.744001591 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.255960351 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.188049536 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.151525913 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.606901382 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.589694007 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.222766815 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.295300047 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.737202625 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.192084197 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.359361736 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.16650486 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.16067897 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.941397954 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.291850211 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.404071342 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.696872808 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.164643428 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.235105388 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.189411376 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.585054289 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.706298103 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.213342333 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.284922329 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.551184285 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.071806091 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.529628056 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.184493365 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.311914574 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.529338714 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.277420463 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.274784054 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.155196294 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.192322468 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.594634193 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.295832108 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.694947153 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.189383126 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.535462765 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.327352219 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.38180505 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.186653552 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.247820054 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.583006168 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.358619351 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.560279748 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.16293241 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.329807498 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.416794545 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.184840182 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.152737356 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.311346413 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.888465139 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.67380001 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.474959968 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.311276587 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.13528116 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.399884525 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.158526303 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.59913824 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.292689696 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.264271362 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.781851509 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.677884713 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.163775783 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.403941165 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.158263176 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.516176514 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.184947597 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.179552679 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.318972639 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.259267396 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.153516444 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.595104117 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.316859142 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.693760054 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.249375262 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.962691749 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.371413561 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.334656306 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.276876815 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.47332726 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.947526603 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.175022371 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.302216577 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.806675846 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.334128226 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.192039014 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.429773359 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.16189056 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.759678764 seconds)
  done (took 884.499219584 seconds)
done (took 885.815479091 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.332651299 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.517677075 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.387957731 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.045488529 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.957529089 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.787589409 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.402637583 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.380750851 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.219423299 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.403272367 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.088652042 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.990349996 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.236176426 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.258665387 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.235540347 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.243044796 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.35934179 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.387355137 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.260500034 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.090850423 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.512946948 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.088691826 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.570144334 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.441830077 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.516508196 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.241763389 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.350427835 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.496914849 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.495947389 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.333749768 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.358971698 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.373113797 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.978745108 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.380268403 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.238339602 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.226666772 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.030827647 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.242623482 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.339872877 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.22682701 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.563378583 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.272321639 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.872131641 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.081260656 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.925326521 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.570953228 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.029665389 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.24765278 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.248129582 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.347975196 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.40216586 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.347614678 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.49822804 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.358626467 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.042810934 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.078942447 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.499491295 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.022283018 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.875211597 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.350306549 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.515498364 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.251902502 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.350874517 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.379048995 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.266235586 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.442534496 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.569408917 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.340336878 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.367095555 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.412551702 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.389754628 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.368062268 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.263003369 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.285704566 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.280670484 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.406300701 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.012926456 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.384357278 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.939430253 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.242697029 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.106735877 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.009760627 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.098721444 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.225219126 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.33311342 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.92098101 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.967023724 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.108553409 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.261076417 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.370583538 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.090533413 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.384045787 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.601690629 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.347985064 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.334702035 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.386772826 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.981356944 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.394317097 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.316067082 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.369360973 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.928456561 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.355086149 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.148298405 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.224627419 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.246772852 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.348191125 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.349884028 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.570446856 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.371229123 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.310882913 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.518808117 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.282772646 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.367565588 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.258772112 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.222964402 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.931169666 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.430480044 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.021272641 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.396285841 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.815488057 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.406529994 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.224869665 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.559230995 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.443186363 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.336317988 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.236417433 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.251858644 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.101170082 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.247790615 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.249633009 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.334317781 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.6029365 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.349115719 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.055292389 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.370206109 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.068196939 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.383303798 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.368871523 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.220037137 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.98554261 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.239579711 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.296913354 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.444429813 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.541660613 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.388465775 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.44037886 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.261199875 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.437108415 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.39690603 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.263623933 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.368297198 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.258080415 seconds)
done (took 251.143731771 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.496710439 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.321250596 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.445925765 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.429728535 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.55631206 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.526034811 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.230797851 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.600035194 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.274878318 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.58166489 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.409364156 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.006032721 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.23483627 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.378638114 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.512657818 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.399957293 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.274450978 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.421692314 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.614476658 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.558715299 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.893787544 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.411764523 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.307230826 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.589734902 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.156630156 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.900777986 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.560220396 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.278232776 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.428885032 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.885059411 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.929727235 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.433690124 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.563849898 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.917155282 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.533500184 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.861369468 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.555820528 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.912332543 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.493312529 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.493160752 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.435204155 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.91686164 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.885271118 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.908211228 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.304865789 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.528091423 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.227999202 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.029159801 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.156851036 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.858771748 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.448037853 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.968176643 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.033055971 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.510031389 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.368844669 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.760309737 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.651327494 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.641579971 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.564014363 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.4685147 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.495471995 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.591112171 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.578713981 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.352412173 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.919795177 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.450328903 seconds)
  done (took 150.569573912 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.607400158 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.447657475 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.571713659 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.562186649 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.73637015 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.583500495 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.680645294 seconds)
  done (took 14.32645781 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.228276665 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.2120243 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.453250065 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.460175366 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.219299389 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.342549865 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.300079551 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.886054161 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.433860183 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.252874447 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.535073007 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.455272847 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.791444013 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.906974365 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.300633364 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.45315536 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.188188476 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.278419293 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.273598739 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.469407229 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.883374755 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.887734353 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.404837921 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.303434602 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.220156158 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.252773893 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.211828085 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.185394112 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.248826025 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.196676219 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.222546263 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.321655733 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.205650878 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.888030417 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.230578107 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.537903319 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.221261909 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.255322322 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.344718847 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.153853018 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.197938604 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.215767383 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.352659478 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.220869033 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.193602268 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.400283241 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.197143545 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.221191893 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.196695318 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.210760183 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.398968653 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.21191057 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.231604699 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.801594339 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.419776929 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.891089308 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.280320983 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.202674498 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.213148373 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.270092174 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.207251528 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.470599456 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.457880862 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.191799536 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.427416446 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.527772798 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.212331155 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.190686775 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.191504212 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.457811789 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.208561195 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.41091645 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.209825217 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.26045403 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.262868647 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.345144787 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.400393881 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.010243352 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.971630629 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.822058096 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.182525709 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.196304598 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.521416517 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.147283418 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.803621914 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.197224818 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.254824655 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.854171627 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.121631592 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.212130195 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.520277869 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.191736314 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.26827181 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.262697893 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.236701468 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.270464516 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.435386277 seconds)
  done (took 157.165964592 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.383705582 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.739608133 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.424622585 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.227735665 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.328021096 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.49056975 seconds)
  done (took 15.732143011 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.523859367 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.02176767 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.226853479 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.226425481 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.268343229 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.206609726 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.206330687 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.39685944 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.348879904 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.217480229 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.206692548 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.231765294 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.207828431 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.339125777 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.205730767 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.214708516 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.209349589 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.229424977 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.220057699 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.277717198 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.504840597 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.265280961 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.275288181 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.082494077 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.271358345 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.214482633 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.154542262 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.216321724 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.218670129 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.521033707 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.400284524 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.209900289 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.034191505 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.553591127 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.978467506 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.092800695 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.364491149 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.232069058 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.260486346 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.209230631 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.229070847 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.277232117 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.22434705 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.232404613 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.548645728 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.019270357 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.30053377 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.468936133 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.20702765 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.229770658 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.232259754 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.239471539 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.206020131 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.228844058 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.733401244 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.630793054 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.189687727 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.207283388 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.264221217 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.086312547 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.288856638 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.209498743 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.539821361 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.156545991 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.857749152 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.230049852 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.089347497 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.350515142 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.277347669 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.229315685 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.230477672 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.230907538 seconds)
  done (took 121.681772416 seconds)
done (took 460.633396982 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.190872166 seconds)
  done (took 7.324200947 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.261386499 seconds)
  done (took 7.52719359 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.157593714 seconds)
  done (took 7.29966238 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.175377261 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.179215364 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.172137644 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.16986694 seconds)
  done (took 25.863479249 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.313957556 seconds)
  done (took 7.452613075 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.153730471 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.168312792 seconds)
  done (took 13.562469507 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.315920781 seconds)
  done (took 7.465746475 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.50302759 seconds)
  done (took 7.64962977 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.159940222 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.17802905 seconds)
  done (took 13.504225093 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.151584506 seconds)
  done (took 7.290259649 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.631765343 seconds)
  done (took 8.868099185 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.154530173 seconds)
  done (took 7.326927486 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.154966402 seconds)
  done (took 7.297358776 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.205328962 seconds)
  done (took 7.344807745 seconds)
done (took 136.933722434 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.154030105 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.159228364 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.164211665 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.159145145 seconds)
  done (took 25.771385257 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.489884328 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.494170284 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.468989059 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.54138084 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.435842165 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.437099222 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.491397537 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.4907324 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.438109584 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.641523149 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.49238185 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.644625404 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.541865663 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.46853373 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.473069863 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.539245595 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.542284418 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.491173341 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.437241843 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.468805555 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.536185775 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.543910472 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.911386428 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.920013677 seconds)
  done (took 38.079598424 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.374401316 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.61106732 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.321121921 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.585116978 seconds)
  done (took 7.031091341 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.200521922 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.542833362 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.523986233 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.581557555 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.52468767 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.339189854 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.5247451 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.3778808 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.31897004 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.305339294 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.773615178 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.316963261 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.333935734 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.582868981 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.337454587 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.170564221 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.165431552 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.303596079 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.54074875 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.383804893 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.430461768 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.524728372 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.524169701 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.527379919 seconds)
  done (took 35.292627969 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.995115996 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.0953422 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.524517175 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.078305563 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.865291225 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.9854894 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.450881881 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.671049529 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.435838659 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.410435499 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.888955583 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.939754711 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.310203085 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.06688445 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.998412142 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.342784727 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.345781105 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.040937132 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.57995695 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.46932525 seconds)
  done (took 39.632835853 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.153630323 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.413986328 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.396408803 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.334269173 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.154649699 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.158796654 seconds)
  done (took 26.748303828 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.220179452 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.303631487 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.481324818 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.440861875 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.316967603 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.296332605 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.831571549 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.385039143 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.912803034 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.969360606 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.805178759 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.62249279 seconds)
  done (took 22.725665823 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.158951438 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.186553048 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.161395611 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.381023948 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.486724664 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.925296832 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.173330065 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.158731499 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.69025003 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.414564071 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.300497182 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.395343875 seconds)
  done (took 45.584101402 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.374645858 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.438348953 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.500600725 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.203812893 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.700011756 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.247204193 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.54895816 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.124186601 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.966769219 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.007581397 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.690854578 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.216491783 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.689349835 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.129273018 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.158313689 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.50999378 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.975652027 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.655642723 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.60475937 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.234043605 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128280831 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.359445677 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.16245481 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.718913801 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.478823028 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.156869238 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.371243477 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.404769461 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.154365271 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.402522391 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.188588741 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.630826499 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.358139405 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.472081266 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.689003031 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.237095 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.256852086 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.161045034 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.776242988 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.453463322 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.308720517 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.321389461 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.155514319 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.165443153 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.416890904 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.940922091 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.171639949 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.791392536 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.141445943 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.281271043 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.045244055 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.884689462 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.61407573 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.933711625 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.300242961 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.51178855 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.327440542 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.158395258 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.422140806 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.182242904 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.339214258 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.253705328 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.380055226 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.128955263 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.351326073 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.493577203 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.48084807 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.482159878 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.417426866 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.501200849 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.543785541 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.275417249 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.98053268 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.346366877 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.69798782 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.073964279 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.518732383 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.160771831 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.864828612 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.688409043 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.138889234 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.272713664 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.853417519 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131348365 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.155969958 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.334942087 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.027077033 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.130284726 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.253110124 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.186484009 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.553997589 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.342156226 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.360890371 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.351746232 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.864710169 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.140789136 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.159388035 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.455000801 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.128246605 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.718032158 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.158488942 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.146263056 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.202780686 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.725488688 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.575610871 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.958298573 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.910210062 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.840600605 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.46975455 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.765934714 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.323150683 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.158877847 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.538938282 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.484251173 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.158712071 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.850556365 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.159786723 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.252305894 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.507086594 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.159870209 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.130606146 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.604055652 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.357877317 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157129693 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.392780049 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.160724547 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.313295036 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.15607734 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.764380416 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.586922562 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.404535888 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.699602755 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.260240155 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.23630113 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.126470099 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.308362022 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.676043949 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.244173512 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.502345142 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.599970276 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.388061109 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.618020782 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.150605973 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.004585649 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.653366964 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.424904804 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.495386042 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.825511825 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.330824783 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.250722326 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.155558868 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.343042484 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.16230252 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.726647646 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.159444382 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.882027896 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.175793014 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.455989553 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.155817784 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.334439267 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.15825648 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.368624306 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.813316287 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.1979576 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.334159936 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.458528479 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.437587646 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.156079671 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.131965343 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.537118038 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.422225993 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.698353657 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.412326011 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.805337071 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.514217428 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.658435227 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.366521192 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.549847348 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.952408677 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.584397255 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.509057774 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.207450889 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.173291322 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.714206881 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.219582871 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.575216363 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.388282708 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.902282065 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.006349949 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.157628515 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.210326887 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.638893792 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.132220106 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309931471 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.640311192 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.189122554 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.72652048 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.252880668 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.402001277 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.408323595 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.18760129 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.502717026 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.992686114 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.591311122 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.513334542 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.486929464 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.140759184 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.162957771 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.613387448 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.641783662 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.291124437 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.412026328 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.145253255 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.211513878 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.159735143 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.506068875 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.103270411 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.905601918 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.486705161 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.7260285 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.13807101 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.31521885 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.710873569 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.17036915 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.09903967 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.3019937 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.190528705 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.799848349 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.704299015 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.422346997 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.483668489 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.15947917 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.161398432 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.438098431 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.467844655 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.435079967 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.683836671 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.400709351 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.854027913 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.264207076 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.856517513 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.325756598 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.200022615 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.731074155 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.469455295 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.097400091 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.356171551 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.885043089 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.284636139 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.772235961 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.470664574 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.157128333 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.64997891 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.776448749 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.160149753 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.205756925 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.292772862 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.162196129 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.452479883 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.922611844 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.404630458 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.880341167 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.544157654 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.407947786 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.352871465 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.586651385 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.692150458 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.93811346 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.133694151 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.317600533 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.257570515 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.463171127 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.161500849 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.454144039 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.838094962 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.81445206 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.955411875 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.709789768 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.371440313 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.912227729 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.641714447 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.404447614 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.481932528 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.135889976 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.766902555 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.137940499 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.3020588 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.12645271 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.966747635 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.477254299 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.535697833 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.652338853 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.224269741 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.692681981 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.545463731 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.17940114 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.334832342 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.415614948 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.1595283 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.463962035 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.154955855 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.738697684 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.60410279 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.156396868 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.657156541 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.358141776 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.493589169 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.316985068 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.889078285 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.19376707 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.294443236 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.724331748 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.335926443 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.296906027 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.501492249 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.007724538 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.193642054 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.188683821 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.665447286 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.798452062 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.647211985 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.775673583 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.759748416 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.530667884 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.908234899 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.163783327 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.370792921 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.320823663 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.163502243 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.358284076 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.572038093 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.19286355 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.376236611 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.498849744 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.314061271 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.731092143 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.141694651 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.845827579 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.450008257 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.668319008 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.729572904 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.93578467 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.626557385 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.197184959 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.623526733 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.145928455 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.31943661 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.40922285 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.883692467 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.233225016 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.007606582 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.954088466 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.294693471 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.581275334 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.227636322 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.926885837 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.322245133 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.393935498 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.369303998 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.300807441 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.128685683 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.750972916 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.931829632 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.43913053 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.324997448 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.351267882 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.268630964 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.319835116 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.672033575 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.471751408 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.90565594 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.644807678 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.401093949 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.129354196 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.15987501 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.432867494 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.517570728 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.257466161 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.503549457 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.59456884 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.214899672 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.206239366 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.221368551 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.360538681 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.923113908 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.883069951 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.507870164 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.696147701 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.759921214 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.195945456 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.910174858 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.368275263 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.523760734 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.580348163 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.065527057 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.588447848 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.466002345 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.316219912 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.133150698 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.359378912 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.167310521 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.243873869 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.928495787 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.464175429 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.204909196 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.00136793 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.767807303 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.159453234 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.185030222 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.582036016 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.385168893 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.353976817 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.156121295 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.750404147 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.529393918 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.327177331 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143021314 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.921146406 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.13060354 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.371336465 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.160732198 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.346648881 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.997350788 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.222582138 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.81211052 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.712590685 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.235165842 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.357072746 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.132157166 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.959365991 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.172119854 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.831475965 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.950079905 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.408730215 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.685618568 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.353779544 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.161525198 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.487252905 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.298386585 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.501502233 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.62665518 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.652293684 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.589689887 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.537045556 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.451329034 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.601201789 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.295293706 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.406090229 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.13241717 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.161220979 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.166829238 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.530626984 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.521191847 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157663068 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.709647186 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.410085668 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.276566799 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.326058434 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.244638161 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.745394627 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.368392511 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.272384109 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.32137637 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.423132215 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.512900736 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.159531338 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.380972327 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.157248125 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.202315749 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.371575105 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.409012978 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.516130038 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.470657794 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.057633027 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.323430614 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.891260283 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.894348498 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.68984261 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.162553035 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.008227755 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.529630589 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.158320792 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.655313469 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.815540676 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.354936596 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.858224019 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.271595428 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.184828729 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.316282739 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.662888789 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.167628694 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.800810236 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.596260989 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.157493813 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.642605057 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.232369001 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.324174259 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.928277367 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.656854935 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.164588601 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.976095207 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.31166872 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.706428976 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.432731669 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.20664531 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.166005807 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.790545491 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.141242161 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.160585523 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.264490167 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.692118337 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.177017521 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.726391812 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.281417562 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.316987461 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.168699842 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.301305124 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.159953272 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.373402661 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.760822545 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.405740486 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.437253391 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.356341238 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.164916153 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.756015463 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.85945467 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.290379994 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.329529552 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.157940653 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.582668016 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.959817083 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.160498441 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.715261791 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.436102301 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.371770865 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.585448951 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.417988507 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.198493684 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.372779216 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.159598923 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.447103638 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.317977455 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.730244918 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.42013789 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.548478633 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.28680081 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.173750404 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.702554885 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.640387941 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.035938148 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.158458895 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.470356885 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.158430105 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.983828876 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.799407629 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.351110238 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.286032932 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.139461788 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.745581746 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.461196852 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.282962937 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.161680863 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.373330023 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.678794789 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.132963337 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.97091658 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.04437584 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.363071302 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.487611672 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.130745697 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.355114063 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.176193651 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.143040075 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.655300796 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.160194082 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.497651718 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12910206 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.706343234 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.184736318 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.239914895 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.364003819 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.46329939 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.157021112 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151435345 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.335266543 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.160073943 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.159771537 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.550973537 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.242865202 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.408978349 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.634558184 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.384381787 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.498990666 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.054156472 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.96702362 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.169151403 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.468111922 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.99318233 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.714624498 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.242018908 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.675392199 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.978760597 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.174996842 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.705267375 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.406738283 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.892243866 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.30520197 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.659633383 seconds)
  done (took 1987.408143429 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.221447548 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.263211079 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.212411402 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.237958654 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.18335554 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.19345934 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.220775307 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.178126321 seconds)
  done (took 50.853971115 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.155654681 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.146765365 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.613906459 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.332227634 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.177900261 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.33876434 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.312542957 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.651658402 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.351370506 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.163486177 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.216101246 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.204123379 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.17343025 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.189205749 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.019654297 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.247259573 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.160874846 seconds)
  done (took 91.600272094 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.201500811 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.162490477 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.181929351 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.181198747 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.192543355 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.571986363 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.171193763 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.163505244 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.515733726 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.828240808 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.17917239 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.309163657 seconds)
  done (took 81.827367951 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.200241771 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.194923049 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.1962698 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.195576141 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.198815017 seconds)
  done (took 7.127219866 seconds)
done (took 2460.867161852 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.369967091 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.698492738 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.719399937 seconds)
  done (took 4.556064383 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.237831202 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.305028512 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.356659061 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.305524949 seconds)
  done (took 6.362937037 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.442128982 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.65872962 seconds)
  done (took 4.238870224 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.531255825 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.161643588 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.687699524 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.156681356 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.164970191 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.16458879 seconds)
  done (took 19.635191846 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.188458409 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.195696215 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.186141432 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.18564026 seconds)
  done (took 5.89676217 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.160398644 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.186722362 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.162033927 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.139235251 seconds)
  done (took 18.78535184 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.460486134 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.255128245 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.906131328 seconds)
  done (took 5.767468712 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.975615233 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.298595828 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.962222453 seconds)
  done (took 6.375792191 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.10809196 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.191740739 seconds)
  done (took 5.439212201 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.317656632 seconds)
  done (took 2.460215181 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.65402586 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.652882337 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.027012056 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.030727296 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.193000684 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.464644545 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.527602277 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.441331331 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.862648217 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.739593358 seconds)
  done (took 18.73272221 seconds)
done (took 110.158249272 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.112381683 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.560167031 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.325482688 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.858180889 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.251849109 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.324708085 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.774975392 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.662184033 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.465758627 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.465461435 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.234412412 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.252668324 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.187769332 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.561707778 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.187156621 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.510917569 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.566605328 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.129736442 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.448306961 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.16304063 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.778712208 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.752937397 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.952162387 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.759226432 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.572129911 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.304929172 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.009427574 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.516464919 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.681223575 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.010760779 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.311151582 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.418868491 seconds)
  done (took 154.248425716 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.156257991 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.165404049 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.16987332 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.161450576 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.137174222 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.168303583 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.165149297 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.164347337 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.900698046 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.898697864 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.166500248 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.135730929 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.168844415 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.161687687 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.168433932 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.162364893 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.041473669 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.166270556 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.165759205 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.164509263 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.171997127 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.014086131 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.167105604 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.021641732 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.034448916 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.169738053 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.162712172 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.168802389 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.166863513 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.166404384 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.166579835 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.165108811 seconds)
  done (took 189.312730201 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.155725903 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.166551956 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.164165187 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.166611874 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.168606647 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.167694661 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.166668163 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.166473495 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.165130941 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.170309673 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.163814354 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.16866617 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.168325232 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.161306052 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.164781162 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.16404633 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.165362848 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.168046959 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.164908548 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.166225629 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.170868948 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.16168 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.166559775 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.166076468 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.168757597 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.165952304 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.161560224 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.16539024 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.168155075 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.164329511 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.164919878 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.160613702 seconds)
  done (took 198.446792329 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.470510036 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.200819442 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.096298301 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.736423896 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.086560768 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.192220573 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.733666112 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.470680159 seconds)
  done (took 14.130989003 seconds)
done (took 557.309094626 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.844903982 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.090791055 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.340539859 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.388244276 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.756732346 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.465243422 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.385747829 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.638582972 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.90999617 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.629683354 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.658402656 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.386364872 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.995174431 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.388030872 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.362794639 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.621660295 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.582485318 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.873347237 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.378200227 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.031695987 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.382022981 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.056592779 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.645525638 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.974143477 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.660062593 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.105665949 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.261226431 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.586252375 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.379796286 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.383524301 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.120223205 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.520695665 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.415388697 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.416862521 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.626989267 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.633944379 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.497562481 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.60388783 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.342732989 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.851985947 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.026790131 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.772486791 seconds)
  done (took 77.134558407 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.189028984 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.201127412 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.360310662 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.261309504 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.828183011 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.262733997 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.440110143 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.403834373 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.280588353 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.420775743 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.443976854 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.853388534 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.431937717 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.808837783 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.417600165 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.451510235 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.264121729 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.787151156 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.418112413 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.405535957 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.225526337 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.354795485 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.226081405 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.384065658 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.220132988 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.235470365 seconds)
  done (took 37.738903812 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.241803522 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.343037535 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.463177779 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.533210455 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.412925169 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.180786571 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.537577291 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.350902178 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.138929731 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.571674694 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.270947046 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.335019046 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.374854226 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.487368804 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.751517145 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.353088851 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.356372268 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.359413068 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.35008081 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.416014177 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.310516448 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.271487978 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.537442315 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.353421425 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.867579945 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.572025939 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.593856107 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.769226554 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.740634574 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.324736946 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.321922726 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.517851577 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.559067186 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.470645681 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.332539307 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.218696883 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.212345266 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.272032953 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.096050089 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.359763591 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.532360342 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.408793279 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.59813637 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.760082233 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.284121019 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.441647192 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.638236589 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.284046925 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.321741672 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.009116635 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.511014244 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.157864796 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.343047748 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.387550742 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.324509106 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.639753452 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.394172707 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.465469365 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.375473454 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.855958797 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.276439168 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.58406173 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.355672164 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.284305267 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.489692126 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.403210984 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.375278346 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.621665821 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.600532007 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.696609062 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.779803435 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.278783843 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.236334192 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.26907528 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.347630648 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.669368538 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.669901229 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.441756045 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.585791079 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.524500831 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.708477213 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.632736404 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.177699187 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.930774967 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.246208689 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.199588897 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.289869844 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.515923664 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.517784838 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.708457275 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.768232753 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.479825513 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.646236026 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.586702081 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.629936846 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.586803666 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.199940888 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.2121955 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.451677898 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.773430329 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.284048807 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.462232682 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.876771685 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.604576345 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.516396143 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.498473604 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.610298511 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.281698049 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.618105442 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.194498434 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.423737501 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.4518729 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.451668397 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.468700862 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.196867155 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.741717854 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.290511747 seconds)
  done (took 235.13358017 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.158119864 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.167272367 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.163578599 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.167877852 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.163397293 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.821199713 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.231706236 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.165441144 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.820209162 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.231085213 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.162209364 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.165410768 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.162149699 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.165733646 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.787122962 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.752098792 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.80509222 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.159915726 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.16578042 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.1625574 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.996102858 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.166971244 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.161972406 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.163764503 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.16364456 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.167687628 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.164703013 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.209404709 seconds)
  done (took 153.922682493 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.218279738 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.588904099 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.25217901 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.316431302 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.261037057 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.229556843 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.723668467 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.355954363 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.287157663 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.233992588 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.223026987 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.448309607 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.455484174 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.80510039 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.34737811 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.315384988 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.879612428 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.364192064 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.23497671 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.223844262 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.386029884 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.553248931 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.48261656 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.483017348 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.374461969 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.496996933 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.285592169 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.223982713 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.347146154 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.696880272 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.236342945 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.575079559 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.368765981 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.224028291 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.707391909 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.569693052 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.788875744 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.764617822 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.413940165 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.187189875 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.184860956 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.454253612 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.52873194 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.273119328 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.222142843 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.854136857 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.241510268 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.630624616 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.260750474 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.187821448 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.324952436 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.331411519 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.464520648 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.224817067 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.391954535 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.375071248 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.720285723 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.201651467 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.287380261 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.524331036 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.193939299 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.7129526 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.709763309 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.277510233 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.233568125 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.096570915 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.319154599 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.734726437 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.833792123 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.263484068 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.56647821 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.410563296 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.19731485 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.484178448 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.39297957 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.666558964 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.794357318 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.36094333 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.325635281 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.295225146 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.493799631 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.213116572 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.753296824 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.324551838 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.196431765 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.713824462 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.610063645 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.195170252 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.220838918 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.330286858 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.382347865 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.428560004 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.498202528 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.285696707 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.107068942 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.477431346 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.511503362 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.236710406 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.347916656 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.211426122 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.674010408 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.400628695 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.207001409 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.535458841 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.611751977 seconds)
  done (took 161.599612404 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.897059902 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.272636629 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.459127852 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.756706636 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.536469722 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.703818875 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.491487338 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.28764717 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.503490739 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.43392006 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.474512932 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.309278495 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.179769758 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.968867363 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.272513151 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.396367492 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.297376176 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.863830037 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.546394514 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.269018477 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.523996475 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.930514674 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.521165067 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.629681164 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.662926862 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.742886834 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.865154805 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.356551627 seconds)
  done (took 50.302029328 seconds)
done (took 716.99067677 seconds)
SAVING RESULT...
DONE!
