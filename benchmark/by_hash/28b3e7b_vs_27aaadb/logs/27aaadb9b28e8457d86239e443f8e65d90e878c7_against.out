cset: moving following pidspec: 384460
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.762814884 seconds)
loading group "shootout"... done (took 0.818707479 seconds)
loading group "string"... done (took 0.234382932 seconds)
loading group "linalg"... done (took 3.26070438 seconds)
loading group "parallel"... done (took 0.022501217 seconds)
loading group "find"... done (took 1.217341025 seconds)
loading group "tuple"... done (took 0.71799385 seconds)
loading group "union"... done (took 3.112148885 seconds)
loading group "dates"... done (took 0.15745806 seconds)
loading group "micro"... done (took 0.057901828 seconds)
loading group "simd"... done (took 0.392417835 seconds)
loading group "io"... done (took 1.42148067 seconds)
loading group "random"... done (took 2.400451683 seconds)
loading group "problem"... done (took 1.196235218 seconds)
loading group "array"... done (took 4.701160655 seconds)
loading group "misc"... done (took 0.99230044 seconds)
loading group "scalar"... done (took 3.51675623 seconds)
loading group "sort"... done (took 0.314963849 seconds)
loading group "sparse"... done (took 3.595506828 seconds)
loading group "collection"... done (took 6.190694758 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.555243767 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.076167603 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.260057598 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.079952319 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.288841857 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.084461112 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.091272345 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.072524891 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.021012419 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.166908293 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.220843482 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.395764981 seconds)
done (took 5.07469777 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.266936878 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033993123 seconds)
    (2/2) benchmarking "String"...
    done (took 0.12995351 seconds)
  done (took 0.792184642 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.142710242 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.016342405 seconds)
    (3/3) benchmarking "different"...
    done (took 0.02323135 seconds)
  done (took 0.808292214 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020849359 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.097291683 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.022162197 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022658909 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.0225115 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.02195986 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021705445 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021730516 seconds)
  done (took 0.854953166 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029669881 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023532709 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021480781 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.023035811 seconds)
  done (took 0.720271453 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022959956 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.085378148 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.021078201 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020715241 seconds)
  done (took 0.768790254 seconds)
done (took 4.869975802 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.203006549 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.790634457 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.995341197 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.186325795 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.364009901 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.307945513 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.078538623 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.248292799 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.155792271 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.032335218 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.187155405 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.040829794 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.526152686 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.460405498 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.029406942 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.148342251 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.58198197 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039878015 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.071529319 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.232828286 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.040404342 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039830077 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.045002895 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027964043 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.15187684 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.140686469 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.593055298 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066382826 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.026877417 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.137229913 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.029554275 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031252085 seconds)
  done (took 9.675605184 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.154497888 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.15045061 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.024562922 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.060856113 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.051641188 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025371485 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.030737477 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.02357119 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.043780489 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.09029191 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.046876345 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.165349618 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021985273 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.025223194 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.144467814 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.119169658 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.038634049 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.038106458 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.023127449 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.037146534 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.050485616 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.035903365 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.03377335 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.033502108 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.069627126 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.091711512 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.042522515 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.068750265 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.02351016 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.03542544 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.052511733 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.064759407 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.023800612 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.022305023 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.067992998 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.04184808 seconds)
  done (took 2.729129508 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.732803384 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.052021978 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.144199804 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.13515035 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.065411909 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.051953337 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.185615954 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.079578233 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.056302034 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024499119 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.214414317 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.670403431 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.176256878 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.080746603 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028585183 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.187485339 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.918262364 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.953010246 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.024482074 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.024519481 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.139876154 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027156372 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.181630523 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.0246195 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.137666685 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.826252935 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.02675185 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025197609 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.054440661 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.148582702 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021864009 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.09864209 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051193156 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025804519 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.557842527 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.02229257 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020344911 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.043435073 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.051781035 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022727957 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023692183 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034932823 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021790605 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.075611212 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.037070789 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.522575358 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.025725356 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.71238085 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.842966717 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.031791639 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.028530377 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.058691431 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020484985 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.024076666 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.568159254 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.111827661 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.023165594 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.298672549 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026115764 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024873795 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.025019433 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.057649256 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.024133634 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.025244282 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.027330661 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.042114996 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.041584101 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033145086 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.044224735 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.022558619 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.023267343 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021836635 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.410580591 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029662778 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025670567 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.021287293 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027799031 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023610168 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023028984 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.069022285 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.050856322 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.04841056 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026850192 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023953402 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.14742047 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.485450405 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.934196791 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025110555 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024493696 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.496609692 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020926569 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022908963 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02448387 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.0446503 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.02385118 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.02019372 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058513148 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025506122 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.131549759 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.539147753 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.025470689 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020659383 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.469198254 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024838138 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.055093795 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077729735 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023873139 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.06221484 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.023549613 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020713898 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026755663 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020454458 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024820401 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.02169773 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022415026 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.021584086 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.023449512 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024315052 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023328427 seconds)
  done (took 20.135691575 seconds)
done (took 34.89725631 seconds)
(4/20) benchmarking "parallel"...
done (took 0.787725474 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.219842588 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.049978016 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019905892 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.16921086 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.045472908 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.140055622 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.181777731 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.131798206 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.047110713 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.047094358 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.047160813 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.189297041 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.199265336 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.048248926 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.124121237 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.201300351 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.048817978 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.0204949 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.047600063 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.048253489 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.048493456 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.020569761 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.047850225 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.048301561 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.125388624 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.048897401 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020367021 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.126442068 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.049726316 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.127252267 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.049485896 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.048296382 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.050069721 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.127278303 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.051100871 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.126974996 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020863412 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050628605 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.050683374 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.051228677 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.050518872 seconds)
  done (took 4.106733498 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046493108 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039272698 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.041182062 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018619759 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028723042 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038945769 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018576721 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038457642 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.042506489 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039080327 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.038845569 seconds)
  done (took 1.165039261 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.041066337 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.03962493 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.041027186 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.01846336 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030390702 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039384679 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018441812 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039012064 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.041799068 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039414865 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03939707 seconds)
  done (took 1.104923404 seconds)
done (took 7.071120639 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.157170485 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.126810057 seconds)
  done (took 0.989553671 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.561575499 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.22604778 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.136007599 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.258696268 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.129141131 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.162031966 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.39295774 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.165913988 seconds)
  done (took 6.793301879 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.07698121 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.146437904 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.025226721 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.023438835 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023578774 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.023526321 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.025247404 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.02388809 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.023222246 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.025697372 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.025202719 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.023395392 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.024166176 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.025527811 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.023446761 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.023650487 seconds)
  done (took 1.423192157 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.029173189 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.026338133 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.027303506 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017591072 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.028214057 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026764243 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.028011803 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.02876871 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.027505266 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.027052373 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.025202223 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.028633747 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.0269199 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025609911 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.028201365 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.017640367 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.028535748 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.02774261 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.02966507 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.028646603 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.027665908 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.025285731 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.029434397 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.026527168 seconds)
  done (took 1.372806678 seconds)
done (took 11.292922636 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.142033846 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.030370573 seconds)
  done (took 0.891512636 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.131612428 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.131591007 seconds)
  done (took 0.988612878 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.02905023 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.016429359 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.033179572 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.024721518 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016587908 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.016378328 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.032150279 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.01668418 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.016509534 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016589666 seconds)
  done (took 0.950285102 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019722062 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.023639712 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021586846 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019748012 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.021461022 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.017414186 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.01965292 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017773829 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.023502938 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016844056 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020582841 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.038914525 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020206408 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.03941761 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.020152688 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020605908 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.022144033 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.01981798 seconds)
  done (took 1.130357132 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017956045 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.017396679 seconds)
  done (took 0.763875662 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020927245 seconds)
    (2/7) benchmarking "second"...
    done (took 0.017456334 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019194207 seconds)
    (4/7) benchmarking "year"...
    done (took 0.01899618 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016997077 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.016453946 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016950692 seconds)
  done (took 0.851922377 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.396149152 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.091449018 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.32459485 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.026603155 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.039707679 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.237679307 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.020497923 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024747529 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024624151 seconds)
  done (took 1.911937865 seconds)
done (took 8.215416535 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040883577 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.144955748 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.153048605 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.459669056 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.035239965 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.023208492 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.052702377 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.23484093 seconds)
done (took 1.882442739 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.477691215 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.284023368 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.194053254 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.024560716 seconds)
  done (took 2.241466785 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.316225755 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.146060622 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.031480181 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023746711 seconds)
  done (took 1.262109318 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022315671 seconds)
    (2/2) benchmarking "read"...
    done (took 0.028130305 seconds)
  done (took 0.791505781 seconds)
done (took 5.514767651 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030459075 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.017342955 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.023807362 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018917152 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.018463425 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017896143 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017870139 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018790536 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016940227 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.019022657 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018994457 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018980431 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018748871 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018642451 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.018175625 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019038682 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.01697175 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.018663464 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018653869 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018638558 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016977209 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0189831 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018192884 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018723947 seconds)
  done (took 1.188351581 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.036526339 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.021600843 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.022172359 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.021957215 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.022596461 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.022015531 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.021980072 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.0211532 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.021996284 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.020766481 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022658814 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.022726126 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.020974009 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.022875668 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021216315 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.022806031 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.022348424 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021467237 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021009809 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.022815853 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.02217318 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021496246 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.022728136 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.022180412 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.022740724 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.022676897 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.021145454 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.021390176 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.022363922 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.022658573 seconds)
  done (took 1.418289168 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023436381 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015552207 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015779661 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.02598762 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015453365 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015649045 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.016004041 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015212749 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015558235 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.01645991 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015922182 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.015309469 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.0161914 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.015354291 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015375547 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015884317 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020701679 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.036549838 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015791916 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015491859 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020323513 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015773278 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.01555059 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.015514616 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015959044 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015484357 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015350718 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015812982 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015521184 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.016046057 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.01548327 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020197633 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021806479 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015984624 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.026038799 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.02080631 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015973553 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020102709 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.016408895 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015306481 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015304888 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015332934 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.015478846 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015458565 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.026049742 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015760015 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016617899 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015943513 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015636523 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015278048 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015433895 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016923744 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.021331512 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016900741 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015519235 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016896731 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015520002 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.016282812 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015728919 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015502427 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015726309 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019771368 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.017013466 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.016339185 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.037748182 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.017497336 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.026623287 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015830032 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.016266313 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019983485 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.016302505 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.0357711 seconds)
  done (took 2.036847776 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028078448 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026205995 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.035016053 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.02566952 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.01910214 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016298702 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019365505 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016414462 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026194532 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.020205675 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01646879 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019743827 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026028691 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020241728 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.01766697 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.026012526 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.020257489 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019421388 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.016567068 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020148675 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017623885 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01971362 seconds)
  done (took 1.217773341 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.104838825 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.022099347 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.067045517 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.025425389 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024106272 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.025415541 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.022061145 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02195984 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022087609 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022674357 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022660391 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022166628 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.024313982 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022751472 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022658302 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.022590771 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022121583 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.022499373 seconds)
  done (took 1.284743372 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.034401888 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021762385 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.049604801 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.021560761 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.021633171 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.021135364 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024997809 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.025058519 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.021243767 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.021846268 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025519899 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021359895 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.02134591 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021819992 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021412894 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.021789912 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.021396591 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021750238 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025477895 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025426668 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.025336667 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.02546577 seconds)
  done (took 1.285341033 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035558647 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020843718 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.037582712 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.022436046 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.016032663 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015975007 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.022497984 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.02105034 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.022218089 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.02053823 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021332291 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015962668 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.023330707 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021294017 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.023502179 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021337059 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.02081838 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021331711 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020924721 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016068651 seconds)
  done (took 1.183522356 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.134931513 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018430283 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017989135 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022421718 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017881985 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017881831 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022429219 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017992909 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017943221 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.042913437 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018056501 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017940466 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.022765788 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020972796 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017980923 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022654143 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022517293 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022577098 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018047569 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017979065 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.042908045 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.018225147 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023106828 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018243131 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018268392 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.018213657 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018168131 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021265634 seconds)
  done (took 1.45481022 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.039763756 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.01538845 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015566153 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019570926 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019477828 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.025503625 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019508637 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019289919 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015045277 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015494802 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017652718 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.015232967 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015199703 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.02511843 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.015198759 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017640632 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02497809 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019747975 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025829452 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025723328 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017590563 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024906977 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.017629692 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015564542 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025725763 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017594813 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019654954 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020526131 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017552937 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015557944 seconds)
  done (took 1.351883157 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030065197 seconds)
    (2/2) benchmarking "in"...
    done (took 0.027115789 seconds)
  done (took 0.802534408 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018846841 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.033953718 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.015354643 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.028974137 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024433934 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019658343 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.02438843 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024267858 seconds)
  done (took 0.932184151 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.130092029 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.155411125 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.017846557 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.017714777 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.128145102 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.086220712 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.139338867 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.030094198 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031441025 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020289338 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.01762626 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.139864592 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.017436992 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.031032384 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.01862516 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.027072396 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024520311 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.035378338 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.030492489 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.016171227 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029909819 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017908803 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.017030541 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017953138 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.018240555 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.02403649 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.03322996 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.029911102 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025649878 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.015468179 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.036199299 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.016330134 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.017049171 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02566839 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.13033529 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.016982476 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.059086626 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.017208164 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021385307 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.016284061 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.028900825 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.03769695 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.030986953 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.034735576 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.01807959 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.018441241 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.01628144 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.018074883 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020392581 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.02572047 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.016547207 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023772649 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.016108715 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.01789249 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.027194704 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016674996 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.02138201 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025839345 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.030132878 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.027083223 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.029071574 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.032120779 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.025343504 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.025447992 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.017254553 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.03676026 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.018243811 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029907749 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031671949 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017807896 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029840662 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.016308715 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015542454 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.016382799 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.050952516 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.01796353 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.017404299 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.016530379 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.016667127 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017898426 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.02626617 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021590187 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023934565 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019733874 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.03265718 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.025817055 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.016374005 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.024237367 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.035386447 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020667792 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.016631293 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.033992 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020611252 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.016310242 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.034905428 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.027094164 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.018206117 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.017312284 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020514807 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.03039371 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.018001753 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.015617274 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024975347 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.018178276 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.132471856 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022464297 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025370313 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016887302 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.027553225 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.023953606 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.018653265 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015976854 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021802364 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.01789485 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015937148 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026575579 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016981131 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032467149 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.024064401 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.032063921 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.03241832 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.027858293 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.033453889 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016847197 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015961928 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.036131906 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.026715295 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.018378707 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.035762507 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.01680424 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.027704867 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.017080377 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.018519075 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.026480796 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.016259953 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01880197 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.017112384 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.02376474 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.018604678 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018758817 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.023048491 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.025644569 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.029686088 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.018296896 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.026037473 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.017460538 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.033631365 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.02704301 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.022246238 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020939138 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.018038716 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.029808462 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.024283882 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.026430095 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.017056719 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017995217 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.017108822 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.028432457 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027058039 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.019183399 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.027476489 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.022233513 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.01820371 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.017228861 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.018268159 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.021086882 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.02094776 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.017788193 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024998158 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.026140052 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.032507512 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.025653876 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.026577501 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.016579035 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.01703073 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019191121 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.017016631 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.022018616 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.026603051 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033301894 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.029535579 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.039582989 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.017629971 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.027218243 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.019279162 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.035275842 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.031099989 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.01842849 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022621073 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.016364038 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019246132 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.026770553 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029120934 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.032239118 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032838407 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.022335799 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.022157219 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.017158377 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.032837397 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017731924 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025882888 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.026659955 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.024323208 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.017302449 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019247176 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.026538762 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.022196981 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.018321272 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.03347938 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.026000073 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.017184249 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.032123052 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017643169 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.028433713 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.017225669 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.021082265 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.022775135 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.01954234 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.027123205 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.03309581 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.01636486 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.017682276 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.033583752 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.019458984 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019299518 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.025391956 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.180788688 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.02165754 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024491468 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026907902 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.02734275 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021361825 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.027085054 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017359924 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025809812 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019215313 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.029183863 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.017448746 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.035272507 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015739122 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031861327 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.01688904 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027292366 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016543773 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025609606 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.016835224 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033371283 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017632448 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.016911742 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.027734791 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.01532336 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025302694 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.01588413 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.02165981 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023171909 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.025432693 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.017725241 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025411337 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.017427749 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.025055569 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.02113132 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.024801947 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025141339 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.0210392 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015823681 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024259987 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026663943 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.024137778 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017338095 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017278517 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.016256582 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.025155086 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.017366838 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016825597 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024173316 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.021107208 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.022170774 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017395695 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.017382495 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.017257105 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024271428 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025225465 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034230784 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024632945 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023603479 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.025340026 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015892531 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031498194 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015906214 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023484564 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.015227141 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022347682 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.025102958 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.016250739 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.035055051 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.017433075 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023873686 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027745282 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024471914 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020141819 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.03393634 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.01888621 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.024236569 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023889389 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020929906 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.023056566 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017424144 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.024236089 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.025365818 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.026452285 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.016648751 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.023423322 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024868653 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017709932 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.024495114 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.017741651 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.024640824 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.01794874 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.015656781 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.02131268 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027565414 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021493035 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021715703 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.016602218 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.015476463 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.016517283 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023762353 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.021461866 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.025048619 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032229293 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.015757023 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.017196058 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.016175935 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020430138 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.034894671 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026074931 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.024354221 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021778165 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015967565 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.017941209 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.018159658 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.016671392 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019751895 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.015930943 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.016355226 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027208121 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.018178998 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021344366 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016705893 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.017700857 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.026519281 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021106558 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.016889152 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.02372961 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.016374832 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.022024537 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015883688 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.018015316 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.021460361 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.016242156 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.02057323 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026916343 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.033298878 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.023584552 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.025466252 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.017505429 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.024450395 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.032277048 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.025275772 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017518466 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.025992494 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.016047913 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.036401185 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.026646528 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025633672 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027133258 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.01801429 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.034592468 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.021987616 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.027352234 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.032937555 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018102766 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.026309855 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.016960036 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.033305134 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.022161468 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.016946699 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.02582118 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024888206 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.023377326 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.029297464 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.017997552 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.025895539 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022632476 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.021260632 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.018904893 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018860732 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.026115185 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.033768767 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.018091387 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.023319569 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.025163117 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.025411278 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021957143 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029688891 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.025292849 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018052828 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.018802767 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020930217 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.017861694 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.029698869 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017573432 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.02209617 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.022117533 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.017116608 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.024366991 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.03439063 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.026823831 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027112067 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.017195062 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.016494033 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.036053962 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.021196323 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020981589 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.025595095 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.027328991 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029964297 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.026815635 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.034906021 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.017761068 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.023636029 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029859937 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.018226304 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.017026639 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.021117864 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018895238 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.026413518 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027260123 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.024641557 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019232806 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.024522744 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.03104422 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.01880585 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.022230788 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.024127701 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018278421 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.027993808 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.025306079 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.025931395 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.01889674 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.017031601 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020899904 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.026027442 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.024659669 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.026244739 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018174177 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.027299935 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.033462087 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.025098459 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021299925 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.017208369 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021015383 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.026522059 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024641802 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.017114621 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.022301329 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021003592 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.027597877 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.027068088 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.022167323 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.017146359 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.035154321 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.02619848 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.026563642 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019217049 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019320696 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01760163 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.017169778 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02885058 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.017240102 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019155996 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.022770674 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.019441094 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.036259888 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.025637431 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.03394089 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018594241 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.022205215 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.017174101 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027085214 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.022271605 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.017272778 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.028035287 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.016669891 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.03343247 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.02988585 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.173119899 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.01638961 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.02205686 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.024930665 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031676154 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025951095 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025392535 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019345772 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025992666 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017693768 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027209961 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.016119571 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015349141 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026166691 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024801308 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028183123 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.01600886 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026110402 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.017581109 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024373057 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024603556 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017441874 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017366652 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017276064 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025621526 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021153537 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025310364 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021244271 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.032905164 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.01689313 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027124091 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.02495108 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.026762673 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029829612 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027820109 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024439231 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016349096 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023356847 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.024353129 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017049925 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021389147 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.018856575 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037746399 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017506629 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017297194 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029770303 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022724229 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015955759 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.022510821 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.021003567 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.0258557 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.016751826 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.026192089 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020694765 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.016627976 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020960134 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021012974 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015330262 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.015777598 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.016079024 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.025398035 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.021078765 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.01592937 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.03475665 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017164257 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.024560364 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026609218 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022974233 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017205109 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015158391 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.016667255 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.02927974 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031326794 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020264889 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024507818 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.017443651 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.025041381 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.015206809 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.024550686 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.023738052 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024365142 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015837146 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016049512 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030840529 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03139914 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.021088344 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032832507 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.025168386 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.017995473 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.038425779 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.025290223 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017245193 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.027164834 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018372222 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015837626 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015582651 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.01788638 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.027971484 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.016302275 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.018418083 seconds)
  done (took 15.661401536 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.061249007 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017249141 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015745839 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015711928 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02296125 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016987945 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015709663 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016915435 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016922583 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017875955 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015833584 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015864821 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.02145816 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.03136572 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.023956543 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019685615 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015992391 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017155501 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015862758 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017136235 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.022035383 seconds)
  done (took 1.236759241 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020136315 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.020156184 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019550416 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019816321 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019004178 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015963785 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019423678 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015937557 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019724237 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016237144 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.020012873 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016139996 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.016454703 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.016452603 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.01642479 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017598012 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.020179433 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019337021 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.016117766 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019724642 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017570148 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01975402 seconds)
  done (took 1.190595028 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018543056 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.016596142 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024525219 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015478925 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.015346453 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.018238382 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.015328009 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.02023444 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.02018723 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020254357 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024360324 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.016212544 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.015356952 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021563947 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.015293452 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.016048261 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.061135453 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.01652186 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.016513516 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015598396 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017832056 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.024708511 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015761602 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015821005 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020347956 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.018538055 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015577595 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.018138091 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.016236901 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020371685 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.016346796 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.015376146 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.02469132 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.02385638 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020487635 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020377979 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016874789 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016368497 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015700324 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015575187 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023920869 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016835602 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015956686 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016784044 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.0246439 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015805461 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.015546564 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024738912 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015593062 seconds)
  done (took 1.728534724 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028702762 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.069139358 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.022142147 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.051486425 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.027781534 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.02117433 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.021962061 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.054426871 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016908236 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.017305905 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.028921936 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.029115681 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018401835 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019663806 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.023117733 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018337133 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018956668 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017711532 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.020708785 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018038095 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020834356 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.023290219 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.028469833 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.02902982 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019552174 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017958132 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018357934 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.01983805 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.028717009 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.021460095 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019986467 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020455827 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.02895683 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.023968344 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018253976 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018467334 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.029586625 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.018882281 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018572301 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.017036849 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.018324091 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019785198 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.023389506 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.029753235 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.01878579 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.023807957 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018770223 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016806907 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.029379006 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018682658 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.022318815 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.030242935 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019817541 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.019050284 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020119187 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.029240996 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018843968 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017552344 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.019069895 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.029184925 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.017186414 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019686735 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.029933216 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.018404968 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.021869917 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.030141326 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.024130334 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019789689 seconds)
  done (took 2.520684105 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.025333958 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.05254635 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.030012915 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.029931224 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.025426736 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.025419527 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.025558749 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.025826958 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.025596827 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.0287636 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.025855145 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.171769355 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.02327118 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.02778666 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.025953986 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.025897306 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.025922956 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.025874375 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.026178547 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02619109 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.026216001 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.030902567 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.026196059 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.030985504 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030627954 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.022819599 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.025908255 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.026112202 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.031076785 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.026122845 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.0307435 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.026174279 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.026164346 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.0311438 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.030645932 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.026117558 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.016532923 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.026014043 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.026201845 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.026124136 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.022810623 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.031248238 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.026310101 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.022962667 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026539593 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.026228798 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.031501718 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.031145345 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.028493544 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.02952155 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.026444835 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.031474259 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.026331722 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.026743309 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.031868639 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.035015701 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.031817257 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.03191666 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.026880166 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.031875214 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.031969572 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.035233551 seconds)
  done (took 2.688627298 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030804874 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021590369 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.034925772 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.01553897 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015345869 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.024672743 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015405843 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015481158 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021519468 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.021556831 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023009649 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025031726 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026895689 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.023138892 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.025032829 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026950413 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025134306 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.025101364 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021715172 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.025055996 seconds)
  done (took 1.268838722 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019249214 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021126572 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016368628 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.032336852 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016375472 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023834457 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.016308865 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016221732 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016202722 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016184345 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.02081455 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021007713 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016586172 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.026076419 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020911831 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.02447343 seconds)
  done (took 1.114109945 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020670116 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.024748245 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.130707921 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.017258435 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018939624 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016345372 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.017076357 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.016081909 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018406103 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.030430199 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.017207274 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.019314238 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.017248571 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015869425 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.016511608 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.019361165 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.018443769 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.017232724 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.017212643 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.132096211 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.026142961 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017953099 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.01950203 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017869798 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019227781 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.025812869 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018823932 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.019276232 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.017361212 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019664868 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.019187227 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.02872652 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.019326268 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017956408 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.016136413 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016898841 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.017423995 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.019573314 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.019639977 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.017498018 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.016197572 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.019196253 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.017496314 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.017802251 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018683624 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.019639305 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018618642 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.027803618 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.017342743 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019229317 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.017413449 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018709486 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.01777537 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.028873405 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.019557947 seconds)
  done (took 2.079814781 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.035008212 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021374286 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015497593 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015366619 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020915845 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.021862258 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021203034 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.021327473 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021689839 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015452755 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.021702783 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020614508 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021639935 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021342277 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.021935763 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021413825 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015549806 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.021581493 seconds)
  done (took 1.175997436 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024582456 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021265754 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021480964 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.017403318 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.017392726 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.02143685 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015883523 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.017033096 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01699888 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.01746157 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017537454 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.01720383 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017183941 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.017160817 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.02122861 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017553065 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.017160211 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016049628 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017584331 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015893819 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021672318 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016089281 seconds)
  done (took 1.195047643 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.194058435 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.154091937 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.040723816 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.035788499 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.027362781 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.052812363 seconds)
  done (took 1.299693101 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.053336247 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.055077321 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021341196 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021114434 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025326605 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02364922 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02364769 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023668181 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026665799 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029684883 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024085831 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027328276 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027035566 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028791107 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025600759 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025732646 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024267654 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024138693 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021447013 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031484154 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024143115 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02753933 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024555161 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024298555 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024397006 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029244436 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027509361 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030257802 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024261785 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027680231 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02585015 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024346729 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027780168 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030164554 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021565472 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027529522 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024453193 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032096409 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026026257 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029283508 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021424959 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026016669 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027534728 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027391614 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027810469 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02479178 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027612742 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024619452 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024822249 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.036413568 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026612776 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029704344 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026532542 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.028340732 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027997518 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.036206577 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.03094053 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029820611 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026439743 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030959114 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030192988 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026768126 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030100782 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031201062 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026804534 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030169794 seconds)
  done (took 2.633886488 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.061555179 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021684778 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023821449 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029185775 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028181723 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02360565 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023833061 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023977722 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023942726 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021636645 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06119756 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024327699 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028847331 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028751219 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024150911 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02395964 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024002394 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028602603 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021682647 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.035033781 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024372796 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029110191 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029290524 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029224363 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030326484 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027105292 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025530891 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024729292 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024563763 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024430114 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.145201836 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025179285 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029457611 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021929723 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029292754 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024484014 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024295482 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027316099 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024376955 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025993395 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029286997 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.032143647 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024356175 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024515238 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030553921 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024510868 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024476768 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021961024 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024526934 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021927056 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03053526 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030614368 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030525635 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029614761 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024661348 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02475992 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024635045 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024573252 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024673203 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026292067 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029599813 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024696076 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.036843956 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025027802 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024945619 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030174835 seconds)
  done (took 2.737789569 seconds)
done (took 53.425689018 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.214359339 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.170065627 seconds)
  done (took 1.169948631 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.141769665 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.140110971 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.168982176 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.024397063 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.082143191 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174542645 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125049228 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026459722 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.024324887 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025840389 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023948601 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025528947 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025679393 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.024351299 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.088281351 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026309894 seconds)
  done (took 1.949111669 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073871935 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.280391459 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.059512524 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.023221577 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.104489025 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.029494151 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.02455786 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028930452 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.029360689 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023404573 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.07116214 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.036577336 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.028038054 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028934283 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024475829 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027990489 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028862477 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.029273504 seconds)
  done (took 1.754728029 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.077705263 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.034416523 seconds)
  done (took 0.915120849 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.139110234 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.063955871 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.105842919 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.310084581 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.09610133 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.297607255 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.10113473 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.098370785 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.069560514 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.095672722 seconds)
  done (took 2.175208729 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.062656901 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057815654 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.289606471 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.055724419 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.03546721 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.030365374 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.030828492 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.031100723 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.031120001 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.030043131 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.076653354 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.028727673 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024850269 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.073814807 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.052129164 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.06003486 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.024150286 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030054799 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.033239025 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023957398 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.028906015 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.030949369 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.137162181 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.031016091 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052474707 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.028636231 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.03022362 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.030188597 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.030189264 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.03155659 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.031992492 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.055199195 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.030441339 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037782398 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.029895718 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.051256628 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.025149553 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051206493 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027818018 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.02483831 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.028509528 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031997184 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.025639215 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.031438851 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.031401188 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.03125725 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031699969 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.024148977 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.03150051 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.028174671 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.025056539 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.03007638 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.029624887 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.03056368 seconds)
  done (took 3.106508868 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.07795569 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.067742013 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024741215 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.074852425 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06663873 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024807122 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.080544691 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.061619897 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079794462 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024585259 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023823517 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023941867 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031820322 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.035696328 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078083804 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.070617344 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02612564 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024564162 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.070055413 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.07058749 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023574078 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.083741823 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.072746078 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.069357054 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.023507278 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02474766 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023386678 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024260263 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.03264291 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031818804 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024001996 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035065606 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035684208 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031875455 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023290777 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023446238 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023448357 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.03282319 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03409523 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033842027 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.030957525 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023125531 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023400056 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.024095957 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.024518505 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02298051 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033863643 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.031827227 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.033796906 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024424529 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024326432 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.023364273 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.02421165 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031487286 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.030146196 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.031806284 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.035238358 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023939408 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023816716 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025203252 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035924171 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032704791 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032785057 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024998201 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.033918879 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023927154 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034913802 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.037414618 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023771308 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.024425697 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024006421 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02391257 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.024300698 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030959761 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030899044 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024420926 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024194483 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023536165 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.032354045 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031096794 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023714393 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.033270006 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023290846 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023974048 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024343326 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024573498 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.034229823 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.03319608 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024558334 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023691686 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024012764 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023879469 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.023311102 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.034286777 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.033394892 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.033615808 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.035794246 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024937014 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.036653181 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.033907606 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025158638 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.032856553 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024512629 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024870683 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02470521 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032828233 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.03245173 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033950749 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02448452 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.024053038 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.03369603 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036669656 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.024417602 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.032412719 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034326977 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.032914096 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023777732 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.035625673 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024447803 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.035933211 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024844813 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035621218 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024995466 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.033515427 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024750327 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.024010388 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024645348 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.037198575 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025444451 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024644247 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024989895 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024619576 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.03352901 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.037978502 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025378723 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.033891223 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.033861189 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.025200013 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035999251 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024889638 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035900134 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02485231 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025032695 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023715414 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.038089441 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024581487 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.025065507 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.024644442 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.03567612 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024709459 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035424654 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032988681 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024078983 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037035332 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035531015 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.032900158 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.035945564 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025527825 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024884153 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024562954 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024974594 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.0361995 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.037984703 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025678882 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024901069 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.032697288 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.036490482 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.024144496 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.03288727 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032890775 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.176029774 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024520224 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024096907 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.03360147 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034796933 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.030434211 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.032736247 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.03126344 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023624497 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.029921816 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032764383 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023614591 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.036188627 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023691888 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.033627062 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.035046614 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.030195969 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033024975 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.03389075 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031854621 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.032249527 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.034286292 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02317723 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023401439 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.030431506 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02343021 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023539088 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.029736324 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.024022745 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.024037763 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.036001026 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.024017667 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.032881437 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.023114202 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.030638816 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02289913 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023914742 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035176663 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023499077 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023893297 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030230065 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023557289 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.029738748 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032651587 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.029910527 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023276303 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023774315 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.033335639 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.032482466 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023253409 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023084179 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023812877 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.03234825 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.032125603 seconds)
  done (took 8.026446443 seconds)
done (took 19.904505821 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.144682661 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.074146607 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.145225659 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.085967691 seconds)
  done (took 1.249191278 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.057550895 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019838231 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.146180855 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.158424824 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.020454606 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.140809295 seconds)
  done (took 1.360198669 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.258385903 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.154793051 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.163639516 seconds)
  done (took 1.402237463 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.153498176 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.283771915 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.554012686 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.147444853 seconds)
  done (took 1.965908852 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.179363727 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.169328094 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.032563207 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.187328012 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.039925862 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016922953 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.109974645 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.017704579 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.053996987 seconds)
  done (took 1.694059351 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.101036331 seconds)
done (took 8.593483498 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.18663825 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.144347395 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.034368505 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028443874 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.135482396 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.136562956 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.145725528 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.030436968 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.135936064 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.299744869 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.166497746 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.048979961 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.16068079 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.044646192 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.268856698 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.032343421 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029759215 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025417256 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.142403016 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.134234879 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.248310058 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.029470306 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.09760865 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.031138438 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.101691943 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.081408161 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.172562076 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.300449995 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.281744575 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.032408579 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.130508338 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.043699302 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.116429743 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.134527484 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.139280263 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.049421605 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020663175 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.248486351 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.111563478 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.316708802 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.154033398 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.028130819 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.142390235 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025983618 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.020041935 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.148581731 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.03340701 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027245107 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043584307 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027853887 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.043265259 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.02820506 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.143432071 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.024739102 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.093747938 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.145129398 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.167109711 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.098310142 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.027023394 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.040670413 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.030172246 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.159226319 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.03958449 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026901943 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.033203429 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.02073363 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.142464171 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.041022754 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.021137272 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.031123657 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.029226703 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.11263634 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.160772606 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.067791997 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.032934023 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.120003307 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095660598 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.048075085 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.050598933 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030886264 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020320274 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.174745138 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.026418603 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.039530115 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.027829087 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.053447546 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020717137 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036460557 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.157894617 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.150959987 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.090041664 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021952074 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.39951747 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021942473 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.046331383 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021762496 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.02054153 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.167559463 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.02030772 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020404942 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029838581 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028634389 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021975718 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.151362926 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.100920191 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028141149 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.027386298 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.02055882 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.026449356 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021533723 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020483096 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020319881 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.095756619 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.039120825 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019712662 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.108815019 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.128225881 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.031723131 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.036536477 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.085768643 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023502091 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.029471651 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027263854 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.125835714 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028349056 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.136875212 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.022024277 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.043403975 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.120422806 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.094416829 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.108030888 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.020306033 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.157286466 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.030463424 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019724028 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027423362 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.048321294 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.029935368 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.038697512 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028374533 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.15717937 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.031357102 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.02619063 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.120324997 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019678625 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.118050228 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.094685769 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.131244755 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025604942 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.030907656 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.093297772 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044288216 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.049149528 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.043217852 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.024631465 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.020343342 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.020020909 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.03468683 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019490536 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.020270084 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033868069 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027025909 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019918143 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.2479246 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.03092372 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024757475 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.264165821 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.033073751 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.098980931 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041304307 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020873006 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.102509101 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.022331695 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.04170291 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.088139603 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.021146799 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095645403 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.02114102 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.02072238 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.028195331 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.022365464 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029627914 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.034522064 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.021123881 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033886125 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028264257 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020565881 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.101441144 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022470344 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.172383731 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.100172726 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.114330741 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020985898 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.039513123 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020389488 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.137719072 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020779456 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.071181525 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.111941187 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035640658 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.041196158 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021871012 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.09426871 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.035167919 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.020304455 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.100092325 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.132466391 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.098361478 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.02823631 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.252588513 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.030177147 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.021041431 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.02783872 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.028781774 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.021386194 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.096884044 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.025588376 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.020081076 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020267916 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.022188641 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019795449 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.045803426 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.020176222 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.028176475 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.020566746 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.023540028 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.022598417 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019989466 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028361435 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.097045061 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.132458271 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.027168263 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.041221417 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.034348566 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.032467764 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.068750941 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028336205 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.146481885 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.020241432 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.0302314 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043496209 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020421582 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.025718668 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.02061578 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.038981922 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.024444626 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.022297832 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029346052 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.0210666 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.021099863 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020843467 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.021070179 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.029228038 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.022485581 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.020497089 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.020485783 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.020813858 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.025782237 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.026392865 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031917241 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.041600933 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.486343499 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.023066211 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.023192352 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.020926609 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.02076062 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.021217195 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.022654654 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020796163 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022828805 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.021136636 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.02048332 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.050667791 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.026137217 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.02182112 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.042136549 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.020852531 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.030427549 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.132815529 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.038453734 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.026205965 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.020348931 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.439059857 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.111079347 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.042266958 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.040555561 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020944357 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030994163 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020855132 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.021124678 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019874897 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.04830389 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025270101 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020821772 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019812012 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.020094068 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.068135401 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.02853408 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.020076778 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028477032 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020105497 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020417846 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.048331144 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.021394266 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020202238 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037877603 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032188144 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.104217128 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.032070374 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.02338735 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.072261626 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.01962635 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020119781 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020530279 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.118326516 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033625356 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021322774 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020052829 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027546482 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028701195 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.074480308 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026616659 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.023249167 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.027958429 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019411071 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020558989 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044807417 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.047695445 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.02117682 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023838722 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019934841 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020390567 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.096507789 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.027896852 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024947083 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.106769904 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022042504 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027713178 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019399067 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.488967386 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.025372895 seconds)
  done (took 22.581921523 seconds)
done (took 23.421596052 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.172988375 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.035276125 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.033784273 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028872831 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032416766 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.032991318 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.03429382 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029735848 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032705322 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.032126548 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.146225266 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.020482887 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.02788387 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.035609982 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028764949 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.036594814 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.032961438 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.03583505 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020692889 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.036139711 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.031515655 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.034490405 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.030451162 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.036461713 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020784763 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028634614 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.160842001 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.041210055 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.024312126 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.030069808 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.028248833 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.034404956 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.028329607 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027698631 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029821094 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025955643 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.030525079 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026799373 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.161416065 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.026447794 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020884703 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.033669446 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.027742613 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.028241774 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.029076529 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031867462 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025760735 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.034398417 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.020372185 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.033509814 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.160984608 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.025444001 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.024306312 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028863112 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025796645 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.029825072 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.024020106 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.032329921 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025791398 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.032843835 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028903676 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.028233066 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.020310956 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.029053549 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.02785532 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.028110064 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.019475792 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024958599 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.020241843 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.020168904 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.019728064 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028855864 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.027288635 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.025353605 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.019762123 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.020181486 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.019901153 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.032898941 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.027587762 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.029189162 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.020646447 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025881638 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.025489182 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020832284 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024957705 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031771285 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.019941676 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020617623 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.019760387 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031918084 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.027075869 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.020194598 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031722743 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024866916 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024543061 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.020256409 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.019893325 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024761321 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.028276922 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.020191677 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.019468617 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024791561 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.02546737 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.029028986 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020573945 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024724973 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024514726 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.019512063 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028975066 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.027700425 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.029418497 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.033420587 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.029097643 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.031783112 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.02070858 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.019433084 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.030225924 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.020644801 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024974496 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.028375923 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.025772867 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.028167974 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020823583 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.019869373 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024863085 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.026254605 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.020585085 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020714585 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.020569361 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.029305527 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.027977781 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019592651 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.020171926 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.02923784 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.029188312 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.02005216 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.01991443 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.029173742 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020770134 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.02630062 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.025735388 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.029162965 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.020323858 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020533966 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.019730167 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.020273881 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.019825772 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025773148 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024884457 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020727592 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.029072772 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.027666003 seconds)
done (took 5.65312368 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.03563015 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.065515027 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.182951418 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.145961609 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.034556055 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.021647218 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025884535 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.041693498 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.024265291 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.046947439 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.04708709 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.043469409 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.168676776 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.019986028 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020625622 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.021553102 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.019165106 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.032988115 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.15119178 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.045805235 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.065543085 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.020597412 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.03808426 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.041312442 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.034290076 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.040193054 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021891127 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021794672 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.023475685 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.038954867 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.047754647 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.020483927 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.021721209 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.041607981 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.037797508 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.030221314 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.021352063 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.027991626 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.021354082 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.020386475 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.022371752 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.040012821 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027908777 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.028069202 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021989786 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.021325316 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021280721 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.029327489 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.035571038 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.027610199 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.03384896 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038593716 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022961803 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.02117681 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019516666 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.028932069 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.021108432 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.021276304 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021423392 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.02053355 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.02139875 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023498302 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.026939605 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.032000891 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.025136108 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.028951851 seconds)
  done (took 3.418936242 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.0405463 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.049554881 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.03551137 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035784202 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020181905 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.02067494 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020717748 seconds)
  done (took 1.153913797 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067769917 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.142423439 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.150638587 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.151510116 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.162698988 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.149238722 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.034705039 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.051602551 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.020397275 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.163671315 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.160170249 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.155338014 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.025435459 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.034082504 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.05439594 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.157665133 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.034546107 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028736984 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.149242741 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.156326012 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026874302 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.052802132 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033506208 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021970208 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.152903063 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.146060807 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.025414019 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.022107132 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024328151 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021460235 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021477476 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.045074152 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.145224201 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.037010645 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02258075 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020500344 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.142693648 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023098254 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.146072136 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.02933643 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.145781495 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024305003 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024211995 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021758544 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022892194 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.148684197 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.023111205 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.02162152 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.02111539 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.147449296 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.021072751 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.146888406 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024753834 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.027111806 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028794601 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028478808 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028907177 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022076368 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.149128596 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.032292254 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023484551 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.157535386 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.157213401 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.146739642 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.160124014 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.031147269 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.147425237 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.146486995 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.0218825 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029895355 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022274645 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.159451545 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.026001957 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.024286331 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.027465533 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.029174053 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.16434462 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.165722782 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.165648767 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.036926924 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.024409276 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022261696 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.162488598 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.165839494 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02825399 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022308065 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.023129966 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.03844155 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.047676372 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024400102 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026850797 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.022058975 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032718353 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024508865 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024695321 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.158984655 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.022540378 seconds)
  done (took 7.955188369 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028874912 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022127575 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021509329 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021945382 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.022383902 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.022103499 seconds)
  done (took 1.169100501 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.049416703 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.022634641 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.035297487 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.022288163 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.045240648 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.146824142 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.147698297 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023846487 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.039100481 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.034644796 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.149194963 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.153454205 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.151251544 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.023654714 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.148389331 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.034655684 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.149889958 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027755857 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.03382024 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023750587 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.036317181 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.023264179 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023500501 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.157866989 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.025033963 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.034131845 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.031568202 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.03394752 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.033466945 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.023281514 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.023158486 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.024376992 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.029084498 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.023292351 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.150257275 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.029691951 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022619803 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.02663751 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02435579 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.024149748 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.1535702 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024337996 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.027467461 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.026653236 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.023399948 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.029268634 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.026681173 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026231173 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.150823469 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.027324481 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.026637498 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023032519 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.024309368 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.026537303 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.029214038 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023445103 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.026523603 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.151307026 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.023991966 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.029622349 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.022886493 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.024475074 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023476767 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.024545344 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.027890395 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.026630135 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.029301982 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023710474 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023771379 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.022728693 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.026860757 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.022857636 seconds)
  done (took 4.40694627 seconds)
done (took 19.039519939 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.504796847 seconds)
  done (took 1.446335822 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.036709194 seconds)
  done (took 2.005631417 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052966399 seconds)
  done (took 1.022395157 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.304410355 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.528829602 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.738359763 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.093914692 seconds)
  done (took 2.619803063 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.855574362 seconds)
  done (took 1.83438313 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.215486605 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.179371755 seconds)
  done (took 1.398660336 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.502811952 seconds)
  done (took 1.468748281 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.334877069 seconds)
  done (took 2.306520971 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.20501926 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.138718696 seconds)
  done (took 1.31497648 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.614989807 seconds)
  done (took 1.586096059 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.602241471 seconds)
  done (took 5.573595707 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.194205633 seconds)
  done (took 1.225468241 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.198693497 seconds)
  done (took 1.171691994 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.703372051 seconds)
  done (took 1.678207222 seconds)
done (took 27.63011856 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043720289 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.040210568 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.040261813 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.035657507 seconds)
  done (took 1.122604038 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031242359 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.025663394 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.027992147 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.028329399 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.025629216 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.027461091 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.028210164 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.024365957 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.025453161 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024708773 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023271514 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024594316 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.02727371 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.024351092 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026914115 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.028410206 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.024767877 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.025464265 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.026942717 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024546944 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.027323585 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024721707 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024804392 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.026189405 seconds)
  done (took 1.601840817 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.034541694 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.026415508 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.029703609 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.025236088 seconds)
  done (took 1.094605206 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033630018 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.03152723 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.040328819 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.045026525 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031345957 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.03189767 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.038821477 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.039084788 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.045678855 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.041523956 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.022290118 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021948892 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.021093262 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.040528529 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.03828917 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.016560046 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017960614 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.032235857 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.031275164 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.034134049 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.024387356 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019896788 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031630515 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.032188385 seconds)
  done (took 1.736626347 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.03824141 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.020152706 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.036977394 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.045892846 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.046112771 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019882018 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.03436022 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.046615565 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.084067669 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.019938214 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.026029369 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019767683 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.058969395 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.020043432 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.035559022 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.066068529 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.070085757 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.024371661 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.05151264 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.020078429 seconds)
  done (took 1.76451567 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028966674 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024928202 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025702848 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019710659 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.031182437 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.027411636 seconds)
  done (took 1.139672686 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.02469715 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.02188564 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.021645188 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025993824 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021486446 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021436763 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021632163 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020476725 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.020385962 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.021138396 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.021102819 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021583892 seconds)
  done (took 1.241720398 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.167421602 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.027131217 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.025069732 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020288035 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021997574 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.021104123 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.036371723 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.023268891 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.039548714 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.021026477 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021234253 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023514486 seconds)
  done (took 1.423829909 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061399983 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067433286 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101723591 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071732805 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071706341 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052019464 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.204158304 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.034132075 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.122456942 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095202892 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074073751 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047350053 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041401007 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024389682 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056928833 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075069351 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094183994 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027784382 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070793822 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.25074579 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091958903 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.095654942 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107230901 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075279448 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.049505357 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107766482 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052097889 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060399492 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081308186 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085740742 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077566664 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.055581887 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.02601012 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.025661628 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111805771 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.065234905 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078479026 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.049104826 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062092321 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045128683 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084223115 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.02469137 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.03788041 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.069121181 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042835363 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09269764 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.04937262 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074606377 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037843778 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101692681 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090641502 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.183824134 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044198262 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064615864 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104978771 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075303407 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101795519 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067196044 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.191419683 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.076512974 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.061339825 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056323796 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063127423 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035353841 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135450027 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044155013 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.073608024 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07042908 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.051161509 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050351047 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062820428 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092857484 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082448965 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.082562317 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092757955 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047343253 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078734496 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.055663021 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.080878839 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059981584 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.027310279 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080647962 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085628921 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056283586 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057457271 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094223552 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049584209 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031283926 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.057990714 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.077430418 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035762506 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.07229532 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037388682 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.089111974 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098613989 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055635607 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068921508 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076346903 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033875757 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126319224 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064695521 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028129008 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07443458 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071695117 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11485209 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055256709 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030851973 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058824606 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064260195 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.117505174 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069792667 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03789394 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071796485 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107423744 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054638623 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.269437803 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055711941 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.261061721 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069881626 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041362094 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030040204 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.045808324 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069255876 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062324937 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070068524 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049639103 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.038848289 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040800938 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072603017 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048054111 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035539279 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.069779404 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.058268703 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.029506148 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04314627 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.031372518 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102033675 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.033331322 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091611522 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081699219 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.030126445 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061553198 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.05089431 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060597666 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.053088482 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073513539 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095747368 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.141141505 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045793946 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.05038467 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063948886 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104564819 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085051507 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047942091 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.03258102 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05699985 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068553623 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.057338097 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084848445 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051417522 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065914317 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061283208 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102897426 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106137596 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059208027 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058821623 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066714472 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.082426073 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030308886 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119160306 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062291356 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077498395 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043510503 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104135307 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.07023474 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067763692 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.043863435 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059163736 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.065384071 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066886544 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110873795 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.053696805 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027942691 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054430568 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115975236 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035484092 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075605379 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.048512518 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.206691345 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075078606 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.049708494 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037438348 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.023249259 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082910739 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114554603 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024878773 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068959247 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.062860145 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.057557387 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.077112981 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.02404141 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073924098 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093520507 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072621709 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09886682 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148675165 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074507575 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073624944 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.070211922 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.061677942 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034162175 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.082612307 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093772387 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053189526 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048819322 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094996619 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076124392 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.097028022 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.077031087 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082077202 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.064917009 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064702801 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062671045 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.063564524 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107053639 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080985935 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.084896843 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040382012 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066004738 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076618441 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096714662 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036935588 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105292098 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.043994597 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107685822 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.035648729 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086383966 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.031862654 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.130005298 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036155065 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059549349 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.025526305 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.030835027 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107681508 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.079451059 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070451284 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063744756 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.253023283 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094367282 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.032813597 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064069301 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069767505 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056725725 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071867167 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062790187 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.044314003 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050461586 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062920007 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039638525 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.035894324 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072208704 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049648558 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081307676 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037688545 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029124643 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094671047 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059576726 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049989905 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0308713 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061892567 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.081784178 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047389391 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040846579 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070896047 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060291602 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098617414 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.044960037 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.053917733 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082790092 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036842309 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.049010018 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024768113 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.041745552 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.031712762 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089046836 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031676016 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076261543 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023868628 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090121862 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044466127 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.049902432 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059334034 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068878024 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087749398 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050838414 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102835401 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047238007 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079526815 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065126559 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073185627 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043495559 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060259651 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058105353 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081271873 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.052149826 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082842423 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106890654 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061368094 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106254341 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049223917 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083718523 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067278547 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087794377 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075539015 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162270341 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107226312 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.225320145 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066010844 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030093352 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050760866 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06130207 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067944443 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132332348 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080030287 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.027549206 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059820253 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048505468 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064268878 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058729278 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036829273 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10078297 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057713968 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.042218042 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066641717 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.045626861 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058967927 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030793586 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057022453 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.055158129 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049738636 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052366838 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069165589 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084316716 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067996232 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101606742 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.058024986 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.047455806 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.076620625 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068692189 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066984476 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041324612 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041769482 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10145148 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077760422 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.084864921 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.055233649 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067752748 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069190158 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058171728 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085122339 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066100487 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.08791504 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036161917 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.032726529 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.023444258 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.027013278 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083465502 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066555086 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069485694 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06326079 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.027303335 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060940952 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06216323 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027421572 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042397796 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052649255 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057015508 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.051595175 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068448519 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.073415284 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.054109893 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066526814 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057505958 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115416714 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.058758352 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049192927 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.263055824 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107669398 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04323549 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048009639 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.026089077 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0339234 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071388077 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101712482 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111296725 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.03353187 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041136041 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.040677903 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041650237 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025918657 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.043601161 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.044343566 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060555558 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052218083 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.069760942 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059860156 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030018734 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057213987 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054338326 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04749743 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.061652253 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07511084 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081820157 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.098202132 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069206308 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065264477 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031676204 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.036025291 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031238158 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034573003 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.057315112 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.034066249 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031301437 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106062882 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.047756345 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062697259 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066086026 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043915222 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030847348 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094539428 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024607243 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096332306 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025936131 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038068587 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.037395967 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034376919 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051682015 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100446884 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067926104 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070744928 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06435709 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062631137 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148175845 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121238801 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038732687 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103090057 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03159952 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032437418 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031531038 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069336501 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048581974 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074255246 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11005355 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047207715 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062357209 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035942877 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11099111 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.06275241 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.210882109 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042323695 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034600736 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100844854 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034522229 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.036658681 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044502155 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065566863 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027009095 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057022281 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037779406 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034112326 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145756069 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.662898936 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051859509 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.03039531 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050718609 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097305937 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091362537 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050373684 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062269196 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.075109057 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.055896319 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048718172 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063103267 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.156010038 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028512078 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049759219 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.058315402 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052002617 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057083299 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.054031368 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.044121207 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.049180427 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.041359305 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034575415 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064834239 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042116106 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053792005 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063201531 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038897233 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.043936754 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089973268 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.06017411 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.039269658 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04520206 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.060561618 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042423154 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064014586 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.024767421 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069128389 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04532092 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079386058 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.056876588 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06560596 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085457754 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050901675 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098541878 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.067036947 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081646682 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043038941 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.034013196 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087669046 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.049446199 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033769725 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110630229 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.058632218 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.061872285 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063949979 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.052222846 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074600489 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080964359 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073723081 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.203966075 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033625426 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05661279 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.058999732 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041833258 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034159691 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.029120814 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030241761 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062220043 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041002381 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04094263 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068671652 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043573091 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.058022237 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.054221478 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077480601 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043770934 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056611454 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065658537 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046961743 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088510193 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056232267 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085288386 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.380744629 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08012146 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085671032 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090954201 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.032923758 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.030487076 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023570417 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070420501 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034834062 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.044444357 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03403604 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093639609 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.039593913 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069353333 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.215708072 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035804778 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051745097 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053557441 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.024887156 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039085574 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064551561 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042384573 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036157579 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07607587 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037567405 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088611767 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069258653 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056960245 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.05265437 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037135833 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07232227 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.061213575 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.088761702 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.051977396 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.031071016 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083059291 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.060758819 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103200886 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029790835 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036996641 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089880649 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061655218 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09527889 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037717915 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12748838 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107927973 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061533006 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101778947 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027136061 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046944014 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049323979 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.23450131 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041043605 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065866709 seconds)
  done (took 42.538073793 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.141622428 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.137894431 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078154304 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.090347615 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.24552227 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253876071 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106990607 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.078123034 seconds)
  done (took 2.229027453 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.025012789 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.038682625 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035960065 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.289068972 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.055343083 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021477989 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.026189295 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036446801 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.021415865 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.021006275 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.056561276 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021372884 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.02162122 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.456539252 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020447322 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.026589336 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.021656545 seconds)
  done (took 2.302984273 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.311963823 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.584701952 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.359470404 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.46080071 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.104027537 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.561106511 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.030016081 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.035048384 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.636431751 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.35766558 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.09927971 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.18223227 seconds)
  done (took 17.821201515 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031852921 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.161778296 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.160924249 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028976379 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.028505312 seconds)
  done (took 1.563232308 seconds)
done (took 78.626166166 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.041078865 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.126441814 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021551089 seconds)
  done (took 1.275320624 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.163976898 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.159847771 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.159466999 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.163170232 seconds)
  done (took 1.738887423 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030960366 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.030717695 seconds)
  done (took 1.160365452 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.171020743 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.257767798 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.045775002 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040242005 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034903901 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.036302179 seconds)
  done (took 1.216075331 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.027458918 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.026204135 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.025960991 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.026183436 seconds)
  done (took 1.199581953 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.141158545 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020487691 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022713638 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.024517903 seconds)
  done (took 1.303058627 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.041408979 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.041289727 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.072116554 seconds)
  done (took 1.252865387 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040019675 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.039605321 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.034182291 seconds)
  done (took 1.212573751 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.064993047 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.051445449 seconds)
  done (took 1.211116048 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.03661786 seconds)
  done (took 1.133172113 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.048903042 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.053476965 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.225319277 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.192124991 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.232274407 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.213698719 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.034748485 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.031617062 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.027382801 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.026191144 seconds)
  done (took 2.178862775 seconds)
done (took 16.495934645 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.036832968 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.146485179 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.395554056 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.043267762 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.610300651 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.393021611 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.683540633 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.046162203 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.055091501 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022690067 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039749729 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.587052783 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.688955437 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.102601755 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.671057431 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.09514652 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.518570226 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023789656 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022144314 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022765573 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.662474681 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.023691127 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022848331 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022987427 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.514300337 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.289396175 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.024547881 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.094592331 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.023934981 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026795686 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.27089392 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.024195891 seconds)
  done (took 12.295159928 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026527957 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.077592286 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027482915 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.038470548 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.024787606 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024437447 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.026230317 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022853115 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066329795 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022809516 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039997645 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021953875 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.026893745 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023548082 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.043089585 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022422616 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024787907 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.02301429 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022379866 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023080063 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041779351 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022136661 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022997845 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023095131 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022880681 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037896522 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023824307 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022306321 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022705167 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026596947 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027830605 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.024161318 seconds)
  done (took 2.054945436 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07939136 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.079915848 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.028742414 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.063414135 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.075407936 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.025637348 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.106964146 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.044987889 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.068678705 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.023147526 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.040231499 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022585402 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.059983334 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.024110359 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.044123689 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022761198 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.025209566 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023303858 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022534699 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023130197 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.042345102 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022633928 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022986711 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02312752 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.0232886 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.039294116 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023773473 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022557978 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022821006 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026569419 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.028357993 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.024208583 seconds)
  done (took 2.332323946 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.026097748 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.027067031 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.03265776 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.035956573 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.021012251 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.023507125 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024711711 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.021002973 seconds)
  done (took 1.320897488 seconds)
done (took 19.115721221 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.03607343 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022888257 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025923519 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.042001049 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.029285498 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.149457776 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.020056736 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027992134 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.026324986 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025542723 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.027694362 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020630821 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.024649795 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.019362728 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026536102 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.020738043 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.15220224 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025566695 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.150418333 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.152385956 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.023805064 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.026773152 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029449855 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.151172384 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.151757326 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.151549467 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.030508755 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.027084707 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.021724757 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023893622 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.148713582 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.151472248 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.02393414 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.147370821 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.02155975 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.021191137 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.025730382 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.022767081 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.15489263 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.030900364 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.023551614 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.030213594 seconds)
  done (took 3.559915247 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.154337613 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.161068472 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.153374566 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.033700376 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.029688941 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032942899 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.159418568 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.030446441 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028918939 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.158655594 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024692688 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028629745 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030878077 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021559085 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.02829569 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.02494408 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.030355777 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022714982 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028263575 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.02857424 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.158530321 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022189853 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.029494343 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.02978607 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024254764 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030406364 seconds)
  done (took 2.636385597 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030847076 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.044125722 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.046472485 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.100687658 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.064696119 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.037048914 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.037688528 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.048207007 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054586269 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.022025135 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.044306049 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.052235034 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.050276434 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028828134 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.061621115 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.041142077 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.035064388 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.023626256 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.02845303 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.056832747 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.045979178 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.042013598 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.055849322 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.042407934 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.021484014 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.031982619 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.029632007 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.038797368 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.029644193 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.034832091 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.026006187 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.025401144 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.022696469 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032972976 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.025828095 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.020127421 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.046004863 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035386624 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.037148834 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.061796985 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.032261393 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.023298888 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048839254 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.087357596 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.021533506 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.024768205 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026004989 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.035333941 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.024300518 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.052613601 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037419892 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.0215078 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.04119338 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.023293266 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.023187569 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037513081 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023460898 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023846435 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.033645334 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.028161048 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.043927738 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.027647423 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.042496815 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.021532965 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.03357736 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.023335057 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.023553381 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020492237 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.05631366 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.029564005 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.071388521 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.023018258 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.020300217 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.034449172 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.033671863 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029322339 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021512171 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.040961716 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034724012 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.025710008 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.033009273 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024916596 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.0252395 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.058154673 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.021244528 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.020299577 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020250589 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.024704656 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.025181348 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.022496738 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034860999 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.021195789 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.025230974 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.036322504 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.025733914 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.022467344 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.024725046 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.023457087 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021246538 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.03203838 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.025636536 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023598741 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.034881176 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022752841 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.025200295 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.037364845 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.03152819 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.021194649 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.023285697 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.024476937 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023470211 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.026295134 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.025149146 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023830723 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027240783 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.029428593 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027948617 seconds)
  done (took 5.064184254 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.248545409 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.237932449 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.023169694 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.234851639 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.031016808 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.165041661 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.23723161 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.238205593 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.022797054 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.023460404 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021742145 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.178833357 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.175162581 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.189422016 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.16779294 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.024923802 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.049424777 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.186538672 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.244428724 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.239453371 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.048539764 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029849148 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024917127 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023928037 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.023319369 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.031565224 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.039466065 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.031638532 seconds)
  done (took 4.328098442 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030999503 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.067172061 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.026300151 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.047423612 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.040101157 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.02258011 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.02423346 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022979609 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.039241136 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027991503 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022297304 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.026217576 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025883529 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024609594 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022610269 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.028994312 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028926023 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.030091714 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.026117743 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.02711576 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033930776 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.047414552 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.026522952 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.022575449 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.026052526 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.022508425 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.028017418 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.03139037 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.022295157 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.022111825 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019562217 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.026792736 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.037866311 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.02376307 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.02213276 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022954099 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022782265 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022718193 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022677672 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020796629 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020807759 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027641063 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.021243557 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.027640553 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.036483003 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024908414 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.0243479 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.025197991 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.025040251 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019439152 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025507714 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025657574 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024895001 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.030868612 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.026392657 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.02527465 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.024151596 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037527893 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028570313 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.022013248 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.0217021 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.0209444 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024693088 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.029485054 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.039140076 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024799873 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020958207 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022815598 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.02408205 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.03641339 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.022009472 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.028110106 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019598295 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.022720156 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.025086059 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.025597883 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.024180933 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.0211642 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.022341031 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.022037709 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022704371 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022401841 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021931838 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.025229196 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020637016 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.021190306 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.023222107 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.02438821 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.028350621 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.021546585 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025261848 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.02397504 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021612272 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.025889171 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.029545516 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.025885409 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.043555794 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.031001238 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.023413344 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.020443318 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.037793666 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.024626311 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.022031145 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024847717 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026988852 seconds)
  done (took 3.950853417 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.052996901 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024851034 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.042511404 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.054887929 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.033156514 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.028521139 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.036351682 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023880839 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.044518079 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021828361 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031906638 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020946394 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035851096 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.031518077 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.024458091 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.032598545 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.025363297 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.043384779 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.037969906 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021537781 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.03151907 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.035291529 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.035728775 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.040685517 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.039986608 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.041346855 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.035343774 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025544787 seconds)
  done (took 2.096741822 seconds)
done (took 22.742620241 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.177977302 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.377439064 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.144480256 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.898166303 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.216683839 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.235599709 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.334649183 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.130433526 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.672139348 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.228191441 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.801998961 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.801920991 seconds)
done (took 60.223422683 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.2703168 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.284440454 seconds)
    (2/2) benchmarking "String"...
    done (took 1.382850918 seconds)
  done (took 3.808545426 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.571683348 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.133934083 seconds)
    (3/3) benchmarking "different"...
    done (took 1.168794789 seconds)
  done (took 4.998680224 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.443625526 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.56117081 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.388316938 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.122675318 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.130561188 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.49144473 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.301700261 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.785397791 seconds)
  done (took 26.906856967 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.144593242 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.384930819 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.486607391 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.578141123 seconds)
  done (took 17.805027431 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.581044198 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.598451812 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.597702498 seconds)
    (4/4) benchmarking "different"...
    done (took 1.830609 seconds)
  done (took 7.851866204 seconds)
done (took 71.217358157 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.119770166 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.425975138 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.149690338 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.311472909 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.138443387 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.22218853 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.13732308 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.157762024 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.124964709 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.129547269 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.130254977 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.126345858 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.132368096 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.176794137 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.135099899 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.178386164 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.414698759 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.129367205 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.153399928 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.986846825 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.462293703 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.136726885 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.12728112 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.198766601 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.59105051 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.191296159 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.58369397 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.136474729 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.735638552 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.131220911 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.130774249 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.124939627 seconds)
  done (took 183.152459442 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.124550961 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.000448405 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.049934006 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.129120615 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.513063602 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.479494807 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.996016341 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.533415982 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.128691732 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.139339892 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.07736618 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.128590853 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.279233216 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.688028771 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.16840605 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.160821285 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.047969511 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.981435075 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.171754436 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.063921199 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.125816926 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.701472042 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.670053507 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.987936598 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.142876221 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.146460953 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.140935748 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.174010391 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.621737524 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.00156711 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.145699918 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.142789287 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.31746627 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.36358278 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.13401963 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.14308467 seconds)
  done (took 153.950022027 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.360070053 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.129645624 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.164318076 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.233847747 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.129907764 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.993767757 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.126643918 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.122142022 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.125294795 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.129025511 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.123310517 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.190693004 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.1269448 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.224901453 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.151618276 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.12158245 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.12438029 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.216237106 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.133605274 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.119616504 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.120930889 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.228786669 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.467454972 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.237210042 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.125252855 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.133378976 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.229990246 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.132227202 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.120353567 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.123662795 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.231527198 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.126322926 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.25038162 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.236306618 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.130184495 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.17740238 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.132108922 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.440494543 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.128805378 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.120162667 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.123951701 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.16854723 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.124911416 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.22578715 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.226402386 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.13120576 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.139317762 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.676861224 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.72282475 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.128301448 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.121112607 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.120620013 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.125942608 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.121716989 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.595023225 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.129842406 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.158536411 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.879865524 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.131933508 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.120952862 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.120592232 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.124660705 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.120869882 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.127437547 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.156436022 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.735623941 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.432790007 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.480071341 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.893913008 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.126704107 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.125878998 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.121356629 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.000419902 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.186278421 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.125607888 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.123496463 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.298450286 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.126183519 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.126169627 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.045604508 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.039806743 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.126322144 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.229666245 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.125007373 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.123169341 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.184813704 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.233890528 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.134380073 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.144315893 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.176550914 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.124438661 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.120965245 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.132682728 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.044972823 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.125749936 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.135129187 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.465542919 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.126181148 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.122153614 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.239584261 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.487444679 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.124727338 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.204785367 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.530784572 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.040739101 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.125299121 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.12502033 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.139321456 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.122351077 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.132877736 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.132317271 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.124840328 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.119397993 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.125198583 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.121391846 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.12312042 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.119961182 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.140133107 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.121975064 seconds)
  done (took 328.82056184 seconds)
done (took 668.537485362 seconds)
(4/20) benchmarking "parallel"...
done (took 1.119691485 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.377294337 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.148404525 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.241783713 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.367064768 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.325535317 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.300739779 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.327754679 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.415038361 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.350718309 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.293232465 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.35164214 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.296553923 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.423004283 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.378358679 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.418968341 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.380605009 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.318022762 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.857458088 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.340866293 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.299010115 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.335714507 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.295703002 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.28564562 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.349179334 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.421969216 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.297954123 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.532196441 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.366420047 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.328966423 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.374659103 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.397631975 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.407933602 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.337437676 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.408456012 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.381771536 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.4345474 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.31633621 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.399076196 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.319208746 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.337034689 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.351834101 seconds)
  done (took 64.01493208 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.498996366 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.313412312 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.449520284 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.427122335 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.034681212 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.418013613 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.51599085 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.310484028 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.319003459 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.436191279 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.477301081 seconds)
  done (took 18.350847476 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.370160774 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.318143782 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.434840996 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.454142215 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.543127847 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.42876668 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.489608305 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.33296099 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.317713893 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.436013769 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.456460249 seconds)
  done (took 17.725045184 seconds)
done (took 101.216007739 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.70557675 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.199516422 seconds)
  done (took 4.026772023 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.15265221 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.140327896 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.136763695 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.138124225 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.13545764 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.133548313 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.188612575 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.145862089 seconds)
  done (took 10.293226414 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.133746705 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.135477461 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.140434918 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.133550439 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.133197871 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.137815417 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.136192219 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.133949852 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.133630196 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.133386153 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.13687077 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.135420993 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.135815989 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.135104976 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.133482132 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.137676664 seconds)
  done (took 19.289195093 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.132878521 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.134944482 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.136612388 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.132438568 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.134137005 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.131533176 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.132877317 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.144556914 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.134904559 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.134502155 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.132800018 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.13646328 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.132902008 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.13558799 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.132859347 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.136204665 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.136024936 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.133861271 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.133974084 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.133168654 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.136862776 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.133815782 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.133496223 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.13649966 seconds)
  done (took 28.35499846 seconds)
done (took 63.107059844 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.715781008 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.143244774 seconds)
  done (took 6.978414442 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.137453995 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.137853407 seconds)
  done (took 3.506384899 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.134156357 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.134713479 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.137529504 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.133480217 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.132981418 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.133137957 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.1331836 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.136653194 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.135131086 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.134418139 seconds)
  done (took 12.467121466 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.136240845 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.133847388 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.133571084 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.133198177 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.132442131 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.135913529 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.133106168 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.133137848 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.133271874 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.141613519 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.133277953 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.322498495 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.135404825 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.379465744 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.136007014 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.132452173 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.133950707 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.136808007 seconds)
  done (took 21.978442145 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.133033831 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.132681849 seconds)
  done (took 3.387442797 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.135457428 seconds)
    (2/7) benchmarking "second"...
    done (took 1.132775735 seconds)
    (3/7) benchmarking "month"...
    done (took 1.132092813 seconds)
    (4/7) benchmarking "year"...
    done (took 1.133276329 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.136500098 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.134569783 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.133522842 seconds)
  done (took 9.059068794 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.586909354 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.302069154 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.354360475 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.602972742 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.812164457 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.064458039 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.810558034 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.068820537 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.949172778 seconds)
  done (took 16.673875499 seconds)
done (took 75.175340229 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.788569626 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.134035263 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.811120947 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.252346241 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.138561245 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.499951919 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.143054803 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.698149733 seconds)
done (took 37.618307047 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.288327818 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.120778262 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.164446437 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.164815254 seconds)
  done (took 19.579500096 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.123656737 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.693533692 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.170159442 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.167092896 seconds)
  done (took 19.371726761 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.642499824 seconds)
    (2/2) benchmarking "read"...
    done (took 1.664773381 seconds)
  done (took 4.441668842 seconds)
done (took 50.808283376 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.137448416 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.134188593 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.133642265 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.134010444 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.136338248 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.133800518 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.132623913 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.134199017 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.137650601 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.1338096 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.135521325 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.134490832 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.133966116 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.136316733 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.133438872 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.134652049 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.134375871 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.136409572 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.138715656 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.134441004 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.133417148 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.133372068 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.138780372 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.133226836 seconds)
  done (took 28.360627293 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.202877909 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.197491355 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.206941737 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.197141409 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.230769891 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.200063965 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.199900933 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.178784397 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.202555282 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.189615014 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.168218593 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.225939624 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.180673022 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.233155866 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.175494621 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.230276861 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.206208307 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.178558575 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.176868683 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.232110865 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.198615387 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.17898708 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.228775248 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.168815321 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.224362599 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.174867695 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.188149647 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.19297461 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.169524447 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.223973918 seconds)
  done (took 37.085719573 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.167001707 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.135159799 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.134603335 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.222761281 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.136949067 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.134593758 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.134026386 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.133357749 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.138934488 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.133621404 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.134795331 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.133912757 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.137071087 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.134025602 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.132906821 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.133596908 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.167788043 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.314360223 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.134748176 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.133897605 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.179569356 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.139652924 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.13542985 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.134655041 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.133923801 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.13525724 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.133086219 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.135464128 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.138916096 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.133592972 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.136902094 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.18466889 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.17407594 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.133634775 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.257006271 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.193819666 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.134235544 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.165499972 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.137395302 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.133208521 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.13304075 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.133409938 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.133647937 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.137699385 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.199847803 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.135149989 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.133218761 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.13622851 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.135511651 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.134334108 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.134623481 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.137295248 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.149400204 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.134507617 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.133544345 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.134415103 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.136647693 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.134291707 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.133313425 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.133803417 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.135901983 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.210050707 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.136244966 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.134750057 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.507076124 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.136236847 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.201685044 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.134323494 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.133916379 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.347470782 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.135264241 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.337749662 seconds)
  done (took 84.530632679 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.138972769 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.13436197 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.216132094 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.212165165 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.138180775 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.133869408 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.134261815 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.133864137 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.80181569 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.136048544 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.135423086 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.135010971 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.810023015 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.136775844 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.134039884 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.210708315 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.137948129 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.134143204 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.134600556 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.134464613 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.137495016 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.133539592 seconds)
  done (took 27.677071917 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.17633425 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.150032682 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.179130984 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.151419045 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.154433223 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.149833193 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.180061258 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.150615899 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.181793999 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.172447603 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.174039574 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.177183931 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.151131558 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.170180738 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.173997076 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.215835084 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.179270447 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.216137904 seconds)
  done (took 22.226319144 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.313023235 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.30014279 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.218063615 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.177336473 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.399630955 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.36972246 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.240315858 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.310465638 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.180520699 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.301541598 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.311743499 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.18294549 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.3716479 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.178625201 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.177375217 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.396042704 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.220075477 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.179271843 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.245139228 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.242222089 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.313191131 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.247877416 seconds)
  done (took 28.999859366 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.170941504 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.197652679 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.212752872 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.216993189 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.133445352 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.13738044 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.19347294 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.17206734 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.150508285 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.181070923 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.170813736 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.134590746 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.223867682 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.196791192 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.223690217 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.171693395 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.190868114 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.197856545 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.179288418 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.135125593 seconds)
  done (took 24.713594927 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.134086535 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.139342073 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.133852684 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.136513393 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.140222124 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.138170532 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.134148778 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.134497553 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.134780968 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.401644109 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.137040932 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.135172367 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.135294967 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.134658192 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.137600423 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.134056114 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.134399781 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.135082779 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.138646878 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.133797672 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.403686897 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.135624073 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.137019189 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.134310063 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.135430291 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.133024511 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.134860712 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.13712638 seconds)
  done (took 33.457834463 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.195093027 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.13577878 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.137080517 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.134171396 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.13450264 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.199720593 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.137539712 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.134254459 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.135689644 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.134134168 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.13415698 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.13905228 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.134077522 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.196284851 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.135098379 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.13727942 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.231860757 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.139255527 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.202743673 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.124327854 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.143095351 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.226474759 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.138726368 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.134455903 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.123296268 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.14417616 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.13927115 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.134890218 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.135057196 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.134997314 seconds)
  done (took 53.630223158 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.155181298 seconds)
    (2/2) benchmarking "in"...
    done (took 1.155469516 seconds)
  done (took 3.436032562 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.136461254 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.235056673 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.136496727 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.334580111 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.305485844 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.313203445 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.30275433 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.229887297 seconds)
  done (took 11.116608984 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.135050486 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.465546793 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.151782014 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.134413264 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.134569678 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.572661874 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.100254389 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.995648104 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.882886451 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.250543805 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.231328766 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.99583833 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.113425228 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.439937466 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.253726517 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.982815992 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.376587053 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.644345194 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.174013895 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.264894368 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.834614397 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.239627459 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.134334499 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.135453724 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.139122239 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.19485378 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 4.012928861 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.566847468 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.274603665 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.263769571 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.88701826 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.219298001 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.13837027 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.365400178 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.260051664 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.137921776 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.287420827 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.247396251 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.135602844 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.135549653 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.847533544 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.797585974 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.4163208 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.361439701 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.224428223 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.140039487 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.137324722 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.135559267 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.394931712 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.083328243 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.115620765 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.121878729 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.281687765 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.136643408 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.831588631 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.14610917 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.134607707 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.195845323 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.688092347 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.399834417 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.889665172 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.289217083 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.146453068 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.267400411 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.134866186 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.645521029 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.958869015 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.898724756 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.909642892 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.251755624 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.638470534 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.15149406 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.135366989 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.135929409 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.09378904 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.448620238 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.135861745 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.134652824 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.138643391 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.134983035 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.361978346 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.259129753 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.96170971 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.282408524 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.629563325 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.578055712 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.269083092 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.135728121 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.778047292 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.123428076 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.238271846 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.7634843 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.355212178 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.279423784 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.120722171 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.410820431 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.170770636 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.135656096 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.975738324 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.74422635 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.149692316 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.134569202 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.830753193 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.175211175 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.139470294 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.137909376 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.817791113 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.268430081 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.279619701 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.177802865 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.139320511 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.136401286 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.939540043 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.245758995 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.138172252 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.9161227 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.122295627 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.644154191 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.404514756 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.348445769 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.477199004 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.08436161 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.710820462 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.960414297 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.140410888 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.655796911 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.444576645 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.735168808 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.38406216 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.264102903 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.968241338 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.203118415 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.138682874 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.233810696 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.215652625 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.136349469 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.13643664 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.135749588 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.139093096 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.13712345 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.261687677 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.507694914 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.969667087 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.145604002 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.376236009 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.261326628 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.966929531 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.356692627 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.838732592 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.283755121 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.137355024 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.873935464 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.401831381 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.841201585 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.269847094 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.13875539 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.136649481 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.004070161 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.150517466 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.24115848 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.137606336 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.954868182 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.248055186 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.139735406 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.137055576 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.609897641 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.280063658 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.138268536 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.229523445 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.913747939 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.013453701 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.149806621 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.455923536 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.256979014 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.139971797 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.135759743 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.135257125 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.92219341 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.091930957 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.271686012 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.09675405 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.882780055 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.233596446 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.330762733 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.234024355 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.381671294 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.370351388 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.284068855 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.135720578 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.136160839 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.137977421 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.936496662 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.000066735 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.167195237 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.002597394 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.315033555 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.250971774 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.232134656 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.927114991 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.150772445 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.822095824 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.127505141 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.249046742 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.136775869 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.138615021 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.289536193 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.324219832 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.281357139 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.697608765 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.146388556 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.137041219 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.799075003 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.270429583 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.800489508 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.248233446 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.956372634 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.217548949 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.267881731 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.354460418 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.772485026 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.270434825 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.138776292 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.831486783 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.290005487 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.137485264 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.194548636 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.83257315 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.936752711 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.886757913 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.771471658 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.100723066 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.696137896 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.396773895 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.284393587 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.99275989 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.24297395 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.753657979 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.195744807 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.609277206 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.154576655 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.886898459 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.150505908 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.872971589 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.147841405 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.117226781 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.264341022 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.583742657 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.260499281 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.142470518 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.312349628 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.234669432 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.792151563 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.268568175 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.267717355 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.460782363 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.062651529 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.244849922 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.753540361 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.196797518 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.08055787 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.109791815 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.482825435 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.091560363 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.299099434 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.233237065 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.90514769 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.321470067 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.388593213 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.278390918 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.140784305 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.136399008 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.330374106 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.228878526 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.137414528 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.45313094 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.125414695 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.344251608 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.234892512 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.144341409 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.137309679 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.365988956 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.299163675 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.418851988 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.61186536 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.722953638 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.949986763 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.268360688 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.770045238 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.274552701 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.030922827 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.24142137 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.141618288 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.800871078 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.269635123 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.392532445 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.288796186 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.256060139 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.794364325 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.247252274 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.430636407 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.27094757 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.265609946 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.91402996 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.693506426 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.393419745 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.539127377 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.177069554 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.966314024 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.227852842 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.0296467 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.140083067 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.030292032 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.230786305 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.197608007 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.139831733 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.138436345 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.968317932 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.117076382 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.144500425 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.917767287 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.819752976 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.055970308 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.088835364 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.245770124 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.141971666 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.140070023 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.137553525 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.199142389 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.208613791 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.479754156 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.278661892 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.141075077 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.138153758 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.111699404 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.46524589 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.970102432 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.017039238 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.13840028 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.279740911 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.140606829 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.137366332 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.137935897 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.13636216 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.140025463 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.137623729 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.632349487 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.148915427 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.952787209 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.248766224 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.142875085 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.399688556 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.204096712 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.137244322 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.307286515 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.224678914 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.256311029 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.208652991 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.137837217 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.552006005 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.283583908 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.22995077 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.432005122 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.434282552 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.381207952 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.656762407 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.188636006 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.562059323 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.766120915 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.918633041 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.141797822 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.202600992 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.235739462 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.904945294 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.278334892 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.5683584 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.054819517 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.137184957 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.380266191 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.043239893 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.891036792 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.27735729 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.209675819 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.140042812 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.138043495 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.222625572 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.392764511 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.183686024 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.420519415 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.347946304 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.276202239 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.448499775 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.237821567 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.352373348 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.167767164 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.155904213 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.138555742 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.139156244 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.611958886 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.018946562 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.230502457 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.138481538 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.194864383 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.998664592 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.050226979 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.087166834 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.037183706 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.282096581 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.137319241 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.34576168 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.192163626 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.888267711 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.157796096 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.915019773 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.480377718 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.187339983 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.3096724 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.867642784 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.842005262 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.520986508 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.258949515 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.139358908 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.523547108 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.138270109 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.283576136 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.0432881 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.487136056 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.002953974 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.881804916 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.359235933 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.256730229 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.190497666 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.995458404 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.136043594 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.142155677 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.979938195 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.284678052 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.45751657 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.103280579 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.404384094 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.283027694 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.974370243 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.849306626 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.285419472 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.765281183 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.282388103 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.146846384 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.93296224 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.205680025 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.284938278 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.262988848 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.137129261 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.158020252 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.804036486 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.739881236 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.38540902 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.217149942 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.139807336 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.870836862 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.04241702 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.244839559 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.14319621 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.139396097 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.57670177 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.193262658 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.139551074 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.552660306 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.757549188 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.282577818 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.931729239 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.245533093 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.282572142 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.379481394 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.521051887 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.349934827 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.199869288 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.143197993 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.142750876 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.138519236 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.674751327 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.149675644 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.138755571 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.73843257 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.281820679 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.892398058 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.068873395 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.374614948 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.208930217 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.544754374 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.284121961 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.946442786 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.181178026 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.238618529 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.791408549 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.202258806 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.247218333 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.877300738 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.246874959 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.141068166 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.066954779 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.457783461 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.485096024 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.51555197 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.459030307 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.231064909 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.823043317 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.254917912 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.873389935 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.159882846 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.138771667 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.943544918 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.275128988 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.559670857 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.295491909 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.590410106 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.260830183 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.826679682 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.394392869 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.232156666 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.142026481 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.138173741 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.123864637 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.328177377 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.992686062 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.043185231 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.593736426 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.275437493 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.427159238 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.757553979 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.989124089 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.623960914 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.430023185 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.436062246 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.17177281 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.118116365 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.485158497 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.222401367 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.307741741 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.239259684 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.907024691 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.215090526 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.140585456 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.69387083 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.150513134 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.139641903 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.139360997 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.197065654 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.89962644 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.247257474 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.336239622 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.238876948 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.140677633 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.751752335 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.427100728 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.176759556 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.142117759 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.139420219 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.008236962 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.251400298 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.138182512 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.464456842 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.296953348 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.434985165 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.982138447 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.579831077 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.231448336 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.139177057 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.143542089 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.843807503 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.695916829 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.174303121 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.837941864 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.182914534 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.95572656 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.126171563 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.618592937 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.677247823 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.146841958 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.26897396 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.141246735 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.203719828 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.008362981 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.065279642 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.097056748 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.602056404 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.236278449 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.913905818 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.187308249 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.201120182 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.273271186 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.210085242 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.143950699 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.141019944 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.140662578 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.950737545 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.135032519 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.14670945 seconds)
  done (took 1466.475483069 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.428056069 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.140086362 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.142037087 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.139481457 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.139373915 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.139791398 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.142952736 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.142117794 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.138886079 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.139169494 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.140054208 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.142389044 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.138621855 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.435292821 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.140477634 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.143157438 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.139475637 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.14005055 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.139630768 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.14273796 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.139656812 seconds)
  done (took 25.661367398 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.140791093 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.138890904 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.142295203 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.13930822 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.139538066 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.140228709 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.142369831 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.14067348 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.140550229 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.139555136 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.139545073 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.143172679 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.139528786 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.139842716 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.139132562 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.141750483 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.14018788 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.139461662 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.139520781 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.142631822 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.140105096 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.140048021 seconds)
  done (took 26.217990327 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.140107128 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.142254719 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.842640244 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.268084192 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.141312441 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.139005772 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.139351427 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.345760897 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.166342316 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.169331583 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.904438009 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.188384156 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.143716239 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.325005836 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.237271968 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.139620591 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.263712907 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.142778295 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.140257286 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.138248749 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.138977221 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.354367493 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.281180894 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.140032492 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.962390239 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.286390545 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.140914795 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.144259389 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.14023781 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.226164278 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.234060385 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.144805956 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.000550066 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.879633568 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.48166625 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.170382119 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.247064056 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.142851245 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.140491747 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.139378965 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.647801172 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.921606129 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.147306151 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.141262068 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.427596135 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.260330407 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.140599323 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.845332597 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.18455566 seconds)
  done (took 91.358340292 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.143861915 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.267131953 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.199423341 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.138877468 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.267299353 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.139258377 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.199317608 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.140513363 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.14141942 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.139971542 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.274477249 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.296603932 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.144104142 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.139750253 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.230198576 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.139925549 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.14200709 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.140408082 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.13922146 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.138834786 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.13878079 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.193771025 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.257262249 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.298447435 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.142127074 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.141563394 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.13867414 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.139234145 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.291587686 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.143863558 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.140968951 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.140672102 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.271983972 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.256960338 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.141937906 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.140082154 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.2672203 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.14125702 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.145058814 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.138865772 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.139071812 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.140895809 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.193487135 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.278902368 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.140498769 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.240923079 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.143804493 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.139778209 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.287929156 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.138997651 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.14260298 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.307973721 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.142227761 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.143668487 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.139821698 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.266975706 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.140042122 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.137815965 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.139212802 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.28567754 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.139191561 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.138862623 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.295611756 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.143283275 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.139190191 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.307699656 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.242394828 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.143159321 seconds)
  done (took 81.606375526 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.138522008 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.27698416 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.318610548 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.316625087 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.277666188 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.257299475 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.282923808 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.277213302 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.276969407 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.281832972 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.279898516 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.244479934 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.246683213 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.240395927 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.282930982 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.259185944 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.257986065 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.259309905 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.286835664 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.28028817 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.261443292 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.316966313 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.280254818 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.317767897 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.513621688 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.248151963 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.280050741 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.28037541 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.319646665 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.278276899 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.515155603 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.281695881 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.279383812 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.323929966 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.510893527 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.274568856 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.141662256 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.279472206 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.280993912 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.277623944 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.248518106 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.323140742 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.274441799 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.248970423 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.269022972 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.276858422 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.31748492 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.510763997 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.243150612 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.284175045 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.277683397 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.31903575 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.275244536 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.259605257 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.31769933 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.248213841 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.315880773 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.320620823 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.280579492 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.315569987 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.32071244 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.244880728 seconds)
  done (took 81.226417995 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.137833919 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.143520885 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.225154714 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.14065974 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.14061226 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.225756439 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.143936814 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.140263313 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.139608885 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.138923036 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.143241956 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.223517191 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.497630609 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.146316772 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.226111509 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.496839746 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.230132936 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.225867938 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.139641958 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.223740049 seconds)
  done (took 27.258488358 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.140479037 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.141967203 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.139980053 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.295147606 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.143174879 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.275553132 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.141341507 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.140742698 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.1440392 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.141825749 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.141402704 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.14063947 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.143069934 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.294353567 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.140690801 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.275479093 seconds)
  done (took 19.970061758 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.141376636 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.141286145 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.141071019 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.144468473 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.142730892 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.140668569 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.140902377 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.139793299 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.142587806 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.598724856 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.141791735 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.140268447 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.145479564 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.138766884 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.140962449 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.139271082 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.139084112 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.142710874 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.140516915 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.140085083 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.710410131 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.143812098 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.140258987 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.139619968 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.139274743 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.719132989 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.141748685 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.139606856 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.139040264 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.145895437 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.140089907 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.615211634 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.14060846 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.141319129 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.139390781 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.139727182 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.13974799 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.14283722 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.139338952 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.13937214 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.139717238 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.139890976 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.143438292 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.14061866 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.138957927 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.140474613 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.142658952 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.59957369 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.142197185 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.140916981 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.143742417 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.140194449 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.141049793 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.618156844 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.146147624 seconds)
  done (took 66.907798585 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.18151198 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.200588043 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.146594104 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.139901261 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.193767074 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.181765597 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.188547556 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.156989052 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.183439671 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.140884226 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.202708563 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.162278839 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.183370658 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.19516445 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.20042014 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.186460137 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.140617766 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.217510382 seconds)
  done (took 22.331007304 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.142422907 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.139782515 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.14057453 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.139538892 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.139076969 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.144707063 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.1406493 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.140298235 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.140758969 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.142823196 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.14164478 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.14112243 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.140313125 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.145407609 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.14062066 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.141128872 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.140505071 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.140839052 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.142371191 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.139681344 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.141270901 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.141037279 seconds)
  done (took 26.236042317 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.172493474 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.185157998 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.140503321 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.143669052 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.141319784 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.163871718 seconds)
  done (took 8.078498238 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.203347885 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.215133838 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.178891279 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.193326648 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.217833861 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.229883918 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.224255086 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.223054117 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.213579471 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.447422533 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.23096428 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.223031964 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.218048424 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.275732574 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.213914436 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.21568152 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.23136913 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.227006302 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.197216771 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.220813461 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.237771714 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.220668775 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.233983122 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.218355349 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.231618441 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.274309074 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.21952806 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.457769615 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.233896333 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.219026212 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.219625291 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.223811433 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.225214962 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.457975082 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.191913046 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.210186245 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.227258649 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.224701511 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.220448625 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.26641595 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.185019916 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.21734257 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.213173413 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.229117714 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.216511715 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.238555202 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.226437528 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.230477053 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.231705464 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.455952145 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.220176294 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.266444198 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.213169304 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.223948415 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.212980636 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.445452019 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.46460238 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.270534701 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.213489526 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.445658223 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.268221992 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.220454293 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.266662106 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.457418391 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.214729845 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.271754715 seconds)
  done (took 83.885818213 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.26697857 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.176311961 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.23412124 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.460304602 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.266285947 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.230414561 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.230515645 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.22907159 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.222592152 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.20066065 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.22883722 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.23326525 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.271686687 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.271041818 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.228162193 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.223932153 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.226277843 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.266184999 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.197565396 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.453635055 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.227993274 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.26733324 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.271182317 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.267540395 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.44520616 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.228936278 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.232640671 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.229601567 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.218593607 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.234486518 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.236678611 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.235274506 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.269905853 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.179466489 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.266251861 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.232599873 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.233013449 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.235903758 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.23850338 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.222950397 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.271431713 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.222646804 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.234528903 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.221127751 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.457297862 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.225711644 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.228695774 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.195482978 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.233290497 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.194781114 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.459173162 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.444792314 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.461338279 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.272173204 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.234045581 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.23290394 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.233776592 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.231187708 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.233593578 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.220641719 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.265758045 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.221928839 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.451861979 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.230638612 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.234038853 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.272137782 seconds)
  done (took 84.40815962 seconds)
done (took 2467.981643541 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.222051278 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.182791765 seconds)
  done (took 13.531937019 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.14468581 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.142081092 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.294087526 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.145883667 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.154938124 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.229183186 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.150514152 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.147209543 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.141556103 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.225896227 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.142403624 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.281088242 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.243998289 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.14272248 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.141987642 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.147626334 seconds)
  done (took 40.018763176 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.259401888 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.748300341 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.106244605 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.957184019 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.173777582 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.998412435 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.473569016 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.853973878 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.44243892 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.59789627 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.399185377 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.035177092 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.961018855 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.311804699 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.643435698 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.679521029 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.777407128 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.852233149 seconds)
  done (took 61.399409371 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.129191048 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.294262257 seconds)
  done (took 8.580690565 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.153626412 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.157571748 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.177295585 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.139593042 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.167439594 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.135569168 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.16114283 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.139568394 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.143513099 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.165215008 seconds)
  done (took 62.683945347 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.320903537 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.607417679 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.449977601 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.603089398 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.788404965 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.621461278 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.314228801 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.579388629 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.240237385 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.129042012 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.371795323 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.521405845 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.012774729 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.418638567 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.759918189 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.379979903 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.875996857 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.591342007 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.477030197 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.567896961 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.419169322 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.285652362 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.564775635 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.064638143 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.152797478 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.765510372 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.333423167 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.271052672 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.215541078 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.301608062 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.482811828 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.158317455 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.466937022 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.143510491 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.337840349 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.695246411 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.870213399 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.345354849 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.62863507 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.493565622 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.53135077 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.832163543 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.205319117 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.821663809 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.295670914 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.529544199 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.22782598 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.374786939 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.22444055 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.257518885 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.847474804 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.325591662 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.284614798 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.261859735 seconds)
  done (took 156.783057754 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.128940134 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.526473398 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.315545484 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.133857575 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.529768532 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.347947822 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.889033975 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.714935335 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.156775503 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.345736398 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.317223763 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.267256023 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.13343694 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.135262951 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.136070553 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.134455011 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.325391346 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.726342614 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.149718536 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.134886596 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.348213228 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.382845517 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.26988149 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.133591287 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.30453659 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.385109333 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.546435486 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.265447831 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.525082616 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.131107453 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.584808268 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.14650976 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.136759219 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.036913097 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.53371839 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.480722301 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.559004972 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.140548861 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.935332154 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.13400818 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.792262887 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.341991534 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.47373314 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.28626135 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.290637688 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.373504444 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.769674167 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.131453299 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.905317663 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.306740021 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.357970039 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.35649598 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.418265477 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.139752428 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.645690769 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.136144612 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.136583286 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.426107951 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.286223932 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.293303632 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.138607512 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.135131318 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.134274448 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.384781714 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.136205967 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.252262559 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.134229595 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.134828109 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.256875259 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.267949742 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.288198594 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.381731254 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.393895476 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.076871902 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.462490483 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.373562933 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.552413149 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.396963972 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.136824169 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.134103291 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.56249089 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.580280237 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.297044549 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.382788978 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.452115266 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.433585865 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.706064871 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.135241449 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.367126087 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.307671833 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.37156733 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.292785403 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.50576046 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.029564606 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.139972826 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.134657433 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.036986651 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.279272283 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.133623136 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.640737075 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.408006439 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.746093355 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.311470045 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.599168904 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.244652901 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.134213198 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.732726188 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.13558714 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.357439335 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.429955478 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.147900857 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.137689573 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.295669375 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.889036568 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.135363098 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.133915987 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.520205322 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.139454524 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.298290326 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.136384905 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.397218787 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.959047442 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.371164219 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.136588268 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.410875315 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.323164812 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.289507953 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.138394818 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.529367421 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.406536096 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.544663074 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.368016209 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.700946778 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.135819999 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.447833096 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.134719295 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.134760114 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.316092178 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.047511595 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.316437452 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.134555962 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.405968258 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.302467555 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.521624405 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.132963224 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.380411619 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.387734737 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.513315543 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.133222099 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.273608536 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.135754756 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.085782325 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.30376368 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.132495905 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.137670197 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.947766458 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.135820019 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.290641265 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.369132069 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.848469094 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.513417875 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.491403494 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.135535685 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.557739485 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.32915728 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.58135864 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.684919366 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.310684891 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.134294309 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.13447606 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.135027511 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.388816451 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.320818707 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.132841548 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.13441287 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.874382289 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.247674493 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.135395004 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.326282989 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.946827039 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.58885029 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.356223526 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.135979007 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.501900492 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.134551677 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.344366459 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.637246466 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.431664998 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.134204475 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.136724473 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.135384355 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.13911451 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.350727597 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.39340584 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.692160287 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.289386779 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.437157303 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.353545014 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.456943219 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.606770995 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.145158179 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.399964057 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.134870838 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.533829503 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.139727969 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.348230709 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.391079324 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.136133812 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.454074446 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.495286519 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.213960951 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.537837627 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.136015516 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.135305339 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.134645858 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.314450876 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.600841845 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.133569624 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.247145014 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.502686406 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.264343992 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.336162523 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.359818183 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.150759571 seconds)
  done (took 734.134886317 seconds)
done (took 1078.262461337 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.129774228 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.135393176 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.138969354 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.137972051 seconds)
  done (took 25.67160784 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.111173559 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.214286537 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.314903369 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.141941643 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.49364063 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.191993923 seconds)
  done (took 11.603188205 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.68771682 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.135993241 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.139051708 seconds)
  done (took 18.092374483 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.41012583 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.594473948 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.312637571 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.231932281 seconds)
  done (took 6.683602641 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.142423079 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.144043562 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.1426233 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.14470434 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.143830402 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.145712375 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.143467788 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.142558152 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.143467366 seconds)
  done (took 11.427616785 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.958436474 seconds)
done (took 79.573435183 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.489881784 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.434891733 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.142546839 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.483872714 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.263433114 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.449169314 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.255866265 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.155024063 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.442619724 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.639691891 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.671618621 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.240126933 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.422843164 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.604267998 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.374481351 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.168711313 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.151094591 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.203162241 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.657128687 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.333737914 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.888759644 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.271257304 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.13160699 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.16610856 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.002268155 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.250293787 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.394453644 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.135696302 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.582406947 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.160804303 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.221002324 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.713561118 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.357422951 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.45025864 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.232999509 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.959160312 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.646834371 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.188851483 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.301204709 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.580910535 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.407560181 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.265218442 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.134000775 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.309326971 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.558681628 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.155870171 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.115765995 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.295273929 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.562981783 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.325238219 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.474656534 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.146668337 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.761298335 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.212100419 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.226691022 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.13531188 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.101404757 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.702679027 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.300386099 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.436739643 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.159668011 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.192455881 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.051477187 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.166404826 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.136965675 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.691519926 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.581726002 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.232525798 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.633464315 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.164034405 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.156973621 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.171639082 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.8347473 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.268812111 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.135098752 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.288839458 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.401045416 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.253990817 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.135035949 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.14853072 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 3.51678694 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.138103875 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.27658896 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.451739572 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.29921338 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.494753902 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.655516888 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.516869223 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.579473155 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.138400414 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.475854415 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 8.003028517 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.332860371 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.139076227 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.142292527 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.306714583 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.628127062 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.667339118 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.272550479 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.747098015 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.167109323 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.158387886 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.449506386 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.442614139 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.882105043 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.167855913 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.278031633 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.133910938 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.432309887 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.130686902 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.530196601 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.7291875 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.138816495 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.204606254 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.653746063 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.139950216 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.449351802 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.567969929 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.228231517 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.133942965 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.437803453 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.146665945 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.264249522 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.715674378 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.526143531 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.396775155 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.139618832 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.716556376 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.139558036 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.339874492 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.142549272 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.712669414 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.675199388 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.17415134 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.392953266 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.267847751 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.132102738 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.420467398 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.196429651 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.27271838 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.472781527 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.442416642 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.254408351 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.131501485 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.489496509 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.142553349 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.352245521 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.452244513 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.303769764 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.45703186 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.226673413 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.155140225 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.068314883 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.581061081 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.723356635 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.748757918 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.405459779 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.268493718 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.670125177 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.486261526 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.966460181 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.239006274 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.193891083 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.138122148 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.153926561 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.208210478 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.132731246 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.13711775 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.435284348 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.27157265 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.67544324 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.89740729 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.854465204 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.399677415 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.290272345 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.055736302 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.715941977 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.141609715 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.453665356 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.640293742 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.236869704 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.168415444 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.137689854 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.196038899 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.871459535 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.178157852 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.477117086 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.604900292 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.365802934 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.544754406 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.380088265 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.172997414 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.51838883 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.396878261 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.392237419 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.368040996 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.562520026 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.258794547 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.459297008 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.216532495 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.394263364 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.138710106 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.451164504 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.40353974 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.62972795 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.513887095 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.361281641 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.304693051 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.457551389 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.14151697 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.146685108 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.237104869 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.491416253 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.159134772 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.141509936 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 8.223301049 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 1.81427997 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.065816914 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.253565339 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.371509611 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.247294281 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.190296654 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.637593665 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.15872742 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.473921231 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.299020362 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.313148803 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.343571615 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.167356064 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.273861547 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.327321491 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.275399507 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.398403409 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.005092389 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.562308149 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.179649354 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.296330231 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.135211031 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.044003887 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.161997015 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.15310451 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.417195971 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.344554833 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.451590989 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.2613791 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.307491961 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.133187144 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.170094536 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.565970314 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.003520644 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.702689403 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.148082417 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.168965287 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.132878139 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.660003685 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.557051878 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.203282671 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.272252317 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.719209587 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.17312852 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.339133885 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.145102694 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.140210595 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.903177313 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.271590762 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.381929772 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.67690875 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.140499801 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.578538839 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.162722115 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.563112123 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.681101872 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.189060337 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.266062417 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.136756537 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.114222557 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.514183043 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.160084796 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.296332767 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.508150394 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.258922059 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.25024386 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.138626897 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.172680759 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.575670536 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.283613948 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.674259044 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.16581639 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.517004469 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.140372161 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.65667469 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.169395603 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.225218275 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.56311359 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.33523153 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.539501839 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.142179558 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.298650718 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.399163748 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.163649807 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.132063703 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.279963603 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.182020151 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 8.080955889 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 3.262521439 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.295947179 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.103573582 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.377835932 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.272258914 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.927576127 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.27261706 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.240584624 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.736041629 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.704191553 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.139288088 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.337959878 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.137454229 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.490436035 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.166166535 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.158059659 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.296537705 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.2346871 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.260712704 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.898330669 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.293302583 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.675548311 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.21459027 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.9422289 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.143534653 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.598420678 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.260237424 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.452766805 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.926666316 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.15388118 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.285234368 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.782170187 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.330426713 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.169520166 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.407640303 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.141930576 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.739043966 seconds)
  done (took 878.230822717 seconds)
done (took 879.530090909 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.335593681 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.51669572 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.383136842 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.068033415 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.952726454 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.78801122 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.404863653 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.377234001 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.221389737 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.402659546 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.094728921 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.955484733 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.239423427 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.258280334 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.23300742 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.243079272 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.359861806 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.383283458 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.261473961 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.088870764 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.509859523 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.089087007 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.563846124 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.439321878 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.521035609 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.242450593 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.351085549 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.496065565 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.498669011 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.330944777 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.349920442 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.372695214 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.977404333 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.395991189 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.234834532 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.225486984 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.025894344 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.237712458 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.335687612 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.228991034 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.516863025 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.266979126 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.863690819 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.011957228 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.923463727 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.563562707 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.02586749 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.246896094 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.261073011 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.348136637 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.400732402 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.340082589 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.501150284 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.353252386 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.040238675 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.011864709 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.496467674 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.026149292 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.874396133 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.348790126 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.518823177 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.243469768 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.34698796 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.375284023 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.268194475 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.437827028 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.558922298 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.340817767 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.365929602 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.409205576 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.388801641 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.372115058 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.25812092 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.277702274 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.264437732 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.401635898 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.016086661 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.386374111 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.934858827 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.239735606 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.033841978 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.057714433 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.100428027 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.22225729 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.332685608 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.921446527 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.969359009 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.033539023 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.264476236 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.366643918 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.109708686 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.386345302 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.606425268 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.355073023 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.333401183 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.387600753 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.97802861 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.392978457 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.12932035 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.369314178 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.928307274 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.349957274 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.165630332 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.224875579 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.250164632 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.342099006 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.344505232 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.564346129 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.37040971 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.322401041 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.519958753 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.263532811 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.368975428 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.263829109 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.219899383 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.928870042 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.428865609 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.024654249 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.394000903 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.815261987 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.407861322 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.224878832 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.524738956 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.441390365 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.333216847 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.241845011 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.247905422 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.024445188 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.250928507 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.240721 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.335408911 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.597822676 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.352346234 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.066990784 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.370215277 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.849790765 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.38076597 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.370335601 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.222216076 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.028113101 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.239557903 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.112104975 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.442334877 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.518189421 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.386876004 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.438819614 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.260781111 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.43928874 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.393410851 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.261038953 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.370082197 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.265335554 seconds)
done (took 250.051171688 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.469964428 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.177399201 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.426166246 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.410991051 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.495271115 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.497476654 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.211968262 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.583177302 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.249945826 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.557262707 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.398309062 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.987559956 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.211307542 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.369706731 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.488748262 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.378214925 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.252779629 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.429303278 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.594020968 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.539419954 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.862768331 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.399030031 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.292398571 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.562940608 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.135301265 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.85055045 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.544121079 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.25427242 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.408116679 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.852507521 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.908935555 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.415851348 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.542284728 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.768524752 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.504035708 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.830545706 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.496284187 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.894143798 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.471343312 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.473326964 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.413455983 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.88412959 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.856573287 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.874216776 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.284209751 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.518084916 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.210356056 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 4.956438328 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.137204991 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.831513482 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.405170072 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.91239419 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.982521241 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.472665746 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.361685352 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.767860624 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.62018539 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.622441616 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.544353457 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.448601831 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.471617617 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.568549279 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.601237727 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.339279217 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.885668697 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.427410342 seconds)
  done (took 148.730218421 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.575337827 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.427041395 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.551161669 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.533825469 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.725691118 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.563411323 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.661099337 seconds)
  done (took 14.169510712 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.203900774 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.192751739 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.433489261 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.433680893 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.200249581 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.319244567 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.278706971 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.876851977 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.441890774 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.231345874 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.517489645 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.43364857 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.780914418 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.877232984 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.281245029 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.432699943 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.165728419 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.257682063 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.249500764 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.453430443 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.869112934 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.839277193 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.384010399 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.279599019 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.203161107 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.233739447 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.191880428 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.162493469 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.226826657 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.17765251 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.19576182 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.305703927 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.18397602 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.841154844 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.210038798 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.514152756 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.196821026 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.230925841 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.326058443 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.136791614 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.174515124 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.195425331 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.335128165 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.199052821 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.170709727 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.379898486 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.1810422 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.199692265 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.174952339 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.189390927 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.383700522 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.189298358 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.206505425 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.789631428 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.403905501 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.840272333 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.259870358 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.181954561 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.189545218 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.251369649 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.189658806 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.452353504 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.432820565 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.173557103 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.406179213 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.503137854 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.1911064 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.172020938 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.171050232 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.43435644 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.185486651 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.385365391 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.186167656 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.23662081 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.240354065 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.325415507 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.379204262 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.990467656 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.959339725 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.78412814 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.168957733 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.175481842 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.493844073 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.127701112 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.790642297 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.181922563 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.230263527 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.835830483 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.101037703 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.188186062 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.499761599 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.174261117 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.248398279 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.241398379 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.216625307 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.255059231 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.438909804 seconds)
  done (took 155.147254551 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.36736971 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.736254937 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.403619338 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.205956934 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.309534652 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.473182641 seconds)
  done (took 15.62937645 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.612359305 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.00759748 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.207092341 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.209019567 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.244862994 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.185496913 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.183682007 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.566461253 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.33231712 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.199923687 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.184201952 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.208842259 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.18792668 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.323179608 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.184693599 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.192525774 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.186332447 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.213937454 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.200744669 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.254164548 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.483849911 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.247584931 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.254902893 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.266224715 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.253384474 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.191678056 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.131477519 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.202433299 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.194100577 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.521781763 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.37794811 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.184557829 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.16722966 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.667799742 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.964563717 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.267523028 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.348643384 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.213676728 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.238951275 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.185032889 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.208441596 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.257982004 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.205023894 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.207922394 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.691036878 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.204654862 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.279709858 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.448304311 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.186209469 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.21188434 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.209183058 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.21583503 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.187988317 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.21090541 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.716001901 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.771138553 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.175846027 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.186029087 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.247948435 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.273521595 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.279553555 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.189305485 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.64150415 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.143478713 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.828446397 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.214229672 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.283085237 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.336997059 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.256538677 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.206966598 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.208489953 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.214611143 seconds)
  done (took 122.335022768 seconds)
done (took 457.146667177 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.196574834 seconds)
  done (took 7.328693518 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.243917956 seconds)
  done (took 7.513901807 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.131828305 seconds)
  done (took 7.270434973 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.137130397 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.164071109 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.150152707 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.158332126 seconds)
  done (took 25.782026388 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.283952623 seconds)
  done (took 7.424094124 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.132274532 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.152065984 seconds)
  done (took 13.519749075 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.347840754 seconds)
  done (took 7.496825418 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.510087668 seconds)
  done (took 7.651756516 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.144953162 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.164205747 seconds)
  done (took 13.474627642 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.1376293 seconds)
  done (took 7.277089111 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.62839409 seconds)
  done (took 8.864037418 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.147722493 seconds)
  done (took 7.318314437 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.170569199 seconds)
  done (took 7.308040238 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.23396974 seconds)
  done (took 7.375984736 seconds)
done (took 136.738939018 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.136589172 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.140457614 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.139294109 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.137977438 seconds)
  done (took 25.686395715 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.467881385 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.4707678 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.447698838 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.553273164 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.414208856 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.415570946 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.469405877 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.47662795 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.413227224 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.515415928 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.474658103 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.5146484 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.62161416 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.451224659 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.447095872 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.619726135 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.521770469 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.473396048 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.413469087 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.448308273 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.623822905 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.621467054 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.903962055 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.894672854 seconds)
  done (took 37.813698981 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.352562908 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.513143262 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.314042902 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.465388238 seconds)
  done (took 6.780978891 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.181719873 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.520589668 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.502900809 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.560211517 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.504162517 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.318560471 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.503252579 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.337370989 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.323949788 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.325749395 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.73333957 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.298557916 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.307936069 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.561539171 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.319720544 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.146425127 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.147757751 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.324930844 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.523053403 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.346868641 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.413992768 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.501940653 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.504415023 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.503046579 seconds)
  done (took 34.848150149 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.905141955 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.074463373 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.50414514 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.059100726 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.861199529 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.943059387 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.426107876 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.674402188 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.412021635 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.388250743 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.880613547 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.88897055 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.289693603 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.035251345 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.904759178 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.323093608 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.324533011 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.994760826 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.565163126 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.450512214 seconds)
  done (took 39.040993014 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.132877058 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.141423969 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.391041898 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.312068533 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.134957687 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.141285442 seconds)
  done (took 28.390241568 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.207917203 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.282602853 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.457998088 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.408537836 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.296828719 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.273127673 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.784968632 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.354779268 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.893697318 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.948306454 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.790489649 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.5926386 seconds)
  done (took 22.431004741 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.135171416 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.169249815 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.137109228 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.363663234 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.475259952 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.90561308 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.154109013 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.137106084 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.67434385 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.395181149 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.284146771 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.377221571 seconds)
  done (took 45.356435925 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.357804823 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.324528696 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.481776785 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.184917412 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.659533234 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.226599718 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.504599095 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.572586476 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.961615356 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.036065518 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.67375295 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.189185774 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.671070561 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.11118583 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.876945936 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.47112702 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.961176963 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.104045549 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.583885282 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.211563502 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102379735 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.295644056 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.141236626 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.68743363 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.460403091 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.139102056 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.352734906 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.384008628 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.134088072 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.390737277 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.135635004 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.62299892 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.340832818 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.444975677 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.666496682 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.220645154 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.229572271 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.875011271 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.733406951 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.437401867 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.283361998 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.301949274 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.383196753 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.143611886 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.396110236 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.919071441 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.157220955 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.761584643 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119761209 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.287470481 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.033495327 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.772028849 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.590387189 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.848319768 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.280624264 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.469433717 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.306781395 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.136740644 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.388373787 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.192452207 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.330314765 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.232886949 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.361298667 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.112947107 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.36578456 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.481941883 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.481664522 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.455490234 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.438436861 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.439656596 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.51688111 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.289110621 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.9615454 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.277342383 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.661230862 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.051613522 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.499557476 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.137656979 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.856477389 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.667864864 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.115242836 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.25666111 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.818575574 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104068618 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.138000889 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.302883649 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.007403643 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.108721697 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.232976241 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.196978392 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.540099877 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.273608437 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.293102172 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.331006231 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.841609457 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.121272906 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.138212572 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.426109191 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.107695645 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.69910269 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.135939565 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.110673433 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.139340731 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.767969256 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.550275712 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.935357714 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.879685007 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.762458837 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.437660542 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.743327419 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308734871 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.135558919 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.514381332 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.464938916 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137168473 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.845024616 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.137992267 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.204213506 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.48853413 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.136045909 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.108309837 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.580543155 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.342189606 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.137333705 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.40817233 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.140986147 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.288475307 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.138787458 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.722020706 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.56570117 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.383051225 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.663204756 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.241115851 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.222004223 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107631489 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.285636983 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.652679358 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.223003822 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.462455519 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.576202195 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.365130116 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.595153666 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.127560557 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.971141438 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.612211511 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.402048545 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.475139669 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.798052756 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.310829092 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.227590206 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.17754589 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.263519562 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.14772722 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.699658484 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.138424502 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.847116188 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.109120324 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.434706481 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.13652516 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.301329483 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.138185604 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.38432768 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.821797592 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.180229036 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.302535465 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.437721569 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.326112929 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.137816859 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.109409893 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.519634933 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.404183334 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.665690937 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.397575478 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.815847734 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.500004213 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.640429939 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.352333115 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.525324424 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.869054573 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.561832726 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.491919756 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.183875963 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.115108945 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.696263275 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.230565223 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.560261 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.365187526 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.869273244 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.529090392 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.651207621 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.185543277 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.618640612 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.111200529 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.286642322 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.617753526 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.167189857 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.702397583 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.229461549 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.381095218 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.421537104 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.164940807 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.495016312 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.990503094 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.570750865 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.492952417 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.465794947 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119279412 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.888122543 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.662027022 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.6432599 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.274565176 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.46650866 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.155344434 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.188348734 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.139892927 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.486220779 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.085815179 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.800378934 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.428050643 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.694375468 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.036426075 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.287265307 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.692932049 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.149577503 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.100565532 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283477377 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.203827494 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.778941528 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.687726278 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.399926862 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.464761473 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.138528319 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.139343621 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.419263902 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.451291866 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.414092742 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.659541114 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.380476425 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.824643496 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.241684823 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.775645447 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.304719393 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.182039756 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.738580025 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.461906391 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.081244291 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.338204893 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.788240354 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.294019375 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.758012773 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.430942447 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.137270869 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.613359129 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.751938735 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.139321032 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.15211557 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.276721856 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.138991377 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.344866729 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.898138811 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.386374684 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.872887537 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.53762852 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.387883022 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.341612166 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.545914049 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.664940404 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.90144138 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.106484923 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.304050438 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.237292175 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.437189719 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.137809918 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.436232963 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.785295834 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.820410925 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.924769806 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.6876372 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.411466258 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.898310114 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.611204074 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.386160875 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.443397162 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.114398629 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.757062928 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.117609602 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.283704667 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.10824754 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.968206125 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.459313842 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.515227473 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.616769774 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.200620559 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.670848028 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.51915981 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.201403145 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.321153697 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.397257925 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.204511005 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.375879222 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.138316698 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.594348171 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.565723695 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.138501459 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.519604089 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331305228 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.469682783 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.294167109 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.897064962 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.17661976 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.27695224 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.701678456 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.314336161 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.276297666 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.485335284 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.010298873 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.177504127 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.177358521 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.653162488 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.781103779 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.616149366 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.757835109 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.741679286 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.530492436 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.881794785 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.136372831 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.353477952 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.308298646 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.137657741 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.344587756 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.543570423 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.172741946 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.361413164 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.560297346 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.266406242 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.700065231 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.118967568 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.816955819 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.406587255 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.647271388 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.702247461 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.909968701 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.627657913 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.174392283 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.640801415 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.103959401 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.302259993 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.48032741 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.861245103 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.21079167 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.999411021 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.931592296 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.308824619 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.570368234 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.25550499 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.905660709 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.300715322 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.377180136 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.351375954 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.277413678 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107946422 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.705351557 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.911880661 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.418885483 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.304639386 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.339114352 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.282430261 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.317044298 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.619875696 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.450719158 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.879219768 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.617986398 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.382284805 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.110579356 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.139557892 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.416704293 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.497172533 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.232325939 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.434649048 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.564918476 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.192701062 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.177000955 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.182714296 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.396661956 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.87835165 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.865788361 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.48834543 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.676784068 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.740425474 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.171674196 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.879767439 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.354290367 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.502679275 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.55244513 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.044006819 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.570514123 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.436011972 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.299492358 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.111076952 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.34166204 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.149711327 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.221725398 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.882385171 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.448502687 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.22183765 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.978549944 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.753277019 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.137556977 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.158579279 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.56060023 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.369288207 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.337715451 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.135466811 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.72996254 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.503792255 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.294954031 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.122489862 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.9004711 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.110215963 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.354586924 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.141381082 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.315262197 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.972573985 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.239055941 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.786978775 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.682604385 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.212401442 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.322538607 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.10773634 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.966110452 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.152539349 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.839427747 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.921112403 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.387555143 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.661147995 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.337076161 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.13809285 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.469278213 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.274226619 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.480127268 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.606201905 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.615862812 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.567455684 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.51690531 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.430690018 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.652703063 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.28340914 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.385391727 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.10772822 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.226674849 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.143919243 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.512673843 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.502303678 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.135152794 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.684035148 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.388357827 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.290973581 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.310318159 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.221760594 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.707399539 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.350550778 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.286888978 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.302036338 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.388455796 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.506336334 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.141177501 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.353548969 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.1370406 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.15741006 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.355774886 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.383461172 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.496482164 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.45053391 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.033667831 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.307260676 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.915871611 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.843531844 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.669904636 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.141386192 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.023881643 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.487206984 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.141239665 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.624510014 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.792509105 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.33779994 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.838558608 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.215135522 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.149766022 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.310914823 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.631788485 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.146767531 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.770372936 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.532903044 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.138487295 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.61920028 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.21524604 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.311909463 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.896769711 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.637501246 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.138835407 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.979249248 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.253528088 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.687433033 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.4151503 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.217566344 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.142826966 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.722874084 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.116631522 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.139895963 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.235585316 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.671210017 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.157005545 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.699757193 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.295347602 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.298991688 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.151437444 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.280716724 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.141597603 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.35630772 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.741137003 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.384214478 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.412016643 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.341244588 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.146967397 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.736301848 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.829669725 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.240172255 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.316502601 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.202218244 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.485499877 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.93172239 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.143480647 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.684991982 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.327980419 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.34958678 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.571012286 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.396770171 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.179767804 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.356053186 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.156854078 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.424047653 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.300425192 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.699614434 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.39631542 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.594211324 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.252516349 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.161862186 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.67106523 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.613067444 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.020012639 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.137840971 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.448220255 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.141269936 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.980972688 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.780478939 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.331740276 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.302003113 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.143361853 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.726100393 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.456641541 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.268663572 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.13905598 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.353750551 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.649481331 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.111282189 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.969850389 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.019389662 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.357085086 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.467195705 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.106787525 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.340211976 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.152200109 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.120285443 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.637835855 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.139249942 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.478931143 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108659677 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.669176416 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.147778409 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.255890648 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.298429603 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.447170665 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.139097684 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123859968 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.316664186 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.137749987 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.14024983 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.533694129 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.224005879 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.389028918 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.613868991 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.399601117 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.480610835 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.039692657 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.968005086 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.151587795 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.44644443 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.980281684 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.694063508 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.261513911 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.657194201 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.98550015 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.149328885 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.670679726 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.385334275 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.870773729 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.282786987 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.615532009 seconds)
  done (took 1971.874433103 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.226737943 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.188788682 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.191161699 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.190059468 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.168741484 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.182675141 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.180700375 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.170796019 seconds)
  done (took 50.639092689 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.133620363 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.145531039 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.608023811 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.318715229 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.15934784 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.358595252 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.292062762 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.683104939 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.339679553 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.196306702 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.197669235 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.214961915 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.147567739 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.170331711 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.059808082 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.224249142 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.140262898 seconds)
  done (took 91.578633995 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.170018446 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.032091034 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.157009892 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.040848056 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.159940001 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.544678209 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.150175903 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.141133992 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.491107838 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.811737924 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.150374723 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.286581299 seconds)
  done (took 86.306347297 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.174584144 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.175138342 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.17529225 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.174965906 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.176428487 seconds)
  done (took 7.018676404 seconds)
done (took 2448.924002362 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.368975017 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.670627965 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.695249437 seconds)
  done (took 4.502430099 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.210512611 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.281520855 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.346171811 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.286782716 seconds)
  done (took 6.281140659 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.446114577 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.632540219 seconds)
  done (took 4.217086335 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.533474105 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.147857329 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.686262597 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.138608988 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.142928458 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.140722024 seconds)
  done (took 19.569899527 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.167261583 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.174408609 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.16604488 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.165579708 seconds)
  done (took 5.812977698 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.139485426 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.18652445 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.140753548 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.101880952 seconds)
  done (took 18.704516094 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.447437653 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.230209655 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.885352532 seconds)
  done (took 5.706565493 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.956020468 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.277420418 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.942392488 seconds)
  done (took 6.313322255 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.08798069 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.171848819 seconds)
  done (took 5.398850599 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.29881318 seconds)
  done (took 2.43956527 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.622663566 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.631805867 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.006715684 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.016926818 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.177693141 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.451714384 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.503972351 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.421456225 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.843210098 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.719569985 seconds)
  done (took 18.532928145 seconds)
done (took 109.351299856 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.09458724 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.537815292 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.305813664 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.83386333 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.233555096 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.304530426 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.762441159 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.63614399 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.445486295 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.442975522 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.209751792 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.232487204 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.163914181 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.532514645 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.166138874 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.478022245 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.554195224 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.113747046 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.432578189 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.017898383 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.766908458 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.730190658 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.932717635 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.736184778 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.557870007 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.285736874 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.988943497 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.481798675 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.658842394 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.992489383 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.291992128 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.264397798 seconds)
  done (took 153.32166848 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.134166091 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.14740314 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.145767758 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.144822975 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.155542385 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.146106929 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.141712118 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.141267209 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.857009642 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.85530486 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.144033955 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.179281588 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.14413747 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.140650186 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.145886332 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.140549804 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.983088032 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.148159955 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.14491486 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.144248479 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.144275037 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.032543277 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.151261304 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.036844286 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.982205442 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.149127396 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.140997861 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.144538837 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.147691103 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.144391563 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.145986849 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.141444131 seconds)
  done (took 188.69353801 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.140415325 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.143790855 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.144633818 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.141807621 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.147592765 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.147882042 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.141218805 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.14099605 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.144292402 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.145849626 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.140763606 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.147190895 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.147555741 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.143880322 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.143564219 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.140982032 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.1452168 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.149139261 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.143744369 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.144972106 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.148834185 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.141205724 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.14669508 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.145320899 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.1438771 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.143078188 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.145553861 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.144496017 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.144140733 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.143157935 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.147664991 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.142069481 seconds)
  done (took 197.767044692 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.445011573 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.178297488 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.091303429 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.711333173 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.069922364 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.172480248 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.70878504 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.451871383 seconds)
  done (took 13.972522772 seconds)
done (took 554.903367334 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.813739307 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.062544553 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.318972139 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.367805952 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.722039613 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.430934774 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.36437307 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.618000507 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.879640568 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.607067577 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.615539448 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.351229395 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.963272355 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.363504246 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.335138027 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.59900307 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.57214771 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.862508824 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.35318419 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.996862517 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.35787633 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.033918755 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.622847159 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.939440663 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.616024319 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.077242542 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.239315861 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.57193399 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.355259029 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.362957678 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.112709475 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.507065535 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.397312024 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.391058345 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.60444737 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.616022675 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.47450376 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.587811497 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.314768842 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.828475497 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.993454644 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.745511946 seconds)
  done (took 76.085711339 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.167986801 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.185575551 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.334087881 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.23860346 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.811616868 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.238396281 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.418627824 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.380817759 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.264785585 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.394115008 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.421583943 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.81149593 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.40676273 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.781621534 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.393796251 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.427904655 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.242520923 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.765219339 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.400642143 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.378776415 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.205417273 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.332725583 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.208419692 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.359130688 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.199828001 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.214980046 seconds)
  done (took 37.145345027 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.214764803 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.352585001 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.436807808 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.506673539 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.396610942 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.165792089 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.51798327 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.331515238 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.123345887 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.552433366 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.278541985 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.327104361 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.343191123 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.46197623 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.750597404 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.329849894 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.333428467 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.340902894 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.361176082 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.408873312 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.316551468 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.248953939 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.518507456 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.331669747 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.846813374 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.565157402 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.571758781 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.763191099 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.719657026 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.328489273 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.299979057 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.498305168 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.561354157 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.445283623 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.311181197 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.194418109 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.199962124 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.278076232 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.047037562 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.344841744 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.512170889 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.3786595 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.580869812 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.738818933 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.258302824 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.426454783 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.631277033 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.286383866 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.301447737 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.98613937 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.484768955 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.126319981 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.326147666 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.392874135 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.298444199 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.659146168 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.377970079 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.437740851 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.358753938 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.60029474 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.250401025 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.567006426 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.3693805 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.259839944 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.507346799 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.402888182 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.367166513 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.609837376 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.582338793 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.685790258 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.751828944 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.263306096 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.209009488 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.276839699 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.355824274 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.661189602 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.674863723 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.448688407 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.584650143 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.503492561 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.691466886 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.630980841 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.166756128 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.888760917 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.22702935 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.17830086 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.262851419 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.490696144 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.49682387 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.678351309 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.747931826 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.457848664 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.500759522 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.56230451 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.566407142 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.566915013 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.174503119 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.195052917 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.428669723 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.750397587 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.264647611 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.481692307 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.859252751 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.579994543 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.422883308 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.45723102 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.593081053 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.253721592 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.611191605 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.171858524 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.387252794 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.407912046 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.464895045 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.454449475 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.172241343 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.722964089 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.295137242 seconds)
  done (took 232.826595379 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.136193809 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.149155285 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.141337981 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.145962644 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.141728805 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.78009716 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.210958311 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.142563055 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.770687994 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.210510764 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.142429491 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.142850429 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.14158815 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.14552027 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.747565581 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.716218749 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.965630062 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.140375744 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.141099225 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.141936289 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.854800953 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.142951491 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.141865143 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.143495364 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.141482591 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.140367331 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.141942366 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.190165518 seconds)
  done (took 153.294735761 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.197161601 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.573964876 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.229412857 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.288500062 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.233529713 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.210609352 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.707363902 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.328172355 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.266423382 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.21542808 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.21285557 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.432821505 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.434944212 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.781788756 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.322425945 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.290717321 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.857781813 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.340215502 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.21122955 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.209108676 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.36288178 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.544024674 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.454958311 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.483115323 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.352280661 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.478619127 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.263785981 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.205637108 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.325222353 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.67249829 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.21714363 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.550941704 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.345047525 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.209425041 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.686103656 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.547050088 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.764722293 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.741516802 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.387835657 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.166348292 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.169441438 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.437837369 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.507607537 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.245818024 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.202250649 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.830026668 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.220170012 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.605318353 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.241748094 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.164782998 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.288969448 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.304481525 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.438256295 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.26512376 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.376712829 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.364081465 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.697943016 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.182474833 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.273804019 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.502599567 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.174649758 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.675306498 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.148455848 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.267498671 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.207852011 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.055521865 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.290536342 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.708355831 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.808905088 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.252938149 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.550321207 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.394924956 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.175453321 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.462562715 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.371943528 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.656548622 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.767931744 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.332049394 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.30343569 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.272295088 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.46926144 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.18868346 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.734415965 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.300551587 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.180693818 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.683606026 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.589009801 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.17697191 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.197897202 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.310111444 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.360611833 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.406718814 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.489246771 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.268913744 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.075430219 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.461822005 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.494320196 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.214892237 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.328653924 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.18748919 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.653652821 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.379480661 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.186569848 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.495610014 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.598561557 seconds)
  done (took 159.879601905 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.928377187 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.252268295 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.393549327 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.786861643 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.531472338 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.713218856 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.415489888 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.269634102 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.453984896 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.401839093 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.46895362 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.304552064 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.903799092 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.923098912 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.243070559 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.377788786 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.269342744 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.770611763 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.492677043 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.254621952 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.519616003 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.907717354 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.50110229 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.610138347 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.572905543 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.693557068 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.84234452 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.346879341 seconds)
  done (took 49.294771974 seconds)
done (took 709.668318247 seconds)
SAVING RESULT...
DONE!
