cset: moving following pidspec: 2116140
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.839749132 seconds)
loading group "shootout"... done (took 1.137381924 seconds)
loading group "string"... done (took 0.691635986 seconds)
loading group "linalg"... done (took 8.74385041 seconds)
loading group "parallel"... done (took 0.171969812 seconds)
loading group "find"... done (took 2.953442877 seconds)
loading group "tuple"... done (took 2.081625367 seconds)
loading group "union"... done (took 14.771523352 seconds)
loading group "dates"... done (took 1.508957337 seconds)
loading group "micro"... done (took 0.215327724 seconds)
loading group "simd"... done (took 4.722905781 seconds)
loading group "io"... done (took 1.3857509 seconds)
loading group "random"... done (took 9.874834819 seconds)
loading group "problem"... done (took 1.64244496 seconds)
loading group "array"... done (took 25.874698964 seconds)
loading group "misc"... done (took 1.861206252 seconds)
loading group "scalar"... done (took 43.751827897 seconds)
loading group "sort"... done (took 3.33675842 seconds)
loading group "sparse"... done (took 13.077002951 seconds)
loading group "collection"... done (took 18.80310417 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.44516223 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.115707449 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.16433216 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.112593484 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.233765066 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.125637511 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.135562474 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087040388 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.05627252 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.142694734 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.137958635 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.430200607 seconds)
done (took 5.674847713 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.316892984 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.243762548 seconds)
    (2/2) benchmarking "String"...
    done (took 0.16598218 seconds)
  done (took 1.680779868 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.092366197 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.059606088 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066230798 seconds)
  done (took 1.435108076 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066512018 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.139945477 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065443161 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065611467 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065629091 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068397654 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06531668 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065492326 seconds)
  done (took 1.761873522 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072473377 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.066666205 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.064613049 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.066510451 seconds)
  done (took 1.485149505 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.06609989 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125583534 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064032361 seconds)
    (4/4) benchmarking "different"...
    done (took 0.06368697 seconds)
  done (took 1.531169187 seconds)
done (took 9.572035694 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.166499243 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.788622842 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.86415563 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.147928362 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.319701215 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.348095217 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123213898 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.205716291 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.116298017 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.076746747 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.163585129 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.082870479 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.488844744 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.481702596 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.07256284 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.189210536 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.624290594 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085214851 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.115932755 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.268087765 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.082084628 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.084099199 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.090102108 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.073133283 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.169519671 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.185033834 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.644587009 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.102194896 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.073145816 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.202853671 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.074514594 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079568764 seconds)
  done (took 10.893395378 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.116851032 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.113205413 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068105424 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.103864981 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09489441 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.069159944 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.074957922 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068299622 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.087485294 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.133813261 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091814552 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.12530156 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067543737 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068987667 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.099783059 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.161415264 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.083645297 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082265388 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068204503 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081509829 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.095786146 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080494254 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078928438 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078078369 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.115249111 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.135801585 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.087532888 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.112764129 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.069428239 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.083009486 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.101795312 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.11218556 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069302095 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066483249 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.109970828 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.086149255 seconds)
  done (took 4.635423868 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.042839266 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094544194 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.107031422 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098800638 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.115776324 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.096386172 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.148229533 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12349706 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100805147 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068859615 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.177741281 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.70967952 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.156190918 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072043959 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.148209632 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.365200607 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.929699777 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072603719 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068808361 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.098697555 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070751238 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.141628997 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.06685222 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.178806108 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.650145473 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.073389447 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070778164 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098890298 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.194598599 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142437175 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.098336301 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069910319 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.584471923 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066747691 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.06455153 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.086479587 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093085043 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06630734 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067469785 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078149689 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065642825 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.118642951 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080962264 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.555552887 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070269466 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.640857056 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.336342925 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074438004 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072739483 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.103209352 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065562311 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068536048 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.630997148 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.154981182 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.07112107 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.301361676 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073137075 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.072305928 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.073283847 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.105687777 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071723188 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.072674192 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077207174 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.08977444 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.082471509 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.152660417 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.087754335 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069328233 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.145676476 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.430088417 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.079147167 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071193605 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072066237 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.098561964 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.137817852 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068417587 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067767151 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112041411 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.097058755 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.236173987 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070652727 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068845763 seconds)
    (82/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065087058 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066353326 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.584351616 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.993817287 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069230487 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067733973 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.50826051 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065373418 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066950087 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068969391 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.090139469 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068685229 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064255313 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065114008 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102993611 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069850222 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.563150794 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070903729 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.50687713 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070899958 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10396277 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.128957114 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.075554678 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.069540388 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.109865557 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.07222393 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.069469869 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.077765631 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.070076771 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.068548846 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.073986129 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.069894396 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.070676489 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.07326792 seconds)
    (116/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.068828755 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.073046063 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.071794084 seconds)
  done (took 23.965856832 seconds)
done (took 41.791502894 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.401341622 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078238556 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078349807 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07855529 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078044085 seconds)
  done (took 1.978481148 seconds)
done (took 3.405734121 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.257433053 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075817823 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.063709738 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.207406794 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088879535 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.179826408 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.222313002 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.294217389 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.09075837 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.090156527 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.090583457 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.225705866 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.238062688 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.091650847 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.164302726 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.236666057 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.094505513 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.070989301 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.094799353 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.09601916 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.096366414 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069154153 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.095743045 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.098124963 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.172310347 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.095089437 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.068367433 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.172734195 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.096450717 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.175695942 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.097059026 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.095351858 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.096439455 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.171797033 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.097922639 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.172543399 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.069631229 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.09685785 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.099436673 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.10063681 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.09833957 seconds)
  done (took 6.611672809 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.077680685 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081174863 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082756352 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061981619 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071007464 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081915975 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062148397 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081335351 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.103095831 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082441511 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08196773 seconds)
  done (took 2.241824715 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071384614 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08144651 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085995536 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061225747 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072193434 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082414768 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061754774 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082414582 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085437425 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082252241 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082777295 seconds)
  done (took 2.145000423 seconds)
done (took 12.277978417 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.192038904 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.089334829 seconds)
  done (took 1.556177435 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.27080767 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.515422705 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.271642244 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.1248206 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.104895812 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.122315203 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.230182126 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.101008061 seconds)
  done (took 7.268209934 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.127428024 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067346671 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068969412 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.066807515 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.067904222 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.0667002 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.06779683 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067009719 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.066917265 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.067461229 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.068775704 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066538481 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069060727 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067557916 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069474486 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069022456 seconds)
  done (took 2.562428697 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.10706422 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.072589545 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.103387889 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064746346 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.075492304 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.066237906 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.073879969 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075416131 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.073083542 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.074253887 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.075158416 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073460847 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.074852056 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.074820536 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.076320874 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.076775291 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.078538758 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.075976757 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075264561 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074755641 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07249671 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073667373 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074702276 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071923724 seconds)
  done (took 3.306198887 seconds)
done (took 15.992395654 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.179288655 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074693401 seconds)
  done (took 1.545198886 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.094515223 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.093288372 seconds)
  done (took 1.493802587 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073466476 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059147648 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075949624 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068550061 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.060101789 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059861646 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.075686746 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.060336109 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060404453 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.060394432 seconds)
  done (took 1.963490019 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06610029 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070514609 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.06886583 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.067048544 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069745385 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064918836 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067391038 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065428852 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071623964 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064440627 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068326791 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08651747 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067824339 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.087100592 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067816818 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068090976 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.071108317 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.068274816 seconds)
  done (took 2.606550066 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062739489 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060196275 seconds)
  done (took 1.47109569 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065065592 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060428559 seconds)
    (3/7) benchmarking "month"...
    done (took 0.062151962 seconds)
    (4/7) benchmarking "year"...
    done (took 0.062004569 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.060668513 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060671559 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.060866796 seconds)
  done (took 1.741709684 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.433250233 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.195617092 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.435397202 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069409506 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.083264102 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.267445316 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064607763 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068732216 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068540386 seconds)
  done (took 3.035536849 seconds)
done (took 15.181917254 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.084824225 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.183607102 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.111910794 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.434288536 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.083215044 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.071029546 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.099975152 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.216586157 seconds)
done (took 2.616131312 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.29137167 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.206586169 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.260668181 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.148880653 seconds)
  done (took 2.937664211 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.427020716 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.168571037 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076581708 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067455004 seconds)
  done (took 2.070169461 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066434106 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070385247 seconds)
  done (took 1.462742713 seconds)
done (took 8.169078642 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.100153332 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075628917 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064206876 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065809034 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066284005 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.065925447 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.066031948 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066635027 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064935775 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.066799889 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.066504335 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068291855 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065359964 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063663441 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062688544 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.06037425 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.062037058 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062642738 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062752905 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061211058 seconds)
    (21/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062585037 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063620217 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062725606 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063797293 seconds)
  done (took 3.01838229 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080580747 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.064426838 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06532252 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065147254 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.065677058 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.065794555 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.065584951 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064656248 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066079871 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065663451 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066487336 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.066013535 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064267801 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.066161135 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065204188 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.066342294 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.065913279 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064818673 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064635522 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.066217353 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06617822 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065395815 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067210323 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066715271 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.06727014 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067088344 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065496442 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.0658346 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066912806 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068062171 seconds)
  done (took 3.336404833 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067928397 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058793118 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059056877 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068863865 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.058915731 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059298663 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059780329 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.058840268 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059103694 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060085653 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.059827408 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059026618 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060001164 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059006681 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059126996 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.059657877 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064238246 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.07978665 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059607433 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059106419 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063743991 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059784138 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059544368 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059260887 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060078731 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059543986 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060012393 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060176267 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059870968 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060543124 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059849086 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.06741167 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066848045 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.063404295 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.073952235 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.068969104 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.063535466 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.070763375 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.064732998 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.063552595 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.063762991 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.063471124 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.063643455 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.063745091 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.074513785 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06401958 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.065185305 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.064154944 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.064157654 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.063620209 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.063913706 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06582087 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070247541 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.064916531 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.063242606 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.065071891 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.063497514 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.064410077 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.063176421 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.063499199 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.063206484 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.067805492 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064883107 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.064793536 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.085957699 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.065070257 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.075199036 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.063997457 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.064354408 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.068204589 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.065072701 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.083467873 seconds)
  done (took 5.964827357 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.073205965 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070032043 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.077566623 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068899486 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063022554 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060105767 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.063327786 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060024874 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069148472 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064409353 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060121594 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063266716 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069393151 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063638039 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061230162 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069934085 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064676344 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063620835 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060730605 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064934479 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062825992 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065500224 seconds)
  done (took 2.800051067 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.145606282 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065414928 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107679627 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069546869 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067662578 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069021282 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06613902 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065853968 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065777355 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066176772 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066262578 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066125606 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067724947 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066655269 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066871178 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067110128 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066771318 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067376656 seconds)
  done (took 2.666156473 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078095455 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064798617 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.092038648 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.064621832 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065092394 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064986541 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068768917 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069184826 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.068009659 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.069478612 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.073032332 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06909671 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.069236882 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069479507 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069526898 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06907192 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06983283 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069476991 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07449806 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.074677083 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.074045063 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.074007304 seconds)
  done (took 2.903966932 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.08262592 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069242779 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082634793 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066528777 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059714863 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061895297 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.0670095 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.064913181 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066043451 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064240651 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064713482 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059721745 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066627638 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064932487 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067200587 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06549678 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067432602 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067385157 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06509245 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059756906 seconds)
  done (took 2.752348018 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098848588 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061770281 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061707392 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066705209 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062492034 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062296886 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06683813 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062445391 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073810739 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086747798 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062413725 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062244091 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0668424 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064986373 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061986374 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066634019 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.067395319 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067778911 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06619133 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063138878 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087366812 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063300551 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068634597 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063344856 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063159988 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063057116 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062987094 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066036999 seconds)
  done (took 3.23493856 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066476758 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062753468 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062937244 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062884542 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062935114 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062824421 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.06302604 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.0634283 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066661243 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06575175 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065398395 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065357005 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067408929 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065807481 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065354485 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063891642 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063282357 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06318693 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063133662 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063050337 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062949197 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062736793 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062827704 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063020857 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063232614 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063560826 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06626571 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067473851 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06695207 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067052046 seconds)
  done (took 3.291886697 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.076880703 seconds)
    (2/2) benchmarking "in"...
    done (took 0.074142963 seconds)
  done (took 1.575633322 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062874356 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076499806 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058943532 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.071773095 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067377 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063338962 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068172003 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067859822 seconds)
  done (took 1.929418684 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.094797437 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.116976187 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062441171 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063350662 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.094299569 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.130780219 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.102848603 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073187711 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075136069 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063893124 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061241506 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.10128866 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060495016 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074526697 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062472947 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070960228 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069007348 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079644896 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075070903 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059904695 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074535718 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062285638 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061171763 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062470246 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062287904 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069369769 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078098514 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074415101 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070404129 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059414065 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081189535 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060479133 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061575766 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070781326 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.093375933 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060570483 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098635332 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060945241 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065356975 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060056398 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073170245 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081973275 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.0755154 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079281234 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062124433 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062291111 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059774473 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062361124 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064482673 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070250465 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060560909 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068361068 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059751804 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061824938 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071384189 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060722231 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.065376274 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070394948 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075582751 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072713651 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.074174227 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077070952 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.07022076 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069583862 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061484484 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081150588 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062347169 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075712226 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079681042 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.065502868 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.078682504 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.06364719 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.063230221 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.064182337 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.100806722 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06616537 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.065519617 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.065203773 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.065462142 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.067505679 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075837672 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.07183692 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.074107295 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.069625279 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.083355786 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.076143418 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.065883513 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.074250361 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.085828988 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.070394026 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.066212977 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.084895298 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.069721408 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.065657266 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.085484549 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.077372097 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.068355926 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.068335715 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.071363893 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.082349488 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.068267664 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.065152402 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075860318 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06972562 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.256989497 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064921038 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068928508 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060066159 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.073733833 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065368752 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061124922 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058600735 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.06461348 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060606814 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058529006 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06944419 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059889284 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07430622 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066612012 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074780528 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075068293 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070748183 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075864916 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059513674 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.05838992 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078027332 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069448968 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061225409 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078167242 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.059223645 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.071022048 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.059218124 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.060829737 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.06930509 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.05870348 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06118225 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.059420481 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065263858 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061253686 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.0611093 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065440578 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068590788 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.072228025 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06087761 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069189385 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.06021804 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076499468 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070572502 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06527801 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063566806 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060931461 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073075628 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067928732 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070565969 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060164224 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061411094 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06081273 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071906768 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07130977 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065537048 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.071929748 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066764486 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062098304 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061632202 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062007744 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064717041 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063849571 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061366588 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069358755 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069848299 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075173274 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068142083 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070295456 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060085273 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060538557 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062259266 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060586984 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065443217 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.07025788 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076753533 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072685772 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082286842 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060701805 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070763343 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062071287 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078085793 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074534163 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062417193 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065812216 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059760279 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062454511 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070888987 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074147129 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076899646 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077961999 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067301396 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067407986 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062019068 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078283709 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.06287833 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071237438 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072450168 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.069258554 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062685706 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064133253 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072265827 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067295106 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063129757 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078802225 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070427094 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.06244687 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.08083721 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.066506948 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.078301957 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.066092665 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.071057162 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.072765592 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.068971408 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.077730879 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.24754885 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.063824675 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.065787004 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.081328074 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065631616 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065814144 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.072859732 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.080215829 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.069072142 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.072411439 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075611585 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.075090525 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.068763492 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.073889973 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063486469 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.073212089 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066876817 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.075789124 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.063932058 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082912892 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.062332054 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.080255086 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063579746 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.075199627 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063761464 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075632197 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.0625027 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07798325 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061145309 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060360938 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071762415 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058601802 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069405307 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059085421 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06522708 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066779995 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069478547 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061495007 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069612233 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061233525 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.06939539 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06502682 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068316254 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069595114 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.065153726 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.060483268 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.069297826 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075037179 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.069158459 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061849903 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061810181 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060876175 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070075728 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062439759 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06205398 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069375011 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066089125 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066856734 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062124679 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062369809 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062158319 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069531207 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070721165 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079355639 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06999636 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068782788 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070908005 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060240399 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077079734 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060808135 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.068860278 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059913439 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067783282 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070242182 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060770375 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080429981 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062154004 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068968877 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073595402 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069737191 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064592583 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.07938831 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064235917 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069889618 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069364796 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065969825 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068080228 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062632348 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069712979 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070870792 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072296956 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062708815 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07100811 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072006697 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064200505 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.072667416 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064318562 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071321475 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064840002 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061605127 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.068065974 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074633521 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067470235 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067866615 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062608455 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061196398 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063009043 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.071484015 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068000394 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072393166 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079748019 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062228548 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064699862 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.063005772 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067315569 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083223921 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.239599313 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069312417 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065480834 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059181697 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061499312 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061863773 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059995863 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.0626282 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058697467 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.05928576 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070622661 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061347565 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065173817 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060962553 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061127317 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070716206 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063998968 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.06090623 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068648598 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.064037389 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.071844933 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.063335925 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064942489 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.068751217 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.063073716 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.067934601 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.074965544 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.08116401 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.071367413 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.07284752 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064447906 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.072101112 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.08016262 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.071531532 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064973677 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.074190902 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062519185 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.083271131 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.073873117 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073016629 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074506393 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.064622198 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.081549301 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.068151362 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.074559928 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.080515145 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065749242 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.072461291 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.064197656 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.081384453 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.069573058 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.063724946 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.073354256 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07255718 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.072356132 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.074791609 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061965685 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.069404815 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066173126 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.064474415 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.062472126 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.062211614 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.069913361 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077431294 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.061413188 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066310103 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069060683 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.0700346 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.065950561 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073900139 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.06937766 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062421792 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.062587753 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064775347 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061519371 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073048267 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061274024 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065673387 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066072185 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060616423 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068095725 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077952854 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071366657 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071546639 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061014061 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060332273 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079573146 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065258504 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064666322 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072492805 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071737432 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073877189 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07147669 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079771438 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063297678 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068809107 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07600905 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063773693 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062514191 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066766713 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064123127 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072151825 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072788575 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070326064 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06464336 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069793931 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076603193 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06396194 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067698583 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069721869 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064121712 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07514206 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.072176728 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072939894 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.065638234 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.063585443 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.067715542 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.234343441 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069216493 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069809873 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061028715 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066854557 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.073983451 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068305821 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063139867 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059841901 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06294113 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.069465665 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06466596 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059058526 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.064715587 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.063790393 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066703743 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.069217216 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064574303 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.059014231 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.076768115 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068229957 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069354962 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.061421063 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.061318817 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060658527 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059308083 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071149798 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.05921632 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.061099743 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.064953631 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.061123299 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.077677478 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.06828209 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07588149 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060588221 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064623955 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059027989 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069884582 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065076357 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060491096 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.07073318 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.058994832 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075672292 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072845077 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067227584 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060334433 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.069893081 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.073079561 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.080428074 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075046338 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.074560284 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.067595921 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074669862 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.066307222 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.076085115 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.063468508 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.063145834 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.074854606 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074336551 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078273997 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.064038094 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.075558555 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.066715885 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.074109748 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.073380244 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.067047387 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066895253 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.066686677 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075005461 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.070219626 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.074477837 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.069330618 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.082585741 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065426807 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.076304461 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.074289534 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.077548657 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.079287255 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078542513 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.073822508 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.065706725 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.074300937 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071201133 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062624921 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066471368 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064147279 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083830116 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062891772 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062565536 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076023068 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069232928 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061364515 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069957419 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067917701 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073827323 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.065827793 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073978027 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06871765 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063536857 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067423503 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067519975 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061180354 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061976749 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062373301 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073001098 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067227653 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062784206 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08346661 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.06539125 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072844373 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075812777 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070937139 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065468677 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062339879 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.225367779 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074363124 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076062981 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063961827 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069162045 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.061447649 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.06956195 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059099257 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069362996 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068578192 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068788768 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059260722 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059876075 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075005728 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075525409 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064763995 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.078665353 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069119831 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060803716 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08165204 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069182717 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060566056 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071222048 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061891316 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060374534 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061598265 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063470048 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073361889 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.060941364 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063320957 seconds)
  done (took 43.241070478 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.104221057 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061243775 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059506958 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059235667 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066858881 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060893677 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059824281 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060881748 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.060985704 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061974426 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.05982213 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059656206 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065348796 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07491165 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067944707 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063647153 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059869696 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.0615402 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060236705 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061337245 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066579805 seconds)
  done (took 2.818878749 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.068039707 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.067123234 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067027802 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067278845 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06683866 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06387051 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067518024 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063129246 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067858402 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063758256 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.068073979 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064068864 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064287365 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.064321926 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064129656 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065491331 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06782382 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067183783 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.064234228 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.069332071 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06339579 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064450626 seconds)
  done (took 2.957903712 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063825785 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.060066286 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.068684052 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058888373 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059041195 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062390588 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059464708 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064416566 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06431575 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064334128 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069006952 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060274293 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.05900945 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.065657569 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059082966 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060553209 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.105327462 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060719216 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060443285 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059198641 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062275794 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.07084265 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060162911 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059953856 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064749042 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063016217 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059792259 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062622451 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060594304 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064716275 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060989233 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060124463 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069436544 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068820506 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064925011 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064979779 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06191096 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06114657 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059862028 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059843175 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068899649 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061666992 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060223421 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061354591 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069585158 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060258603 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059664754 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069625004 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059647566 seconds)
  done (took 4.560666569 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.074208566 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.109924016 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.06544851 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092129043 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071986911 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064882485 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065541142 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093744594 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061622139 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061525268 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072790833 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072837256 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062215846 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063884055 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.06678825 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063855301 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067107322 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065877843 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069045314 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066575627 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.069168509 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.071242731 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.077209579 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.077593997 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06815344 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065810658 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065741396 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.067960793 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076844575 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069694026 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.068030192 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068117508 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.077107647 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.071805589 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06605582 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06610657 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.080462121 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.067268596 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.067032479 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.065358668 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.066660541 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067555541 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.071319965 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.079092474 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066893634 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.072010743 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067340245 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.065847088 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.077797459 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.067393811 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.071225113 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.078700783 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.069667912 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065538623 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066154779 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074235792 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063187989 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061800855 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063270568 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.072886615 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062688123 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064543353 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.074254335 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062858384 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066289802 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074546284 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069159821 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065063025 seconds)
  done (took 6.339509985 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071937308 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095010637 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074392308 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074345152 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070233886 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.070548107 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070508336 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070267637 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070256632 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07290414 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070133786 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.133586344 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067102337 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07146799 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.070735281 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070837982 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070916939 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070949532 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071346079 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071034477 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070894134 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075480924 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070673679 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.075458729 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075254684 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067568174 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070728492 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070475491 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075635559 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070600211 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07529036 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070880851 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071621694 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076375807 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.075558597 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07086292 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061489435 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070767366 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071144106 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070924881 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067531211 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076180193 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071242736 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068341887 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071278223 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070971512 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076752473 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076303767 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072925318 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074197748 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071056084 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076204302 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071203777 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071133311 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076203724 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079053099 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076514717 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076537456 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071536901 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076955688 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077292799 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080047631 seconds)
  done (took 6.072208055 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07990913 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069234954 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082211482 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.063756639 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063916273 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.073343572 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063225605 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063202371 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069477162 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070015083 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070982996 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073997514 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075318619 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071686337 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072883331 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075404852 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.074179957 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.074114202 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.07118471 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071498653 seconds)
  done (took 2.980720984 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.06401897 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064901096 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.059753174 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.075280124 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.060141037 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067936664 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.060679177 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060537458 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060354232 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060420323 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064768893 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064811118 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060412248 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068228589 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06379887 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067807177 seconds)
  done (took 2.485218677 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065255605 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067556342 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.094061168 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061176703 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062898677 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060476727 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061349615 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059995106 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061981167 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074129614 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061142132 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.0627965 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060776046 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060278234 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060663217 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063289948 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061909699 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061052535 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061086297 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.095874797 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072646733 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062049414 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063608874 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062067053 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063276069 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069464078 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062910012 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063140758 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061457371 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064033612 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063331452 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.072419536 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063344335 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.06201711 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06064204 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061148635 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061469079 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063505945 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.063415858 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061493987 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060409276 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.063036755 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06152165 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061870568 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06353174 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063996741 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063169528 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.071872904 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061985904 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.063790257 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061876947 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063860774 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06526005 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.077936648 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.068215111 seconds)
  done (took 5.028362024 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.085037243 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069430743 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062695567 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063141144 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06866033 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069854046 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069436089 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069350256 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069993702 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063717621 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069942233 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070475298 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068776404 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066688065 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066125232 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065681581 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059443426 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065681506 seconds)
  done (took 2.791545157 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.069247139 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064904879 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065430562 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061273037 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061316813 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065573026 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059736229 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061112815 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061104156 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.061968036 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061618809 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061127068 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061114316 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060955452 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064899561 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061346684 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060820085 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060199947 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.061856391 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060437643 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066222535 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060278736 seconds)
  done (took 2.840351799 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.119963768 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084285379 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.161336829 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080329147 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.09042059 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071868708 seconds)
  done (took 2.080786787 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096229318 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.097674603 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065362526 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.064974711 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069174736 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06775429 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067815855 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067813006 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073030944 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077743363 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071625749 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074917958 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074533397 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076589783 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073636461 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074538015 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072979858 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072682987 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069500136 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081022431 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07298891 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077402418 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074686249 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072840115 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072611992 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077443565 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076243146 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078472624 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072596162 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075965505 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074470237 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0726111 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076343671 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07860576 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069802289 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075512947 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07301905 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080767441 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074361069 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078673777 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.070101154 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074912218 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077684452 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073677453 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073005652 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069414519 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072149289 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069300472 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069319402 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081044577 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071083473 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07680211 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070961572 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07276428 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072348171 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081017033 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075945264 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074651242 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071194452 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07553169 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074678138 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071393228 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074626185 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075788183 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072663433 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078601273 seconds)
  done (took 6.388887087 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106480139 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066020882 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067756292 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073235271 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072709039 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068239553 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067989816 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068061178 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068065431 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065680191 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104437422 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068661052 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072860654 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072780235 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068141504 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068519291 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068583245 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073905419 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066262281 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080181983 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068741216 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07352499 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073776692 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073892492 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075256937 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070924301 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068835389 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068751364 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068494179 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068595278 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071537976 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068771978 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073738409 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066138502 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073516089 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06876928 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068584555 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071760628 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069510552 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071019308 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074328893 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077318873 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06916267 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068908327 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075204849 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069302226 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069140379 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066348137 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069169155 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066617719 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075356109 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075232615 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075859762 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074483766 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069263902 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06922977 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06913345 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069198253 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070330253 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074753376 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078219289 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07400734 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.085303521 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073725087 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073422265 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.079929711 seconds)
  done (took 6.281574446 seconds)
done (took 131.682212294 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.26233822 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.220323399 seconds)
  done (took 1.966567958 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075577022 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.269579524 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.0762768 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073373439 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.133683855 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.13296789 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.107454081 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.071430314 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073979339 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.071365196 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.170857602 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.108020438 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.071439951 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.071510459 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.341015577 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071538102 seconds)
  done (took 3.402286474 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.14625789 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.212759581 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.081283071 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.06913519 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.153765257 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077845921 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.07244025 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075855146 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078113559 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072509623 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.124125557 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.089079775 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.078983859 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.080440362 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.076498697 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.079231999 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.08018862 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.081403722 seconds)
  done (took 3.218711961 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.10835368 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.118122735 seconds)
  done (took 1.795675754 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.161905453 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10933103 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.147711405 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.356776172 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.142357709 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.14381847 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.149361337 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.142332814 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.119705094 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.140948631 seconds)
  done (took 3.104194913 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107400549 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.104563092 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309173425 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102772162 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081636559 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.076196051 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.07401894 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079083346 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07414584 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075773676 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122128925 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074530079 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.0720339 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.129612263 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.104321919 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.110965788 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071541748 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078518312 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079955326 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070572766 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07529076 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079904346 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179719316 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.07889881 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.10264731 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075141623 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077138715 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077040766 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.0738836 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.079006094 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082803634 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.106314558 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.08254545 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.088377636 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.080863274 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.103151885 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.075758308 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.105258701 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077951851 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.076689978 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.079165489 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.083131492 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.075985008 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.082118355 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.079152637 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.082227784 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.084672764 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.074817619 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.079554295 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.079015055 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.076568925 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.080239973 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.080182474 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.081356334 seconds)
  done (took 6.391176146 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.124547774 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.112047385 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070676513 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.121946622 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.111765107 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070476366 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.126498522 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.106756844 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.124840592 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069609982 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069608199 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070070178 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077844495 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080831011 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.121735179 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.115907213 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071567322 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069724116 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.114442627 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.115105232 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068817758 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.127503282 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.118253457 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.113822582 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068799224 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069733779 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068153141 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069139759 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077175246 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076338527 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068735553 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079448639 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081192611 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076794811 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068163431 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068069407 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068021609 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077012641 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078431179 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078692842 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075346607 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067817674 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068060528 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068681211 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069357284 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068010704 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078767228 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.077815447 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07917137 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069594634 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069153158 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068577597 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070002033 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076397891 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075255229 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076856736 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079973711 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069475711 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068639667 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070599363 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080851365 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078230489 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077471481 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069953462 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078949516 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069326244 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079428099 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082547203 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068735264 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069264546 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068940981 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068975335 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069530613 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076305083 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.076670272 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070117811 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071625206 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070318616 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079649474 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079683476 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.073767261 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.084683075 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.07345789 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.074389116 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.074598668 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07602923 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.086452534 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.084440067 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.076758016 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.075744293 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.075776685 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.075508919 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.075568726 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.08698425 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.240922961 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.080953074 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.082407646 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.073217752 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.082289393 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.080753489 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072391463 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.078789447 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071704024 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.073138118 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072581006 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07889158 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.078359584 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080289718 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071998134 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071943836 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.080962335 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08011723 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06844236 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.074061215 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077990022 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.075258788 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067436679 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07775446 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068008797 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076935156 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068113017 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076289558 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068089605 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074845104 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068222947 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068095213 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068194941 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077543816 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068947771 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067644783 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068305275 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070742248 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074543322 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078640073 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068927934 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076294452 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.0761277 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069380752 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078193574 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069234985 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078211356 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069022239 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069139946 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06827685 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080307287 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068644446 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069548573 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068695324 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077898211 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068939353 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07821289 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075912921 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068652055 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079174032 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07870311 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075700569 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078601754 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069486547 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068770889 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068566093 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068834996 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078168113 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079906139 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071246736 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070019488 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075559981 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.07908677 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068699286 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075876981 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075535024 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.076101677 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069122354 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069493775 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079535904 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.082841971 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078525394 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.081410285 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07968371 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.07077497 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078272529 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.082018838 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070783231 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08496669 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070575976 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.083113411 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.083610011 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.079541763 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.083338491 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.243658544 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077333642 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077347224 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079051892 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067544064 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06759138 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.074478102 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067664675 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0678914 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.073993648 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068146212 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069356217 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.08083642 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068477895 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076974681 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.067438991 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.074805813 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067270164 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068212543 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079189897 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068358041 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071747143 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.079281102 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.072058691 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.078325631 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081332026 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.078354351 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071296785 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072695517 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.082406295 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.081359122 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071530262 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071930193 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07237852 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.081083091 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.079853972 seconds)
  done (took 19.140201454 seconds)
done (took 40.604921151 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172820071 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115047745 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.227993653 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.208391074 seconds)
  done (took 2.307129643 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.102379564 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065254816 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.108338436 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.118676309 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065060291 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.104910909 seconds)
  done (took 2.092462456 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.204339132 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178788186 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.254441078 seconds)
  done (took 2.159529263 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.385014328 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.157777602 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.270885033 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.536718952 seconds)
  done (took 3.027197842 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.138082567 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.133990847 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077458606 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.147913764 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085015381 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062013493 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.147700396 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069507918 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099693145 seconds)
  done (took 2.560982014 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.143094703 seconds)
done (took 13.896064916 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.154301993 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.322070134 seconds)
    (3/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.263068226 seconds)
    (4/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.294585768 seconds)
    (5/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.143146671 seconds)
    (6/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.081128957 seconds)
    (7/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.22206041 seconds)
    (8/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.302356943 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.185071484 seconds)
    (10/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.2586505 seconds)
    (11/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.137472997 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.132574996 seconds)
    (13/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.0803828 seconds)
    (14/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.181236056 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.08057557 seconds)
    (16/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.153222447 seconds)
    (17/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.315277828 seconds)
    (18/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.081918965 seconds)
    (19/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.309725994 seconds)
    (20/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.283882209 seconds)
    (21/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.125277221 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080781937 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.080957986 seconds)
    (24/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.309059201 seconds)
    (25/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.256290507 seconds)
    (26/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.232464769 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125960203 seconds)
    (28/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.26181643 seconds)
    (29/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.071978384 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.124838466 seconds)
    (31/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065619181 seconds)
    (32/341) benchmarking ("sort", BigInt, false)...
    done (took 0.271325982 seconds)
    (33/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.122571515 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074911248 seconds)
    (35/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.231641373 seconds)
    (36/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.243429486 seconds)
    (37/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.135593003 seconds)
    (38/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070135641 seconds)
    (39/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.074463066 seconds)
    (40/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.121450223 seconds)
    (41/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.247003082 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.213042701 seconds)
    (43/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.179171292 seconds)
    (44/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.067368716 seconds)
    (45/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.243142572 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.082793256 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074780113 seconds)
    (48/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075937629 seconds)
    (49/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.11415294 seconds)
    (50/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.09094727 seconds)
    (51/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076236851 seconds)
    (52/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.116360641 seconds)
    (53/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.17520203 seconds)
    (54/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.146744114 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.089141077 seconds)
    (56/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.205902974 seconds)
    (57/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.181528071 seconds)
    (58/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.08746407 seconds)
    (59/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078081388 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.253755348 seconds)
    (61/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.246805517 seconds)
    (62/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.237159093 seconds)
    (63/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070868462 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.097433129 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075759989 seconds)
    (66/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.071326682 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.06546233 seconds)
    (68/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.082632081 seconds)
    (69/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.065463054 seconds)
    (70/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.275602061 seconds)
    (71/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124596627 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.094668527 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.210120701 seconds)
    (74/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.248565667 seconds)
    (75/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.071641957 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068482955 seconds)
    (77/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.101737324 seconds)
    (78/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.147816914 seconds)
    (79/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.242748392 seconds)
    (80/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.071505046 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.078081959 seconds)
    (82/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.211216399 seconds)
    (83/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.081631902 seconds)
    (84/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.069924334 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.103221808 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076795232 seconds)
    (87/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.156740842 seconds)
    (88/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.19522385 seconds)
    (89/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.08787093 seconds)
    (90/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.149613582 seconds)
    (91/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.21473019 seconds)
    (92/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.0821718 seconds)
    (93/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077524256 seconds)
    (94/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085860331 seconds)
    (95/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065093674 seconds)
    (96/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.065990402 seconds)
    (97/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.085871942 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.094109325 seconds)
    (99/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095190865 seconds)
    (100/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.161600937 seconds)
    (101/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.069833243 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119409707 seconds)
    (103/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.140493723 seconds)
    (104/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152329401 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.131200564 seconds)
    (106/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.068265487 seconds)
    (107/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.066745039 seconds)
    (108/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.23091692 seconds)
    (109/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077186418 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.089871775 seconds)
    (111/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.129520463 seconds)
    (112/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079203637 seconds)
    (113/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074387841 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.189823154 seconds)
    (115/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.21438823 seconds)
    (116/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.201253436 seconds)
    (117/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.156848989 seconds)
    (118/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067695173 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074330693 seconds)
    (120/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.145033202 seconds)
    (121/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.074521873 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.095437305 seconds)
    (123/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.069064205 seconds)
    (124/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068692783 seconds)
    (125/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066677774 seconds)
    (126/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074125719 seconds)
    (127/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.06810029 seconds)
    (128/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.077729071 seconds)
    (129/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.068711028 seconds)
    (130/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.204167496 seconds)
    (131/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.144531062 seconds)
    (132/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.142504106 seconds)
    (133/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.087972157 seconds)
    (134/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067359703 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.195266756 seconds)
    (136/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.0863971 seconds)
    (137/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071710227 seconds)
    (138/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.079500208 seconds)
    (139/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.068405513 seconds)
    (140/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.15599676 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.097252771 seconds)
    (142/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.072433736 seconds)
    (143/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.207966714 seconds)
    (144/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.094490033 seconds)
    (145/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.088636686 seconds)
    (146/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.163245173 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068947426 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.07832591 seconds)
    (149/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.073113557 seconds)
    (150/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.06884903 seconds)
    (151/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.336031619 seconds)
    (152/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.222842118 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.07397998 seconds)
    (154/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.143187799 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078756759 seconds)
    (156/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.067973602 seconds)
    (157/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.199238578 seconds)
    (158/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.080080313 seconds)
    (159/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.197794468 seconds)
    (160/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.075955026 seconds)
    (161/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.07334259 seconds)
    (162/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.079932604 seconds)
    (163/341) benchmarking ("sort", Bool, false)...
    done (took 0.15412486 seconds)
    (164/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.080026369 seconds)
    (165/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.071656668 seconds)
    (166/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.069238224 seconds)
    (167/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.069179078 seconds)
    (168/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.184807564 seconds)
    (169/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.074167639 seconds)
    (170/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.069920562 seconds)
    (171/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.069511953 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.076721145 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.080208946 seconds)
    (174/341) benchmarking ("sort", Int64, false)...
    done (took 0.070343484 seconds)
    (175/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.069210466 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.100569438 seconds)
    (177/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06936259 seconds)
    (178/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.077069878 seconds)
    (179/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.070272428 seconds)
    (180/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.158772557 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.070132699 seconds)
    (182/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.160877553 seconds)
    (183/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.073637914 seconds)
    (184/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.071467386 seconds)
    (185/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.078647055 seconds)
    (186/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.085052467 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065143925 seconds)
    (188/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071474473 seconds)
    (189/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.069535884 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083550756 seconds)
    (191/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073855348 seconds)
    (192/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065661871 seconds)
    (193/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.215387194 seconds)
    (194/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.07783743 seconds)
    (195/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070664515 seconds)
    (196/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07613694 seconds)
    (197/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067704671 seconds)
    (198/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071434545 seconds)
    (199/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066728987 seconds)
    (200/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092616001 seconds)
    (201/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.071889191 seconds)
    (202/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.11270179 seconds)
    (203/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.074202974 seconds)
    (204/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.083334745 seconds)
    (205/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.066685734 seconds)
    (206/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.06646644 seconds)
    (207/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066057237 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.158232743 seconds)
    (209/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067061856 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151610712 seconds)
    (211/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066145388 seconds)
    (212/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.068180657 seconds)
    (213/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066537248 seconds)
    (214/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.072502223 seconds)
    (215/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065800164 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087253406 seconds)
    (217/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086126006 seconds)
    (218/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.073203304 seconds)
    (219/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076167003 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092506477 seconds)
    (221/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073080428 seconds)
    (222/341) benchmarking ("sort", Int8, false)...
    done (took 0.151601038 seconds)
    (223/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.068160883 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066171285 seconds)
    (225/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073810444 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071714433 seconds)
    (227/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067613399 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072919382 seconds)
    (229/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.071744041 seconds)
    (230/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.080919806 seconds)
    (231/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071038223 seconds)
    (232/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07473306 seconds)
    (233/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.069272775 seconds)
    (234/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.189705499 seconds)
    (235/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066675217 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068539314 seconds)
    (237/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067472956 seconds)
    (238/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068818636 seconds)
    (239/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.205528251 seconds)
    (240/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06730256 seconds)
    (241/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067672288 seconds)
    (242/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.06763384 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.087556138 seconds)
    (244/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.233217028 seconds)
    (245/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.191385392 seconds)
    (246/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.068303106 seconds)
    (247/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.06698418 seconds)
    (248/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.07786244 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080222157 seconds)
    (250/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06891034 seconds)
    (251/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.183542565 seconds)
    (252/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.179427228 seconds)
    (253/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075886519 seconds)
    (254/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.077806526 seconds)
    (255/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072788495 seconds)
    (256/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.084425067 seconds)
    (257/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.357032758 seconds)
    (258/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.069420706 seconds)
    (259/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086340349 seconds)
    (260/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074482119 seconds)
    (261/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071218806 seconds)
    (262/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073665213 seconds)
    (263/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069685725 seconds)
    (264/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.06850587 seconds)
    (265/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.068267721 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.074880534 seconds)
    (267/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.078099045 seconds)
    (268/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.07100821 seconds)
    (269/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.070978884 seconds)
    (270/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.071294889 seconds)
    (271/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.074947373 seconds)
    (272/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.071088166 seconds)
    (273/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.076406584 seconds)
    (274/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.069821025 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.090244871 seconds)
    (276/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.07125293 seconds)
    (277/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.07013418 seconds)
    (278/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.190672087 seconds)
    (279/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.07230285 seconds)
    (280/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.070479912 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.069117648 seconds)
    (282/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.069506295 seconds)
    (283/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.071243536 seconds)
    (284/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.073620221 seconds)
    (285/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.172820921 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.077107238 seconds)
    (287/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.073559806 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.069617671 seconds)
    (289/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.070096349 seconds)
    (290/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.07391982 seconds)
    (291/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.098193418 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.169049756 seconds)
    (293/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.098683854 seconds)
    (294/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.087811905 seconds)
    (295/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076413983 seconds)
    (296/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.176381273 seconds)
    (297/341) benchmarking ("sort", Float64, false)...
    done (took 0.138536796 seconds)
    (298/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.067813033 seconds)
    (299/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065716532 seconds)
    (300/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065590175 seconds)
    (301/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065779985 seconds)
    (302/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.067031296 seconds)
    (303/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.076976406 seconds)
    (304/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071536289 seconds)
    (305/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.065967039 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084729182 seconds)
    (307/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.071035988 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152993161 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.067835848 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066425477 seconds)
    (311/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066174334 seconds)
    (312/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.075396818 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091296441 seconds)
    (314/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067627528 seconds)
    (315/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.06567201 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148514159 seconds)
    (317/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066769905 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077819297 seconds)
    (319/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068462514 seconds)
    (320/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.211559792 seconds)
    (321/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.071918444 seconds)
    (322/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066402456 seconds)
    (323/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.065769782 seconds)
    (324/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.066483771 seconds)
    (325/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066566424 seconds)
    (326/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.218144776 seconds)
    (327/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068139885 seconds)
    (328/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067905995 seconds)
    (329/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.066656208 seconds)
    (330/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065901673 seconds)
    (331/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065439691 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065638359 seconds)
    (333/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.06611521 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066094391 seconds)
    (335/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.067210585 seconds)
    (336/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073718195 seconds)
    (337/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.070381108 seconds)
    (338/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.073162097 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066152891 seconds)
    (340/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.165647441 seconds)
    (341/341) benchmarking ("sort", Float32, false)...
    done (took 0.143260394 seconds)
  done (took 40.010719478 seconds)
done (took 41.553726655 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.125366263 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079122082 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.076772082 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073831115 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077603144 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.078066499 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077853693 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075424883 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.079905214 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076375191 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.108171647 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064563067 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072859805 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.083081628 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074542305 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.080941157 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077983394 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080740461 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066213337 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081495695 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092214822 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080925888 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.078550471 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.085155568 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.07028925 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078660754 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.126461643 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.090446736 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.074004699 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.079981612 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.07745039 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.086675659 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.077819948 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.077464238 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.080254759 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.075019776 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.080473704 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.075988012 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.126702771 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074726199 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.070133114 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.082628772 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076890688 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.077940704 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077898275 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.082050779 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074951912 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.086111277 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.069344845 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.081993296 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.126834831 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.075530154 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.075676106 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075970732 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071528233 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075337053 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.070551948 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077206284 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.070658829 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077309935 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.074982824 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073524573 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065506701 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074373658 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.072813112 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073277861 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064457574 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070961337 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065564663 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066410403 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.066422021 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074760382 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072927361 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.070541093 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064708159 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065486851 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06535598 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078216694 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073085605 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075751693 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067041875 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071686538 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071551413 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066928885 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071848827 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077597149 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065039154 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066096541 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.064936642 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080608106 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072407036 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065795388 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078066927 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071925712 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071591061 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066004405 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065691688 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071686145 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074665666 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066482351 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065565343 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073063666 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.07176468 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077284668 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.068224043 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073134755 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072912872 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066389648 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076611201 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074551003 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.076960153 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081096044 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077702896 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.082230049 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.068747791 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066927404 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.078401306 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.235936123 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07657667 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07415307 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.070587483 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073007696 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.065531174 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063953442 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07039528 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.070800277 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06547695 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.065220386 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064903876 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.073378026 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071848742 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.063444886 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064481432 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073896101 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073746937 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063943265 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064794782 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073315527 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065380328 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070647883 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.06985502 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073413619 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.06412696 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064999909 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063608327 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.064401252 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063938344 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.069958007 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070540666 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.065252053 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.073308117 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072177579 seconds)
done (took 13.194012007 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069204991 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108924815 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.117617063 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.112622305 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079216411 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06969102 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069484724 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086210183 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.069106593 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.093642072 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091297206 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087627584 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.131082283 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.064621584 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.065899272 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066598689 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.064215617 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.078311317 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.115707158 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090195512 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.109233883 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.065742271 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079590631 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08648911 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079344948 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085649624 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067532916 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066945299 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069151331 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083771594 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092464668 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066262198 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06750931 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085815922 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.08256868 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.075248614 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067057362 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073191647 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.066910163 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065899281 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068173673 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.085281076 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073175241 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07368964 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067102598 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.067233641 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.066429513 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073916941 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080308181 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.07264482 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.079269315 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.083327708 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.067705876 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066165077 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.06491592 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074229031 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.066197752 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066953124 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066552036 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065968841 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067028639 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069074961 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.072092325 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.076974526 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070422043 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.073717956 seconds)
  done (took 6.800193564 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.086588014 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.098860316 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084230748 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.085300189 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.069162198 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.070287847 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.07051172 seconds)
  done (took 2.2341765 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.071987205 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.110869732 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.120513288 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.117569065 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.124028259 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.112901513 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067076653 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099230688 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.065559427 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.108045989 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.121903139 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.116808379 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069732672 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079117494 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067121967 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.116880632 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067389653 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073843003 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.114296398 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.11931571 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071080981 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097296982 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080405391 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070728959 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.120377033 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.112741217 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.073721973 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070551637 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070896488 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066963639 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066233924 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089819151 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.108793278 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081634535 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067160427 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.065965997 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.107003807 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067612721 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.105912041 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074200041 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.106089071 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.068630574 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.069125624 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.066669637 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.067408546 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.111070097 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.067588223 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.066344371 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.068475327 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.110654107 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066075484 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.108865621 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069152671 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071800218 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073872534 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073279598 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074472897 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067158183 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.11121627 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076843502 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068631809 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.121402146 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.12057677 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.108099844 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.12120554 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076543489 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111720267 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.108817132 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067024666 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066788718 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067558139 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.121854253 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071004403 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070394597 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.072594546 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07532251 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.115369558 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.126551921 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.128397006 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.083572807 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072338033 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069117669 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.246534744 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.123154486 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071873242 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066489091 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.07060932 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069413643 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.07534456 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.074852063 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.075160525 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.071551421 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.080657313 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072748502 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072139105 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.119552546 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.071056203 seconds)
  done (took 10.346618551 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071303382 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.0687678 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.067139307 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067336079 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067423894 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066902262 seconds)
  done (took 2.192043083 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.093462861 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067270305 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079463854 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067062162 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088882706 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.110159083 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.110075544 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068592214 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083423813 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078533739 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.110615445 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.11234339 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.112702937 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.068533794 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.110444223 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069203249 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.111563328 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07101333 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078486939 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069275206 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081605676 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.068894974 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068968465 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.118591941 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071796186 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069853781 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068596609 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078890332 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.086540541 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.06893308 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.068961381 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.069966461 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076908615 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069086586 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.112936381 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07731379 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06803608 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072266364 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069869531 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069834625 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.114844856 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069228312 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071817132 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072504418 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.068965922 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076635616 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072578308 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071772181 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.112724768 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072280546 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072555421 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068615252 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.069700242 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.072148549 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076436164 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068678689 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.072236759 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.112620992 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068990233 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.077113962 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06798552 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070021363 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069071621 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069878548 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073197873 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072939176 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.080424041 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.073541203 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.073361868 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.072026097 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.076769968 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.073656002 seconds)
  done (took 7.39737428 seconds)
done (took 30.700517927 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.544992442 seconds)
  done (took 2.222360545 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.976803202 seconds)
  done (took 2.669477868 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.27244709 seconds)
  done (took 11.964946225 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.350599316 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.465335094 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.797965305 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.146794012 seconds)
  done (took 3.514559544 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.884059257 seconds)
  done (took 2.586117187 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.244064184 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.22976447 seconds)
  done (took 2.192288555 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.463194967 seconds)
  done (took 2.151475242 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.304694533 seconds)
  done (took 3.079927942 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.238179931 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164101972 seconds)
  done (took 2.121914278 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.634834182 seconds)
  done (took 2.327399429 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.811999806 seconds)
  done (took 6.511220038 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.329876156 seconds)
  done (took 2.085180188 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.242954715 seconds)
  done (took 1.944161661 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.645405489 seconds)
  done (took 4.350764494 seconds)
done (took 51.525932065 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087646038 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.085592427 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.085610148 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.080913987 seconds)
  done (took 2.014204809 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076437769 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.070205802 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.07263396 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073082694 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.070487619 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072343524 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073043779 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.06918889 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.07095574 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069831973 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.068290912 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069702138 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072327513 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069302243 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.072060498 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073546782 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.06979372 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.069986536 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.071710467 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069388883 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072249267 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.069667617 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067786376 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069647037 seconds)
  done (took 3.397317038 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.083696814 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.076066402 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.079468979 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.074353666 seconds)
  done (took 2.064670385 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078248139 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.075893678 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085172871 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.089139079 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075088345 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076197854 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.083442393 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083796142 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.065090663 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086335143 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.067317382 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.066057886 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.066159462 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085013591 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082966459 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061884786 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063063569 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076522234 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.078640695 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078733045 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067925584 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065095008 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.076025093 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077038163 seconds)
  done (took 3.593201081 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.084490197 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.065177058 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082316946 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.090439241 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.091925931 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.065293514 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080800767 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.092707761 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.130687572 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066615206 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072424956 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066708967 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.107142066 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.065788877 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080803183 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110540881 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.114130603 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069227288 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099157803 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065305225 seconds)
  done (took 3.414084385 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079502562 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072071999 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.074502208 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.069330576 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080096488 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076539182 seconds)
  done (took 2.1682088 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.073149606 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.072043329 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070548003 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.076287604 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.07283717 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.070159628 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067746765 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065964496 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065574407 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.066354865 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.066379271 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.069877058 seconds)
  done (took 2.643001255 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.222150758 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072404765 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.073618075 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.06558406 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.067226095 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.066908074 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080562409 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.06854939 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08942542 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.066519144 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067013109 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068693193 seconds)
  done (took 2.717992653 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107420671 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110996901 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14351028 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115881574 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11396768 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095569301 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.166686438 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095306891 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161703783 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.139609293 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118360823 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092357211 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087100515 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.071039165 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101522909 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121968542 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141099335 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07355637 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115151403 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.209192341 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134747013 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.140245411 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153997841 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123188186 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097255212 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153940254 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102152699 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107596482 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130487031 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134632399 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125353146 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.103706319 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.076714012 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.075251371 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158525169 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.114427873 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126735204 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.099737369 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112870813 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095711167 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118251017 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.075556408 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.089999614 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.120696969 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089692734 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136885834 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.0958863 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120492351 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08574923 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.324167942 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12764125 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137631658 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085580057 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105194102 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136871523 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111901573 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133896407 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105611753 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082059929 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11860971 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104610997 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099175407 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107626846 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079352703 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.176691029 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089188039 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.111850257 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112230296 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.095647451 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096067265 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107275309 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.138416659 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130047724 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.129902341 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144103268 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094790669 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123740861 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.10402001 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.131929756 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106717787 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074299341 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.12525297 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133643149 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102748103 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10477068 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136029267 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09511244 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077413331 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.104011843 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.123351163 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082354615 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.117897731 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083566537 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.114166185 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142996464 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103335789 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117237396 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.127337787 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082551475 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.335374727 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108447694 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075648673 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116436581 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111907032 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154883233 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094326496 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075797204 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104019142 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107439495 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.157592247 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111642263 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084170709 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113407954 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144285017 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098593733 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.228666842 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100178356 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145090062 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115547366 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092233163 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079406511 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09532893 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119261986 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11395404 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118945293 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099991928 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.090602003 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09274125 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12281111 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099294354 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082688026 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116554642 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.101413826 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076590648 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089941924 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077973148 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14520738 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080543213 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141928701 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129672142 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078331397 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110827357 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098861862 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110334518 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.100741913 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123460124 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147411362 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.119444341 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094212546 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.098898914 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114008836 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.156483679 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.137737912 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.27947534 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077485541 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101323368 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112361062 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097316962 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123152282 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093351565 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106119897 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102940307 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141279303 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143719496 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098595742 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101258189 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107553884 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.122486105 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075027568 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156353852 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104456021 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11978165 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087962467 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142461215 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.112895285 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090316793 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088370973 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101293684 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.107271487 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110810715 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148326591 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09766271 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07389945 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094774979 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147665879 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078946553 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112343821 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094234432 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.09491872 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121664573 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.097551895 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082541755 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069241524 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130693283 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.163019735 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.07185221 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118121984 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.117789366 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111142905 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.131538559 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.074986036 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129643949 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.150105303 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129663338 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159358824 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.359565599 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122517794 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12419019 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.117844663 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110041512 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083667435 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.13086308 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.141518474 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09979255 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096562617 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147753283 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121039258 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135673102 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.116190741 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118354721 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.104829319 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106510436 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10291021 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.104182031 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145801224 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124227542 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125905186 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084626126 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107485216 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120062704 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139086421 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082746539 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144136932 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.086278504 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12237679 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079153182 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126838851 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078783653 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.110377711 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080398898 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102798522 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070813772 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07570227 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.147705295 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.116264774 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110958722 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104713275 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.143561763 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.142267227 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081186181 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111473271 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118585534 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105508269 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123428027 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114746386 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.094799209 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.282994623 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107674898 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085499934 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.081494606 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114569789 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093147136 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124092816 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083625864 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07471203 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138931859 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103832491 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094604896 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075532037 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106803742 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123163146 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092706225 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086578284 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114479599 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104994111 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141721508 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091836194 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097882817 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.125448276 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080223353 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092293495 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.06916466 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085762866 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076550872 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.13364708 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081301457 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12384561 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.073380803 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.138498995 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093050531 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.098848935 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108768262 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116742034 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136554557 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100896319 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.148939651 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095822259 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.128378964 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116225576 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100846045 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093438163 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11062388 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107768167 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132113597 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.104662745 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133026651 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155214484 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108705077 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.148411916 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094137789 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129048698 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114567888 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135046326 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.295248582 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168771729 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139906351 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111339931 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109387804 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075231991 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094992068 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107977857 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.114062053 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173594763 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125081415 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072175631 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104201439 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093813883 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108266283 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10338922 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081832961 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144705135 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102532224 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088157396 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111975371 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091376581 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104348597 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076555658 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102180326 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.106517285 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097620258 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099303306 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116972889 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131460639 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114564404 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147310238 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.102541452 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09410453 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.121300122 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113592218 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113123876 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087648392 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088330677 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141806524 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12394335 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.131535804 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.105004284 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113125191 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11623595 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10432628 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130926407 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111920338 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.134737522 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08592162 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.082203993 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072750272 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07650641 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.306042034 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107916569 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111533531 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098108345 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072399618 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107812509 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10830716 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075703415 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092529729 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097304756 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103218284 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.096105952 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110924721 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.118259602 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.096257874 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108136953 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102618576 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.15153942 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.106383248 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09327746 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14987183 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.154008337 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092622157 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097332776 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.076396257 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084849415 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119485146 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157939195 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.158966719 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.08005404 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088523857 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.087645467 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087817689 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072317739 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089266517 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090503987 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107804254 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100292005 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.115621732 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107872697 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076746134 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104343639 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101883897 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09520828 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.111496134 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12549795 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134455363 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.146874871 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11889576 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111989769 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078357976 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082956227 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078025191 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08144754 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104808093 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081941983 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079346896 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.153336253 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.273107151 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105464902 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107822847 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087774952 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075339615 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133414589 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069736951 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133870534 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071083666 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081162056 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081472785 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078177408 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092333872 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135968528 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108496721 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111109036 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107583155 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103891239 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160237557 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155935296 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080856749 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141020147 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075606361 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076540832 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076197419 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111485955 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090357139 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115816607 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144137363 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09184409 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103699925 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079159734 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146700314 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.100357605 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105893938 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087552244 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080212905 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146876341 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081180355 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.082612004 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090927432 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.116242841 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.078593768 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109368433 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089989047 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08587479 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.174328496 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.716315005 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098350122 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.081470847 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102910863 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.151990884 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144440021 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105282116 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120300788 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.313789393 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10756879 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097038419 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108151259 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.190086489 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074029609 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093842057 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.103199454 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097160123 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101175536 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.098816051 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.08703574 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.091608648 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.08649863 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078818324 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10673897 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087689775 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097906584 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108145548 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083371043 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.08831777 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130989217 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104083273 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082475682 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087408348 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104589108 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087156493 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102594274 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068791382 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112624853 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08952032 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119696227 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.099327174 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10927123 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127318297 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095715176 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140005704 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.109591299 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125840013 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089436735 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079843671 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129088205 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.091622973 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078831517 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148472395 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.100183617 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093557073 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107083725 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.099694295 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11699453 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121487446 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117516622 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100445115 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08175416 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108244701 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.109558916 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092219269 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084627868 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.257221834 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077760436 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107542128 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086034558 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086428663 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112717763 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088645772 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102818663 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.103700457 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122203661 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087762484 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10159764 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110820251 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090896922 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108983302 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100908691 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.13285413 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178405666 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128869363 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135746108 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139972139 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.08156647 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079637519 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.073175776 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120155548 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084581826 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.095206032 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083459445 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141120034 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08850086 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119046956 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.253179923 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085729478 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104346516 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103621637 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.07500271 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090171077 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114813197 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094398839 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082615014 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121901865 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083194334 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.131412918 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113489702 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101685686 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098286427 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083026167 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117879511 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.107497943 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.134161048 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097861607 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077491127 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128774637 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106980964 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144374601 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.075847564 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085048068 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.139543761 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112502145 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.316228946 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080422406 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149124297 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142059862 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100386218 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137042106 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071447407 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087654887 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088591994 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126206532 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083530185 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111168833 seconds)
  done (took 70.5653524 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.188156866 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.18564848 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.121950374 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.134702341 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.291116309 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.300741391 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.15367264 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.125307739 seconds)
  done (took 3.366100976 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.073612532 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.087616655 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.085201416 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.257475346 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.10312774 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.072604082 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.078190317 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.087446684 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.072759811 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.071711845 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.107138864 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.069642879 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068942936 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.535011261 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067095095 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072826997 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067819071 seconds)
  done (took 3.927662121 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.355091015 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.54293693 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.345605402 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.632433496 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.167994278 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.725372406 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.079899339 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.089358616 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.811082887 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.405595151 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.162997255 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.091417352 seconds)
  done (took 21.277112681 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078808337 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.121481927 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.120951861 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.074511612 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074041837 seconds)
  done (took 2.329733887 seconds)
done (took 125.270821223 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.086278223 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.183169133 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.073205414 seconds)
  done (took 2.191097906 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.122575113 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.120060117 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.119561576 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.121144999 seconds)
  done (took 2.41634395 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07725321 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076401247 seconds)
  done (took 2.024049382 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.230711848 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.218578068 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092100429 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085207925 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080349123 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080837945 seconds)
  done (took 2.112108004 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.076777507 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.075553242 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.075571803 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.076171128 seconds)
  done (took 2.164532844 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.178259923 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067953644 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069369935 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071457208 seconds)
  done (took 2.348922361 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087991104 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08835578 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117290184 seconds)
  done (took 2.153075852 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085898401 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084484144 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078947188 seconds)
  done (took 2.119261945 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.112236612 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.096983312 seconds)
  done (took 2.070729687 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.084843525 seconds)
  done (took 2.012062686 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.094265615 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098889181 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.186190122 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.151790652 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.187138922 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.173679147 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077178386 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.077555531 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073303516 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.072132642 seconds)
  done (took 3.134731522 seconds)
done (took 27.22922517 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.086733334 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.194355999 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.3205969 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088623529 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.655453099 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.320371803 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.740728446 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09746831 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.106939643 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07224871 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090306362 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.637815173 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.7441527 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.150523036 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.720951901 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.140536618 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.564789395 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070855307 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068177003 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068635165 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.717824638 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070596745 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068554242 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068694331 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.560058211 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.33492424 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071269033 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.138616941 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07228395 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.076914074 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.319694288 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.075862521 seconds)
  done (took 14.354750961 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080494252 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.148379893 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073672199 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084309809 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070474858 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070276257 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07262942 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069010913 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112016745 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068960165 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086397786 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068207643 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073079536 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070177276 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089096283 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068391834 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070915868 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069565156 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06876824 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06912882 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087790488 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068780298 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069386544 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069284153 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069131962 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083273401 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070154888 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068427703 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06878844 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073186429 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074295176 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070252342 seconds)
  done (took 4.43994511 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.130825077 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.131353573 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074620179 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109682855 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118698298 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071912198 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152026812 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091822304 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116022695 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06928432 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086314897 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068750817 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104208002 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070082527 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089551426 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068670088 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071711227 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069651286 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068708685 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068980654 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087644173 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068388046 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068961162 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069343039 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069200368 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084270732 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069884168 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068491044 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068850204 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072822153 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074610494 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070341529 seconds)
  done (took 4.585815064 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.074688345 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.075245761 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082509299 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.084245589 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069838284 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.073220131 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.073839164 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.070544473 seconds)
  done (took 2.568851308 seconds)
done (took 27.829350165 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081282009 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067400294 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070125302 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087292701 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.073454773 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.111666429 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064890379 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074763716 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071462869 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07150959 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072767418 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.0672798 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069660488 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064448674 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07159467 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065574486 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.114002902 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070760041 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.112700371 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.113907558 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.068378722 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071069939 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074282269 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.113259649 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.113531281 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.113615321 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07501592 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072038696 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.066575987 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069313902 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.173125511 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.188015601 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075829988 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.119301599 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066321709 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065959608 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.074496875 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069999176 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.115890019 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075529427 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068398689 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075346977 seconds)
  done (took 5.446845142 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.198399143 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.205673126 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.198074414 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.085466213 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.098491009 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.085688372 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.203787278 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.083542253 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077452588 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.194939667 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071798911 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.075911292 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078299254 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.069060887 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.075825541 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07221889 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.077525558 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.070165787 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.076140825 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.075614626 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.194676764 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073083813 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081126791 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.077891179 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.071855903 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078102908 seconds)
  done (took 4.726821064 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.07499406 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088737806 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093217365 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.149199085 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112529305 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084666034 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083973013 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.094341504 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101932064 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068307815 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072103613 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09637735 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097265529 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.075256393 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108079196 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.08636355 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080185368 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069414383 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074445818 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102169121 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09065739 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086780558 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101736335 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088832282 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.0673827 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077625662 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076018458 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084839903 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076097002 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080532261 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072125165 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071582655 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068923939 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080245296 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.072773326 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.066028551 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091236404 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081698183 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083605311 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109574026 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080627735 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.073852893 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.10022888 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.191586259 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069523202 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074856642 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.076659756 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.086202103 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.074265327 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.104185365 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.090391515 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.071921266 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.091968034 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.073482759 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.073879353 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.090151878 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.074253427 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.074197705 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.084832593 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.078424935 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.093750725 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.078272668 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.095383194 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.072208989 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.084040997 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.074264926 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073365595 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070716705 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.108735542 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080117569 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.126527784 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.07429574 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.07040218 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.086007309 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.084853783 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.080771473 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069989566 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088575129 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080830226 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072375183 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079468542 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071141888 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071551627 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106325839 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069025959 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.068058974 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069142337 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072388843 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072506389 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069308644 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081808201 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068213032 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.07229876 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083970877 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068745806 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069249778 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070894498 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.0698401 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068172536 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079429641 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073449982 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070910629 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08193777 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070375741 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072566348 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084500976 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078375953 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068492302 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070785235 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072879747 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072390826 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075463522 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.074003499 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072596713 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075913071 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.078377904 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.077468299 seconds)
  done (took 11.493662047 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.211026985 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.197615717 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.069618116 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.193438509 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077111089 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.127130649 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.196167248 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.133147076 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069080219 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.069640011 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067722112 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.141039789 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.136034044 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.146419651 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.118344245 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069205703 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095487265 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.146962689 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.202605291 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.1999532 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.099807671 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.081073235 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.075508288 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.074212854 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.074043832 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.082397753 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.088571937 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.08298083 seconds)
  done (took 5.287568685 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076972001 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084098213 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071962921 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092710137 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085479847 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.068520824 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071095208 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.074651116 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085787319 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074017554 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.067866194 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072454161 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071363822 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068573082 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068858779 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.074521535 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074763413 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.067067293 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071546645 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072545485 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.07960957 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.156640436 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072918848 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068355946 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070507453 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.068308646 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.074548705 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.076304619 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067705525 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101923412 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065392674 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07259347 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083739482 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.07001006 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069095362 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069836225 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.068725377 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069351626 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069564507 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06710859 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.066815176 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074649631 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067447709 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074118721 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083585704 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07788132 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070470408 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071232365 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071197444 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065543487 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072437772 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072546328 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071833799 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07760082 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072267323 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070972622 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070866053 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100513917 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075699238 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068610656 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068677664 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06688045 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.070483918 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076560447 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085579999 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.070333235 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066867523 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.0685659 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.076199179 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083708712 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069353935 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074229999 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065471439 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069097921 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072146226 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072203035 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070411661 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067063152 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068622926 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068781053 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069832273 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068679081 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068986794 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071439966 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066671697 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066982889 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.07004931 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070413872 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074500485 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.067420593 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071606075 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070328634 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067692866 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071849784 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075252819 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.074542101 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.094701517 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.081260112 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.073582877 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.070629541 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.089454674 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.075387331 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.072037274 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.076879841 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.077524209 seconds)
  done (took 9.816315326 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.099549737 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06976321 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.088345622 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.100160671 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078760568 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07319147 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.082445371 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.068807088 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.090263699 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066994274 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077049815 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068124646 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082382316 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077668051 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069706675 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078694083 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070491313 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089289965 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083011692 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066455842 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077250736 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.60635924 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081420171 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08666506 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087380924 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087451412 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080770186 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070596396 seconds)
  done (took 4.815934059 seconds)
done (took 43.488058902 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.064886465 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.150678282 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.017058831 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.488785107 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.123653345 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.075591951 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.073567835 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.95684262 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.604785579 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.119458839 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.885959574 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.684345338 seconds)
done (took 70.223244774 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.178515593 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.26852366 seconds)
    (2/2) benchmarking "String"...
    done (took 2.362746622 seconds)
  done (took 6.610093901 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.439571132 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.004066013 seconds)
    (3/3) benchmarking "different"...
    done (took 2.151645936 seconds)
  done (took 8.511683118 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.357411223 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.777951812 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.288145031 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.009780926 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.013817267 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.60734815 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.161182515 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.653651641 seconds)
  done (took 34.433729245 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 7.056996453 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.372550168 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.464993467 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.491945113 seconds)
  done (took 22.490012546 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.479118177 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.428508211 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.492725522 seconds)
    (4/4) benchmarking "different"...
    done (took 2.795712889 seconds)
  done (took 12.244208089 seconds)
done (took 96.896241859 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.000874945 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.342648081 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.053229436 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.250955455 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.039186938 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.129842899 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.978899392 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.990949856 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.084843514 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.97480298 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.972739564 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.023689038 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.027232396 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.999825014 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.958899841 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.057912117 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.261523709 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.981337212 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.092746521 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.862576185 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.32181902 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.080558388 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.969057947 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.023645717 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.425861142 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.026472986 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.537025515 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.030610863 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.577944291 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.980194573 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.971415497 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.028940741 seconds)
  done (took 211.965230565 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.117932572 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.862229709 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.845813025 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.989146839 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.332820965 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.424113686 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.828520795 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.353850893 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.08595458 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.041021578 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.998188915 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.107984952 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.040200162 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.657878841 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.021731927 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.052683724 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.923391679 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.811705 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.105118764 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.933530245 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.006888198 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.519041903 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.573645263 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.816745423 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.000158322 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.003091744 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.100187628 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.008679222 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.483557115 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.941566402 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.074163159 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.033958759 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.179354076 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.246685118 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.093785324 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.014840428 seconds)
  done (took 186.597915163 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.201861138 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.073730795 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.10057069 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.114827841 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.953155129 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.90399444 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.979623983 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.982549579 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.060533956 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.063986224 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.977939438 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.060094744 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.124965972 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.29510907 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.018651232 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.007733816 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.509585542 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.999011893 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.114241314 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.975368187 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.112627052 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.346469556 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.377675098 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.051317232 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.967019214 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.096143663 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.991329703 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.069181018 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.160666989 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.980720155 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.113542274 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.094429544 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.07684545 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.096095698 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.002564556 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.197821731 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.098340094 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.020002889 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.998628274 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.039948282 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.003601567 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.195206901 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.097285055 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.046466988 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.110867887 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.452990238 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.614824562 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.039577221 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.082691335 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.993469065 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.000955217 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.982266675 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.333863208 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.054017616 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.022322761 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.679635247 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.000328991 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.055663088 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.058742421 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.980624677 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.988148232 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.988216816 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.060245497 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.683255618 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.262940718 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.39603337 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.832420837 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.993613643 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.002894304 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.880590531 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.152662572 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.002490762 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.183925901 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.998658127 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.015270287 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.107521779 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.98504992 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.157548659 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.01543779 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.980536416 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.09534686 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.989498448 seconds)
    (82/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.035116496 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.082231164 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.008819631 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.266966176 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.035050316 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.102823814 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.097904463 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.991887513 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.998460283 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.014393363 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.046431073 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.988135429 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.982509662 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.986943158 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.465073705 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.04171978 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.062197549 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.45013973 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.150542147 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.409322701 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.922340807 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.061273224 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.998016178 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.008085206 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.013177714 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.071169181 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.087185673 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.001985181 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.00839427 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.994533364 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.038146753 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.06991695 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.989423048 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.000777607 seconds)
    (116/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.980373213 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.086665469 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.053700739 seconds)
  done (took 436.309778692 seconds)
done (took 839.119693243 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.688870425 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.885066431 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.59317533 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.640740405 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.604088342 seconds)
  done (took 15.317250661 seconds)
done (took 17.227896492 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.00695552 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.016054838 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.050488478 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.135845409 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.005088604 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.009576183 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.016985038 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.083810809 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.117890295 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.999006403 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.008503419 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.015245071 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.082261011 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.12511266 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.036473232 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.018581393 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.017410748 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.083312373 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.091482629 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.002446931 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.034028245 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.011015045 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.091342881 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.071848245 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.020810434 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.008745482 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.009317984 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.117869661 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.078705389 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.027218458 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.030315952 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.029029494 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.132228502 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.067969746 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.038122356 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.032376666 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.029670429 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.153446063 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.016375321 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.018072184 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.018238306 seconds)
  done (took 85.855123125 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.12830596 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.176832188 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.27228718 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.046463207 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.070989765 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.357611926 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.077831662 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.160004307 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.157448696 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.397534583 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.311953297 seconds)
  done (took 26.087430422 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.018368827 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.193498935 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.407429168 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.047287212 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.006575166 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.27627742 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.172304516 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.219114136 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.181585514 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.278932153 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.317353156 seconds)
  done (took 26.031728885 seconds)
done (took 139.996340802 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.571781301 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.023858973 seconds)
  done (took 6.505225602 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.053515486 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.988429947 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.19206654 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.970255075 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.067656482 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.057594593 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.966617092 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.984389072 seconds)
  done (took 18.237310732 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.074317981 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.069512783 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.988209846 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.003727374 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.008221628 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.091241183 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.062266933 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.989061108 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.999255902 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.991813388 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.085905408 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.047818316 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.990124148 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.009842247 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.99312013 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.119362263 seconds)
  done (took 34.422691646 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.993247007 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.008000988 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.99419101 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.097491305 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.036917681 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.990208931 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.004847435 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.993541962 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.107221256 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.035574891 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.9916989 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.997930579 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.990505506 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.107310398 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.025869358 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.031928069 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.008754086 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.999567989 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.127180785 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.012608505 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.999524911 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.988525796 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.024140115 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.110668272 seconds)
  done (took 50.646287084 seconds)
done (took 111.870832434 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.572212738 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.115397119 seconds)
  done (took 9.588241299 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.993812956 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.987458904 seconds)
  done (took 5.976929326 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.03426333 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.995296925 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.990562624 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.98763993 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.109588477 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.037598574 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.985594102 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.990062516 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.989572391 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.121849374 seconds)
  done (took 22.256493359 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.987329621 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.006647986 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.990945014 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.119349331 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.022346582 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.002627391 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.99313066 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.002067089 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.113281091 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.025690002 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.008239076 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.014844613 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.027843582 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.129778345 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.016985579 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.98886325 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.025948193 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.02811417 seconds)
  done (took 38.450119092 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.002933682 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.000422039 seconds)
  done (took 6.028269119 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.024769255 seconds)
    (2/7) benchmarking "second"...
    done (took 2.121981742 seconds)
    (3/7) benchmarking "month"...
    done (took 1.994343725 seconds)
    (4/7) benchmarking "year"...
    done (took 1.990023623 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.01924226 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.035262055 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.121665375 seconds)
  done (took 16.204666495 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.989007691 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.165154778 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.271005447 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.585910605 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.997399909 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.993799586 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.609074233 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.116020892 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.002342738 seconds)
  done (took 21.644805279 seconds)
done (took 122.08342066 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.832017725 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.015135277 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.62289167 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.079101185 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.163569936 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.356586709 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.098846475 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.557481871 seconds)
done (took 45.637037085 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.080146912 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.111513919 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.092794928 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.062921144 seconds)
  done (took 23.243659029 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.033581414 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.7385477 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.047957161 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.107298167 seconds)
  done (took 23.918338571 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.525813887 seconds)
    (2/2) benchmarking "read"...
    done (took 2.639903534 seconds)
  done (took 7.100273399 seconds)
done (took 63.395040661 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.989997172 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.076276355 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.06913364 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.990842855 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.99109218 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.989016699 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.079729203 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.080203369 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.991000113 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.991645837 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.997475648 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.087002736 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.057038428 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987383598 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.991659832 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.990340789 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.09412557 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.056308588 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.993212508 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.999635816 seconds)
    (21/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.98877871 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.10456013 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.047748334 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.997930126 seconds)
  done (took 50.546455962 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.007624935 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.11303366 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.039783678 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.995296528 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.997729675 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.007353722 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.115825708 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.034409503 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.992838535 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.99384147 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.994419546 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.124784528 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.024554086 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.995167572 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.998978337 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.000793858 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.123618246 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.020436695 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.996636633 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.993964506 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.012580441 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.129870539 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.001848197 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.996291194 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.995547129 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.020050498 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.132203028 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.014943408 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.997576589 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.997139654 seconds)
  done (took 62.770465755 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.142543943 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.009957075 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.007765326 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.013118079 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.043734034 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.114690725 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.020596711 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.022036893 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.00262165 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.069711535 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.106988157 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.002222114 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.99601772 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.999249233 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.057948743 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.091303758 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.998475516 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.994596508 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.999847306 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.076153364 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.076394221 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.993952756 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.99470128 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.995459333 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.081388992 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.076325427 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.994308899 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.996778548 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.995173169 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.090655303 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.064578609 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.996614749 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.002986907 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.000909446 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.106011523 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.058362446 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.007707333 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.005047029 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.00407591 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.116056512 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.038652422 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.995393848 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.994775294 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.998964091 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.121967804 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.039714025 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.999368899 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.003153483 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.995719991 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.130002322 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.034190718 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.993682671 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.99581526 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.0072699 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.124402171 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.0111286 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.997349783 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.996623827 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.022306027 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.128712994 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.008324956 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.995431067 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.003619422 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.029071208 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.132553507 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.996915878 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.994630822 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.000666239 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.039915195 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.127554508 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.001420702 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.000935998 seconds)
  done (took 148.32900379 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.045785561 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.110536675 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.003446477 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.014381788 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.000196644 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.05400266 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.101221696 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.999377926 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.00163934 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.009770765 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.074410544 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.088418221 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.002490383 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.005783597 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.004541419 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.076525134 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.079950482 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.001240496 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.005936721 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.013433872 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.085805233 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.070272948 seconds)
  done (took 46.757985508 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.015433418 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.009671142 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.088939905 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.064985169 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.006249464 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.998474577 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.996847334 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.095960223 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.049127583 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.002907556 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.003210715 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.999746488 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.104163924 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.039873747 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.999560732 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.005332435 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.996662541 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.116671079 seconds)
  done (took 38.501139203 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.99646402 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.005635257 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.002009796 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.118281933 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.026374698 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.9963054 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.001350602 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.018194705 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.127578267 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.016678069 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.014428331 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.033394587 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.027685761 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.120414536 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.007136637 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.002449203 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.998940414 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.03460827 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.123259677 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.003885862 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.002441876 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.0002785 seconds)
  done (took 46.623116724 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.126487364 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.999589944 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.004041028 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.003276029 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.043388533 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.108823411 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.004108672 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.999100047 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.000614437 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.054741099 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.102688621 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.002799192 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.004837162 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.002506387 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.06081726 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.090770444 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.003048432 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.008390604 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.00055025 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.079028875 seconds)
  done (took 42.637697412 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.985720543 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.987836413 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.977024315 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.046980545 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.060965436 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.975485758 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.978762452 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.976150311 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.049253641 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.056583599 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.981254854 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.977179053 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.977066378 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.054305694 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.050557489 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.977667108 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986180882 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.979521823 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.058082974 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.050085242 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.978054705 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.977297683 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.989688552 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.066499636 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.045250912 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.988551151 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.978895096 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.982889715 seconds)
  done (took 58.181738251 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.072737694 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.002091327 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.004654622 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.00283969 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.095467635 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.062347343 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.002722878 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.005452862 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.001897114 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.102722655 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.053765115 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.001735288 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.009677935 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.004294879 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.118577081 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.044742422 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.002219728 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.002295361 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.002012793 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.119613387 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.069596988 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.022184238 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.00595827 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.025140291 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.124381434 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.019154351 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.002257801 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.007780111 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.034109455 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.122840269 seconds)
  done (took 63.137490762 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.027031763 seconds)
    (2/2) benchmarking "in"...
    done (took 2.025726131 seconds)
  done (took 5.980359682 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.129054493 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.007515319 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.002551012 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.005653873 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.042009275 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.121618525 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.00274972 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.009346514 seconds)
  done (took 18.256335677 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.044574328 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.092603975 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.012974394 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.003037704 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.99097904 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.039060595 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.108873832 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.984172709 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.987105075 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.010690299 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.038621896 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.086710694 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.995826741 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.987474082 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.003292884 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.067895916 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.0728646 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.986731084 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.993198338 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.004480464 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.046495612 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.064062825 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.006130125 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.984115006 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.005276381 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.059710395 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.064489598 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.984046079 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.98282558 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.003230104 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.070273675 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.07704773 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.981655827 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.009912195 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.993096092 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.096010883 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.062221632 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.984027428 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.982306673 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.008566537 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.08105678 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.042045737 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.984735301 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.993201155 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.989990357 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.109593174 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.057388608 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.988033179 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.009260819 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.988688663 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.127351907 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.031786073 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.035510342 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.024955096 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.01476527 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.117895005 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.025713954 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.990316698 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.992830726 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.00218012 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.10568494 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.029247891 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.048686916 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.039464428 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.103404688 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.031847855 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.0125333 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.071706472 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.103263239 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.114437202 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.054119552 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.058060179 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.005328923 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.988896019 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.031189767 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.067986626 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.015637821 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.997453819 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.986988799 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.963650186 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.057193841 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.044708316 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.969536719 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.974774204 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.980971025 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.077362923 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.066163968 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.96825512 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.002169924 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.001502173 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.054464089 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.076211677 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.990721759 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.988351674 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.989859018 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.078815856 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.057047909 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.968958423 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.017389991 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.003266023 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.096527708 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.030878061 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.986852744 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.980558342 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.02468468 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.06314834 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.041608426 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.988061446 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.975015791 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.96452383 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.058322008 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.054807003 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.995451711 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.972922456 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.060550875 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.097570104 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.041074102 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.000762641 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.014575406 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.007128033 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.085908874 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.978019095 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.999005639 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.014150902 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.037370964 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.088366739 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.990144466 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.004200661 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.981467229 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.009982403 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.080915835 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.012601359 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.992164996 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.989695143 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.019554917 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.076009655 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.991661069 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.980658072 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.991630694 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.997964482 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.110379837 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.974410698 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.972604405 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.993312358 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.062738477 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.070685303 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.981829209 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.974106028 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.004788946 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.002385828 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.089709516 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.970625034 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.012348674 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.993597135 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.034291983 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.099664405 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.985048187 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.990339653 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.973931361 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.007789334 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.084603772 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.990874339 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.994538224 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.969113035 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.010937863 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.094987981 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.967179113 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.969377522 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.970521118 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.016578109 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.057974915 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.968368376 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.970502589 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.989229688 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.031061709 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.052813596 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.989410408 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.996626594 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.974472931 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.030174618 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.07829648 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.979733433 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.989242541 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.975961088 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.04182134 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.055381904 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.971850188 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.966941638 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.969630977 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.044145296 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.085174415 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.974341486 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.991823492 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.98168511 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.029807279 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.055926511 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.997790048 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.999517747 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.974819028 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.048731561 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.074638923 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.973860806 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.974857509 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.98135438 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.058574 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.026646533 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.99391643 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.991273407 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.971987337 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.025147811 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.086723418 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.972159091 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.993668842 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.970650638 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.065031354 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.060427605 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.990816566 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.993857347 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.984841776 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.042817926 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.065778283 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.971981738 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.975201748 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.972474718 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.060302444 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.048043359 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.978099161 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.995840585 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.971798328 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.052706468 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.053876799 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.991842658 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.993873626 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.994825997 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.045288411 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.0655667 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.973935261 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.001446638 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.980192992 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.08170111 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.05418471 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.00450214 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.982925833 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.996685551 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.060932772 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.011709331 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.976147556 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.969534452 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.99647223 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.063490451 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.039555528 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.970862214 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.99750035 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.999383278 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.109572738 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.045156315 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.98233989 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.993979409 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.995979503 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.081274086 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.050934303 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.001964611 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.973453199 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.999475767 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.103493424 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.013702066 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.98775279 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.983775216 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.99606988 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.10909154 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.995183645 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.978229465 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.994013015 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.975694274 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.08458907 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.034434759 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.998223114 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.002053187 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.972863455 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.082513234 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.99413251 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.987467099 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.974861363 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.982895736 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.085993177 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.989127281 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.997624709 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.973422023 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.973127546 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.090932887 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.016459791 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.994470493 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.971991646 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.998399269 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.096343842 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.011730456 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.972783025 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.979089167 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.999225431 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.112750732 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.984361638 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.99589127 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.978070203 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.983752172 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.113101495 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.004761505 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.971158764 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.977030254 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.009794776 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.079502945 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.006196506 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.97451352 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.991652879 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.990684503 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.102207445 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.976577102 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.977036661 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.982939333 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.018202167 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.107427733 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.023713365 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.005683365 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.004138218 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.009888642 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.108487972 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.978560744 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.972855203 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.000054514 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.013578358 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.066062722 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.995862865 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.974252628 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.997481345 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.026594014 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.089381111 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.998833554 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.975952507 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.000472065 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.036533249 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.085311977 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.977307095 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.977947599 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.976698323 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.040600053 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.07606946 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.984931785 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.974435836 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.00096987 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.015886973 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.110341335 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.987212538 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.973242439 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.979232588 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.059674062 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.09347656 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.002903493 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.996213399 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.976644593 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.06442478 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.059352708 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.002695589 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.008198572 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.98824652 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.062707987 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.048407655 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.979572889 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.977058993 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.991880343 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.096870201 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.059845813 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.980912315 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.002638923 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.98651006 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.046005376 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.049296548 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.985912071 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.993277115 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.991633602 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.077037974 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.042885597 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.992843369 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.977529136 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.005672619 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.080263492 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.037460508 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.001853277 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.001396944 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.000550495 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.065312036 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.048681752 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.991584132 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.999849671 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.034040376 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.067549074 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.045567164 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.994648899 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.000321883 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.980494913 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.066362639 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.04184587 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.977986361 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.980811098 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.985189752 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.110389771 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.997127549 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.99352982 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.979184894 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.980515131 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.101387619 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.042028633 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.979671592 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.976784324 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.000288908 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.116254641 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.020404399 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.002266784 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.981882151 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.991581618 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.088748353 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.022770029 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.000286952 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.981457006 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.007166187 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.091011105 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.007538027 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.98769779 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.983632573 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.001856705 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.101454487 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.006852275 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.003659519 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.988826402 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.005140995 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.091632381 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.009366727 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.977230044 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.001939506 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.000510009 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.087410114 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.999386202 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.005711092 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.989880824 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.026535866 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.11512982 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.982239112 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.004325279 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.988676094 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.013379823 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.127685451 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.023423759 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.009671417 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.034742713 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.022724228 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.058468439 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.987713096 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.983167082 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.004091498 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.027003106 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.093406649 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.021519807 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.00143396 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.004305341 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.031231452 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.104429123 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.00964562 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.004288809 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.007291153 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.065973324 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.042209382 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.016319033 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.004481739 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.986380342 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.067114494 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.074344197 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.981370531 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.982435927 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.983957663 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.078010078 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.048046158 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.009298818 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.979754355 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.005347014 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.088383103 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.022659737 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.982692776 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.986586172 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.987752114 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.083729155 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.091029777 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.988448103 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.017329708 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.988158044 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.080601598 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.068214732 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.986858459 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.984430368 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.010645581 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.111602791 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.022083985 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.007079559 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.985993536 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.990599946 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.08495764 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.046324762 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.98398072 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.981960451 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.986412464 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.127653405 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.010852613 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.996641095 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.997823388 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.994458374 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.114209207 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.025904166 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.994694169 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.987632111 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.030634374 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.094111086 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.983864695 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.982470635 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.98669188 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.021072797 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.093158713 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.064831914 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.023115444 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.993473929 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.017058038 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.120782442 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.012577597 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.998393006 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.028254479 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.041083384 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.084425542 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.986814963 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.009787183 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.984271672 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.05144511 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.085465986 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.990717122 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.987394781 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.009028778 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.039652578 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.080208148 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.007308512 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.986050608 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.011607014 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.040583076 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.098923521 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.001034423 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.983929649 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.011714628 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.069959477 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.094768599 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.010155959 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.009521235 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.00873627 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.061477592 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.084392667 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.014099665 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.002828852 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.993091349 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.074273048 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.065684499 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.02332633 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.984804295 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.012399063 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.076233739 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.016145571 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.989749427 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.008576064 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.990862285 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.102605811 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.064467997 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.022074945 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.988953777 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.989757241 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.089310347 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.054699911 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.985482881 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.001955241 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.001518503 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.114695671 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.055185989 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.995473359 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.008866898 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.999320893 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.104411348 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.992382302 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.989196472 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.013455667 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.024490416 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.121283748 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.03149223 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.991132574 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.019967547 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.003429578 seconds)
  done (took 1206.025532283 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.013039768 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.013230709 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.008419598 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.034472661 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.120536556 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.043734617 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.010488174 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.010331473 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.078185353 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.100725341 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.019799227 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.045207604 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.034455564 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.059606735 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.113570938 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.026330066 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.009829469 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.01321556 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.076401757 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.082128712 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.013002062 seconds)
  done (took 44.949202437 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.013977063 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.080174779 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.111249309 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.01137524 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.016942391 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.013562171 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.089955045 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.073788189 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.015501672 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.009793656 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.013994573 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.108196821 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.032644404 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.01106542 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.01040798 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.013567955 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.112696585 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.090732919 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.012673939 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.011271675 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.013511135 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.119431401 seconds)
  done (took 46.903973898 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.988603207 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.989118678 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.993620984 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.129019326 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.015369775 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.98827364 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.012925187 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.028619121 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.123637448 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.056733057 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.998624946 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.024889365 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.040315305 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.105123913 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.016050203 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.000948363 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.136229499 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.028991661 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.077232118 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.019725382 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.988543176 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.99983141 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.068172414 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.108734615 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.014786341 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.005813737 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.01528358 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.072824204 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.102187313 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.01875668 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.996094935 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.053117737 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.073672547 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.084235446 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.033656847 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.023050105 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.005171363 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.085550239 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.04362996 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.01388725 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.017549247 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.046161639 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.102588024 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.048103002 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.009290282 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.015834754 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.016714628 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.104367627 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.064198817 seconds)
  done (took 101.96555017 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.016951436 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.014412189 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.151554711 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.022447021 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.015021474 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.017076852 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.03056749 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.123712209 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.072299295 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.018178659 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.019725515 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.054340924 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.142060926 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.035308395 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.017249356 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.050601466 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.073816288 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.141306791 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.030328075 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.038326087 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.027795398 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.105278223 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.10625294 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.014610885 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.037187673 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.025377219 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.104059976 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.097920539 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.017023999 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.014638921 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.017577749 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.11675766 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.079432124 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.020785665 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.016928394 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.020035856 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.149496079 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.026684485 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.019388142 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.020696842 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.017849649 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.138714755 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.066019868 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.05026144 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.031953451 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.05404111 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.156256298 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.035160146 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.02258768 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.04713817 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.04984105 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.173427186 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.031385946 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.026151971 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.043003602 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.090653689 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.096277334 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.018953403 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.018341333 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.019460987 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.098650659 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.11555183 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.025746825 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.024128898 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.03352289 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.117082061 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.070164829 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.016635156 seconds)
  done (took 141.735369337 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.000378447 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.112801418 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.063646124 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.004659112 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.017328351 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.998166181 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.12426642 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.006462248 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.993903159 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.99709364 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.996353348 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.137886938 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.047030305 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.018872332 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.995297487 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.997609879 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.117178654 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.041288034 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.994283278 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.99732607 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.01435414 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.115953056 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.99745887 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.995172526 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.999428304 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.029282072 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.141045248 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.013825661 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.996493937 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.011314366 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.033578446 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.099830828 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.011640617 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.000402478 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.010754434 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.051309936 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.112865766 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.014123885 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.019210674 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.000143298 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.045750707 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.140131954 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.012773584 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.01907432 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.014858236 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.076878052 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.075137173 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.010638599 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.023952318 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.005407041 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.093669264 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.077434047 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.998653619 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.998919444 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.00549365 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.116030056 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.063223434 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.007988253 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.999758896 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.999341335 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.10339867 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.06403047 seconds)
  done (took 128.20815462 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.022417621 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.026777409 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.133462982 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.067576404 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.018671173 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.019274935 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.055244334 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.160890463 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.056550903 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.041080677 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.032947752 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.048109869 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.145593894 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.02267098 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.021329019 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.023141772 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.067946075 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.132502188 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.02125772 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.021881173 seconds)
  done (took 43.067526884 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.069991021 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.120371641 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.023371739 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.026383353 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.023179138 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.088936084 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.119191132 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034816421 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.020915398 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.024206932 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.114674301 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.06476905 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.02118031 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.022927811 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.024145705 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.113947184 seconds)
  done (took 34.840436284 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.023548359 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.021606962 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.00093754 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.091160143 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.097393226 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.02067357 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.023325929 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.027085669 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.13242464 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.065568438 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.02688061 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.025930695 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.033987314 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.109365409 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.032755491 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.022731147 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.024991972 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.053533101 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.129643207 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.034706835 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.025006692 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.025129931 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.058414972 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.132789738 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.025252057 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.025089577 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.025003086 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.082528384 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.103013266 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.026849702 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.026323943 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.02815361 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.09249194 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.108322314 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.000965236 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.023562365 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.03886237 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.112137583 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.074955867 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.027099459 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.023509835 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.024732025 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.122147071 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.079705631 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.024076691 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.02431372 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.026218696 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.140265691 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.045848631 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.029829922 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.028118692 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.015333257 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.131690156 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.050443433 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.026991022 seconds)
  done (took 114.855905342 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.049343202 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.137210914 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.028664175 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.025311308 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.029464283 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.072730851 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.155178938 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.034019473 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.030358842 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.043151062 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.084635168 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.101373247 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.028255236 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.024234526 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.026659454 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.095733309 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.105902178 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.04276763 seconds)
  done (took 39.048802239 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.03975005 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.121351775 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.102260041 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.039557411 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.030677264 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.0310316 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.12542628 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.080574745 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.025582266 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.027195142 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.027501889 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.150725008 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.045193668 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.02649784 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.02596884 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.043554927 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.138999523 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.045688099 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.025901251 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.04105875 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.058541724 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.114671429 seconds)
  done (took 47.326434657 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.026371568 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.031479765 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.081245995 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.175730127 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.066257461 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.074248979 seconds)
  done (took 14.384646474 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.086002819 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.118341797 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.030455862 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.031242454 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045607448 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.113408397 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.067618916 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.032146468 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025612228 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.031621762 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.111720032 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.107513344 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.027655077 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028876842 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044837312 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.148102211 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.031937936 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.027710224 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027724584 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038680871 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.141745252 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.072164207 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028942548 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030543228 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057530636 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.125568815 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.03314834 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.065381371 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03457107 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.064292401 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.150591201 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04071785 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028125919 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.029928116 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0918814 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.097150119 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.028117551 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.028748684 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036104452 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.111346315 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.099870704 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037049545 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.03256523 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.031145566 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120147212 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.099717684 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028766484 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03428528 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032254276 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.155108689 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03290024 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.029289095 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.028617984 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037736628 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.139206677 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.074412686 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.033431175 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031111515 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.060015037 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122723023 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.030749065 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.030975735 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035857905 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.068531888 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.146345089 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042557194 seconds)
  done (took 138.025287069 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033080984 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.08974048 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.10679535 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033426385 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032257824 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035815543 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.101672903 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.107584813 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.031732792 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.029618601 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.031972831 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.123839288 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.058815324 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047146242 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.033976057 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032645885 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.136992447 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.097181892 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031140801 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032536253 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036642313 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148019843 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037758908 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035677024 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039271905 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.071396774 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.139250257 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036617944 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032299495 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035722306 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.078311238 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.137563345 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034281194 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.030511752 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040731626 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090261513 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.1107669 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031847108 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.032119669 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.034524673 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.112517465 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.106368212 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044745571 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.033314759 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037025507 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129463539 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.08577739 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037302555 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03592377 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.034435177 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.152725375 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035681371 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033405453 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038380305 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.066528195 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147665457 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.074776508 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038719897 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.034056691 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.074757862 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144131709 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049062872 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033299322 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03642001 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.094632753 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.09959704 seconds)
  done (took 138.207048988 seconds)
done (took 2823.184869052 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.110349375 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.245860605 seconds)
  done (took 16.300591503 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.144970078 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.098004776 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.178039435 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.113656816 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.042417765 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.061189495 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.086714321 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.016457561 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.097722536 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.021895384 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.096240292 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.024317795 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.038675923 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.124406222 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.028006701 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.012207666 seconds)
  done (took 55.201513435 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.049167931 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.137257069 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.027211283 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.013586364 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.04894226 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.162421179 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.11867089 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.024169145 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.040270332 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.067482153 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.095159255 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.132689461 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.032692429 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.026146017 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.121807615 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.167996889 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.109589604 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.110667999 seconds)
  done (took 39.424331693 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.119813331 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.130875794 seconds)
  done (took 11.199496769 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.114974142 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.041663408 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.077398481 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.179103134 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.041568959 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.071285924 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.165411843 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.08852433 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.056723219 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.064243456 seconds)
  done (took 72.874609422 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.062128655 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.018323605 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.323122554 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.063753805 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.136598887 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.060254944 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.043936098 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.059552741 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.09283703 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.114311226 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.029747238 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.428267757 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.067506281 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.017468995 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.448633093 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.094843486 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.090667385 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.05816915 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.063683842 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.023026703 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.088605784 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.124757681 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.263561337 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.758885881 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.050817912 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.030801802 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.027211766 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.14001915 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.058656468 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.016029335 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.023717291 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.01444786 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.024494704 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.020216617 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.039778611 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.024547935 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.642449704 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.128974161 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.030694404 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.106518147 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.079000023 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.076954367 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.133019369 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.03082193 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.160801132 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.035818002 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.739559452 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.103377835 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.113475129 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.257590778 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.522321585 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.043188679 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.240061517 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.195755201 seconds)
  done (took 143.705005165 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.037003412 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.533440813 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.21343514 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.060419981 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.410579527 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.249826015 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.985153284 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.088728087 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.057066612 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.249142566 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.208704907 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.270512703 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.055557577 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.095044476 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.045430737 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.041833387 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.319820324 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.150520495 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.045298163 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.1046603 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.113847437 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.352260261 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.160206378 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.043504005 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.079573171 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.259194925 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.092722266 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.214714382 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.543828167 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.03785763 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.22129587 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.043756501 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.164461906 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.045167754 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.085323322 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.155433131 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.165285991 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.159305757 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.706723136 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.044487551 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.729129271 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.243846926 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.158267937 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.201123542 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.300982443 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.252764109 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.772828762 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.04584408 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.783418319 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.207287927 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.367331134 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.29084273 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.139806334 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.045873888 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.461669416 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.154175569 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.051021006 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.299918294 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.193071023 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.224303225 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.133867075 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.073910983 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.04565385 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.277272804 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.045925728 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.22212561 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.043721644 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.134468586 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.16873099 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.279407742 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.201957995 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.267293611 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.077674983 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.085806528 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.360715181 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.249215835 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.224612591 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.336849943 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.045021033 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.109831134 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.207174867 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.572202283 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.197135118 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.302305757 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.389153071 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.203213816 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.622246025 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.056756032 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.307777404 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.204707188 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.359233617 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.256210247 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.147733595 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.891763027 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.046133041 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.049594891 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.387984871 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.178535431 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.049871728 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.582662508 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.292987358 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.906515999 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.068880833 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.519336158 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.178067534 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.159853773 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.763691732 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.158749786 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.267659196 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.1981319 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.092548344 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.118010096 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.202645536 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.004794909 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.137855655 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.407986624 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.120616148 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.058818716 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.213875561 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.05786066 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.336772265 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.855607302 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.347796092 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.202961685 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.186562155 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.280964642 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.240438341 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.137701659 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.510672481 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.422802016 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.26303539 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.387775124 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.073253958 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.080766353 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.486539649 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.108892556 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.193292232 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.267048973 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.094589931 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.343425277 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.132098605 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.4020025 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.085203419 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.150220466 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.169105883 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.2935892 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.246496486 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.168586486 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.111222549 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.345899049 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.226007798 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.086636224 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.249783534 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.094428587 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.098190533 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.058057758 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.124341275 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.242720612 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.34563796 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.178749742 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.266422277 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.481358609 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.125469204 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.209024543 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.1671463 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.497376917 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.691486701 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.229756756 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.099502005 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.176282115 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.177725028 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.446058131 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.412511929 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.147109427 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.181353606 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.974936021 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.597916972 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.14876968 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.342782645 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.999196057 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.531765019 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.425817553 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.156991997 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.267780535 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.186637672 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.481541089 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.669567738 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.448935642 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.141413189 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.230558078 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.136206369 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.140867698 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.361009651 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.170806378 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.883559701 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.382885625 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.382469773 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.293587521 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.363998259 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.216823086 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.098618585 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.369909203 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.128398137 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.152150843 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.137288798 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.075633487 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.396006425 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.102403 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.44109848 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.470568809 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.231327701 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.098711475 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.159599266 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.056144441 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.055053145 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.328610459 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.165201259 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.056739068 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.219490265 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.133116767 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.279050295 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.270481815 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.336211952 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.124235098 seconds)
  done (took 940.876835473 seconds)
done (took 1281.536399558 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.04997908 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.057230108 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.10905873 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.147452499 seconds)
  done (took 30.322786722 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.064560519 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.172050203 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.065177557 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.031722756 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.060143293 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.058519178 seconds)
  done (took 14.420045314 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.047601379 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.136192406 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.061731089 seconds)
  done (took 23.307649113 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.482955239 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.362218801 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.216361265 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.221434713 seconds)
  done (took 11.248549166 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.037215314 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.082395394 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.126290819 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.031517838 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.043718625 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.049240623 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.118562882 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.099020678 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.043165073 seconds)
  done (took 20.597734299 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.502508127 seconds)
done (took 108.374312429 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.599063341 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.514366964 seconds)
    (3/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.371172832 seconds)
    (4/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.254494453 seconds)
    (5/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.421948389 seconds)
    (6/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.140770032 seconds)
    (7/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.247815048 seconds)
    (8/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.351012937 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.230524499 seconds)
    (10/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.379336874 seconds)
    (11/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.627014896 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.52818027 seconds)
    (13/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.126986083 seconds)
    (14/341) benchmarking ("map", abs, Int8, false)...
    done (took 4.674070406 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.074805202 seconds)
    (16/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.973224421 seconds)
    (17/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.654871731 seconds)
    (18/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.093229291 seconds)
    (19/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.779430433 seconds)
    (20/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.124881428 seconds)
    (21/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.323759194 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.148629911 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.068365342 seconds)
    (24/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.025226836 seconds)
    (25/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.422520593 seconds)
    (26/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.707036237 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.071989422 seconds)
    (28/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 4.683398767 seconds)
    (29/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.222436145 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.220324733 seconds)
    (31/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.471506448 seconds)
    (32/341) benchmarking ("sort", BigInt, false)...
    done (took 7.057871205 seconds)
    (33/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.368297777 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.084640879 seconds)
    (35/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.499416098 seconds)
    (36/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.184438865 seconds)
    (37/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.328230193 seconds)
    (38/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.131297451 seconds)
    (39/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.181503422 seconds)
    (40/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.081925901 seconds)
    (41/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.535006266 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.338733362 seconds)
    (43/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.437374863 seconds)
    (44/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.05921158 seconds)
    (45/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.125246197 seconds)
    (46/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.114803442 seconds)
    (47/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.385827873 seconds)
    (48/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.187434805 seconds)
    (49/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.084510815 seconds)
    (50/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.069076151 seconds)
    (51/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.07718795 seconds)
    (52/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.78930867 seconds)
    (53/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.666615749 seconds)
    (54/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.330941865 seconds)
    (55/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.502006125 seconds)
    (56/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.614003554 seconds)
    (57/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.341890387 seconds)
    (58/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.408284298 seconds)
    (59/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.069546017 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.334988843 seconds)
    (61/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.178632127 seconds)
    (62/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.083970364 seconds)
    (63/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.296117175 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.86680341 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.381884905 seconds)
    (66/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.305725199 seconds)
    (67/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.609582346 seconds)
    (68/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.241827189 seconds)
    (69/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.458724053 seconds)
    (70/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.401253211 seconds)
    (71/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.145351491 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.779778976 seconds)
    (73/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.306682839 seconds)
    (74/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.088374857 seconds)
    (75/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 3.095929806 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.257374887 seconds)
    (77/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.310782369 seconds)
    (78/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.804105439 seconds)
    (79/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.184417504 seconds)
    (80/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 4.157813404 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.178953597 seconds)
    (82/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.497718872 seconds)
    (83/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.176220662 seconds)
    (84/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.383734345 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 5.57946231 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.208398969 seconds)
    (87/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.896014393 seconds)
    (88/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.216398452 seconds)
    (89/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 4.586947615 seconds)
    (90/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.614468062 seconds)
    (91/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.639121704 seconds)
    (92/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.269762725 seconds)
    (93/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.183618438 seconds)
    (94/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.795710219 seconds)
    (95/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 3.025088191 seconds)
    (96/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.181468588 seconds)
    (97/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.908498806 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 3.015921598 seconds)
    (99/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.283268833 seconds)
    (100/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.638545133 seconds)
    (101/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.319852148 seconds)
    (102/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.371162114 seconds)
    (103/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.401011077 seconds)
    (104/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.400326965 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.370047771 seconds)
    (106/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.403455992 seconds)
    (107/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.66409305 seconds)
    (108/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.198590788 seconds)
    (109/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.110650051 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.602682121 seconds)
    (111/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.468059055 seconds)
    (112/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.035244162 seconds)
    (113/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.08818575 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.191344555 seconds)
    (115/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.733046542 seconds)
    (116/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.691450108 seconds)
    (117/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.09836751 seconds)
    (118/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.320386992 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.116002881 seconds)
    (120/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.090432713 seconds)
    (121/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 3.486916575 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.042418878 seconds)
    (123/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.383327049 seconds)
    (124/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.872557889 seconds)
    (125/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.520412482 seconds)
    (126/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.384837654 seconds)
    (127/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.190873556 seconds)
    (128/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.080493179 seconds)
    (129/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 6.06154738 seconds)
    (130/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.724760454 seconds)
    (131/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.243993675 seconds)
    (132/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.268635336 seconds)
    (133/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.37691745 seconds)
    (134/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.34092758 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.277856904 seconds)
    (136/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.485507735 seconds)
    (137/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.403193648 seconds)
    (138/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.935909827 seconds)
    (139/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.066768142 seconds)
    (140/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.066007253 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.214355447 seconds)
    (142/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.097082554 seconds)
    (143/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.417234887 seconds)
    (144/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.171398492 seconds)
    (145/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 5.239213425 seconds)
    (146/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.111307341 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.621721209 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.12934201 seconds)
    (149/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.403089116 seconds)
    (150/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.544173273 seconds)
    (151/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.353421334 seconds)
    (152/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.11634046 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.237779796 seconds)
    (154/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.131293148 seconds)
    (155/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.449145051 seconds)
    (156/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.11579991 seconds)
    (157/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 9.173361233 seconds)
    (158/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.174231304 seconds)
    (159/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.187440677 seconds)
    (160/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.232970409 seconds)
    (161/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.186732346 seconds)
    (162/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.481020464 seconds)
    (163/341) benchmarking ("sort", Bool, false)...
    done (took 2.28818209 seconds)
    (164/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.239928085 seconds)
    (165/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.405157678 seconds)
    (166/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.576176927 seconds)
    (167/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.534124678 seconds)
    (168/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.24658309 seconds)
    (169/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.219439381 seconds)
    (170/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.315942392 seconds)
    (171/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.325744834 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.095005336 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.077437877 seconds)
    (174/341) benchmarking ("sort", Int64, false)...
    done (took 6.889393027 seconds)
    (175/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.365364433 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.514492336 seconds)
    (177/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.679039438 seconds)
    (178/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.160512262 seconds)
    (179/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.356678462 seconds)
    (180/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.318517371 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.411414375 seconds)
    (182/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.021617849 seconds)
    (183/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.67065279 seconds)
    (184/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.580152039 seconds)
    (185/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.175111929 seconds)
    (186/341) benchmarking ("collect", "all", Int8, false)...
    done (took 4.223320625 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.30153547 seconds)
    (188/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.074975444 seconds)
    (189/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.376424686 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.289050817 seconds)
    (191/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.085903734 seconds)
    (192/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.651544004 seconds)
    (193/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.675564199 seconds)
    (194/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.079212479 seconds)
    (195/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.2105554 seconds)
    (196/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.197022413 seconds)
    (197/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.348603921 seconds)
    (198/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.227937367 seconds)
    (199/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 3.004071295 seconds)
    (200/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.168567636 seconds)
    (201/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 4.703189213 seconds)
    (202/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.294169125 seconds)
    (203/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.266071547 seconds)
    (204/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.191966839 seconds)
    (205/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.595382579 seconds)
    (206/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.592749166 seconds)
    (207/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.380715852 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.072697616 seconds)
    (209/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.36775419 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.106969013 seconds)
    (211/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.094108078 seconds)
    (212/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.61214352 seconds)
    (213/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.727024677 seconds)
    (214/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.210249484 seconds)
    (215/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.291200078 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.292960158 seconds)
    (217/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.650098865 seconds)
    (218/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.084731804 seconds)
    (219/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.078139063 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.227815731 seconds)
    (221/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.203332509 seconds)
    (222/341) benchmarking ("sort", Int8, false)...
    done (took 5.713467279 seconds)
    (223/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.147112374 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 4.253013762 seconds)
    (225/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.205799265 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.211463506 seconds)
    (227/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.309828225 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.219125249 seconds)
    (229/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.15102483 seconds)
    (230/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.116451961 seconds)
    (231/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.303512741 seconds)
    (232/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.143260162 seconds)
    (233/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.089714963 seconds)
    (234/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 8.753878021 seconds)
    (235/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 4.368154001 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.647301425 seconds)
    (237/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.075626231 seconds)
    (238/341) benchmarking ("perf_sum", Float64, true)...
    done (took 3.74043627 seconds)
    (239/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.649930428 seconds)
    (240/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.524342668 seconds)
    (241/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.069421377 seconds)
    (242/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 4.121314269 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.469221754 seconds)
    (244/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.095471426 seconds)
    (245/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.1251862 seconds)
    (246/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 9.133503679 seconds)
    (247/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.565782335 seconds)
    (248/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.501946351 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.86904482 seconds)
    (250/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.513111631 seconds)
    (251/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.283346052 seconds)
    (252/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.312316621 seconds)
    (253/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.100986347 seconds)
    (254/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.129800257 seconds)
    (255/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 4.992856116 seconds)
    (256/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.641487614 seconds)
    (257/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.441925969 seconds)
    (258/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.246935761 seconds)
    (259/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.363857058 seconds)
    (260/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.101890783 seconds)
    (261/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.187907458 seconds)
    (262/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.083582314 seconds)
    (263/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.184439566 seconds)
    (264/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.20023243 seconds)
    (265/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.263986727 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 3.143773522 seconds)
    (267/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.595743978 seconds)
    (268/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.342838111 seconds)
    (269/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.303897003 seconds)
    (270/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.099641825 seconds)
    (271/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.47074514 seconds)
    (272/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.530166134 seconds)
    (273/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.217939387 seconds)
    (274/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.586133934 seconds)
    (275/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.648851215 seconds)
    (276/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.652977344 seconds)
    (277/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.725018185 seconds)
    (278/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.320623278 seconds)
    (279/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.904005149 seconds)
    (280/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.205427824 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.233459807 seconds)
    (282/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.145717762 seconds)
    (283/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.109646581 seconds)
    (284/341) benchmarking ("collect", "all", Float64, false)...
    done (took 3.732800077 seconds)
    (285/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.078764948 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.162251229 seconds)
    (287/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.74064316 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.114991125 seconds)
    (289/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.408791384 seconds)
    (290/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.220505355 seconds)
    (291/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.140208541 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.19229259 seconds)
    (293/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.090284569 seconds)
    (294/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.419210722 seconds)
    (295/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.087420081 seconds)
    (296/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.332951089 seconds)
    (297/341) benchmarking ("sort", Float64, false)...
    done (took 7.116146752 seconds)
    (298/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.197465268 seconds)
    (299/341) benchmarking ("map", abs, Float32, false)...
    done (took 3.914499089 seconds)
    (300/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.690788732 seconds)
    (301/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.296355865 seconds)
    (302/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.109407846 seconds)
    (303/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.779172959 seconds)
    (304/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.091153475 seconds)
    (305/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.071293824 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 5.486842616 seconds)
    (307/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.38047301 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.096333584 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.476586164 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.470182892 seconds)
    (311/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.537597458 seconds)
    (312/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.122512271 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.170376754 seconds)
    (314/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.11632422 seconds)
    (315/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.567950043 seconds)
    (316/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.113517148 seconds)
    (317/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.423858847 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.357776858 seconds)
    (319/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.899511081 seconds)
    (320/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.187623338 seconds)
    (321/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.231754632 seconds)
    (322/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.16984855 seconds)
    (323/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.364608083 seconds)
    (324/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.454669713 seconds)
    (325/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.079060766 seconds)
    (326/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.098448937 seconds)
    (327/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.205017487 seconds)
    (328/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 4.253957397 seconds)
    (329/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.647434671 seconds)
    (330/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.074361427 seconds)
    (331/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.421380785 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.469899615 seconds)
    (333/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.275278781 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.50753432 seconds)
    (335/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.272807599 seconds)
    (336/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.093692909 seconds)
    (337/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.170921512 seconds)
    (338/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.118012204 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.593601533 seconds)
    (340/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.076715214 seconds)
    (341/341) benchmarking ("sort", Float32, false)...
    done (took 6.850957354 seconds)
  done (took 1224.071944898 seconds)
done (took 1226.210338272 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.164199204 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.091968272 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.625982756 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.069610238 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.069303962 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.157588411 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.658530552 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.095062499 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.06279076 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.694454865 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.125831623 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.051716556 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.065038107 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.08151944 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.173296826 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.075183591 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.057705552 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.079050495 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.107320323 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.158266461 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.129982699 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.055782906 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.070258699 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.173879263 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.108682077 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.066403768 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.079721636 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.132638356 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.227944717 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.101804445 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.058778659 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.451931111 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.15470306 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.148779469 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.061842982 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.067427488 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.05945136 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.124537817 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.157613436 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.0581626 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.053495738 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.067373142 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.150031504 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.103192993 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.049071195 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.054114537 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.059740006 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.253984209 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.107279 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.462299244 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.134369407 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.130967114 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.205040854 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.056897342 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.059211145 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.056359546 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.210833645 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.12932906 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.055207396 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.46241454 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.184260187 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.177017992 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.487747392 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.129363019 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.067223813 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.144973252 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.135128159 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.074351501 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.450570023 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.673549419 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.184494081 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.078815454 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.053328805 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.057530637 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.118029277 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.73449461 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.075496246 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.736158349 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.145297637 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.149793192 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.066956751 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.082749216 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.06563567 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.155695178 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.167267862 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.062470135 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.05922295 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.064906013 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.197392754 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.454199068 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.11513836 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.630530166 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.133058901 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.203871046 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.079151849 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.73681766 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.117775564 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.212143515 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.062178823 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.458109804 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.111062048 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.173854966 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.101601737 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.074335601 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.151176846 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.087986854 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.20083334 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.093903109 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.079303042 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.060092468 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.08244893 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.200751219 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.103484914 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.08129244 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.068767711 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.116847051 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.173053782 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.064543712 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.082867108 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.072212178 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.16041488 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.134733711 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.057975021 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.108692292 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.084254018 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.203614723 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.154915004 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.070613696 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.156537527 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.115370525 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.206269346 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.089818357 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.484055591 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.125666385 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.19621118 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.09771644 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.087240774 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.082647193 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.085891047 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.176207284 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.127559144 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.064152717 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.107190513 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.095299917 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.193440615 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.113557215 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.070800152 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.062787286 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.148316202 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.185869827 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.083463926 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.06420298 seconds)
done (took 330.38298238 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.190435328 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.461701906 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.186615345 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.205541735 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.161576423 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.148656727 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.088429407 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.149698063 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.165773241 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.512615803 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.084071999 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.085946128 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.581964914 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.097882943 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.136561085 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.140678596 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.153019763 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.350882183 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.058741404 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.14199731 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.199147125 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.096371124 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.082859859 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.513073066 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.192187752 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.091584107 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.265518784 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.134132162 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.358590701 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.087615366 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.210903509 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.361936108 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.146831678 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.100295096 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.191601526 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.108134682 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.158983863 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.087553398 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.137385801 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.246844643 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.187100503 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.073506502 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.090861918 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.207948793 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.092966425 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.060329926 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.116872765 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.171318806 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.146192221 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.114117486 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.440929335 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.085154278 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.090966308 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.082145637 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.155924848 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.145109917 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.082335942 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.059063262 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.143333888 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.169393302 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.175409232 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.511673058 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.516006256 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.156423773 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.174865417 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.085044884 seconds)
  done (took 167.282087004 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.200481175 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.283286291 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.187287874 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.104276048 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.151175256 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.256276311 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.147610416 seconds)
  done (took 17.311871709 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.086756445 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.086254502 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.229156556 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.131136701 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.059314369 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.255521028 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.140467189 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.184215111 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.113755285 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.081940023 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.446630181 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.216546642 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.102010581 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.094143123 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.100967624 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.179394424 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.203324306 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.077813622 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.207727895 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.178899379 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.201939157 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.086796504 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.11728649 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.112668207 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.114426732 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.173192389 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.090724458 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.092337723 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.125730718 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.160657025 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.131812896 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.120720195 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.103793254 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.076577354 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.179058346 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.091712228 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.063789542 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.087035888 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.153950764 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.536952869 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.088279519 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.08783946 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.091155026 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.197942542 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.126938729 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.11131683 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.082961879 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.15122736 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.16868975 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.092473212 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.140976503 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.100996934 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.161600686 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.158809988 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.135538282 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.087164751 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.064550794 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.204640274 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.093209765 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.085171237 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.083167312 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.23137333 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.235211885 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.094405326 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.142288341 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.147701359 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.16584904 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.164989759 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.086643755 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.117459285 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.086504254 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.225799525 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.127264469 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.179509521 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.085579459 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.298238786 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.222398296 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.089649141 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.091447356 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.054673786 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.209384518 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.108959946 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.095246477 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.092433768 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.16678599 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.175619034 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.101541271 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.115040823 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.11150773 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.160224028 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.225672594 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.09888557 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.063094513 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.178921754 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.197822018 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.243909826 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.128715728 seconds)
  done (took 212.827143555 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.140587821 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.171113111 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.105157438 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.087731522 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.092041816 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.148352835 seconds)
  done (took 14.729759984 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.096359387 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.092264278 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.09003415 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.190101742 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.082561087 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.063540484 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.086222636 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.094915177 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.174927735 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.133250754 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.062394592 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.063142088 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.098606154 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.144836739 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.090575072 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.086703678 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.089990136 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.145021318 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.173935014 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.064704212 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.288991119 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.068772879 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.166929709 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.113504881 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.072940199 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.089867093 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.119410606 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.204793897 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.096459048 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.096661445 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.069763087 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.117007749 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.148658786 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.098565109 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.093687013 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.072135471 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.175507561 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.123873026 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.093867867 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.068031429 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.069736699 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.183122861 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.105025326 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.065362415 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.096615673 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.099232078 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.192440084 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.100265852 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.093509143 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.065071413 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.121764203 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.186443169 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.071810889 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.066252505 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.075650081 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.177563125 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.13575678 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.094579295 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.067905916 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.076314493 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.205763362 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.103821043 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.093989659 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.095083134 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.121985067 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.152101044 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.07523449 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.073314813 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.083201302 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.145696066 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.180533726 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.093898106 seconds)
  done (took 154.169811551 seconds)
done (took 568.321909 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.188984884 seconds)
  done (took 9.185974743 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.390324983 seconds)
  done (took 9.515850722 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.458403077 seconds)
  done (took 14.456074299 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.142881966 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.263235018 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.084769209 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.10294363 seconds)
  done (took 30.716792458 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.301120906 seconds)
  done (took 9.383229052 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.136502552 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.222745459 seconds)
  done (took 16.54187005 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.403957713 seconds)
  done (took 9.437978915 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.518050629 seconds)
  done (took 9.52042979 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.110937335 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.108044491 seconds)
  done (took 16.246438785 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.123180206 seconds)
  done (took 9.128454087 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.668233834 seconds)
  done (took 10.805721263 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.117148968 seconds)
  done (took 9.182136575 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.191450722 seconds)
  done (took 9.260043071 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.862500515 seconds)
  done (took 9.986583325 seconds)
done (took 175.373382641 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.148924565 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.166266966 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.207557212 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.13495224 seconds)
  done (took 30.712949783 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.172507482 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.171699623 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.293292763 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.213515264 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.161645422 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.164971061 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.227194423 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.273113227 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.183964878 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.194129748 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.1936254 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.323192198 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.199681685 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.177140025 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.174080432 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.234489736 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.292648297 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.175295472 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.160414278 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.175849506 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.30565234 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.197160546 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.134734461 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.136746454 seconds)
  done (took 54.981744033 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.463070166 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.220633022 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.298538603 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.192506973 seconds)
  done (took 11.238021152 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.182559789 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.208510439 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.189911293 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.213105304 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.279234786 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.300057423 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.191941948 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.34243696 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.38476601 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.371369217 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.137576282 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.147088908 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.210667874 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.264722562 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.302785458 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.131905644 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.13160314 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.421256231 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.28937107 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.33632967 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.136157412 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.273804385 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.249532081 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.1965088 seconds)
  done (took 56.0295572 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.133870649 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.258678402 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.183155684 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.135467832 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.133090706 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.177256715 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.262406507 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.149293232 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.169530555 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.143129589 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.220161356 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.198688722 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.139904454 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.135232032 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.153197429 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.260090778 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.153550737 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.134876567 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.139410305 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.210408384 seconds)
  done (took 45.5268732 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.139283564 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.492741543 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.336433488 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.333893367 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.221762408 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.136429052 seconds)
  done (took 33.807218117 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.155824548 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.239525173 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.206802418 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.179506248 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.203270557 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.162936275 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.338298262 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.344172191 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.147446948 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.2183358 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.237593763 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.225373398 seconds)
  done (took 28.699434028 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.131333862 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.163055218 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.267374267 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.160005289 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.240797738 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.227612623 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.156141561 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.14664425 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.152694972 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.158561328 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.143960583 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.248955247 seconds)
  done (took 48.239878858 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.316208253 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.284277526 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.516157077 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.8994604 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.648097186 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.320414784 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.524409295 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.712383483 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.181126538 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.300259894 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.621385006 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.122791361 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.628263629 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.041768095 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.089892454 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.362410689 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.092830341 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.567550375 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.523936018 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.161956481 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094976392 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.090482312 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.094664367 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.654053856 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.42805688 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.099184703 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.278455218 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115101097 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.091071726 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.293750323 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.090321104 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.120614912 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.24577898 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.38658573 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.602739927 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.175584708 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.179617054 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.065217604 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.144210936 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.12811017 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.104072441 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.107514974 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.645909282 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.134654961 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339637226 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.092698216 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.095318648 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.68435698 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.046452537 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.191589965 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.260032585 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.962556097 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.14954161 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.796898254 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.228105018 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.36476939 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.101202468 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.054667743 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167153079 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.134036061 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.251747624 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.179886537 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.272881415 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.04550812 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.542955858 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.275320718 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.096098755 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.101601403 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.357806793 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.367594778 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.177266655 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.205472766 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.832036749 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.096011063 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.098242866 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.981366868 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.209931222 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.095978594 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.819963716 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.603813302 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.04926046 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.195492687 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.802764115 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103115396 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.094955971 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.107904445 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.94419084 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.046673648 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.178903541 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.130980668 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.448178851 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.096656421 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.095747796 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.128945921 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09734955 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.083267451 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.723386873 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.172051093 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.048342601 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.646649706 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.099534991 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.049669066 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.096428217 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.110701689 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.488887197 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.140727688 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.832208358 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.727704447 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.378553366 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.678402711 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.104020216 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.096612512 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.18003464 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178684151 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.096576602 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.783826395 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.104558164 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.181953323 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.269077754 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.096988278 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.048520232 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.110732206 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.252499862 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.097886039 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.125562456 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.098272305 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.104596593 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.097200235 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.101645101 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.13175283 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12248323 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.59884902 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.236630762 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.099018362 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.040146158 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.106362798 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.575581696 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.1813862 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150387692 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.517912786 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.717217775 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.581801839 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.063076655 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.957684833 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.554329974 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.200359201 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183707964 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.264935233 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.254639752 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.181179262 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.098160107 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2604128 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.108529157 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.10271347 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.098011723 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.855795909 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.737899849 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.147388927 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.098117034 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.054419016 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.073221793 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.300345237 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.750770109 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.139167729 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.106749575 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.18091904 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.249844028 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.07607961 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.050039288 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.458407058 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.337474513 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.601617043 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.322733035 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.749646377 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.214275327 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.112894101 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.286748868 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.182405566 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.734910335 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.296556188 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.432761387 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.541635733 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.096521106 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.100582998 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.164372594 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.496188788 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.124630357 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.846101922 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.072215131 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.562557059 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.135054625 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.661102746 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.051485873 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107965055 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.563904391 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.104567019 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.6425305 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.222958219 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.266980424 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.102909885 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.102348938 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112003015 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.867688423 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.217183639 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175378062 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.179008367 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.055182591 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.016180518 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.148225316 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.104607177 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.100820083 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.378830206 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.015551332 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.11953391 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.102773023 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188868426 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.958159759 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.80095398 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.107887105 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.106339692 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.57877463 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.111140022 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.102215466 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.108899843 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.988474295 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138376742 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.150390501 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.220703864 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.621015605 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.204813998 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.18455765 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.10224542 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105984463 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.368312962 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.115550225 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.369356961 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.584263203 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.735816922 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.804771209 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.201726802 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.725867124 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.124916369 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.104089278 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.751037595 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.139331422 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106280941 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258745178 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.786868359 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.22056027 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.286550985 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.185634873 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.103843919 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.558618275 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.691601726 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.146378524 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.038782631 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.210542343 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.10455275 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.288848466 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.858579099 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.106808006 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.103745803 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114275604 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.283157734 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.26081595 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.498083475 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.604990384 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.440708957 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.055667074 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.112779032 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.212285507 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.381311279 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.104592937 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.140480398 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.743472815 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.753101694 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.872143277 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.627294697 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.318994118 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.250950644 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.549404303 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.203282348 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.118895753 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.038161168 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.294454426 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.068012104 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.236143184 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.057120604 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.141619447 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.403325206 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.130827647 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.569505212 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.176156383 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.634309149 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.518337905 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.151186622 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.240163324 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.182043421 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.152772319 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.2061384 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.140448371 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.231533312 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.289469448 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.110389753 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.496108916 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154937739 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.154400048 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.113821803 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.748294354 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.135574561 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.111274676 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.57618522 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.215854862 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.306942774 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217645417 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.904553712 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.192571874 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.164527833 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.587063615 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.760033403 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.57073441 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.243017801 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.744201784 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171676544 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 3.045338359 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.507701777 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.699844794 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.521201176 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.364013515 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.57102188 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.896313547 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.522118087 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.691978692 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.83125312 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.620869205 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.520115481 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.492330937 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.081508997 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.602095023 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.997359465 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.510340482 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.266367955 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.010510646 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.774849064 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.05254818 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.50493658 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.521617816 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.995760574 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.371898476 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.440744928 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.552082106 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.510258341 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.673936442 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.701364566 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.698185208 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 4.247114996 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.52375505 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.538987995 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.701004013 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.638692387 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.468516544 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 3.051638637 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.264613206 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.779987924 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.546754032 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.676634366 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.684603905 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.901124439 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.556895413 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.591258683 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.25627141 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.973579996 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.615703486 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.473006734 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.516351842 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.771150491 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.678136537 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.608270407 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.791740338 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.989217533 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.566419436 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.521352831 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.819867584 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.062292875 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 4.235231939 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.239560622 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.84147131 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.031444073 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.10523369 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.51020117 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.258822168 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.707320943 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.660410689 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.906832953 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.433468901 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.90543987 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.80688218 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.520017332 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.472280902 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.666435495 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.52055006 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.579371144 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.387751155 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.804723997 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.621665126 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.288725248 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.136876141 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.750614794 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.541040163 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.55413286 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.549727442 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.54841906 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.524797339 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 3.052261614 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.905435738 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.538849761 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.50230978 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.268506568 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.487808814 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.717915942 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.824726752 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.577797045 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.366721361 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.621198683 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.683273093 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.204224606 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.872919042 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.567772753 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.489870355 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.336614943 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.518936854 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.265661125 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 3.304036708 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.550012009 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.520721288 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.67757689 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.515958262 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.567381915 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.527409703 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.832837496 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.811045452 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.984571628 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.680490264 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.880566378 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.799807395 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.100183396 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.629425852 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.75385404 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.47994913 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.523383513 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.605434247 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.576207027 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.601754116 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.523883581 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.519777588 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.764362955 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.690901613 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.674940448 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.545219511 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.32810236 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.327719785 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.541462338 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.552541956 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.38414201 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.438128203 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.427516533 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.648356636 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.420249878 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.493438605 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.578781698 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.481846344 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.810258069 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.497147763 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 3.302137724 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.456373699 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.217099129 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.591807994 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.930414554 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.453584584 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.519093919 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.488458292 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.435020858 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.864512275 seconds)
    (484/608) benchmarking "6d"...
    done (took 4.09518735 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.611692651 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.694103308 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.456699703 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.640323481 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.469489893 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.43436251 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.441458763 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 3.04313751 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.806983684 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.429263856 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.875940849 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.492205274 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.454446964 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.191729067 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.893519578 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.440459351 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.210081913 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.563865504 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.926355618 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.031739121 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.481115298 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.533143319 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.431783781 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.360715883 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.553007001 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.458670039 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.991118151 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.435972479 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.97510626 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.632322326 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.542608262 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.442663099 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.444225058 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.467997993 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.614116246 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.641812394 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.480497811 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.681737876 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.599771905 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.475515099 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.946900063 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 3.165672438 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.766471498 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.480773715 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.643563406 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.783386616 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.203569818 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.637589569 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.006648746 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.584462005 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.431512896 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.640224247 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.671207669 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.468610577 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.608330876 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.446324667 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.800301861 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.572012624 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.9802867 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.544044074 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.704900138 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.817045347 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.448368179 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.942016363 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.906308276 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.547678518 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.426899586 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.450062565 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.441309348 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.253146263 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.046326356 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.642929769 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.584503281 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.414786292 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.961376156 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.445080336 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.386852215 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.439719528 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.463808082 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.422802423 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.394254264 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.234899229 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.27225875 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.625027622 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.797061005 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.377672203 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.601598291 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.462225349 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.373796357 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.926649049 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.447327912 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.737084734 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.416826819 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.405879625 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.394809389 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.593065186 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.544105448 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.808145104 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.410349777 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.441446705 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.451276427 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.463600441 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.464436701 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.506255144 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.437855455 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.719217786 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.925585398 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.675212403 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.608922379 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.316382781 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.25248272 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.389191108 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.510682572 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.432208637 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.01892656 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.590753223 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.609719588 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.53477825 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.416033414 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.985106218 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.48437082 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 4.149847945 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.456319837 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.443362612 seconds)
  done (took 2537.973433673 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.44780768 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.534643983 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.463280189 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.53541344 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.471557073 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.493919875 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.512249 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.485862022 seconds)
  done (took 62.296587049 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.454320548 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.483967637 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.472631832 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.447833807 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.400883162 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.456984537 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.659154023 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.439913124 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.464453193 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.467149746 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.416419559 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.440715374 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.448926076 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.482330328 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.443185316 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.739573376 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.459798196 seconds)
  done (took 87.538450438 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.527810169 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.130210111 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.410609493 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.69189769 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.477260644 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.646455112 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.468173887 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.426836682 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 8.116985539 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 9.159549124 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.459551105 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.470404388 seconds)
  done (took 95.341054216 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.45730439 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.431433908 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.439208699 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.42583578 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.460897389 seconds)
  done (took 14.573954331 seconds)
done (took 3109.253321587 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.615031682 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.613882959 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.574906892 seconds)
  done (took 7.513923362 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.503464877 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.569739847 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.649125676 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.57484817 seconds)
  done (took 12.671749911 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.712140646 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.922103927 seconds)
  done (took 7.980299006 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.886352319 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.450995338 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.948678251 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.457115583 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.444147185 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.451408437 seconds)
  done (took 24.713047058 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.446983265 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.448972433 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.448744229 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.450359803 seconds)
  done (took 12.12405498 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.464731422 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.526603148 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.465783201 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.505265583 seconds)
  done (took 24.304550444 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.607522094 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.707167326 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.171510641 seconds)
  done (took 10.828714308 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.205775365 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.836112675 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.261096517 seconds)
  done (took 11.657774186 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.399668821 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.458916212 seconds)
  done (took 9.210216122 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.590081531 seconds)
  done (took 4.950555486 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.902801569 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.949759528 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.32506605 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.800508098 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.493738021 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 3.153078948 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 3.254437756 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.763878097 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 3.158743842 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 3.058707027 seconds)
  done (took 34.19163717 seconds)
done (took 178.431756822 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.867174973 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.883511118 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.621170299 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.668242349 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.528321611 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.637233075 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.530184278 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 4.448207231 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.768831781 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.847728324 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.713197172 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.500643797 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.544273441 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.841721509 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.529376238 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.813563923 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.865449657 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.348245925 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.301481566 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.856755088 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.536449736 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.032401061 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 4.183188995 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.959428181 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.886149216 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.575509286 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.491470528 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.839996647 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.575211993 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.513955177 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.553038577 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.122932435 seconds)
  done (took 197.698167284 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.4370802 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.472032584 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.452385282 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.427921942 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.462778951 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.405632495 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.491353866 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.439314719 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.272372068 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.258374306 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.445619836 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.402548486 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.446148927 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.472178325 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.423115976 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.455756574 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.358822493 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.45840144 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.464676517 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.435578432 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.440106288 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.250903371 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.471383497 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.25968884 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.379968649 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.454979792 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.46941833 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.448626622 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.46494394 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.455386254 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.472110703 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.461345125 seconds)
  done (took 231.853635016 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.457949023 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.463552998 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.433493298 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.452836301 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.457679435 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.474391936 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.461806393 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.445349268 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.452477096 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.4506589 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.458606663 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.473086926 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.468728817 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.459174568 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.448913846 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.4313349 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.45293395 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.453430535 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.469705767 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.454536822 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.481995795 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.463060016 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.438116183 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.457849377 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.458787647 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.457344501 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.454224054 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.415472671 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.46500892 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.432361983 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.449053365 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.462681243 seconds)
  done (took 240.912496231 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.749832383 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.44812141 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.46196683 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 4.246915903 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.45474063 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.438080177 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 4.212635485 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.772960277 seconds)
  done (took 26.135504727 seconds)
done (took 698.94500925 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 4.17618875 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.365098645 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.661198461 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.525483751 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 4.082329067 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.537714548 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.508402985 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.656927155 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.232574149 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.589822635 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.967050547 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.515604759 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.328677001 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.522477759 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.649936327 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.591540865 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.94971178 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 3.241035681 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.652117854 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.271577289 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.761773545 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.496132994 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.605745031 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.307734441 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.966575131 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.506208542 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.574092982 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.955999051 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.516141864 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.793937753 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.527765571 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.94674517 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.504659239 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.492329324 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.547581245 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.553502406 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.84184958 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.483884375 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.611228837 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.233549005 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.327108651 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 3.139099131 seconds)
  done (took 129.065100799 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.487039228 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.507503146 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.529247225 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.50366879 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.479195504 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.504478546 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.499667902 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.513965207 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.520019932 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.498078966 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.494754815 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.51373793 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.533297801 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.475696511 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.462307729 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.51751463 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.505229497 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.424489727 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.447741856 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.444763426 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.380262132 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.370071097 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.33369348 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.340479164 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.344442128 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.390631603 seconds)
  done (took 66.383709351 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.234927916 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.453218757 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.780610425 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.603438792 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.562261257 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.551767035 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.590712109 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.583848272 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.54772165 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.567070104 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.655413321 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.550949316 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.571576433 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.912350463 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.583008956 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.476403108 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.401150202 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.456490106 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.626276062 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.465666912 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.479954107 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.418990492 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.494735731 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.41470232 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.41856315 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.43383854 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.437635452 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.860266941 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.431613722 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.539108802 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.564884928 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.460470859 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.846606348 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.782381353 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.507382775 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.441790439 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.404898622 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.595744742 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.437183219 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.429591456 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.478083866 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.449092728 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.778443409 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 3.074288915 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.458735948 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.426009595 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.902105968 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.575847947 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.507791694 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.419618798 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.809514537 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.471854027 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.431860576 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.399432947 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.491244159 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.418543569 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.444768253 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.712435306 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.428300124 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.478237152 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.446173228 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.430973817 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.640879172 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.432831302 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.633472303 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.43241713 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.419859683 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.380448506 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.784258952 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.457742254 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.999443256 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.442791814 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.430457431 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.555242744 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.611827295 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.930784483 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.443444622 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.666900001 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.828692926 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.466179318 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.401216254 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.879171864 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.454372572 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.415176709 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.297592387 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.338748174 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.294630545 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.359091219 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.369993836 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.838415434 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.941992009 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.634845447 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.368529149 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.307225386 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.311747459 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.601517765 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.329284061 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.288634878 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.659910689 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.950623777 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.33975435 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.297224845 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.909443959 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.339692488 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.33146818 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.325552267 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.662151756 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.343229402 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.343345219 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.31459363 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.301288945 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.314501012 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.346283572 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.307160782 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.326211482 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.841520592 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.370399686 seconds)
  done (took 297.431428276 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.203023079 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.186667282 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.198488197 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.205270594 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.146219865 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.214999839 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.205679986 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.144508395 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.200026031 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.142863732 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.145335888 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.144824718 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.144544178 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.154101072 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.177713546 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.145173631 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.774735894 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.149740597 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.144128221 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.148992508 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.976129467 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.193749289 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.143973452 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.149085896 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.145766535 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.146225454 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.146545363 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.174410793 seconds)
  done (took 176.152326694 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.144880142 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.213932492 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.135631 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.21534943 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.159955291 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.145223321 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.17539535 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.169774776 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.155040058 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.144831915 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.145518858 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.18432333 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.156923339 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.248097531 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.191206104 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.188182895 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.262626297 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.159894092 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.147428356 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.158234073 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.345198209 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.312547345 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.229315142 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.267627082 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.162419185 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.21420384 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.204399478 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.146136422 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.145727141 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.273494572 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.176264488 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.188170251 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.195841681 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.249845326 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.445544406 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.347426162 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.343628468 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.268688644 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.214426004 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.249447941 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.263655434 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.290213385 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.309031149 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.229929254 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.211222469 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.379901129 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.23103374 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.218576935 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.233540629 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.20926277 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.231976745 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.23057087 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.257049382 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.351852932 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.279495315 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.245781373 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.241287908 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.260111143 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.178952646 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.305579437 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.258394355 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.33558894 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.240380907 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.256748087 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.217804314 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.220630435 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.284384986 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.254883171 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.31740329 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.219367753 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.302754595 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.282835875 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.218806189 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.210190119 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.229418347 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.316725356 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.35031985 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.301778874 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.294176695 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.251251614 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.259567199 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.212164957 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.252901802 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.245516905 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.217408753 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.340327398 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.347909281 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.226824963 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.217319597 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.209104736 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.199901808 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.22885691 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.286985111 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.259473159 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.362839614 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.271170624 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.2606713 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.224316762 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.234695793 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.2230089 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.256308663 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.232908501 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.208355011 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.558835717 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.25511185 seconds)
  done (took 237.644784555 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.614246592 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.288841867 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.308550625 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.491655991 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.628362362 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.520375959 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.246510958 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.286232074 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.27227448 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.419285341 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.346221766 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.340383316 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.268817718 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.245032771 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.285025109 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.27240356 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.303911288 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.60448348 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.37936498 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.25891328 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.272084433 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.581663919 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.616438307 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.64622712 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.317597398 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.713541574 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.914609208 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.387376978 seconds)
  done (took 72.940505273 seconds)
done (took 981.990494786 seconds)
SAVING RESULT...
DONE!
