cset: moving following pidspec: 67764
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.171104044 seconds)
loading group "string"... done (took 0.25451062 seconds)
loading group "linalg"... done (took 4.01052604 seconds)
loading group "parallel"... done (took 0.021538133 seconds)
loading group "find"... done (took 1.341544246 seconds)
loading group "tuple"... done (took 0.904682011 seconds)
loading group "dates"... done (took 0.227466865 seconds)
loading group "micro"... done (took 0.057050675 seconds)
loading group "io"... done (took 1.330339037 seconds)
loading group "frontend"... done (took 0.010380312 seconds)
loading group "scalar"... done (took 4.620889034 seconds)
loading group "sparse"... done (took 3.317916142 seconds)
loading group "alloc"... done (took 0.015791943 seconds)
loading group "broadcast"... done (took 0.357339095 seconds)
loading group "union"... done (took 3.073816031 seconds)
loading group "simd"... done (took 2.657128687 seconds)
loading group "random"... done (took 2.98372755 seconds)
loading group "inference"... done (took 0.29458669 seconds)
loading group "problem"... done (took 1.096552079 seconds)
loading group "array"... done (took 4.294201512 seconds)
loading group "misc"... done (took 0.815016593 seconds)
loading group "sort"... done (took 0.340328634 seconds)
loading group "collection"... done (took 6.046136021 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/22) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.434431259 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.070324066 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.092543644 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.069080391 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.141110327 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.079298074 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.086763857 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.06950782 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.880785732 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.061680391 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.096620784 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.364479927 seconds)
done (took 4.434956513 seconds)
(2/22) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.235399333 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.02394691 seconds)
    (2/2) benchmarking "String"...
    done (took 0.025357244 seconds)
  done (took 0.929465311 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.02277115 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.022149185 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022167264 seconds)
  done (took 0.940260551 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.0210269 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.087263942 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.022239596 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.023478896 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.023713225 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.023073653 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.022964494 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.022944437 seconds)
  done (took 1.100987496 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.026606445 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022351714 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020758421 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022210993 seconds)
  done (took 0.966522749 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.022029747 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.080271163 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020994454 seconds)
    (4/4) benchmarking "different"...
    done (took 0.020840894 seconds)
  done (took 1.017357866 seconds)
done (took 6.102273248 seconds)
(3/22) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.073180435 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.75657551 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.782599554 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.073375987 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.238970271 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.351987982 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.076717936 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.12239984 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.037759559 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.028559048 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.062334968 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.033406393 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.087421988 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.501521301 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.025076335 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.143842751 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.664539278 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.042154217 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.090723003 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.385599692 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.022958592 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.04022502 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.044019485 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.022834976 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.281144253 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.126108702 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.701228286 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.028987838 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.021790491 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.050756756 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.02388955 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.027700603 seconds)
  done (took 8.881991372 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.048348285 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.035822838 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023048057 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.07343701 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.046263886 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.02410325 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.028392142 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022796943 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.036388525 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.070751183 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.037059336 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.047940811 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021813903 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.02437045 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.023927021 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.146669295 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.033073764 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.033162281 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022596372 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.033017416 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.057932306 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.030978296 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.026812584 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.025933526 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.082319165 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.125449711 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.058911887 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.053250337 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.021832174 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.024582893 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.069001487 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.072752816 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.021714311 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020833263 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.066076369 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.04958636 seconds)
  done (took 2.556696383 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.627038562 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.102653874 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036383992 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073236664 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.062694645 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.068471769 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.044193798 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069893071 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.050067224 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02386829 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.100628104 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.606087966 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.058394631 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.461099251 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.025751872 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.167190898 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.206931759 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.053376167 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.020501068 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021037959 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.02205172 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.021824774 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.053916961 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021322743 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.115288543 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.124583889 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025648467 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023890042 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067714107 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.034078166 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.022608016 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.090192741 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.040799153 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.026592178 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.14733985 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.02182038 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019836468 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.046662357 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.032167645 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021594995 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.020954079 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027641591 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.020568177 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.060721089 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.027877419 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.563734379 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024019407 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.482255246 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.848473899 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.020127969 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.020389557 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.050775565 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020022945 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.02179148 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.575450735 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.02533013 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.023664423 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.364090554 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.028143154 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022408264 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023175218 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.049542528 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022616388 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024581488 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.022220259 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.050965866 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.86360076 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.02568676 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.051065932 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021929061 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022351889 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.022193158 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.366734534 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022285386 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.112089253 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.02045245 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.022263921 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022275657 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02153827 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.041105693 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.043158045 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.050285127 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025065763 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.021968328 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.02164812 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.647831479 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.150078044 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.020591063 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.021954906 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.124630509 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020497348 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022629253 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023707188 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.041985376 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023826987 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020133398 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.056133939 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022543568 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.022323262 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.191155684 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023336892 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020757209 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.366315697 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024124919 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059312693 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072056999 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022389305 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.021409232 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.021786836 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020524238 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.021081349 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020353037 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.022700425 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.021618945 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02061832 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.021520176 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.020934229 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.022253615 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022964252 seconds)
  done (took 19.777305265 seconds)
done (took 33.719003951 seconds)
(4/22) benchmarking "parallel"...
done (took 1.024248906 seconds)
(5/22) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.150858729 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.066736042 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019892553 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.097036078 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.021134444 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.096609284 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.09959894 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.093076596 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.021257378 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.021010953 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.021178983 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.132820216 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.138959735 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.021300708 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.095222196 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.143694157 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.021312679 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019339105 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.021057365 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.021360008 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.021196328 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019403062 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.021367664 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.02120964 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.095269926 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.021478574 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019571948 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09622443 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.021844957 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.096513622 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.021264169 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.021660389 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.021571978 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.097748628 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.021518798 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.094007373 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.01933746 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.021299324 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.021161756 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.021229378 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.021033024 seconds)
  done (took 3.107864598 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.040865839 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038265609 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.054257664 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.01948532 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029565443 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039090184 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.019517384 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038720269 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.054988639 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039502606 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039191928 seconds)
  done (took 1.380192911 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038621967 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038730799 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.04753831 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.019554703 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030868333 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.038910208 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.019432637 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039176109 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.054812251 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039648662 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039454278 seconds)
  done (took 1.354167276 seconds)
done (took 6.776809645 seconds)
(6/22) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.039349021 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.021564654 seconds)
  done (took 1.002859262 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.319617581 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.100665884 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.02550774 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.079191257 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.023608855 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.037508555 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.254076919 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.037920789 seconds)
  done (took 2.860454112 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.054429025 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.023217109 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023229544 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022303591 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.02265774 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.023109964 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024128103 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023147845 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022686347 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.02472308 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024447521 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022964153 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.02352714 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024490146 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022839992 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.023075575 seconds)
  done (took 1.409816003 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.025656577 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024096842 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.024646442 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.021972143 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026597018 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025324907 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026734186 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026206419 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026563421 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.025472876 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.02416763 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.02582136 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025676246 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025477717 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.025313735 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.022043592 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.025379051 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.02498945 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.026272502 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.026027932 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.025347285 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.023410127 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.02666733 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024059305 seconds)
  done (took 1.557339369 seconds)
done (took 7.778829469 seconds)
(7/22) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.125791108 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.020110133 seconds)
  done (took 1.094372918 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.020975827 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.022124352 seconds)
  done (took 0.9950631 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.030610752 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.021634562 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.032422905 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.024638026 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.022565113 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.022387993 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031090997 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.02268583 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.02253361 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.02248527 seconds)
  done (took 1.203826857 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.022521974 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022884377 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022815177 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020515284 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023497733 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.024651491 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.025676612 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.022701439 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026480771 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.021522251 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.021671126 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.031391175 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.021134676 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.03090368 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.025956005 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022569776 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.023770274 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.021829938 seconds)
  done (took 1.385740471 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020893726 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.021383274 seconds)
  done (took 0.995520936 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019974866 seconds)
    (2/7) benchmarking "second"...
    done (took 0.0195784 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019827857 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019663681 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.019959541 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.021246572 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.021412225 seconds)
  done (took 1.092476005 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.355723929 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.082823246 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.292006906 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.025037275 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.021159923 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.209024687 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.020112627 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.020581682 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.020339555 seconds)
  done (took 1.999009201 seconds)
done (took 9.720846477 seconds)
(8/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.038653778 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.137325449 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.040120959 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.409217324 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.045514213 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022175117 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.071861981 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.11221215 seconds)
done (took 1.842566909 seconds)
(9/22) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.175720111 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.231898295 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.171278938 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.021924182 seconds)
  done (took 2.384661425 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.276643386 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.033878725 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.029288607 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023678167 seconds)
  done (took 1.337437695 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021817919 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026839515 seconds)
  done (took 1.016723842 seconds)
done (took 5.884205906 seconds)
(10/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.020739959 seconds)
done (took 0.984364422 seconds)
(11/22) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.200438513 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.170672302 seconds)
  done (took 1.329816038 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.021892404 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.022038404 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.04584485 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.021442299 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.06137976 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.124306695 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.113419397 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.021733536 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.021376457 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.022310765 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.02157203 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.02219405 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.022129788 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.021285491 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.065019891 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.021761158 seconds)
  done (took 1.620643541 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.068292034 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.151803765 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.06687514 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022329986 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.063493365 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.021840457 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.022561827 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.021758916 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.021861502 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022240427 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.06697141 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.091013378 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.022060027 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.022001829 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.022574144 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.021875702 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.022052827 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.021815142 seconds)
  done (took 1.736723287 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.068418573 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.0221229 seconds)
  done (took 1.059463639 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.121755137 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.057492425 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.095640493 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.273963411 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.055315653 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.234344861 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.068209631 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.064852246 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.057724892 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.05988764 seconds)
  done (took 2.053787942 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.050897911 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.046350809 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.23522938 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.046111608 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.029424681 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.024540571 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.032305228 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.023353011 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.034101156 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.027683807 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.066231671 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.025785312 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.023518051 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.06667698 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.023283623 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.05311509 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023603255 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.02300593 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.029932257 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.022733778 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.022349295 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.022568534 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.13656995 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.02264357 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.023702853 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.022612176 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.022555924 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.026656851 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.026897434 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.022592071 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.022462362 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.024995953 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.0227055 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.033130366 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.022666711 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.022318951 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.022477073 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.022464573 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.022517039 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.022908133 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.02256694 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.022326594 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.023602307 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.02259676 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.028968214 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.025344846 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.023314603 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023410421 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.0293713 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.023088059 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.023636064 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.0229412 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.023155125 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.023159354 seconds)
  done (took 2.815558981 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.059355126 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.052999258 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023918686 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.060328967 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.05640151 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023474375 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.06401286 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.053473491 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.062897015 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023145746 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022638707 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02116369 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.022756052 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.025306444 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.063506861 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.055539498 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024192338 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023112452 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.055266394 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.055312272 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021281279 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.057006998 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.060016259 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.053185952 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.021370771 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023326676 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.021021397 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.021247341 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.02076045 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.022273458 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.021445592 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.022775945 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.027257025 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.021672643 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.021091121 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.02113376 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021043356 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.022037758 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.022787359 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.022028283 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.021341184 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021049939 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.021554735 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.02162824 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023428489 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.021485215 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.021428748 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.022499611 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.021645875 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.021622935 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.021625171 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.021419417 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.021628599 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.022534389 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.023032412 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.023447492 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.022698842 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.021543403 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021559786 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.02332659 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.022562207 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.02337268 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.022148453 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023259944 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.02129196 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.021308726 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.022618885 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.027122802 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.021260827 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.021207599 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.021292642 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.021118827 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.021303022 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.021144362 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.021296496 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.021344915 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02138283 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.020913093 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.022621326 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.021503132 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021149181 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.020646744 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0212892 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.021248214 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.021188443 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021345974 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.020495233 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.022016876 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.021368262 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.021077539 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.021366329 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02125886 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.021001762 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.021399494 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.022068632 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.022635693 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.021408716 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.021138711 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.02113551 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.021603475 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0213603 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.021082848 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.021148483 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.021122724 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021330927 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.021533328 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.02075485 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.023572536 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.021408329 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02094216 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.021590839 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.024386374 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.021133492 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.020806997 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.023112513 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.021278019 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.021206303 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.024466705 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021323554 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.021710311 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021554286 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.021189107 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021645084 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.021248791 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.021296868 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.021146833 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.021146333 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.021123258 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02146657 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.021253648 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.021038905 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.021351883 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.021277921 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.024351486 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.021176599 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.021823332 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.021610203 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.021353603 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.021527698 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.021310098 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.021569613 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.021376119 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021172497 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.020926543 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.023641647 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.021162573 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.021198575 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.021058448 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.023619933 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.021105708 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.023943421 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.021052211 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.021040506 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.022448513 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.023467047 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.021287193 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.024301634 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.021409415 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.021157109 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.021010823 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.021307586 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.020650034 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.021513716 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021300764 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.021080349 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.02077518 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.021432159 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.021371589 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.021052489 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.021046153 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.021456588 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.021353759 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.021399661 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.024483548 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.022648942 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.020875295 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.021357444 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.021753063 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.021149343 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.02089914 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.021112676 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.020997737 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.026634345 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.021280252 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.024409382 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.021260044 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.020928827 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.021688427 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.02224405 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.023225178 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.023670392 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.025056596 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.021141277 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.020993238 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.02089247 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.021263272 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.021112975 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.020742813 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.021102522 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.021224834 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.025561682 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.021409322 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.022000266 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.021128545 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.021778851 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.021309337 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.021298962 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.025757977 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.021291653 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.021313455 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.020751108 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.021212098 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.021171821 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.023697466 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.021366611 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.020985637 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.021111664 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.021331343 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.021483743 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.021232187 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.021200486 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.021215324 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.020848417 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.020765297 seconds)
  done (took 6.381024932 seconds)
done (took 17.962166873 seconds)
(12/22) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.070517935 seconds)
  (2/4) benchmarking "arrays"...
  done (took 0.047299455 seconds)
  (3/4) benchmarking "structs"...
  done (took 0.04696847 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 0.029049942 seconds)
done (took 1.195792415 seconds)
(13/22) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.117975757 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.07284907 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.124803608 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.081011713 seconds)
  done (took 1.366656658 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.060629504 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019064733 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.043619094 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.053718307 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019176017 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.039139865 seconds)
  done (took 1.221647964 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.225893159 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.15409373 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.158471963 seconds)
  done (took 1.522737603 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.152506016 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.257785244 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.263892503 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.153165134 seconds)
  done (took 1.822029871 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.042662059 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.082466013 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.034806446 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.068298719 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.039356119 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.021958074 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.087575593 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022206186 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.047418316 seconds)
  done (took 1.488394817 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.070263015 seconds)
done (took 8.470415342 seconds)
(14/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.197550455 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.025672846 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.037873866 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.027776728 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.111751415 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.019407322 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.118432247 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.030213424 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.099396157 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.177573504 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.16482779 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.046009519 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.039789942 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.047490032 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.114431514 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.031453877 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.030298029 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025740959 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.125638952 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.111852995 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.119775632 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.02898767 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.094139433 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.030028681 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.092583017 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.086189813 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.170642007 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.18373307 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.154933442 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.031284197 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.113237421 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042849221 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.102540293 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.11203432 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.020247254 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.043919033 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020212144 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.119135374 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.097873406 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.191779512 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.172279361 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.026844198 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.138208311 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.025199326 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.020169049 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.030209803 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.030407619 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026152101 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.03881872 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.026687931 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.040454357 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.027023671 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.116109417 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023608422 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.081399332 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.136286369 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.162087631 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.095023278 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025392706 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.039100835 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029543551 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.134503306 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.034723557 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025462778 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.030249622 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020088194 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.019893424 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.03234671 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.0207623 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030616767 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028916428 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.086375951 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.031478841 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.069721507 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.029922412 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.088138226 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.083856866 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.041134386 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.045471831 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028004346 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019284938 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.167404429 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.020104681 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.042850581 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.025918227 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.04599075 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019973421 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.031888493 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.171663271 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.135078648 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.077368108 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020669174 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.293296828 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021012738 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.043212403 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020982444 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020715325 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.163763249 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020586301 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.021151682 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.030955952 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029220408 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021134417 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.17608517 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.089675775 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.02716503 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.026787022 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020350963 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.02603949 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.02192031 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020259659 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020337764 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.102592503 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.025742867 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.020549564 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.094775299 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.107857697 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030500535 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.035745314 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.081151879 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023761503 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.02659837 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.02847596 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.120568436 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.026196807 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.119686691 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.022269448 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.041385338 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.09641069 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.091501768 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.092523313 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.020722616 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.124558073 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029731267 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.020460584 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027075539 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.055449554 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.029079861 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.025559546 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028088526 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.27494737 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030355095 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.026117928 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.099991226 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019772975 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.084814562 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.089470859 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.108004673 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025408686 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029487232 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.083556928 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042486715 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.045579663 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.04243336 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.019918388 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.020874251 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.020331011 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.025824986 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.0199468 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.021419031 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.031182284 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027272584 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.025023843 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.119200544 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.026063146 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024721872 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.128797252 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031592897 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.087545145 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.037678133 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.0212677 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.092509479 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021872078 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.03481133 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.088914158 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020583306 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.096551786 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.021429689 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.021368084 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.025351302 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021105956 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029663088 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.034103615 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.021656485 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.030838961 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.02736246 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020307041 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.091516272 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021113933 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.169790552 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.090600404 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.086908929 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020465285 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.036753417 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020487973 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.119691569 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.021006436 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.075457532 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.101545843 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.032776281 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.03450539 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021254319 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.089063523 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.033458458 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.024720486 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.086196069 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.110769176 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.086642465 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.025937526 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.12080033 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028907513 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020596236 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.025846418 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.029348752 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020657851 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.088949379 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.025203128 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.02053123 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020553909 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021068846 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019932325 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.040390317 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019775496 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027785329 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.025626708 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.023468313 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021207927 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.01970217 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028849729 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.098153364 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.109756482 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.026301298 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.033734061 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032097655 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030666504 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.075647994 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.024060151 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.142245597 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.01992717 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.03008531 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042544099 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020647097 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.020477442 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.025034251 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.035478501 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023719898 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021288928 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029039766 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020896021 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020134531 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020113939 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020820582 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028445748 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021781727 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019859116 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.020104996 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.024068509 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.02498838 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.019974957 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.026106872 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.032721334 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.321167442 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.020509796 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.020993171 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.02439962 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.024719702 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020786179 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021096114 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020195905 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.020603213 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020551401 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.020184852 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.051955651 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.019865074 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.019937488 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.03667321 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.024640228 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029444929 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.102855636 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.033414955 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.019848728 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019311619 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.125426135 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.083271586 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.037428152 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.035642193 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.01976357 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029449841 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.019879309 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020627663 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019167774 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.043256405 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.019702219 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.019925735 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019069468 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.01976598 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.072453384 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027138194 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.01991361 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.023507226 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019836479 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020047833 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.044793486 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.019931593 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019909477 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034255074 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.030070204 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.14203508 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.03174823 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.022532825 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.07494894 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019242862 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019939394 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.019859401 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.082271911 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.043081509 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.022276443 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020176787 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.02658794 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028844992 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.076876805 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.025183614 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022372804 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.026844047 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019269163 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019862964 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.04230025 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.042409777 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021396135 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023149718 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019872166 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.01969796 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.088737455 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.023007184 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024497992 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.158322411 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.020721349 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027949668 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019133613 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.322130202 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.019889689 seconds)
  done (took 18.952383908 seconds)
done (took 19.954012014 seconds)
(15/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.107008397 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.028427202 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.082408094 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.051289766 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.027765283 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.031178518 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.037116089 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.05988735 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.149296126 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.050184106 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.105290739 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.046847331 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.048621338 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.153869707 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.028273717 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 0.023710171 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.085369161 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.043689385 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.084002831 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.085803383 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.048544609 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.04912054 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.085847536 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.049564182 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.08504994 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.127469875 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.053275859 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.089567028 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.023218465 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.053682703 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.030659185 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.025740165 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.034153208 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.048971212 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.03716024 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.029898316 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.094448182 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029214443 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.047524893 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.061174392 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.041159435 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.053404588 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.031916681 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.090968866 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.057717481 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.085236959 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.04899259 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.0915789 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.088505369 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.033487701 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.041153584 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.061698985 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.029418194 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.090263556 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.100677061 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.077375198 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.066011701 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.101788682 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.026946231 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.065708299 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 0.019851836 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.059268273 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.02979081 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.044678001 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.039178017 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.064297703 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.08806918 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.088352451 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.026940377 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.055388678 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.079369861 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.06167977 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.059137774 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.022967055 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.076961137 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.087847441 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.088264128 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.026612949 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.086128569 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.09085233 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.041930871 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.029011733 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.073151918 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.091633725 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 0.020203233 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 0.021239216 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.02681348 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 0.021173781 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.05880628 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.023256065 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 0.020496933 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.080924457 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.085409239 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.023275874 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.029999932 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.061416417 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.023014078 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.073587999 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.096071559 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 0.02851682 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.045363812 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.047027193 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.04886907 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.078171484 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.080581154 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.046563801 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.029692429 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.027325046 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.03669251 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.021405388 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.027328629 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.054091296 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.051309508 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.077441997 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 0.021058659 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 0.022878715 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.026928856 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.020610026 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.025160938 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.021342755 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 0.019707836 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 0.019535424 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.029474162 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.029372121 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.085187694 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.052204847 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.035233754 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.029484197 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.037326502 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 0.019496724 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 0.029088859 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.080676369 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.051822246 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.023418457 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.030422477 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.046675437 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 0.020683969 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.078492029 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 0.020803712 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.040917077 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 0.02091464 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 0.022705133 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.083856722 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.027672796 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.155604738 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.054085927 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.053471351 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.03058491 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 0.024027358 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.021530316 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 0.024750544 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.04633997 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.023834255 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.054646178 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.047165825 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.056352627 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 0.0231198 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.029717652 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.020052053 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.023048164 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.049234034 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.080459966 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.078522758 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 0.026259897 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.056219768 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 0.023124829 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.021047632 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 0.026499638 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.029851911 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.036412144 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.032939557 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.025639607 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.045027117 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.054034956 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.092765249 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.030751478 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.029972629 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 0.029285918 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.038168258 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 0.019901854 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.061339019 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.053930769 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.032180426 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.028342436 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.054715904 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.054083747 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.025559783 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 0.028333394 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.057380893 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 0.020970304 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 0.029423813 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 0.024922547 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.027694041 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.037696004 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.022977905 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 0.020673982 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 0.020991349 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 0.023256692 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.100866313 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.021210575 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 0.022856018 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 0.022785654 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 0.020948501 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.020593752 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 0.027074627 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 0.020767143 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 0.020984469 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.030642622 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.059824162 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.027330845 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 0.024002127 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 0.022926468 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.023437399 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.05413267 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.085131528 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 0.023373247 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 0.02292528 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.023064255 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.032233909 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 0.02373671 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 0.028397478 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 0.021469959 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 0.020939305 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.02367949 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.082504396 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 0.019840686 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 0.020059115 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.03091732 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 0.021537315 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 0.023066031 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.021733422 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 0.028641531 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.07294272 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 0.021000434 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.027108782 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.029467148 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 0.021209303 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 0.023216531 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 0.019949631 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.023660445 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.024883562 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.029992432 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.027593652 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.0303715 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 0.023549792 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.023115029 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 0.021318084 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.052041016 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.045453182 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.023041558 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 0.029434901 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 0.02117794 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 0.025674833 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.077621893 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.033920174 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.061527945 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 0.021228146 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.04936206 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 0.020794729 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 0.019826625 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 0.021369397 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.023263434 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 0.021719303 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.081067045 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.0435322 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 0.020438607 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 0.030082728 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.030472097 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.023643576 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 0.024320622 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.054469283 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.023374788 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.047829587 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 0.021486598 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.09386753 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.03593492 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.027141785 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 0.026232705 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020654495 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.030648317 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.027416577 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 0.021951914 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 0.021680839 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.021674112 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 0.031056943 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 0.023746834 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.036630854 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 0.021215129 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 0.020117144 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 0.032303928 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 0.020793273 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.024221264 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.075285687 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 0.021186502 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.054132559 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.021139486 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 0.023865021 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.020865135 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.023513063 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.030670688 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 0.032316987 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 0.021073655 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 0.02335842 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 0.028209335 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.082854252 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.027695033 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.020575215 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.023125075 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.030776233 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 0.024182275 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 0.025731203 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.023267788 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 0.023322464 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 0.020006248 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.035282913 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.030736374 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.021099399 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 0.022986817 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 0.019812238 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.024116756 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.046296774 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 0.029390772 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 0.026025872 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.037023964 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 0.019769511 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.084235865 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.021447949 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.023687115 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.021219523 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.045421545 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.022981355 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.023019303 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 0.022999834 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030167116 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 0.023388117 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 0.019683115 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 0.02519744 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 0.021270826 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.096093644 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 0.021421638 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.043203981 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 0.020753452 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 0.020016009 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.02730819 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 0.019754683 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 0.027218712 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.035627438 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 0.025635661 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.0231712 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.021246282 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 0.021218917 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.022844508 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 0.023738722 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 0.028325561 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 0.026315397 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.0394074 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.021515169 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 0.023543553 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 0.023156952 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 0.019399014 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 0.023822335 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.02971878 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.023248093 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 0.023559814 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 0.021704854 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 0.021827575 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 0.02157511 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.077499992 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 0.026622733 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 0.025268313 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 0.02293552 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 0.021360323 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 0.020012654 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 0.025404771 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 0.023165261 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.06027453 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 0.02580038 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.025539729 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 0.024590252 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 0.020641409 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 0.023624015 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.035347692 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 0.021079518 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 0.021288287 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 0.021233851 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 0.019342702 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 0.021373437 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 0.019816808 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 0.025647588 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 0.019953685 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 0.020916876 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.029319046 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.057067526 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 0.019872534 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 0.019705035 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.021346605 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.046359634 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 0.028461263 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 0.020609056 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.045934584 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.030372605 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.024659214 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030969032 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.030640898 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 0.020077843 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 0.020184495 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.020950107 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 0.021716287 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.02070075 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 0.020431184 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 0.021317392 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.022968438 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.029145674 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 0.031254475 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.024696381 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.019220459 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 0.02846413 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.028084962 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.021023766 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.02911241 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.020635627 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 0.019902831 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 0.021160495 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.0226928 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 0.025398722 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 0.020407908 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 0.028648524 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 0.023175592 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 0.02819535 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 0.022920447 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.025857563 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.03074136 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 0.023535035 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.019069891 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.025631859 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.15635721 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 0.02350939 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 0.021541067 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.023411406 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.027691249 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 0.020192916 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 0.02047114 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.023376086 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.031535866 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 0.029064404 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.028963644 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.020129865 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 0.020159272 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 0.021680255 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.023403918 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 0.030021778 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.026041154 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 0.021556041 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.025854517 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 0.025826902 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 0.023357313 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.025822238 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.065386039 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.020156953 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 0.021269592 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 0.020714277 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 0.025607474 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.047293307 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.025847647 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 0.019807269 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.026972524 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 0.027695159 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 0.022996458 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.036017142 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 0.022925114 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.0804444 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.023061931 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 0.029403646 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.021039729 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 0.020368378 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 0.020905536 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.022895441 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 0.029024528 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 0.029256062 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.029367127 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.023695423 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.024178738 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 0.02459974 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 0.020435975 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 0.02092362 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 0.020658273 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.019139872 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.019811244 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 0.025659803 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 0.020728517 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 0.0199723 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 0.020679491 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 0.020793492 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 0.023402906 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 0.023589355 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.029557273 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 0.029767959 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 0.023259683 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.019318152 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.019651639 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 0.02155305 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 0.019043229 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.021132294 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.021316085 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 0.025267803 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 0.020386834 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 0.019775792 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 0.02024732 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 0.025829431 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 0.026900635 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 0.029220652 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 0.021149431 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 0.020827296 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.022906933 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.02291845 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.019687334 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.026757241 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 0.019151573 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 0.029487311 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.030700023 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 0.020970789 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.023071009 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.022843508 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 0.019854459 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.023191258 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.030584727 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 0.023680096 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 0.025119778 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.020403012 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.027233796 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 0.020149868 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 0.023886547 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 0.021508934 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 0.031596535 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 0.019921496 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 0.019985792 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.02741786 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.021427442 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 0.021046785 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.02138558 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 0.02102882 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.0231924 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 0.023020295 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 0.020962606 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 0.019903526 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 0.023114396 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.01944746 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 0.025631118 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.020360961 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020197831 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 0.021274494 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 0.022860673 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 0.020894532 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.021181253 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 0.023865551 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 0.021093634 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 0.028483921 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 0.023125576 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 0.030715561 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 0.019507555 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 0.023813994 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.029034974 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 0.023778988 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 0.023746196 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 0.020245191 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.030950786 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 0.023358329 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 0.024646545 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 0.020856278 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 0.028659953 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 0.024148082 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.023086535 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.021136938 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.027230393 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.020610424 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 0.023544051 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 0.028400291 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 0.023173995 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 0.028521813 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.02340757 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.023217418 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 0.0213808 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.028621976 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.023219921 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 0.028794584 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.021987656 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.02026479 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.029958317 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 0.025672897 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.023285612 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 0.024155147 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 0.021236919 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 0.021153373 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 0.031578091 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 0.023741817 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.025965829 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 0.029613883 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 0.028967667 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 0.021228106 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 0.021570698 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.025275905 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 0.02074735 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.021566904 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 0.024023748 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.023250446 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030161123 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.025732379 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.019465054 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 0.025968311 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.0284319 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.023347912 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 0.021949503 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 0.019430278 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 0.021173473 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 0.02300013 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 0.021515504 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 0.020979244 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 0.029076964 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.020998707 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 0.025426298 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.023451302 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 0.026179194 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.023116996 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 0.025399592 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 0.019967189 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.025359025 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.021409205 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.02708095 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 0.024610163 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 0.025188703 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.027261117 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 0.01988265 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 0.026034718 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 0.020041265 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 0.021318681 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 0.023189895 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.02868924 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 0.020888879 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.030250089 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 0.026034366 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 0.021450762 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.029495445 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.021259954 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 0.023905875 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 0.021540442 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 0.020960264 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.023128371 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.025826688 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.021959825 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 0.021383174 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.019968538 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 0.021872572 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.023104987 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 0.021636 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 0.029605481 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 0.030078788 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 0.021736564 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.020395989 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.019979901 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.024502536 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 0.021561959 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.028839857 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 0.029605046 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.025896516 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.023408071 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 0.021681614 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.01940853 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.023325903 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 0.023289461 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 0.024497173 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.024067967 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 0.021320893 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.025980102 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030001153 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.020757862 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 0.020674918 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.022892881 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 0.021086314 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.020963839 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 0.021011105 seconds)
done (took 23.95326745 seconds)
(16/22) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.071044934 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.059238857 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.049714519 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.035873296 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033579526 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.034372527 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.026597926 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.036715527 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.027953676 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.039041515 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.044444516 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.040800056 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.039885756 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.039931144 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020123359 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.032551244 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.021129425 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.040558275 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.034561981 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.042441664 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.048058862 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019350326 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.026243155 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.037997943 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.023943856 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.034209659 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.042658698 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021660269 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.037393883 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.033099916 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.044115839 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.023277247 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.021527697 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.0366449 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.034092708 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.028048692 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.02059239 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.022632136 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.032742871 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.02041435 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.050638522 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.034861147 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.02287916 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.020917116 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021338051 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.035127203 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021461819 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.020237089 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.024572859 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.022066923 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.023699193 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.02627825 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.020280455 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.035975815 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019807639 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.020951608 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.019626568 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020156141 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.02067828 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.020498669 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.02000773 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022621547 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.023189148 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.028617719 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.021557112 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.020542911 seconds)
  done (took 3.090116024 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.042353115 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.061643913 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034652767 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034793813 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019901115 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020354641 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020516596 seconds)
  done (took 1.326487106 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.079145071 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.025795834 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.028926774 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.029864258 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.039628324 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.027365062 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.031447944 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.049562201 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.051858878 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.042378662 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.035923726 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.03033832 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.025556278 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.029614504 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.049130493 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.03307654 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032301708 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028261596 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.025454965 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.030023 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023694345 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.052332499 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.031262385 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022629125 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.033175523 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.025046597 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024819554 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.057277314 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022393862 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.022016578 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021179638 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.04133013 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024548692 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.023876484 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020910407 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020961091 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.023624443 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021229442 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.022908706 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027774744 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022441778 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024441558 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024234662 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022942334 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.024010633 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.023071116 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022802306 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021911214 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.022358598 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.02600832 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.030737397 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.025274544 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023141336 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025515802 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028338561 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025248946 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028456541 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022639013 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.026234349 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.031242378 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022953969 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.029652836 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.028879616 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022067078 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.028678553 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.028462356 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024673254 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022048992 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021840208 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028017302 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022819864 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.02874929 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024615841 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.022954087 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019305443 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027713639 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.031796675 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.031531828 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.03149779 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.030356792 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021458044 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021872065 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.031000564 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.031505042 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023955014 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020989841 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020606937 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.035342154 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.042772487 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023280125 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025406878 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021571393 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.030563224 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.022748493 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.022643831 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.025510933 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.019664916 seconds)
  done (took 3.843393785 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.032523871 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021086104 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020501927 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021072516 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021533303 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021089665 seconds)
  done (took 1.245148725 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.052172771 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.020709042 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.020887167 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.020011355 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.041391609 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.021627491 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.021896943 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.020085935 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035370449 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.031620342 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.021593827 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.023009868 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.022357705 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.021040398 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.021990383 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030986107 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.022217916 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.023903987 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.030827596 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021011843 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.027489975 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.020768258 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.02088952 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.025139306 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.021644189 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.030966882 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.026840707 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030770784 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.030611386 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.020302807 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.020960271 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.021424787 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.024770757 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.020177741 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.022200141 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.024800692 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020410515 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.022680766 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02292327 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.021476934 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.022893271 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.020846607 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.022481662 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.022486805 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.020305719 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.024615718 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.022769131 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027492763 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.021978821 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.022750717 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.022843914 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.020253721 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.021427039 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.022815606 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.0246283 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020427687 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.022709824 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.022141077 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.020931133 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.024828253 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.020184977 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.021437895 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.02029489 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.021724651 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.024362933 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.022912581 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.024661737 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.021017364 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020967101 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.020169758 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.022690926 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020248696 seconds)
  done (took 2.804608553 seconds)
done (took 13.420238679 seconds)
(17/22) benchmarking "inference"...
  (1/8) benchmarking "abstract interpretation"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 2.286322504 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 0.045504479 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 0.180314515 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 0.502475798 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 0.263509428 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 0.082792267 seconds)
  done (took 4.444787304 seconds)
  (2/8) benchmarking "rand(Float64)"...
  done (took 0.537716552 seconds)
  (3/8) benchmarking "sin(42)"...
  done (took 0.074838479 seconds)
  (4/8) benchmarking "construct_ssa!"...
  done (took 0.500769209 seconds)
  (5/8) benchmarking "abstract_call_gf_by_type"...
  done (took 1.886485493 seconds)
  (6/8) benchmarking "optimization"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 0.102833561 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 0.09368666 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 0.514520894 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 1.957722869 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 0.670599779 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 0.196482029 seconds)
  done (took 4.667811158 seconds)
  (7/8) benchmarking "println(::QuoteNode)"...
  done (took 0.656232009 seconds)
  (8/8) benchmarking "domsort_ssa!"...
  done (took 0.183158441 seconds)
done (took 14.050517599 seconds)
(18/22) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.43517514 seconds)
  done (took 1.530505525 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.739286081 seconds)
  done (took 1.844913256 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.048473359 seconds)
  done (took 1.162631377 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.28510529 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.467812562 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.636390075 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.074811615 seconds)
  done (took 2.567704029 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.678655288 seconds)
  done (took 1.807447763 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.201190034 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.150294811 seconds)
  done (took 1.488898373 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.307559568 seconds)
  done (took 1.4256417 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.057600351 seconds)
  done (took 2.176219505 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.210270711 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.125809673 seconds)
  done (took 1.455574757 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.393370551 seconds)
  done (took 1.512722861 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.329266939 seconds)
  done (took 5.44767834 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.170322235 seconds)
  done (took 1.334180906 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.227492598 seconds)
  done (took 1.350906894 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.602547979 seconds)
  done (took 1.723584279 seconds)
done (took 27.971661623 seconds)
(19/22) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.03876273 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.035822566 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.035322439 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.032613174 seconds)
  done (took 1.258453549 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.027398328 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.040542365 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026103392 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.026457332 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.030179158 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.025055701 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026371091 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.031511756 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023602518 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.030886045 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023059842 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.025347692 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025995962 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.030899781 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025674551 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.027601184 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.02483929 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.032508799 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.024689649 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024674493 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026061105 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.02486097 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.025127298 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025982856 seconds)
  done (took 1.778699455 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.036545709 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.032747566 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.031915348 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.032165376 seconds)
  done (took 1.26497101 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.028154631 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.028261526 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038568378 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.034149927 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.028536091 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.028682915 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.035335039 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.0352823 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.042084159 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.038328267 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.022319057 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.022156639 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.021005284 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.027743945 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.03622484 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.021353106 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.02805058 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.028703163 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.027913029 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.030140089 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023994992 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.020002005 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.028369666 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.028221887 seconds)
  done (took 1.829997737 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.036024654 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019875846 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.041809667 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.041614535 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.042162758 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.020014596 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.033975127 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.042215655 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.154003647 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.021071139 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025780731 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.020946525 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.051568203 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.021093078 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.03477859 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.048635035 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.049165359 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.02448035 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.047243349 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.020948633 seconds)
  done (took 1.929630836 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.02620036 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.02521026 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.021144308 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019255989 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030372178 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.031937038 seconds)
  done (took 1.290768967 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.022467313 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021065326 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.02138803 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025694674 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.020815428 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.020888733 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021382276 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.020055897 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.020125785 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020970611 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020971302 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021432999 seconds)
  done (took 1.386606393 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.142562597 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.024829118 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023713301 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020078578 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021550815 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020727087 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.033509366 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022534993 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.03818869 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020583936 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021139066 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.027539754 seconds)
  done (took 1.547349539 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050278986 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053027905 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070942525 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05587908 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068818088 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035108253 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.064239775 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.029103099 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.104700837 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077676982 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061136236 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038003404 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034975048 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024349766 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032909763 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044601576 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086966721 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025703012 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056709563 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120604791 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06185014 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.068029579 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069650168 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061343576 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032816991 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068903797 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044024543 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033922654 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.058384795 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052065665 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055118001 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.053193866 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024935038 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.023152238 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089480556 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.050456427 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057148228 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.044277363 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.048578867 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.039316931 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044832357 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.023733417 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.034455156 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.058438434 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.028190281 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063045969 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.036006438 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047892245 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030162002 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078380886 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054420787 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052666738 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033954508 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055526134 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062143714 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037255695 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.297418347 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051337665 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026708373 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.067822369 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.047289837 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.040590845 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038317064 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02982563 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095272583 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032048515 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.063231955 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050240862 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.032941125 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040998174 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055977341 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076167113 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058792185 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.060667317 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059833249 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041932963 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061015268 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.042625373 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.083446703 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035440373 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025623997 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.056686913 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086217002 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032466599 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.05447597 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061583293 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049307246 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026893683 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.03428801 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.067154149 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029473148 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.051254751 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024777418 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.087417562 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058595561 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032730272 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050920979 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062091357 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029450644 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07214465 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04838078 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025854913 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056839335 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050510075 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067646948 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033224312 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.027985831 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053093396 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.037160966 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.103333085 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039175712 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.170281189 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051721697 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.054218494 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038476952 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145304499 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.041440057 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071351429 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050295751 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036305691 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027174277 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.045936295 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048207529 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045177031 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05352356 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03326708 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.03513092 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035864611 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04946239 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047107984 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02515853 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.060619476 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.054210198 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.023297882 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027368278 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.028027477 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073115282 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.036978231 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05647579 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067204507 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028195737 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057110309 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042898676 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058317064 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.051512075 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059117707 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.052249555 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.129911029 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.030730249 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.029925078 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043850226 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080038699 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.063392057 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037041794 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.036198988 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058312683 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062468767 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042817207 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.057258314 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036568184 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047956472 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.047968555 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074963569 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063997992 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039331479 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049731974 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043458298 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.056024411 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026081763 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088305452 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038601451 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06375733 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030491402 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075626417 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.064095495 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.03243799 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033591031 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.049240336 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.040103482 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057008593 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076996359 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.043226414 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.025988964 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031100694 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074032965 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024518711 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05109084 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.042369147 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.044317737 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053116649 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.037129417 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031698589 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022297278 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054329636 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076216943 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024112591 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.058917275 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.058225841 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035673917 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.061140278 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022054505 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049488109 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075007004 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056487048 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050890291 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055827915 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043679602 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053335815 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.056414332 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.053749972 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0301338 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.072799696 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074448127 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030342504 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033122254 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.047695562 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086381056 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.071339065 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.053233947 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050561078 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.043905802 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052331058 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035976552 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.053375814 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078170593 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070087655 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.071865564 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.031661444 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051462225 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.20578168 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050032331 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.031684132 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064458159 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.024989285 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050997234 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.026149223 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053964057 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029451128 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.110012029 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.030331658 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052839361 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024128874 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.022781143 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078502 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.060957716 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03839138 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036054687 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.071075461 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075267417 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.030290653 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054788417 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052137751 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048955688 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050205639 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048217762 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.040308991 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029631336 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052076933 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02996968 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.025503573 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.057544535 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031246934 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056267887 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031795258 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026782186 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.05643079 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049932773 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028932146 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027456124 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041632973 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.073531461 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039472353 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035596119 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057181397 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054679854 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074758682 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.041212994 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.051440288 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063361227 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030195201 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.046912485 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.023743842 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.041362911 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029313061 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.061522694 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.025694613 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.040307695 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022547017 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.069813892 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.022712706 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.048349132 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.049915279 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046241824 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069391183 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041393041 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070823914 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027473576 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057636516 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043668647 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.036199446 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029924569 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047713437 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049348418 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059979436 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.043546143 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053811681 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061510033 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042786039 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.079520033 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033471492 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069898373 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057077607 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.061744012 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.03706525 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055394707 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072702467 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048218872 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04823132 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029369244 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032989659 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051506524 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053707497 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085230926 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043891042 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.025790449 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03856085 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040844881 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050836729 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043639329 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027153017 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.062196385 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037823779 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.039066368 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042261722 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.019801699 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.048248575 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025353909 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037277101 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.037272564 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035949627 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044813136 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055894674 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06400355 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048471056 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077783717 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.05307561 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.075285621 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.066736566 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054847719 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049312084 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028553219 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029295161 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066018015 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.057190397 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.071257187 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.052556806 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046260242 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052660211 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033315594 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.04856314 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.038715908 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.209014636 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028121588 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.024468252 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022897192 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.026167432 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064625462 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048986776 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045421183 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042019123 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026219023 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050810424 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050830866 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024885762 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03089944 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028947898 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.035283643 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.026915971 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036498187 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.06357698 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.043533045 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.043048429 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044163984 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067140283 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.057992382 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027642103 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076527961 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068710167 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026984378 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030291694 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.024971217 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.028804552 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052495145 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058908516 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060772567 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.025000259 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033649476 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.036076475 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026373607 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.024927571 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.035010604 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.040038053 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055633484 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041313316 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.061591587 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054963353 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025908794 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049021539 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.039569076 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04668722 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.049177244 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057593834 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057253939 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.070759551 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04815777 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049337274 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026204085 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.025243075 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026430368 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029572209 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04858118 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.030480481 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02653346 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072150151 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.042414497 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050083882 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049217653 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036261442 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024810148 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069175015 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023670042 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069606 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024997005 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02725737 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.033420166 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02811011 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028507337 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056847131 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050534481 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042198193 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056957359 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04950736 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049903391 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088458821 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024419506 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079167199 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025772499 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.023747477 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.025758569 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046099043 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027597924 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.057073285 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050384278 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032556557 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040848445 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024193491 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070519662 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.045699096 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.043030857 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033818539 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.02778979 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070713231 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.030115129 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.019639254 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03700418 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05110572 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026181211 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046815734 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030200723 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028988928 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.051629193 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.570665744 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.035210423 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.025328461 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040730572 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078943071 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058647189 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032048412 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044296778 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.066799926 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.044807585 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.032865519 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05168888 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.136499661 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025659454 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029054677 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.038455055 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044231721 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043966893 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.047416319 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.03952827 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.046449197 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.037636151 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029913445 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051802346 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030762115 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.040580788 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046011501 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.029426431 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.030883551 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069863167 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.040259078 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.024668133 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027003602 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.200611223 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035421523 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040347242 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.023735691 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04889544 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.035616996 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044894671 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.040754798 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055307413 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065837517 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0332415 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060218917 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.047999693 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060092396 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033693192 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.026858735 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043744124 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.028310212 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026711261 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063784446 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.01995088 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.053961234 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043403401 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.046132272 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049042228 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043605899 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061944275 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043464347 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027699344 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036380068 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.044380779 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024318591 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.026597062 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.023907443 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.02846589 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043471538 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.022564542 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.028653018 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.05833138 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034527612 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048056141 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.039118774 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059827767 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029850927 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049161221 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058897637 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.032127049 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041811228 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058650294 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.068323459 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084564606 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.04874289 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.069602878 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069669054 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.025215638 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.020003175 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022881123 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.063160679 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.02895764 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.039202419 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029037156 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068698608 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.037531716 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037574447 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.188226525 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028763635 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03577287 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031579923 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023831921 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.030071269 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044225049 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033498715 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027812359 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.042494605 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.028665937 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0641135 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04615022 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033090687 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.033354906 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028127597 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038629562 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.05369907 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.074530107 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044023755 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.02405135 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.038257375 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050643283 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066240596 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.027369363 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027851609 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.069165228 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034635921 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.050938303 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.029583872 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067599506 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076419538 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044875431 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069896299 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.023374887 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030231739 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.031541236 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.076260392 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.024412777 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041601638 seconds)
  done (took 31.094400519 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.19160183 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.159039902 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.112437822 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.080272524 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.051940772 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.063938172 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.148180677 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.065782371 seconds)
  done (took 2.134338815 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.021473422 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.046670823 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.033740758 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.194511197 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.069130578 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020896941 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.019233639 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.034878971 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.020776366 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020206972 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.050824107 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020821409 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.021020262 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.448809879 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019712519 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.019207655 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.020728476 seconds)
  done (took 2.330581309 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.348792707 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.067930104 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.060668189 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.338728641 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.08103546 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.398722438 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.030072667 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.030653242 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.49552727 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.324425604 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.076468499 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.111075136 seconds)
  done (took 16.599900497 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.02796589 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.026977134 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.027194162 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.026842163 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027098422 seconds)
  done (took 1.367584924 seconds)
done (took 67.002031775 seconds)
(20/22) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.053657381 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.097159544 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021693792 seconds)
  done (took 1.38053124 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.029462008 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.02887242 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.028740494 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.026868293 seconds)
  done (took 1.346403103 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.028601524 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.03095903 seconds)
  done (took 1.290121475 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227484485 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.157015348 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.054332976 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.036924198 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033649344 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.034073963 seconds)
  done (took 1.347160671 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.023329105 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.02323693 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.023281958 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024176178 seconds)
  done (took 1.328037157 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.021713233 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020007534 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022323542 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.051316503 seconds)
  done (took 1.348351026 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.049197177 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.050067585 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.076534061 seconds)
  done (took 1.409603644 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.045554485 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.04436858 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.040978987 seconds)
  done (took 1.369199532 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.05567317 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.044734696 seconds)
  done (took 1.335108782 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.033469856 seconds)
  done (took 1.271895675 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.047633405 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.055315533 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.077671461 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.046003313 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.078699629 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.065027652 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.020204575 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.020091279 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.025683988 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.020233975 seconds)
  done (took 1.691504875 seconds)
done (took 16.840513012 seconds)
(21/22) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.034321913 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.32369763 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.31455209 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.036966803 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.623653848 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.309873259 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.93121096 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.040491086 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.049228241 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021850447 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.035118956 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.603915537 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.92824904 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.289133073 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.916069298 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.287279235 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.608050795 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023185274 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022199337 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02304227 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.913685267 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.02241974 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.024400476 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023376432 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.605388074 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.326699459 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023426627 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.286459248 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022626343 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026166129 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.316819812 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023705168 seconds)
  done (took 14.267531235 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.024215029 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.06949861 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026724875 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.033932926 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023640432 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023153165 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.028991533 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022144479 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.058547611 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02200756 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.035868919 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021377747 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025541503 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023175869 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.037765153 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022018933 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023892142 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022222298 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021798745 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02235377 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.036367541 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021693498 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022450227 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02219749 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022048176 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.032599749 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022666521 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021690383 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022826136 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026777517 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026825887 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.024263029 seconds)
  done (took 2.137811973 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071267441 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.071131579 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027348889 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.055260737 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.066499972 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023677425 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.093308413 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.040794532 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.061101875 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022022726 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.035743861 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021861188 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.052599229 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023559211 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.038306526 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022286914 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.0241846 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022283563 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021737739 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022182608 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.037178734 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021649949 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022313683 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022380364 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022439497 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.034242487 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022683483 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.02188989 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022187462 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025441162 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026851144 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023121823 seconds)
  done (took 2.367659845 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.023412624 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.025726671 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.026188764 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.032665273 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020754499 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022719345 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024123563 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.020703076 seconds)
  done (took 1.444164087 seconds)
done (took 21.46503145 seconds)
(22/22) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.037937306 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.023433032 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.027363582 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.0503156 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.029594757 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.019212107 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.022327528 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.029574399 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.027140818 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.02627085 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.02908486 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019323316 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.025166061 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.022504591 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.027409882 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.021452522 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.02668708 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025258281 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.02528601 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.026654075 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.023674548 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.026686243 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029905242 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.024433757 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.025168856 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.0242362 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.0301226 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.027517935 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.023704175 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.02425364 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.025739819 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.024643873 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.026423763 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.026347495 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.021334729 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.021401883 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.025421318 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.026209579 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.026486091 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.030769583 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.024803893 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.030553356 seconds)
  done (took 2.380706276 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024631926 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.028384324 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.023110173 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029033141 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027208894 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.02975524 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.026246357 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.027010184 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.026758916 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.025273988 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024246575 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026412962 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.027267247 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021765292 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027631816 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.025058009 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027996066 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022983447 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.028185711 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026941321 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026418809 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022082005 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028455656 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029132337 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023764727 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029251654 seconds)
  done (took 1.933938781 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.027412027 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.040871865 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.044210822 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088442337 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.054354324 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.038718254 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.037754723 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.042520387 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.043402217 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.020853118 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.038466089 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048997041 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.087656478 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027706173 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.050533679 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.035521326 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.032573325 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022850455 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028194491 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.130714545 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.040964774 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.036667119 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.049260507 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.078081629 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020329823 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.050195321 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.024332716 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.033595657 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028307123 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.030212975 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.025369651 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.02333481 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.022193088 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.031687521 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.025174648 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.01988081 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.039464672 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.034267267 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.033544574 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.051205929 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.023892034 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022345959 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.042383703 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.081742355 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.01970054 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.021747765 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.029168408 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033920028 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022715272 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.059414921 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.034732966 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.02134019 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.038131332 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022773893 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022900633 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036969406 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022929903 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023115175 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.03611854 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.02367171 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.040018967 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026751209 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035819567 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020001954 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029491556 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022572744 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.021365842 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019729626 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.048164692 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.026880319 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.057720571 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022531548 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019931332 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.029579992 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.028958668 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.027307876 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.019782467 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.034641053 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.031063717 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.02335406 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.036438899 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.022341262 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.023771082 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.074380833 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020856553 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.020089763 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.020041762 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.021622864 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.023167539 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021580237 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.032858853 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.021539721 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.023707136 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.040989249 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020889386 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021816435 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.021457004 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.02067293 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020354961 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.029636571 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.025228691 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023514199 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033130529 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021191854 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.023740948 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.045611408 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.028649797 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.019573994 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.020592063 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.021770034 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022107409 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.022246824 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.023951301 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023017763 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026009411 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.027673241 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.02548913 seconds)
  done (took 5.085729072 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.121217984 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.09578246 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.084705221 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.140357631 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.044778409 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.030539543 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.093400341 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.110548792 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.02174801 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.046054545 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067979229 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.048321803 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.042812993 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.053870277 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.053926167 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023239468 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.043285643 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.047725669 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.094649465 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.154620831 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.041980914 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028105954 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.047538141 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.04679901 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.025954522 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.045324615 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.036695986 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.029086454 seconds)
  done (took 2.99553737 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.022405581 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.058681533 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025238077 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.043132718 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.03206961 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022582511 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.022983406 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.021523289 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.033543564 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.021618404 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.022314635 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025455961 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025503541 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024564086 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022193818 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.030407357 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.030207656 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.02166785 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025077265 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.024911083 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.030901984 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.036724101 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.02519038 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.02148718 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024727361 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021193066 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.020307118 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.023841864 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.022238069 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021735967 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019691637 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.029992107 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.033493092 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.02345278 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021624716 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.02187766 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022540682 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022589454 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023086192 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.021036427 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020569883 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.02637807 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020598636 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.020716607 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.02775513 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024388742 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022670159 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023776396 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024660401 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019469536 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.023744332 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024211533 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.023980661 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029452184 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.024659265 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024560123 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022481567 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.031774029 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027264273 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021317628 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021334018 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.021591927 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023930223 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022448701 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.031036568 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023354088 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.0210713 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.022455825 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.022910605 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.027837516 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021346262 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.027869683 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019607367 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.02262057 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.022751368 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024295329 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.022522601 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.02093798 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021119684 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021238551 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021879756 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021298302 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020445449 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.025127687 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.021158858 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.021632777 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.021841617 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.021942662 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.021135149 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020900731 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.025644215 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023272157 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020917995 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.023904869 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.02742272 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024000808 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.036375487 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.022362678 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.023241569 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.02012875 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.035467775 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.02376583 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021926217 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.022955013 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.029792393 seconds)
  done (took 3.863605245 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.048702922 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023604597 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.039760544 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.053919805 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.033218107 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027461211 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.036316719 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023676127 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.044030179 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.022238205 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031637047 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021391793 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034515489 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030812774 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.024351802 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031944102 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024808916 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.04042068 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.037957187 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021483373 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.031623056 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033448286 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.034966804 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.038795717 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038464837 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.03921369 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.034686878 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024944181 seconds)
  done (took 2.198397958 seconds)
done (took 19.699576343 seconds)
RUNNING BENCHMARKS...
(1/22) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.297979 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.519508978 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.268422128 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.595576463 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.308830798 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.350852013 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.356896418 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.257380047 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.324523727 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.297322817 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.627572827 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.050195937 seconds)
done (took 60.568101637 seconds)
(2/22) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.314652666 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.408930936 seconds)
    (2/2) benchmarking "String"...
    done (took 1.475934241 seconds)
  done (took 4.156908761 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.560426471 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.294170808 seconds)
    (3/3) benchmarking "different"...
    done (took 1.309036982 seconds)
  done (took 5.416150528 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.367240596 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.712966989 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.520533893 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.252888158 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.260198142 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.639248315 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.093906774 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.674474052 seconds)
  done (took 27.408854877 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.258898595 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.802260761 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.515291363 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.589161542 seconds)
  done (took 15.462962702 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.585460291 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.629602893 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.629119585 seconds)
    (4/4) benchmarking "different"...
    done (took 1.751641737 seconds)
  done (took 7.954123117 seconds)
done (took 70.405339523 seconds)
(3/22) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.254604204 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.301803463 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.292771129 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.407475913 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.331971837 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.334398547 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.268689061 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.286112026 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.253054278 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.260832819 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.235769924 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.255184067 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 2.017941152 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.253925159 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.262847995 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.318322371 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.881064472 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.264897337 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.264642362 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.677399997 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.668001697 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.261249297 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.268594485 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.327841246 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.456524154 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.281070149 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.457618848 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.25673478 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.574515191 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.277949857 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.263310524 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.254545413 seconds)
  done (took 183.025574678 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.253543481 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.982907196 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.038845143 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.26318571 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.5143885 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.461583015 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.435664742 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.553881931 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.254041376 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.276617186 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.651446468 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.254259183 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.67245069 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.265023484 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.26388939 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.268350103 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.581953965 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.657803226 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.265556993 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.429596519 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.275297937 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.610237079 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.576427147 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.606748031 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.278302002 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.332852245 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.258950982 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.264878338 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.033212183 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.561191889 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.276068192 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.28264085 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.350081713 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.132893602 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.261230449 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.258093237 seconds)
  done (took 154.958185189 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.423187832 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.260419385 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.315450793 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.397012502 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.011034858 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.9802856 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.256238082 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.253299384 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.254194911 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.258968455 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.254648368 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.320867819 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.253441118 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.963594277 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.279568361 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.253391024 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.253723942 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.970989613 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.263448646 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.255575412 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.25342606 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.315912833 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.625645423 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.388731329 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.254687091 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.257521341 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.390002889 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.261283063 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.255166195 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.255281176 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.389042143 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.255984998 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.330075361 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.396657195 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.258829944 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.332355702 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.261498773 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.766692662 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.255765447 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.253687664 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.256729975 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.315965728 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.254452551 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.459446597 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.347243126 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.258536816 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.26687516 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.451583148 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.970394319 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.256209334 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.253190983 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.253024671 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.256619055 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.255547122 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.675950391 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.257105843 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.286905615 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.114384829 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.263191404 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.253802197 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.253775357 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.255303504 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.255117211 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.257700984 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.342150789 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.087282042 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.866304803 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.638263237 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.09399774 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.254222039 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.253556204 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.252747162 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.865296277 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.352592268 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.256241522 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.253206519 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.33603872 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.253714111 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.253103805 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.351393958 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.349118697 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.254524673 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.39029148 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.255384133 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.25303952 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.852821295 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.946842001 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.26323969 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.267897175 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.340764891 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.258117273 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.253941185 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.260145944 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.349191672 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.254606479 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.263645053 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.402795715 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.257465695 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.252739645 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 17.983662741 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.47501241 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.253657461 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.320332564 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.5065194 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.594059861 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.255459157 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.254305501 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.269591299 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.254491058 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.263743853 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.262682992 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.256629288 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.254026765 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.261777385 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.253326824 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.253094311 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.255012885 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.268501187 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.253676205 seconds)
  done (took 345.99183569 seconds)
done (took 686.733402276 seconds)
(4/22) benchmarking "parallel"...
done (took 1.255174472 seconds)
(5/22) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.479652341 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.88331927 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.034420494 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.487836725 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.446950924 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.435229814 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.542569173 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.583048435 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.539225586 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.420245142 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.47729584 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.439337401 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.49379244 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.562422159 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.482480859 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.516922285 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.45876056 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.67902386 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.467279651 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.440626079 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.437939385 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.390472393 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.427935575 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.479537216 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.519859876 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.454486604 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.607008975 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.458139318 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.461176157 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.463289529 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.59337775 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.515453277 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.554151612 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.499426803 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.497563245 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.510531865 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.405668923 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.574627579 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.426579746 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.538118086 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.471400196 seconds)
  done (took 68.410508761 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.53064397 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.420430499 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.52262952 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.544258242 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.90571468 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.512493163 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.629320781 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.416590055 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.421364635 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.524368278 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.529134642 seconds)
  done (took 19.233077443 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.43262322 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.420111802 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.530511399 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.553805672 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.636038469 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.52661826 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.588807106 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.41682919 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.427207085 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.53365536 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.55778209 seconds)
  done (took 18.893008529 seconds)
done (took 107.791348699 seconds)
(6/22) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.70480083 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.331525491 seconds)
  done (took 4.289562549 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.266083039 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.265061598 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.266819399 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.267499456 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.265044744 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.264829936 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.278743434 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.266020297 seconds)
  done (took 11.392985495 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.264505911 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.264233578 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.266443503 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.26427029 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.26384052 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.263765657 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.263844261 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.264361709 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.264767606 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.264041332 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.264894149 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.263447331 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.264578557 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.264241643 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.263585504 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.263731396 seconds)
  done (took 21.482884254 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.26362013 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.266084268 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.264444906 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.264395227 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.265389903 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.263624393 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.264876833 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.268668992 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.267349501 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.267723273 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.26455947 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.264669343 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.265093182 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.265085634 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.264898247 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.263889046 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.266222948 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.26493502 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.264858273 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.264682431 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.264326001 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.262848081 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.265102234 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.267701593 seconds)
  done (took 31.620813024 seconds)
done (took 70.058770419 seconds)
(7/22) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.633416497 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.823914179 seconds)
  done (took 6.71034372 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.27873503 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.279219115 seconds)
  done (took 3.854585314 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.625073417 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.28796825 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.817211641 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.53937323 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.291078863 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.292684927 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.725757001 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.288343562 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.28813137 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.287616484 seconds)
  done (took 15.697965936 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.298468643 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.453030958 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.435920829 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.384376215 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.43821097 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.314355335 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.319591837 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.296696444 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.481806336 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.296038616 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.417484857 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.455838001 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.414258451 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.490357113 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.319906756 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.448669398 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.472115366 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.417364234 seconds)
  done (took 26.409016886 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.291454353 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.295265727 seconds)
  done (took 3.840263045 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.412127662 seconds)
    (2/7) benchmarking "second"...
    done (took 1.314072005 seconds)
    (3/7) benchmarking "month"...
    done (took 1.391981546 seconds)
    (4/7) benchmarking "year"...
    done (took 1.376362049 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.313876893 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.296125876 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.312405388 seconds)
  done (took 10.670201694 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.711103646 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.296456909 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.330076018 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.696684029 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.837829621 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.180703774 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.842964805 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.181991262 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.972743467 seconds)
  done (took 17.305217217 seconds)
done (took 85.743946845 seconds)
(8/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.356166829 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.259413544 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.407192103 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.326853934 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.347205882 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.563857492 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.296630563 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.677701568 seconds)
done (took 37.493435533 seconds)
(9/22) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.318984319 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.253665768 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.285364238 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.287683539 seconds)
  done (took 20.08212289 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.254872033 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.526995908 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.2838519 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.940121277 seconds)
  done (took 19.268374539 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.555107856 seconds)
    (2/2) benchmarking "read"...
    done (took 1.618680343 seconds)
  done (took 4.437717418 seconds)
done (took 51.363638349 seconds)
(10/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 6.25545368 seconds)
done (took 7.510262061 seconds)
(11/22) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.288218073 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.264086398 seconds)
  done (took 13.806953945 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.264035611 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.265042892 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.474358455 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.265398868 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.256808343 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.348888261 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.263164971 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.269583719 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.264710732 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.365831802 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.264859606 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.437168942 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.393583774 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.266184126 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.280928507 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.266044984 seconds)
  done (took 42.202492343 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.850209324 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.257604762 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.90200277 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.741957639 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 5.102827054 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.733067038 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.241945231 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.319956999 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.443382073 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.597461551 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.466059412 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.77118428 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.75333553 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.959680895 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.66531317 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.686605745 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.712956132 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.773057918 seconds)
  done (took 52.234210279 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.26145083 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.350602481 seconds)
  done (took 8.879063047 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.287175829 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.278421112 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.268775052 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.275458575 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.290227835 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.255487215 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.274689439 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.272814104 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.280976064 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.289915717 seconds)
  done (took 64.038466934 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.800292164 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.592299699 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.526994183 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.541511928 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.111051702 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.629795028 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.401380076 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.603409498 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.345034522 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.257595483 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 4.008282802 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.56060254 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.603733061 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.770018114 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.752324503 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.475675392 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.582271308 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.617161504 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.535054519 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.271209531 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.22288927 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.066769905 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.571911046 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.9624767 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.257273693 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.002570513 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.249262658 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.355555121 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.342165601 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.713173682 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 3.906853516 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.387765264 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.053588676 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.366507048 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.308528378 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.708502626 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.796228116 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.436224309 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.421992693 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.496717225 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.569243567 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.089139013 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.208380054 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.110533758 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.350645594 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.114589651 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.048163436 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.487023599 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.357532532 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.394326382 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.588181367 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.388687013 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.412504947 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.388188861 seconds)
  done (took 144.375113678 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.255989872 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.477928453 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.417175784 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.258004863 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.499909594 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.458368013 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.905141992 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.496335684 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.259652224 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.466546732 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.404976144 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.353851947 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.258244496 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.257173173 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.261865417 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.255979256 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.417506457 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.562314987 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.262449605 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.255776476 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.465619287 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.412424214 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.374917402 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.257943699 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.413024399 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.491338272 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.589083872 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.354665409 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.748280453 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.254424338 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.548206824 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 5.826899038 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.254566366 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.184535474 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.566643887 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.491330853 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.541898129 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.258444049 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.254669734 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.254972074 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.058167384 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.442965325 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.49693714 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.390635806 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.408039207 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.478508121 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.782492126 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.256062022 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.787905689 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.434893665 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.476622577 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.47420691 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.512656312 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.264368908 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.530122236 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.256691552 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.016940656 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.499162007 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.397144516 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.348133813 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.259918599 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.256856736 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.255157741 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.561792528 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.257423909 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.343313519 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.258121183 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.25666076 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.345347719 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.351664363 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.397605098 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.492602249 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.50184831 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.937648207 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.544789081 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.438937793 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.546225287 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.472335843 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.259257289 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.255258505 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.535882191 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.847687689 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.390385718 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.538127071 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.497409718 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.456050222 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.879603422 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.257545358 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.390368448 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.444105373 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.511965395 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.406190498 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.570827488 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.241474666 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.25510365 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.256330075 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.298586685 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.378064452 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.491737688 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.428900828 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.509340728 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.79197012 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.428761807 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.55984038 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.358760797 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.259969771 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.859550309 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.256037436 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.47463995 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.554771551 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.265708335 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.256351496 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.414909841 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.157360685 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.256202029 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 4.725936746 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.539279259 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.261671587 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.422224542 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.257997745 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.491051907 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.258373042 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.478151903 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.960382353 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.522611097 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.455714989 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.40884044 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 4.516382403 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.547926956 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.519407735 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.610248709 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.492004261 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.924611193 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.255834228 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.54289727 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.257926649 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.255285186 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.441772417 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.239730301 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.417334151 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.257417737 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.52898508 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.410280603 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.592607706 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.259010352 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.50371654 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.494832569 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.48830524 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.256599266 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.393391571 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.258419295 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.117359468 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.420984616 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.257716376 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.256909615 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.632185753 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.256633823 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.414586554 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.477604978 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.017967889 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.535460632 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.71547949 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.718908056 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.543689756 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.448046241 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.612575637 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.867213628 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.398542853 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.25860425 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.723562214 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.256476452 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.560189742 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.461278041 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.25812181 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.25642018 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.022246851 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.398634281 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.255608759 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.427568452 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 4.748050784 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.733430363 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.443938056 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.258741383 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.576750035 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.259497645 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.180131508 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.418539566 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.254809363 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.257901111 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.256290738 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.255474652 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.255758636 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.469046115 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.511302254 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.646473446 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.407775469 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.536922125 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.509374874 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.479512667 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.510274022 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.265590766 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.538295865 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.257867255 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.546477005 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.26180243 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.521122756 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.495139861 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.260766711 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.465475079 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.46254587 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.171237108 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.49930218 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.259565944 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.257202411 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.849468304 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.403187121 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.544895304 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.258264393 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.255240776 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.545195457 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.370393875 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.444864804 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.499328064 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.323366765 seconds)
  done (took 753.923212668 seconds)
done (took 1080.715393867 seconds)
(12/22) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 6.259460758 seconds)
  (2/4) benchmarking "arrays"...
  done (took 6.315532189 seconds)
  (3/4) benchmarking "structs"...
  done (took 6.325690131 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 6.328122601 seconds)
done (took 26.485790743 seconds)
(13/22) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.257832926 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.256918195 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.257240853 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.259151142 seconds)
  done (took 26.288471314 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.886221712 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.908996488 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.451312575 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.431316367 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.235733633 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.392229097 seconds)
  done (took 11.561367252 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.358451814 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.255624317 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.257159783 seconds)
  done (took 19.128660175 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.666833739 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.702052844 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.407995478 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.349240899 seconds)
  done (took 7.380865094 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.303839572 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.298414162 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.297622834 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.301333841 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.297036512 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.292412278 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.310898499 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.299182878 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.2995638 seconds)
  done (took 12.961356466 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.170052285 seconds)
done (took 82.772512154 seconds)
(14/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.517785648 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.453842484 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.259730413 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.396668003 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.385679917 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.466253806 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.366250917 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.294354434 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.467513499 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.571427401 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.6107397 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.085281038 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.381607763 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.58793538 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.468984092 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.281749655 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.292366786 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.326870115 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.549480108 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.394766105 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.316512576 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.353483932 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 4.874116001 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.288374052 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.991058546 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.324255116 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.449031941 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.312257478 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 1.992157289 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.298220966 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.348997164 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.635011865 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.264968512 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.492858207 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.352539428 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.001165073 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.582197876 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.355109284 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.423407827 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.614913291 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.461595618 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.334253635 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.256817511 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.493536138 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.551060041 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.274995008 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 1.982152221 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.365027123 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.436667624 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.380066038 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.577466644 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.271027365 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.681170944 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.331383151 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.350132174 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.258610012 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.004669211 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.220894725 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.347993188 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.517062745 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.293214724 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.282162873 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 1.925910796 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.287446051 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.537103216 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.694641769 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.590625847 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.352879194 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.693248482 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.319272452 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.29150476 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.296197137 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.863269073 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.328129711 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.256966187 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.271965685 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.502995153 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.09319868 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.259584552 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.539704794 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.668417955 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.255317708 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.479538572 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.47092904 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.349092412 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.224420266 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.595394063 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.58218224 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.646828044 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.262678523 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 6.689910201 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.62867781 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.368290288 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.26028503 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.900675288 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.094001655 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 1.863798973 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.592889169 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.380486398 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.707564924 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.31471557 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.292083603 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.419227322 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.499532268 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.94381601 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.299442675 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.363469814 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.256750691 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.354558316 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.460606978 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.399072897 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.591961969 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.25937421 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.368651919 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.694733298 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.25926831 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.475832192 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.58332604 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.066505523 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.349235989 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.383623112 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.319889355 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.34896048 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.289481062 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.534446242 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.47208468 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.142827807 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 1.685502094 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.261082986 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.451256485 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.26381848 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.651197475 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.59661158 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.291266648 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.466074233 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.35750302 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.256762731 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.40084006 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.366263859 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.355993091 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.503081885 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.52533972 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.366470918 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.257183629 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.519624925 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 4.122420391 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.428635708 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.469053714 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.396301589 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.514910452 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.350704854 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.281457383 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.04988959 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.564834196 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.6267358 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.743059935 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.420338005 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.38836318 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.589819661 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.458110998 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.92111332 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.359148632 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.343942519 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.260874226 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.32599212 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.328773259 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.257568627 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.310468671 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.396819682 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.329977748 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.733079687 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.943181137 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 4.875376849 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.501504929 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.3539449 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.873747928 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.649185173 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.259208767 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.580158573 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.558094745 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.105613608 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.295122148 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.370587955 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.262865816 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.971457183 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.301684139 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.522643212 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.472250493 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.384978848 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.582820488 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.271596551 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.297837822 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.532824697 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.470676695 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.484595489 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.472194732 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.681130545 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.327921459 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.294902952 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.059326747 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.4877028 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.939035212 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 1.63411471 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.106923998 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.561115188 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.46745645 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.40489469 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.389640642 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.487604638 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.259582776 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.568388504 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.57697759 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.45349288 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.298692974 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.529338824 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.338002601 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.927488462 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.951612795 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.373539953 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.384932641 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.367690933 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.088816344 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.216979886 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.299876489 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.473542774 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.34990439 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.186881868 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.42418548 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.325133 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.402496632 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.433343335 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.419346188 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.417770243 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.974033828 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.584120389 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.767540391 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.744186915 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.256622816 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.150211496 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.298848951 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.278773489 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.455433705 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.393509672 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.461744276 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.114794161 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.348443611 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.259369124 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.372901737 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.655353386 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.834697874 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.319466502 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.909257995 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.294287655 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.258296579 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.664501113 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.552118873 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.34831369 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.372808933 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.647242688 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.372366292 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.390746902 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.262722783 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.259023354 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.719318094 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.427071591 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.447038886 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.748624884 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.040441631 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 1.727830304 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.043534746 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.655750332 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.600140979 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.31254133 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.379436847 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.704854414 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.914746932 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.541178912 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.295426322 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.397908666 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.47273357 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.36771588 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.374804785 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.260142444 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.296459517 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.434465101 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.336778436 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.626656235 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.296159125 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.590939847 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.556657198 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.614879425 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.280023791 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.34606383 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.587635065 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.370718712 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.571383369 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.262225736 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.421665548 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.465672067 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.335706396 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.269237163 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.391300454 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.781490425 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.119335711 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.708877996 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.164570235 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.957935371 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.490744549 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.742496585 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 1.820132387 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.354608731 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.341180495 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.62928608 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.64258458 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.261337705 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.179011823 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.257688755 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.57438659 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.282119218 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.293485688 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.347254212 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.330498898 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.705172462 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 1.754883293 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.391170616 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.621934086 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.124231382 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.003592985 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.619168097 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.569362258 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.383206185 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.528376304 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 4.913163883 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.3616558 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.414929393 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.252580415 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.187458334 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.316343447 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.477205866 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.26310008 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.663690071 seconds)
  done (took 870.007708715 seconds)
done (took 871.366901627 seconds)
(15/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.285117288 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.275420418 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.3250109 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.27847858 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.274681608 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 1.288985063 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 1.31288629 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.316763732 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.305718522 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 1.289058535 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 1.339711675 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 1.288471435 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.290527641 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.385875761 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.276038684 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 1.292088165 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.275341369 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.290299779 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.328524443 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 1.304520274 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 1.298079692 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 1.283629863 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.312887083 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.294473486 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.285137849 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.299191033 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.296842827 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 1.306248831 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.347024784 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.296862224 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.286147496 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.275082371 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.298427338 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.304048527 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 1.310640779 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.343771499 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 1.313318718 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 1.271461968 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.28931839 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.306442861 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 1.347478296 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.288291151 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.273027733 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.31190956 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.299729471 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.281732418 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 1.323850544 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.280455649 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.294608278 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.277762371 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.275838968 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.332776723 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 1.276923254 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 1.395216447 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.299690392 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.277103833 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.307830743 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.304371757 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 1.287088486 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.288468061 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.295077506 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.327458484 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.316869231 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 1.284141956 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.273663647 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.321353308 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 1.306270482 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 1.30779165 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.312149723 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.301980756 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 1.292943525 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.281204912 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 1.354662368 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 1.290324582 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.277352861 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.288632816 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 1.328391719 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 1.286732268 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 1.413478707 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.301111804 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.279705987 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 1.281738262 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.29746771 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 1.374559971 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.286346576 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.288287694 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 1.277217347 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.290836781 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 1.29866125 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.275401732 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.285446166 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 1.29929351 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 1.318737287 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.273048317 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.273571473 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.285564063 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 1.30348365 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 1.395974658 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.321103796 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.378588571 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 1.291773773 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.290588164 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.28874054 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 1.301837641 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 1.301116913 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.318250304 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.317340144 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.276056248 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.285139855 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 1.292163329 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 1.270147444 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 1.320850512 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.301650951 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.295498423 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 1.294430168 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 1.343857978 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.31728573 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.278534485 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 1.291953263 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 1.311721544 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.290418345 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 1.336792711 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.280387568 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.317060339 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 1.288387453 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 1.28640559 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.273587279 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 1.271152577 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 1.436073795 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 1.332265428 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 1.311190549 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 1.342249058 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.289282844 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 1.292980027 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.314886809 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.287805658 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.286751695 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 1.397979616 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 1.340485559 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.27793676 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 1.295592924 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 1.295401309 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.30295706 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 1.287817972 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.275572802 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 1.293331435 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.277429018 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.27268934 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.281331664 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 1.322436524 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 1.396823462 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.27272079 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 1.292894091 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.28511422 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 1.283993081 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.290876775 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.298172916 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.278089891 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 1.282671656 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.287487889 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.334919143 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 1.317727185 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 1.302112372 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.295551067 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 1.299198487 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 1.303960031 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 1.316770479 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 1.287650871 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.273793982 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 1.41850738 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 1.3291727 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 1.300660051 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.284225126 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.277890516 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 1.303311029 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.279230818 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 1.2721003 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 1.312058726 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 1.440983274 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.292113427 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.284106981 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.292110802 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.277485311 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.290850945 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.295792537 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.293026063 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 1.352903316 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.286046571 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.293722974 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 1.346691239 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 1.298158895 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 1.279232219 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.295961161 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.314603689 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.397598498 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.292667848 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.283580536 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.283289593 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.308696235 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 1.289801139 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.287553047 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 1.300042646 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 1.376945226 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.293065365 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 1.286677888 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.332044236 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.298604125 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.28016776 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 1.419288722 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 1.27697598 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 1.382073638 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 1.296687706 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.291124589 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.289893633 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.318470677 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.276968174 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.282573487 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.291133936 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 1.431570901 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.304338052 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.285160111 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 1.306306443 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 1.316818897 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.287978269 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.289782816 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.28614692 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.279995195 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.279497235 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 1.313988503 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.292221392 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 1.311118546 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 1.398701297 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 1.309856561 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.313027964 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.286601109 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 1.305959651 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.307970319 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 1.324195562 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.292308015 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.296121925 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.319268179 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.305297418 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 1.272110801 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.274326227 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.304722925 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 1.322339151 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.303118848 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.281937272 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 1.293985988 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.277286425 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.294171737 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 1.35530257 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.283297062 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.291511906 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.398241684 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.281611502 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 1.302984675 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 1.314973383 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 1.324074543 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.290395263 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 1.29692441 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.277738952 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 1.300370293 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.299647923 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.294303652 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 1.279245088 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.314299812 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.278116333 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 1.302401811 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.294049856 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 1.305427467 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.279801534 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.285717037 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.300731597 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.292641504 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.28438363 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.283016103 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.275660345 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.290955557 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 1.271686463 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.276881304 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.295675366 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 1.302505317 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 1.294445905 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 1.308687584 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 1.298143644 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 1.419729654 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.294633951 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.279515892 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 1.424057203 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.286250811 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 1.391938508 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.290240116 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.287082166 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 1.302638988 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 1.29602067 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.303669055 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.310914083 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.295398914 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.333279399 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 1.422696521 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.29119159 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.273887057 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.29476075 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 1.323489665 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.287882534 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 1.281079542 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.290686935 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 1.319922797 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 1.38334685 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.293497258 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.343587331 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.300268134 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.278336237 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 1.441169368 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.290345524 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 1.299568895 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.307179404 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.293799895 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.329554309 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.288164482 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 1.294211265 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 1.289536546 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 1.436736118 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.349944021 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 1.315579996 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.303535459 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 1.319189611 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.287205633 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.277523199 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.32966124 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.310093103 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.293420861 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.273883195 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.315531506 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.315672984 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.28400945 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.288334498 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 1.419139838 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 1.297150543 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.291678585 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.299582335 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.281565491 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.274345676 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.281870004 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 1.33561611 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.283809236 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.289265189 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 1.291416846 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 1.297379899 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.28997001 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.298660986 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 1.323044707 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 1.300696827 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.281931418 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 1.456948877 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.304898319 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.289741623 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 1.308972619 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.270817649 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.283553641 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.27820499 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.334899709 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.321010619 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.297813333 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.292284976 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.292631448 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 1.295218361 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.28854454 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.274448123 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 1.291716178 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.344511745 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.280615403 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.285513589 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 1.305117946 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.299406264 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.299070677 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 1.289037173 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 1.274307771 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.295629715 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.295377458 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.279972145 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 1.344303417 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.286663317 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.295037383 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 1.437460461 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.304563407 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.310463359 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.287783291 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.293062774 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.286206753 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.296910111 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 1.318201346 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.278860311 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.293384568 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.285119275 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 1.296312923 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 1.304436557 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.30034205 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 1.290728491 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.283153488 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.27432894 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.283307819 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.281908749 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.319891248 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.295874329 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.291797617 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 1.301058095 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.281120617 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.288092857 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.314359639 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.400150343 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.2986712 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 1.398313615 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.399684939 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 1.419903021 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.301780867 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.28443603 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.289407047 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 1.336829752 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.295550352 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.280733747 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.288015586 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.275664794 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.29419562 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.305646711 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.335604283 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.290908953 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.288957125 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.294636404 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.276574847 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.302748436 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.293142882 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 1.440680358 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 1.313546275 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.281430652 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.29348765 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 1.347107892 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.325381032 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.309266879 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.332628224 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.282626642 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 1.316586143 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.29148031 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 1.352312701 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.291593409 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.273632924 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.294054684 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.289554985 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.323957966 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.310597265 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.277972756 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.285210787 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.274492292 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.290527656 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.30910926 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.296147869 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 1.335863876 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 1.297820305 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 1.310611178 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.288589779 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.298117078 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.291310831 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.288274383 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.323173675 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.283195635 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.277517823 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.300814254 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 1.457880662 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 1.304219928 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.285664886 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.28312284 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.305342116 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.29659443 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 1.32573623 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 1.312076106 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.281409683 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.297530129 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.289726992 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 1.309422876 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.298357968 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 1.416997473 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.27628467 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 1.307196946 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.278110739 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.29615733 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 1.421305277 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.307447983 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.282611897 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.296186144 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.286699287 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 1.314301492 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.29726435 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.294476835 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.295003125 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.328361259 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 1.33087738 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.284343349 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 1.456962156 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.305725099 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.281629896 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.273955972 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.293048073 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.290154067 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.293103298 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.284975395 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.316370616 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.288411911 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.294554076 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.27746314 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.303082922 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.298444968 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.289290758 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.282450897 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.318414139 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.290369439 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.279119248 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 1.457349516 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.317962454 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 1.323826353 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.293906879 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.288516308 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.288573913 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.281959783 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.315218152 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.285383272 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.303202254 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.279941922 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.276460857 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 1.318514549 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.304006058 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.306975037 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.281746994 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 1.411478604 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.28016302 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.295714047 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.326273753 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.280775497 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.303168982 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.291330777 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 1.31693806 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.295515752 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.325082028 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.29547415 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 1.350970111 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 1.297944142 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.271358788 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.288595119 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.301728914 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.308466406 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.290428753 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.29422115 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.295147092 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 1.298561855 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.296816677 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.30308975 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 1.313424455 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.280226352 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 1.350157157 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 1.437069085 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.303259925 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.287239709 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.290345689 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.287198416 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.278941693 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 1.391872016 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 1.327285638 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 1.402673855 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.297959503 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.289263769 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 1.336666266 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.386404689 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.302755297 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.279008326 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.286980827 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.313837094 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.302371869 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.296514181 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.303318755 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.280514356 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 1.308108999 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.29807362 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.291974814 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 1.301992301 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.293091525 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 1.309493108 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 1.324745844 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 1.38227467 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.296183883 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 1.329533761 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.285096317 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 1.353951077 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 1.297062115 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 1.399568742 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.302929712 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.288872277 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 1.397119479 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.295572706 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.294423424 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.300651238 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 1.274837197 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.306045329 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 1.309188158 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.287897257 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.280690885 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.280974842 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.287385491 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 1.272324479 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.289418711 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.290346833 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.314716133 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.296003453 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.271454311 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.300238215 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 1.32973583 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.310028937 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.298469115 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.383004158 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.297261754 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.278578258 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.301241623 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.297397772 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.292032809 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.275002059 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.304488311 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.294600462 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.292050053 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.309028957 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 1.425398707 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.281643563 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.291669145 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.273415733 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.295260017 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.288542027 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.314796398 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.284397979 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.296973545 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.302183075 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.275169671 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.293852464 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.293752736 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 1.317211377 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.298073749 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.292305183 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.293137164 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.298099725 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.294911046 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.283898777 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.314364084 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.299645519 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.299496267 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.28518353 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.27938338 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.290339813 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.299899565 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.293154514 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.281426215 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.294682821 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.288115869 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 1.433485926 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.285295821 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 1.326520891 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.318459757 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.286537732 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.279718526 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.293053765 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 1.440824071 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.317329312 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.316923604 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.278454259 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.286563857 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.300558111 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.290908733 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.281750198 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 1.305796747 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.29619156 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.29644358 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 1.35894557 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.315866606 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.298932847 seconds)
done (took 889.311820213 seconds)
(16/22) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.58955338 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.904962637 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.519910055 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.479739677 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.598342077 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.576574238 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.340061348 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.666479561 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.325894486 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.645076218 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.476548667 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.507028831 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.915122522 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.48251443 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.603190015 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.489809497 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.32646216 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.489999377 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.679772907 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.608713156 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.413374948 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.476113688 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.403697337 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.632744596 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.259452823 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.407886414 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.607515163 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.382960305 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.510418982 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.407329001 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.414522493 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.497326688 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.60864702 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.672058925 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.836711225 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.388610199 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.573447148 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.464070732 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.565752398 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.585823728 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.489439754 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 4.398003406 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.405880213 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.428757085 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.383820992 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.523181852 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.340462923 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.795606531 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.26017645 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.391101229 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.502142228 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.56130494 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.509449271 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.51553116 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.477694689 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.610549499 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.643224801 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.654772974 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.60265392 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.541757792 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.563152217 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.649922887 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.625853175 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.388074693 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.422999279 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.528639996 seconds)
  done (took 138.809115477 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.611369576 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.524199879 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.609067581 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.271133869 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.717755169 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.616526654 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.347823546 seconds)
  done (took 13.957521415 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.186786979 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.320018691 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.48762548 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.485369948 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.32604299 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.427270273 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.387192416 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.426543962 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.480523666 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.361936019 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.598423212 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.480236126 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.359195763 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.409978117 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.384503584 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.535659994 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.176247281 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.374934913 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.372872179 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.594973867 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.425965609 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.412758039 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.439586841 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.308967271 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.327814164 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.356364424 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.322279941 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.170570789 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.319403434 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.313233682 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.336092768 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.408327784 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.321864537 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.433003157 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.305293543 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.606464665 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.328710542 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.327772423 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.449579494 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.269823241 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.308847857 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.321370151 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.450780404 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.336454846 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.314834595 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.48224311 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.311642581 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.335715342 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.30818429 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.317138234 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.46346968 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.317726428 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.306075855 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.374654691 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.516022367 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.410103917 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.382367429 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.316603879 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.320353635 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.376222878 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.319656917 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.593816901 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.482976775 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.315354139 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.487209081 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.571561718 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.317871333 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.313687489 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.31447585 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.511541527 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.31999988 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.483395134 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.322441936 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.366625624 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.325693835 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.431168403 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.481188297 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.016838513 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.987381936 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.362808909 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.498681289 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.307804434 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.442663755 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.11629689 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.373899755 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.307521956 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.326693311 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.805747911 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.157839645 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.319890431 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.566596046 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.310786391 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.380781447 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.368401021 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.303629338 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.371840905 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.454366006 seconds)
  done (took 159.747109599 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.432705475 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.257533772 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.435747511 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.083086294 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.141964761 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.515530437 seconds)
  done (took 15.126765629 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.669123183 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.027631637 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.345353138 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.338848563 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.368642259 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.299222056 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.298258357 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.415565875 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.378917846 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.333516057 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.297513196 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.317002659 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.301268797 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.430184598 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.298412036 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.328925431 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.300227263 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.340808731 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.32204615 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.373661853 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.493547884 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.36793836 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.373566709 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.882991294 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.288116958 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.331206422 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.112358568 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.324564345 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.322692629 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.540579022 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.485167554 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.29743327 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.890977518 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.253668103 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.970372245 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.884003568 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.389135267 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.324423288 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.323452477 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.29752795 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.313188904 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.373649662 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.345832489 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.314363506 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.537109532 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.75441079 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.308412136 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.566547973 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.297337641 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.312742193 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.315471639 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.350727335 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.298584127 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.316593795 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.209971918 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.757194235 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.210071553 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.308081069 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.367337227 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.883252881 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.331739406 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.306347926 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.593221721 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.187583119 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.405442262 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.315894845 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.885184875 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.378462184 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.382661408 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.340751642 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.316499639 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.338146369 seconds)
  done (took 123.157711965 seconds)
done (took 452.059690481 seconds)
(17/22) benchmarking "inference"...
  (1/8) benchmarking "abstract interpretation"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 31.810275025 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 31.706012538 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 31.475938717 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 31.586232202 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 32.220051837 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 32.326254657 seconds)
  done (took 192.384179283 seconds)
  (2/8) benchmarking "rand(Float64)"...
  done (took 32.438650599 seconds)
  (3/8) benchmarking "sin(42)"...
  done (took 31.320490873 seconds)
  (4/8) benchmarking "construct_ssa!"...
  done (took 32.46241309 seconds)
  (5/8) benchmarking "abstract_call_gf_by_type"...
  done (took 31.676097239 seconds)
  (6/8) benchmarking "optimization"...
    (1/6) benchmarking "rand(Float64)"...
    done (took 32.415157562 seconds)
    (2/6) benchmarking "sin(42)"...
    done (took 31.294660032 seconds)
    (3/6) benchmarking "construct_ssa!"...
    done (took 32.40848811 seconds)
    (4/6) benchmarking "abstract_call_gf_by_type"...
    done (took 31.683793232 seconds)
    (5/6) benchmarking "println(::QuoteNode)"...
    done (took 31.635147965 seconds)
    (6/6) benchmarking "domsort_ssa!"...
    done (took 32.302702585 seconds)
  done (took 193.034780715 seconds)
  (7/8) benchmarking "println(::QuoteNode)"...
  done (took 31.61758585 seconds)
  (8/8) benchmarking "domsort_ssa!"...
  done (took 32.368103386 seconds)
done (took 578.56392406 seconds)
(18/22) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.288381022 seconds)
  done (took 7.548854293 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.373353588 seconds)
  done (took 7.749564483 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.262934546 seconds)
  done (took 7.537160426 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.266387953 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.296099794 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.296447579 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.290068062 seconds)
  done (took 26.44174314 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.363089277 seconds)
  done (took 7.624003722 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.260456478 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.289403622 seconds)
  done (took 13.919707856 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.451897362 seconds)
  done (took 7.738397071 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.458709101 seconds)
  done (took 7.734498495 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.263630794 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.273245182 seconds)
  done (took 13.827011461 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.260780547 seconds)
  done (took 7.521321618 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.608852193 seconds)
  done (took 8.965936151 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.272504469 seconds)
  done (took 7.540640614 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.296446858 seconds)
  done (took 7.558878285 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.430559665 seconds)
  done (took 7.691077286 seconds)
done (took 140.662645429 seconds)
(19/22) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.260357267 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.264574922 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.26326751 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.261957495 seconds)
  done (took 26.310377244 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.560930004 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.560389127 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.580658306 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.557695404 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.512682113 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.511667918 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.560766965 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.559786044 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.509931699 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.54976469 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.560325108 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.56062213 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.547272067 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.583080223 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.581952812 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.553260498 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.560935492 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.560034262 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.516798407 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.581275786 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.545659573 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.55302966 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.910687193 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.932861085 seconds)
  done (took 39.273571976 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.475333465 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.625205671 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.432548289 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.712130879 seconds)
  done (took 7.506882984 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.307792366 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.555599556 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.582342637 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.604847652 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.506707565 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.367112316 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.584281067 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.41562736 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.391795107 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.395851549 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.844898328 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.392072667 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.427105442 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.601933308 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.366409342 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.298380434 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.29547671 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.390969791 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.531236664 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.446766785 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.485389618 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.586230081 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.501004426 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.582323692 seconds)
  done (took 36.724957922 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.033371652 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.858990348 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.167880122 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.230907466 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.471194518 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.320234151 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.12138493 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.111898767 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.458767069 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.144457929 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.951462456 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.120242526 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.251408496 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.166806782 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.003059175 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.354725722 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.396489771 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.128957604 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.129177931 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.146560152 seconds)
  done (took 41.828850486 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.261299717 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.62255355 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.549970359 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.538916042 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.262583952 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.708423754 seconds)
  done (took 24.205110666 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.91219593 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.377758013 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.492104791 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.46459206 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.384483342 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.363563149 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.66758645 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.435012465 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.844623441 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.905655088 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.602315437 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.579480075 seconds)
  done (took 23.291350728 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.262289792 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.300716169 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.262553354 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.414371598 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.285677275 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.063414193 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.140041395 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.26250899 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.536567272 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.446767595 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.036718152 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.388238949 seconds)
  done (took 41.675567895 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.49627817 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.507345847 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.525434065 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.336445058 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.564797909 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.245347882 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.526139641 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 3.857590804 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.224006625 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.389164421 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.742252647 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.239636625 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297806595 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.208433013 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.586706636 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.5285754 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068491411 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.19081116 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.523521497 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.290734891 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186661274 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.33309165 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.26605205 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.658576155 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.575061436 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.265377442 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.49606795 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.427752904 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.261259564 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.528415726 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.905487042 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.656748974 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.481718378 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.560266438 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.60252121 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.302223804 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.301255308 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.167119334 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.667270516 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.551636917 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.360281609 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.374246814 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.38502552 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.235933769 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.54385262 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.998622836 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.265709619 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.375635372 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.218979618 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.273528915 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.506852812 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.959189536 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.548300598 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.770979079 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.393833377 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.528265796 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.053772199 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.947715469 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.472401369 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.19269675 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.34507027 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.28585811 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.496773674 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.209137108 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.417027335 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.460681706 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.042698425 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.105249646 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.977542686 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.526542466 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.588848379 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.271035941 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.223446653 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.315820786 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.709725501 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.227764962 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.55366295 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.26254213 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.448847637 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.32774496 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.211705811 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.376736809 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.868450115 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185839139 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.596919082 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.064393266 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.262993127 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.212307577 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.273376819 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.20126956 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.596813455 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.316489012 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.332796417 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.468695005 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.411874891 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.276021841 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.262276396 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.515713263 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.209267493 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.852655336 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.933395165 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.252153338 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.884849338 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.78959252 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.578016994 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.051702436 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.684782973 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.305705492 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.529808383 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.845354363 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.057132643 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.604784319 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.59861059 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.570030058 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.261900763 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.174296094 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.729749215 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.268247196 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158901476 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.262509577 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.210498682 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.622814492 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.48315809 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.634827633 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.488916614 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.262885465 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.045881007 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.265065382 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.63023486 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.262915724 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.42646518 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.618165422 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.260747837 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.404411232 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.263697103 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.037890336 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.604021048 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 5.815107194 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.613758385 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.522128276 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.386718718 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.099769111 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.99407684 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.117688703 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.55860686 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.471146762 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.571963948 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.906540567 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.410824962 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.273362441 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.214743404 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.425928469 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.273917404 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.723498866 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.884875799 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.905697714 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.751874266 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.478181047 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.262581849 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.474448955 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.606569441 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.524497385 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.624270678 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.425993129 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.070437589 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.520247463 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.508243947 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.264585791 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.208733097 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.507445327 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.508507376 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.616340195 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.576289969 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.641675454 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.710343665 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.583892062 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.4982471 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.593349406 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.014575927 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.849110087 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.481852884 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 4.897401405 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.253299354 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.617955517 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.225476201 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.639296259 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.443564753 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.733830636 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.835479301 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.927913176 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.3020403 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.541314747 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.20940111 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.037177569 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.598005869 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.221409518 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.62064921 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.319371334 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.520811252 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.746567605 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.311739333 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.387548024 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.241781714 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.811281433 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.601711662 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.55375036 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.21978031 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.989111428 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.606807036 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.056689094 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.283733173 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.404086694 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.323902905 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.393340237 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.262955124 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.58020859 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.214018417 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.911177784 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.755783368 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.618821065 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.029478013 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.053661439 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.579289996 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.263809674 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.267358938 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.646893241 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.229282668 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.176269255 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.66688202 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.474195563 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.571844142 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.262953995 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.26700505 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.976655 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13708178 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.974363214 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.603682551 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.386385841 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.805011597 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.344529286 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.304880071 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.378480979 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.303788048 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.035574371 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.050824294 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.013633951 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.482908902 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.911490198 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.306422685 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.009701396 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.526948261 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.261398694 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.559382834 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.324892342 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.716422853 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.843334233 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.305793759 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.26338567 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.548538057 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.788930627 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.149575121 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.055021215 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.397871179 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.511720188 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.482637267 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.577361964 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.583467734 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.466836001 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.210572625 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.105728364 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.31163749 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.529444945 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.263176556 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.554677958 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.669989068 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.648318003 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.862841536 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.616407115 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.354716496 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.615731357 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.557696034 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.403829886 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.536954123 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.806180646 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.749042796 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.240254253 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.390411476 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.210913728 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.2247269 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.719310538 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.543949892 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.56115515 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.247405358 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.610095163 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.558606377 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.239185226 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.355813782 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.526483877 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.261804293 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.52274744 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.264907375 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.075005366 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.62648732 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.270739085 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.034485167 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070514184 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.586488226 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.054028027 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.041702186 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.417433875 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.47860283 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.090385206 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.446288554 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.393293918 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.560830947 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.25714448 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.999539229 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.836650154 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.523050885 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.11981465 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.562110788 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.642719785 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.710268839 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11310729 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.685468206 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.263326562 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.496823988 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.059822669 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.339521129 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.392083339 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.575791432 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.249281563 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.496495249 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.515829798 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.400254098 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.739090887 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.220703645 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.397526063 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.239112299 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.28082716 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.733856672 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.837424343 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.877072399 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.365754789 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.908289017 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.289182855 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.336909611 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.419485408 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.756022153 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.372016632 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.966414809 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.972112893 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.312704075 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.605588328 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.279101389 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.368208293 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.063229303 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.5040063 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.496604337 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.395716331 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.214364338 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.852638634 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.536978917 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.977129562 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.377104576 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.48410281 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.306638996 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.924932994 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.593490481 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.582536882 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.685209456 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.564616192 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.434064743 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.210905693 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.262430751 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.859972387 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.693166884 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.273805407 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.528042545 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.57015585 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.131866619 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.672503031 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.650525897 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.504372963 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.602872189 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.752308446 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.486674182 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.611658535 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.55366025 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.583195346 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.695273342 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.496831778 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.554720014 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.578218557 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.052938928 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.991884865 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.530172356 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.051630397 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.217579772 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.488769069 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.327946869 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 5.803575121 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.778950086 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.530968474 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.25616387 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.682998826 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.820342594 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.60822155 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.303120795 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.264960467 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.487594263 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.461519891 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.263128112 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.82061651 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.53939033 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.404846171 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.272092033 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.045689297 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.210890788 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.497774138 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.66929261 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.075422558 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.897048114 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.255528107 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.665310581 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.668780353 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.678791359 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.089007249 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.210608288 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.24556458 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.38354059 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.662394709 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.862375587 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.429747832 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.599746466 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.48360392 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.217458289 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.589920931 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.038871946 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.516395583 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.868205597 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.564549904 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.589559561 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.514194749 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.557208475 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.738136328 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.292435667 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.550079691 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.211149202 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.656653157 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.707399463 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.613729005 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.63821586 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.263909083 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.710805956 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.546412203 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.326956696 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.457951565 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.768041596 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.727959662 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.470788586 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.323115065 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.315179766 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.156845315 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.180796122 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.728152625 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.524080096 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.263995042 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.294416072 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.499802598 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.495183033 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.472324945 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.595227422 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.789372871 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.056609913 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.743310055 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.695926172 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301762103 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.26323475 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.255918878 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.77603124 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.264492443 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.570270667 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.91313174 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.484765395 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.523331119 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.211539388 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.761833522 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.442045058 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.614035554 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.401178599 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.619758634 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.586232836 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.263921967 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.566081549 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.2902772 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.057012988 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.792235338 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.253979815 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.26438868 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.241489709 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.380930403 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.025456056 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.439214995 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.264560604 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.386249743 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.640759195 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.210817932 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.262923649 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.430424671 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.31988898 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.40292834 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.569593601 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.296067281 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.312942008 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.270005753 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.337544023 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.271166179 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.498334918 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.790644674 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.43019838 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.976814493 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.48310491 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.263156194 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.838316333 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.808394419 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.818874919 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.401417611 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.896560207 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.547757642 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.777482584 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.722999419 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.323227857 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.509173759 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.091046466 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.667761775 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.552238234 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.30527623 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.498073721 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.734660012 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.567168582 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.532823581 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.618929332 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.113584014 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.995050951 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.23195751 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.287389963 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.293138696 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.55883795 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052180567 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.262773858 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137367447 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.675216182 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.247009952 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.882779822 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.409739289 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.336373352 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.301821844 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.184458412 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.951974505 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.250092847 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.264368821 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.47256971 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.600438137 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.211473495 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.241212175 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.14605711 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.500102536 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.583795893 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.210997919 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.484067188 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.690208544 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.210798412 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.254013169 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.26363232 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.531774083 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.217085691 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.705375319 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.250065872 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.292179252 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.902243468 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.550185057 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.262695581 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.269926752 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.064483939 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.264977413 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.263742744 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.634531096 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.406471004 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.390537332 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.560298851 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.364327967 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.444524526 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.722938216 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.251312951 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.384941956 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.581213758 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.607648824 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.849370598 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.295342787 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.621567956 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.242337222 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.379977353 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.291720167 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.429156347 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.3238341 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.335900121 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.583852061 seconds)
  done (took 1864.014095318 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.32216301 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.386630255 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.278024169 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.287757401 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.275129559 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.30207993 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.30426248 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.286403641 seconds)
  done (took 51.706902725 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.264445712 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.287051732 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 4.53490279 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.323247189 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.281222633 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 4.389560175 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.318505235 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.634154472 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.339615852 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 4.128082819 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.442837378 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 5.13207267 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.474510267 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.286294496 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 4.787846901 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.442464563 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.264000034 seconds)
  done (took 88.596597984 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.318087728 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.535792185 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.282203709 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.642952494 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.286462436 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.585839914 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.278281609 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.266286369 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.331662193 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 6.575023283 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.26980049 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.315010651 seconds)
  done (took 80.976711964 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.31076225 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.308709293 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.308080794 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.308203134 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.309918798 seconds)
  done (took 7.808877421 seconds)
done (took 2335.206050134 seconds)
(20/22) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.526152358 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.630159715 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.771900838 seconds)
  done (took 4.666276819 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.420578176 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.468967956 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.599931121 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.605483311 seconds)
  done (took 7.380312904 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.52675144 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.63355468 seconds)
  done (took 4.423770518 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.648950194 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.283125733 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.645973599 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.264436371 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.266896448 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.26387786 seconds)
  done (took 20.064914353 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.31405674 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.314114371 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.313770007 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.301277434 seconds)
  done (took 6.50775532 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.26408737 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.096076525 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.266298288 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 6.267149153 seconds)
  done (took 23.157050898 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.479747696 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.337699025 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.043001461 seconds)
  done (took 6.139132028 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.911205371 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.405738049 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.893702919 seconds)
  done (took 6.474670154 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.482690499 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.458167899 seconds)
  done (took 6.204969571 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.426525723 seconds)
  done (took 2.690493753 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.112082391 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.58867367 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.766845451 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.835620766 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.930945788 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.514533775 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.607877915 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.499319581 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.684387639 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.722334849 seconds)
  done (took 18.528030261 seconds)
done (took 118.606987572 seconds)
(21/22) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.597767103 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.328776616 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.45995793 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.563228019 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.520940615 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.46034041 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.535131793 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.775826679 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.247811724 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.252897699 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.576623876 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.52085034 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.537055965 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.318466144 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.538223513 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.31915162 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.509325555 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.585700796 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.441174469 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.469351074 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.548329797 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.236505219 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.628517286 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.244155822 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.521672837 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.454220747 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 2.590528683 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.332998875 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.379540401 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 2.600240107 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.466387441 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.404540244 seconds)
  done (took 148.231299474 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.689824276 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.275612279 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.277188289 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.264422269 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.483842589 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.278150467 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.266934889 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.265513765 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.416089613 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.42515036 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.275988275 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.487898094 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.276903244 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.26495635 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.278281115 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.26524621 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.522049347 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.700577129 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.276733894 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.276475792 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.279452619 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.374969881 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.276067141 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.385052793 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.524240823 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.276527855 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.708608099 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.277506908 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.276421185 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.713239474 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.276938451 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.265527325 seconds)
  done (took 185.179030373 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.264842464 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.276321436 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.27751083 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.266104614 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.276435077 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.275568955 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.267454199 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.264709011 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.164143213 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.097020485 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.264904805 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.276443877 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.269077442 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.265073569 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.273834264 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.266313316 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.275566736 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.266608933 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.276810144 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.264505043 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.273123812 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.107055655 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.276140994 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.028529431 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.263326331 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.263104543 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.265375837 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.276997392 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.277482053 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.264355453 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.277411436 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.267155029 seconds)
  done (took 201.245537085 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.546823487 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.308511727 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.106094448 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.006177253 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.136642107 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.30348168 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.99966637 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.542738528 seconds)
  done (took 15.226209004 seconds)
done (took 551.164546578 seconds)
(22/22) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.631419388 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.032894526 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.409107685 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.49580224 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.547481777 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.547739848 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.491731921 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.601092207 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.919531642 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.598499894 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.679865568 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.469562904 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.976675561 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.481804599 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.414148473 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.636187318 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.637412971 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.907638345 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.421150078 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.977734196 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.450181055 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.992853131 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.62672525 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.913301827 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.681684863 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.991416865 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.242579065 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.641599612 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.470385329 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.441169271 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.257531974 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.480324048 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.411352973 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.404490044 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.656986523 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.649310645 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.44848989 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.127344611 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.417952326 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.827593165 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.973689157 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.805659017 seconds)
  done (took 78.056748503 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.305742558 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.31675491 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.411641607 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.371974861 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.869120812 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.36603118 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.46906864 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.451779572 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.367633366 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.451866035 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.476173933 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.875995416 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.478025154 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.851714356 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.461356206 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.478186032 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.369916279 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.839926898 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.459904524 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.452115425 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.330933985 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.408777861 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.334329234 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.444058126 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.327769425 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.353990061 seconds)
  done (took 39.606132933 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.342100569 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.44804664 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.49265068 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.1847892 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.491514477 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.268672487 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.481107477 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.526535701 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.836772567 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.318597377 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.386372493 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.426234397 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.446925857 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.512245729 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 3.934747846 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.481677465 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.490334698 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.429985487 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.454266639 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.246521797 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.323527509 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.39234616 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.491794257 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.089284584 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.87074358 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.669991305 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.370165994 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.794362116 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 3.858135128 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.467480033 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.40523629 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.468564166 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.617285324 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.499065053 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.40423628 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.330158349 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.326540946 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.38917586 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.08475123 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.453569725 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.486026895 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.037084255 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.615467994 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.762562785 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.865610213 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.534629541 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.70586306 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.400175011 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.404834827 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.900088669 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.523032002 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.453498242 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.528673609 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.546233901 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.401042438 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.540438191 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.456090402 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.627918745 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.323611959 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.471928162 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.377295946 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.56508646 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.458743737 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.873523137 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.582734497 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.555211471 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.096548581 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.161650127 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.621026237 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 3.989492248 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.82580359 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.375095452 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.339018524 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.385956187 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.450681862 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.732083912 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.624656428 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.604273059 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.614202646 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.475231824 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.395083156 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.807638282 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.250827095 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.451185318 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.469085002 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.320572196 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.394661406 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.601072151 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.465951942 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.734804591 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.774358475 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.638000213 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.335724714 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.303848095 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.150652311 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.731379315 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.311959505 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.323411066 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.484980849 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.77611464 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.377774801 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.137286472 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.809797703 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.155379616 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.269599151 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.318734709 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.590300391 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.884630538 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.693259506 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.306105951 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.050966829 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.077534359 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.45834521 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.539632493 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.30986376 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.752437888 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.401800419 seconds)
  done (took 239.923067852 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.267458507 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.279854141 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.266752646 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.280113057 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.264662308 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.815913461 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.301830131 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.266293611 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.706828126 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.301036467 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.265278732 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.269116009 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.26615845 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.273805828 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.320639019 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.122889828 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.923577883 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.269373061 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.264979806 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.266770685 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.936298665 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.269813828 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.265668215 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.266844443 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.268463727 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.265888191 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.267964164 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.317545787 seconds)
  done (took 157.120340713 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.324722796 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.643812993 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.343465737 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.387045312 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.35102475 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.344257539 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.767076952 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.419993617 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.384235882 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.336704857 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.338967831 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.52403226 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.586431683 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.796034266 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.413647781 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.452332634 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.910091523 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.456712539 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.339602785 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.337529179 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.452348904 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.603115935 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.532706994 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.533198386 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.46287596 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.542340938 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.384473806 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.339305872 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.431124348 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.721368875 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.344445277 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.628984558 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.460382411 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.324754827 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.725940116 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.600105326 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.783105931 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.877041506 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.494562564 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.300320006 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.303005285 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.524991183 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.565832073 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.365560222 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.317675292 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.824916311 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.34291785 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.667852365 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.350915079 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.296644429 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.40480294 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.40542111 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.519488792 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.646497982 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.476034793 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.470371793 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.836229133 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.298922915 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.476877314 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.757666867 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.300697036 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.7326946 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.679274567 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.371251264 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.332748019 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.078516206 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.408689104 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.7746553 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.82111699 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.359539065 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.628346052 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.49033973 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.306811303 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.554852756 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.481512326 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.733790056 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.786790354 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.424338815 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.391429954 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.383815948 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.558962645 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.318923022 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.777724984 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.406263743 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.307971842 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.731713212 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.637959811 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.308247507 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.328217726 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.427765964 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.478447079 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.482332965 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.541895929 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.376740751 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.081604235 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.545432793 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.590599048 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.342222656 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.421025127 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.319580226 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.417967372 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.503957556 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.316306862 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.56500376 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.69441674 seconds)
  done (took 168.644826289 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.865377808 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.36048178 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.657678148 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.825159723 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.598293842 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.501061293 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.467208746 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.37312444 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.539729915 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.500586594 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.479565875 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.388023359 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.235117695 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.03230192 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.351660644 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.477786643 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.37788525 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.818407184 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.578075832 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 2.802541212 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.902332964 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.960193421 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.589245993 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.719007158 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.66815338 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.743142856 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.877170403 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.414322076 seconds)
  done (took 50.37310976 seconds)
done (took 734.992433875 seconds)
SAVING RESULT...
DONE!
