cset: moving following pidspec: 32424
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.846689389 seconds)
loading group "shootout"... done (took 1.132069765 seconds)
loading group "string"... done (took 0.662731517 seconds)
loading group "linalg"... done (took 8.655862377 seconds)
loading group "parallel"... done (took 0.167313736 seconds)
loading group "find"... done (took 3.028598958 seconds)
loading group "tuple"... done (took 2.164815429 seconds)
loading group "union"... done (took 15.04522693 seconds)
loading group "dates"... done (took 1.458288213 seconds)
loading group "micro"... done (took 0.224043539 seconds)
loading group "simd"... done (took 4.812508433 seconds)
loading group "io"... done (took 1.093498903 seconds)
loading group "random"... done (took 9.609013338 seconds)
loading group "problem"... done (took 1.543523457 seconds)
loading group "array"... done (took 25.382187086 seconds)
loading group "misc"... done (took 1.903164755 seconds)
loading group "scalar"... done (took 43.906293558 seconds)
loading group "sort"... done (took 3.368326199 seconds)
loading group "sparse"... done (took 12.866117338 seconds)
loading group "collection"... done (took 18.873073896 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.427569508 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125422128 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.13150366 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.117122637 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.193267765 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124856396 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.13367579 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.088807993 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.859054589 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138602173 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.117950789 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.429798299 seconds)
done (took 5.341874842 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.16768081 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093129167 seconds)
    (2/2) benchmarking "String"...
    done (took 0.084308747 seconds)
  done (took 1.410117399 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07198285 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064765423 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06918814 seconds)
  done (took 1.437650697 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06670549 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135539695 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.06834575 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068740303 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068400166 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.0680205 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068192277 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068278483 seconds)
  done (took 1.784199993 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072175068 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068015398 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065952184 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068436577 seconds)
  done (took 1.509362059 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065775741 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.121707795 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066194217 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066687186 seconds)
  done (took 1.553480054 seconds)
done (took 9.189109861 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139819818 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.828001186 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.763912246 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126198649 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250762114 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.451721449 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124800561 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183499726 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089552275 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.0757079 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121944325 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078687435 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.399883109 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.400191319 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071846604 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175763718 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.652320299 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089924202 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.13738247 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.470476247 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074226827 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089311075 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08641024 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071687865 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.331405755 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153929172 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.6640127 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097048904 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068773734 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096382679 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071516306 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078727315 seconds)
  done (took 10.78357984 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093323819 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090220436 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069246305 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124324482 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094981815 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070085037 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075827207 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067917448 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088985561 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124302052 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089960032 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099388677 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066700944 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.074347523 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074728427 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197734398 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080510957 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081558773 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068460699 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081406723 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106569058 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07962454 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078945762 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078463377 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132950019 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.172226899 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097012624 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098221589 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066444927 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079624138 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115593088 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128741129 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069220192 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067615272 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122592006 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097646714 seconds)
  done (took 4.696679202 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.888264326 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.116240207 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097390557 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084759922 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076685672 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109372208 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114290045 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121487195 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.124361288 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.102810526 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070893354 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155784056 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.649177467 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.173485129 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072134051 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120999805 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.368283813 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.057980092 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070269532 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070150961 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073221611 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072308203 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.115377505 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067607188 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.182588455 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.584971982 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072221382 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06963536 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098648524 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067957114 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.144693183 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095530791 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07209178 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.541706992 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06570409 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064312559 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089618843 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093465101 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067209952 seconds)
    (39/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.179926756 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070571465 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081616224 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068334944 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.11147588 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082190089 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.494310816 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072075816 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.56625527 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229600662 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.076048572 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074207144 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10351712 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066049696 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069545269 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.900319019 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.125711794 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068399747 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.277714972 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070469668 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070511688 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071074548 seconds)
    (61/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066082081 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.105738743 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069381213 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070559417 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07556988 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098843745 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.878309546 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090064579 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098747804 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067159252 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.402311634 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076481816 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071148746 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072459126 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.086883266 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.112535474 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06847023 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06852801 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110828565 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091453745 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089011472 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069966825 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067692166 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067053249 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.324053542 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.157639098 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06686752 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067995848 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.476800298 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064572507 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06819231 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069784646 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.0911188 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068859327 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065147695 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066269182 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101178609 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067895009 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.450693136 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069738391 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.444047981 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068755958 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102690714 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118815479 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067696597 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.094999796 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.06798557 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065947236 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073351657 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065742899 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064813706 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064582561 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069339222 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065728965 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066581071 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069162955 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068667679 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0674586 seconds)
  done (took 22.878571825 seconds)
done (took 40.489851785 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.333042403 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080875948 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081092161 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.082166819 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081061485 seconds)
  done (took 1.945506502 seconds)
done (took 3.328176705 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132252582 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075704941 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064620164 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100696311 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068630472 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101656461 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108760866 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104142787 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069251419 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068642801 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068908615 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.104541961 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105138158 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068699061 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098336909 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.1038772 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069052166 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064719572 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068852314 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068865948 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069402613 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064577023 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069119432 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068857319 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099802424 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069081686 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064714264 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099257785 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.06895591 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098593419 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.06934429 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.068929428 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069228425 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.218257154 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069280899 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099621722 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064835096 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069046139 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.068766341 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.0692937 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069013226 seconds)
  done (took 4.754710993 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071021381 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081807512 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08353668 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063147127 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073306361 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084122183 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062560196 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083457285 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.093319252 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084610249 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.0842412 seconds)
  done (took 2.202299687 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069995833 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083306113 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084476633 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062933581 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073417573 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083129433 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062366106 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083122184 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085779519 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083909603 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083750141 seconds)
  done (took 2.176156374 seconds)
done (took 10.444071475 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096096856 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066124314 seconds)
  done (took 1.46675306 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.22371264 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.507534224 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.335211427 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.09399957 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072514774 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.087857092 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.207186126 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.069724369 seconds)
  done (took 8.089965733 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.103827649 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.06949674 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069450179 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06934609 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069020301 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.07140067 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070754686 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.0697714 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071776266 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070444858 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070745838 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.07067448 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069482427 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069507518 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071547495 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069556468 seconds)
  done (took 2.577082785 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104855587 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070946428 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101673268 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063828834 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073997264 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064364959 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072897806 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07509157 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072171 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073032263 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074108872 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072733384 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072799789 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073534558 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074774664 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075359851 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.07517185 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072724945 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074916531 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075437705 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074355554 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075523953 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07531634 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073470786 seconds)
  done (took 3.248239639 seconds)
done (took 16.70748917 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.173903922 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076396029 seconds)
  done (took 1.560739735 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068295516 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.07023857 seconds)
  done (took 1.473799129 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072932333 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062325991 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.081331535 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072584749 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063453916 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062637125 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079673503 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063620876 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063189322 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063039674 seconds)
  done (took 2.017066067 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063052492 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071172986 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068352956 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066473783 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069395555 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064411446 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067424024 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065210139 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071689036 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064081024 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068220631 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085524559 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067750825 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086518588 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067675332 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068652633 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069346879 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067608209 seconds)
  done (took 2.581844898 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061054407 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062927792 seconds)
  done (took 1.458319034 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065126245 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063442824 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06608619 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066552659 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063465553 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063278607 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063679661 seconds)
  done (took 1.779724689 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.427791153 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124670394 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.347536207 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070506312 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07906549 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259246854 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065363366 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070121499 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070765991 seconds)
  done (took 2.889288371 seconds)
done (took 15.107742326 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082221397 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182364149 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.09017637 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.410252554 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.093880102 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06906413 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114624733 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.180182602 seconds)
done (took 2.580916377 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.278561156 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.251125679 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.404225412 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.12692523 seconds)
  done (took 3.1200709 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.335044304 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.080168711 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078906609 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068918256 seconds)
  done (took 1.9182421 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065098165 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072872739 seconds)
  done (took 1.482649394 seconds)
done (took 8.154895587 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072209266 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062189331 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.069578096 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06740908 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.066081958 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065112581 seconds)
    (7/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.094139774 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.077255412 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063748292 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.066160453 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.066271348 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066253332 seconds)
    (13/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064900013 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066200011 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065705455 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.063840891 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065940623 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065541132 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06574666 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065485187 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065774272 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06637 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065139185 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066035685 seconds)
  done (took 2.993979905 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.07973744 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065926485 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068384791 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.06829962 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06913907 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.069016236 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068960404 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067483427 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068618982 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067227736 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068838138 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069270208 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067088846 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069192533 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0670807 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069338237 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068782908 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070616262 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067293076 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069504231 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068732047 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067923797 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069168569 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068549283 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069121626 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069177327 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067357757 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067765539 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068799282 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06958679 seconds)
  done (took 3.426852476 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066378328 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061015749 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061995578 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071865003 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061804911 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061850226 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062518643 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.06150934 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062300164 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063618481 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062632783 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061834682 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062427251 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061753792 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061759808 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062327701 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067178337 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081385483 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062063613 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061884612 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066296486 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062527155 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062143016 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06210404 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062791851 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062234618 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061582353 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062528757 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061622285 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062871841 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.06170634 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065835876 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066986283 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061631684 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071672392 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066313639 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062260734 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.06645686 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062767353 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061448157 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061508124 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061437314 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061648669 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061635925 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072046993 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062647497 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063219269 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062745116 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062373134 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.06163281 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062194279 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063900627 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070520218 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063410872 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061799305 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062858112 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061729542 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062510405 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.06181893 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062026491 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061799589 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065582475 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063609794 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062732233 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081481084 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063754174 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072033287 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061762179 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062491902 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065468777 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062349009 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080126149 seconds)
  done (took 5.980105947 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071541195 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07430423 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.08106218 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072124433 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066467758 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06330706 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066895834 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063154891 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072806837 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067514297 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063565568 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066800331 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072502648 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067534138 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064339505 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.07282057 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067129266 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066122302 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063319803 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067406528 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064617126 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066968093 seconds)
  done (took 2.878893311 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.134903276 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068374461 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107698636 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076621655 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070749224 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077230347 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068218213 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068187307 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068261795 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068483184 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068965784 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068316272 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070364556 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068677562 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068446402 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068461926 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067832026 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068609951 seconds)
  done (took 2.723808921 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076664046 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067630142 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091341018 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067329932 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068067109 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067884655 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071572114 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071803771 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067488422 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067744511 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072069272 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067560381 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067373806 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067905518 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067587177 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067827516 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067106927 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067641386 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071773716 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071248013 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071437988 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071699597 seconds)
  done (took 2.914877657 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077334218 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06664371 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082556285 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067986713 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062205344 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06214084 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067638755 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067352041 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067766806 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066377438 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067666503 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062123186 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068632151 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067257803 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068398179 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067598899 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066769733 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067167213 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066532741 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062351607 seconds)
  done (took 2.720892761 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086205986 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064788351 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065348983 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.083863644 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064768344 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064914298 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084602254 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.066889461 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065441114 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086849365 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065128092 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064862513 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084676102 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084519631 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065126056 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08424384 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084653872 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084532414 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064856927 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065205157 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08720418 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065123346 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084530711 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065003125 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065058777 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064896327 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064869948 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084391229 seconds)
  done (took 3.431824346 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064499598 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064491054 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.06521871 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065231999 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065774218 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065231628 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065640164 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065748136 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065624852 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06637291 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065321938 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065499234 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068559301 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065439838 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065343705 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065663882 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065634809 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065919764 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06578184 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066273446 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065808863 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065671921 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065847898 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.0663909 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065834604 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065377126 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066322627 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06558725 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065250528 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065733239 seconds)
  done (took 3.344501594 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073228849 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071476524 seconds)
  done (took 1.518928438 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062122841 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077760177 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.06156658 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073991882 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070608218 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065547835 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071232704 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070469002 seconds)
  done (took 1.922772773 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06680731 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090699649 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063591212 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064763509 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.06894136 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.130252468 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076514353 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07562105 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077455377 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066148805 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064354888 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076147028 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063779449 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077491003 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065539371 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072851832 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071072605 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082031261 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077032479 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062526117 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076072698 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064815484 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062405325 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065112234 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063929442 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070745088 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080099603 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076472982 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072646126 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061425118 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.08294898 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062967638 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064052886 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072418603 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067430991 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062979857 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100770421 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063550744 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068391637 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062522334 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.07544677 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.08408724 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077630762 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.08159522 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.06473838 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065296955 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062501681 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064660966 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066395596 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072189994 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062667975 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070436712 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062072297 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064437894 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073331962 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063078157 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068633341 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.0726064 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07699048 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073404412 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.0719726 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078462188 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071896801 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071375884 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064046258 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.0826436 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065041087 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076375982 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078056258 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064542613 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076577341 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062557367 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061544988 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062806091 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097089246 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064819663 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064237609 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062715379 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062602632 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064697169 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072859256 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068623597 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07069702 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066658151 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079311199 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072475087 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062854199 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.070072012 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080765578 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06623808 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06308382 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079359952 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066383105 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062085665 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.081013789 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072472921 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064445828 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.06348713 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065835085 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075960273 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063987944 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.06144211 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070732128 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063954182 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064775072 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.067313554 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070505846 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.0622578 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.073041675 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067364398 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.064049708 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061378849 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066929465 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063584683 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.061280604 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071799277 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.06246804 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076785227 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068327065 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076331446 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07667365 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072583403 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07770643 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062122961 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060448121 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079450068 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071541948 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.207853982 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.082823011 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064185696 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.07840264 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063027452 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065319561 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072848521 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062560689 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065222902 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062724699 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068749202 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064674539 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064779396 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068850398 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071853228 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075261767 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064543893 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.07149694 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.065585598 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078706634 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073193054 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067838617 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066530457 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063388927 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075198933 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06931735 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072497406 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062533908 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063397364 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062970891 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073496263 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072697265 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06496415 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.07084342 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067326507 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.06340671 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062916325 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064203584 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066418311 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066917881 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063989077 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070811116 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071730678 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077015729 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070722676 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072236991 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061844805 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062336111 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.065127733 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062786122 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067139682 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.07275759 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078729165 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074977711 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084376859 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063247377 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072688257 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064569846 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080254771 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076687701 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064336074 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068188599 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061806134 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064998078 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072465602 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074784159 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076714697 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077991396 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067418271 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067557224 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06260256 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077875438 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063467623 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071712126 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072449997 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067572712 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.06297097 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06463649 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072597166 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06748888 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063185816 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078982637 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069504445 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062680072 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077512558 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063100015 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073695386 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062413189 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066764191 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068057569 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06511123 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072594697 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07856412 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.062192827 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06396462 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078803456 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065250185 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064974801 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071706855 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078252404 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067432344 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071082041 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07407786 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.073052131 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067331971 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072576665 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063482525 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072026632 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065877645 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074324899 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062808372 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080571244 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061810396 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077878296 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062645743 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073386935 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063470826 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071824173 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06325722 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079528699 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063413986 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062826568 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.074076584 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.061077548 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071586863 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061480985 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067149263 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068720148 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071600798 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.06400985 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071472398 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.064032548 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.21948713 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06880463 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073027856 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073839177 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068822881 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062969311 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071975436 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074686862 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071563205 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064635113 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.06439469 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063835401 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072663558 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064585035 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064731776 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071615785 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068061501 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068623232 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064832778 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065166116 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065033342 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071343185 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073175799 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081241549 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072446732 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070743224 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072092765 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062555163 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.080843912 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063300562 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073792975 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061628447 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069003595 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072210893 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.06330467 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082368312 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064937777 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070943921 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075378889 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071997922 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066228484 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081041514 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066386982 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072088155 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.07319402 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067435686 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069668637 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065008717 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071632848 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072697918 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073773452 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064224536 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070614327 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072356433 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064978816 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071254121 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06498238 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071520018 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064821697 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061935423 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067563298 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074806801 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067645189 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068116037 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063497339 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061808964 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063562561 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070420107 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067747571 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072017113 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078802924 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.06216572 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064249208 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062763788 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06671511 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081958845 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073369555 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071126572 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067648019 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062536305 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064967749 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065413697 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064167515 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066856075 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062501228 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062926484 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074151054 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065520288 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067339149 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063857517 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064194086 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072847283 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068436037 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063775382 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069575299 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063230608 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068261531 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.06289697 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.065405477 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067653423 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062519578 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06668233 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073802212 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079635853 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069670588 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071774797 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064233678 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071145936 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.079085056 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070569307 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064258651 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072820335 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.06250694 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081425509 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072318031 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071363251 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072777332 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.064177296 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079221332 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066839368 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072355232 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078074608 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063375394 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068989763 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061519411 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077491904 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06674009 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.06182245 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070356912 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070484516 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.068190473 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.074149474 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.062817017 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.22267242 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.070060397 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.068067311 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065876535 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065312041 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072872769 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080089405 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064343187 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067970789 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071317757 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072128023 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067310856 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075569777 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071386261 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064660557 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064911612 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066768912 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063880508 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075232021 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063571085 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067936888 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067745526 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.0632429 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070124992 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080078452 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072641973 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07275437 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062678314 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062028034 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081116666 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066416636 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066573266 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071229735 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072914945 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075249659 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072716633 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.08001901 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063784499 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.071759688 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075744893 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064266107 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.06293062 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066618276 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064806045 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072003263 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072993362 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070824923 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065234726 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069165279 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077035749 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064368752 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067876179 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068458603 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064039838 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07363724 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071337978 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074973416 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064626495 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062794438 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066183578 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072285469 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.071199916 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072439315 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064457359 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070051965 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076984882 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071112369 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066440242 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.06256845 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066765455 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.071934706 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067838836 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062816487 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067805678 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.067197279 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070612544 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072784373 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067568175 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062954334 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080361266 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071326916 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072852254 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065501712 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065580496 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064199241 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063169613 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074744508 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063058146 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.06529882 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067635172 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065010696 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.081089752 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071550679 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079677654 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064384319 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067446325 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062556494 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072960475 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067844918 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063663558 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073781534 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062614868 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078968195 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075907385 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.069133074 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.083766776 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067952807 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071347133 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078167873 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072847385 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072553059 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066580308 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072807597 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06508212 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073923512 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062796908 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061686163 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.073073413 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071488835 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075599318 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062722115 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072641694 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064523094 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.07094719 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070169464 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063819437 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063692481 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06346791 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071211242 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.06627762 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071089945 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066618971 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.229513887 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065359416 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075877533 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073469926 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074918435 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077327161 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076055216 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071333664 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063950985 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070514148 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.07112238 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064521636 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06788065 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066686396 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085627027 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065010349 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.065136478 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077997083 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070166718 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06322754 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.06989883 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067905058 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073367558 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064654774 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073745422 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067775293 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064004555 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067588163 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067793641 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062097564 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062676434 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.063330411 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072909074 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067300889 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063036147 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082378469 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.06501204 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071922552 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074524568 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069922699 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064689723 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062023303 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064178875 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075921616 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078727632 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066416932 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071662137 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064515969 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.074553841 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062168198 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071732757 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071277521 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07169085 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062625415 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06365543 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07824683 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079243682 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067635798 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.0727686 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072526721 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06502574 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085246546 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072549758 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064654134 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074524778 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065803226 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062533714 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062587521 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064921698 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075231066 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062858241 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065744169 seconds)
  done (took 43.390367511 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100109824 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064694201 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062599928 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062720513 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074229067 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063913824 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062749408 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063953036 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063880564 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065799614 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063008552 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.066177975 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074237246 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077008679 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073541446 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067097163 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063086415 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064222985 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063340659 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063815369 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073236798 seconds)
  done (took 2.929041465 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065144132 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.067121836 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067198832 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067575257 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067050095 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062991969 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067420221 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062890716 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068512289 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063890213 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067931839 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063584444 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.06373741 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063736016 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06337983 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064553944 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067618377 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066802866 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062889535 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067426744 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064711068 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067360538 seconds)
  done (took 2.914051945 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063366478 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063437808 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071848967 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.06197722 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062343906 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066350192 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062332701 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066912621 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066743527 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066865109 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071703907 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063583037 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062850535 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068491419 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062809256 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.065282473 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106598865 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.06363641 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063921767 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062493236 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065390106 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071717401 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062636474 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062267192 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066827462 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065987593 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062322125 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065252644 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063221577 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066743639 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063794161 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062117768 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071404097 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.07107335 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.0668766 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067053827 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064299901 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063499371 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062497586 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063028956 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071380039 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063842583 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062855241 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064088308 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071733321 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062492374 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062170365 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071827781 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062673964 seconds)
  done (took 4.71793732 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071648555 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116058719 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.0689121 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096757661 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075971661 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068961116 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068442172 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097380846 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064004372 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064584171 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077133249 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077652269 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065704393 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066902612 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069832251 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065614645 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066378931 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064804206 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068363911 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065402343 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068873642 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070063497 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075563316 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076407644 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066655289 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065057371 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065089174 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066760249 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076370529 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069182471 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067004583 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068519537 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076444949 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070598256 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065084791 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065196935 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076959962 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066126887 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065761938 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064239208 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065301808 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067447601 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069898534 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.078165848 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066443621 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.071195999 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065656087 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063626924 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076514741 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065215996 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069709481 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077793091 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067287172 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065997661 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067305941 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076612303 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065896474 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064443629 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066173723 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076107881 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064048168 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066588846 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.080233216 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065542263 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069541843 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077624889 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.071041539 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066797057 seconds)
  done (took 6.432190751 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070280591 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097306448 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074010683 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073774318 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073412353 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073580092 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.07379472 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073478663 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073256766 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07422894 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073785621 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.114462927 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070305678 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077897711 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073780184 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073518013 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073938707 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073514246 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073998036 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073544891 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073740708 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074244675 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073674064 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073789365 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076282089 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069663756 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07349209 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073675362 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074239362 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07410381 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075994021 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073807816 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073624442 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074354335 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.075998536 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073646285 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063843529 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073690674 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073685103 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.0735068 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070507125 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074027823 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073965308 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069855378 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07405369 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073469233 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074382173 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076466949 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081182693 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074341828 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.074329604 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073997263 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07349292 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074582892 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074376429 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080737348 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074523396 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074530558 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074937213 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07431791 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074361429 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080951777 seconds)
  done (took 6.165812748 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07465039 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069328832 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.08222519 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062825753 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062571896 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072749547 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062601154 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062828556 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069909263 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069824212 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071922472 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072551269 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074372761 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072094117 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072259162 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074469051 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072565866 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072236365 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070020918 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072469049 seconds)
  done (took 2.91890871 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076310014 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.08207529 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.069139562 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071979348 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068191079 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072354532 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067949961 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068840986 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069282191 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068263724 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.07525318 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073867018 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06899826 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.07259021 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073554321 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072347545 seconds)
  done (took 2.638538374 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064977165 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.071302803 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.069768323 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064592227 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066093319 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063412601 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064121715 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062836007 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06583661 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077165632 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063619094 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066657784 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064343648 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.066152906 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063398815 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066573555 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065741409 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063528201 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064041468 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068646989 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072656203 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064708168 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.0666589 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.063812219 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065925916 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072944047 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065728622 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066102026 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063977426 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066669999 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066517183 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070796733 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066527842 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064316475 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062953784 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.06377738 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064701365 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066682293 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067045679 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064080709 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062730657 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069176014 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06467202 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065158028 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.066975382 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066948409 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.06598155 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069584622 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064227584 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066519732 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064491556 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065771443 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064285517 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071395738 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066370467 seconds)
  done (took 5.131533897 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07818833 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068072982 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062492473 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062420554 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067783719 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068835176 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068072231 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068228308 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068964106 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062676368 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068939038 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067869067 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068752333 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068422378 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06888493 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06857003 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062497228 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06838247 seconds)
  done (took 2.723061963 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067425734 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068077654 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.067363885 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064834684 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.066539853 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069683055 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063216244 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.064539445 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064385795 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065099066 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064938151 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064246488 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06477407 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064294367 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069014756 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064814303 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064704658 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063176745 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064685716 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063132728 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069647391 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063048474 seconds)
  done (took 2.936534845 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088084296 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085834837 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.13035173 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082198649 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090908395 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.07376515 seconds)
  done (took 2.048613683 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093996617 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104687263 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067487033 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067705531 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076652374 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071370495 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07094284 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071381928 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076449646 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075579631 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07094371 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077138294 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076967691 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073106285 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076990275 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079618978 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071512136 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071158494 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068227742 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079784277 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071429138 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076730101 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071438656 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070991893 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071541028 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072902711 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079622642 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075408559 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071917287 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077075792 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079767018 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071502633 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077250427 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075098951 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06831747 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077632805 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071338524 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079550426 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077035691 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073140166 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068128488 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076942464 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077124703 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07323865 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079616019 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071964663 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07304161 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072102963 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071974778 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081956925 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077403718 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073432543 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077660263 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080371941 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080322115 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082522854 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075594168 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073748679 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0778617 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07632217 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073787133 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077554646 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073758417 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076004462 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080338345 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073478466 seconds)
  done (took 6.492867165 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100800935 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068241342 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071143202 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075367773 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073377761 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072017415 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071718252 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071575031 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071522586 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068641536 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107683347 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07224884 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073331401 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076351565 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071951202 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071929591 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07221381 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073809877 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069324614 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082040736 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072118753 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073439558 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07344714 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073845032 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075905826 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079749444 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07176968 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071436032 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071542456 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071187474 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073121794 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071843057 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073230299 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068537405 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07318541 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071465942 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071461102 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072926901 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071457181 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077028696 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073102462 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079870436 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071667527 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071584886 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075411177 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071424178 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07111355 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068433664 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072120908 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06906492 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075519428 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075818379 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075845338 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073659938 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072236547 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071935871 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071651184 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072051366 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072081609 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079940354 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07321458 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071637484 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082275026 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071593055 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072187041 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073882918 seconds)
  done (took 6.414202215 seconds)
done (took 133.065908947 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.235193463 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.217207047 seconds)
  done (took 1.939314488 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075494772 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.169447005 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075202321 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.076837327 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.11176144 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107886204 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076070151 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07473338 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.077390487 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.074962201 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.141998512 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076827975 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.074829548 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.075319523 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074789384 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.074815176 seconds)
  done (took 2.951664357 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.10815558 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.189220337 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.085052301 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072080255 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.117067111 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079776051 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075057392 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078061794 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079624542 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072371803 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.110267681 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084339689 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.077192506 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.079928999 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074647505 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.0767302 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078024719 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079721048 seconds)
  done (took 3.134946857 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.09771701 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089258209 seconds)
  done (took 1.706182735 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156272177 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105830625 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146594874 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.330712736 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.13098209 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.130629952 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.134350748 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.129694753 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11487339 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122458175 seconds)
  done (took 3.0150937 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106594285 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.10814857 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310929727 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105543424 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.084941124 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079921849 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077620498 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082827785 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077884177 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078894082 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.12568208 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077763593 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.075052959 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127578817 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102287499 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.109914803 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073659699 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.081087 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082089985 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072998811 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.078783551 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082412608 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.181897079 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.081269315 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.104056535 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.078590992 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.08017107 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077019935 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077035279 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.081469332 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082278777 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.102839057 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080921365 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085052807 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.080096673 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.100267773 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074633881 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102868697 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077477532 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074726658 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077833397 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082050298 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074830193 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.081123437 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077525539 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.080756524 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08316389 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073463229 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077717227 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077153722 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07532043 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079346879 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078858332 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.080513965 seconds)
  done (took 6.455077813 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10731158 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109187731 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072994264 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116123704 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108651245 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072734177 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.107544149 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103447939 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.112399277 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072611409 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071559522 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071957213 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079435593 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083494651 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.118843687 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108951318 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.074768255 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.073580498 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.110873584 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.110750151 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071790105 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.104458256 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103376943 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110444461 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.071412364 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.072758114 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070854026 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071950395 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077172381 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078142261 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071448391 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079203491 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.087774131 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076917385 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071000366 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071045884 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071620999 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07874852 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079505153 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07969513 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077926681 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07096739 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071623445 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071755899 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072260298 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070827953 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077808905 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.07901334 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077810126 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071342258 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071689632 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071099845 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072003061 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07849322 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077791476 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080129431 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079292397 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071536735 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071339016 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073236332 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080479184 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079861252 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079430129 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072721786 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080541989 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071495668 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081939369 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.085447007 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071821671 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071947296 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071424119 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071295934 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071678802 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077563497 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077629106 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072257579 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071688693 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071390141 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080389733 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078172924 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071569053 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077361944 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071186623 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071580297 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072366874 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072130237 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077593583 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079455527 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07262125 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071386476 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071558466 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071310336 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070511303 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077577564 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.079250377 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.07910916 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.077936077 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071685768 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.077376299 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077963097 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07148971 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.077661179 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071019257 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07090926 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07057586 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076350688 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.076052873 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077799552 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070514657 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070494479 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.076556022 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078755803 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.216973853 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.079308989 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081613674 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.07967205 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.072087803 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081922265 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072924095 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080643467 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070362122 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080978901 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072083186 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078179931 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.07160313 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070784013 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071134169 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077767825 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072039411 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071607812 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.302209807 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071341463 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.07811218 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081429966 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072346437 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077881035 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078008252 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072062782 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077876174 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071594305 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079165695 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071755595 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071602292 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072245746 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080778044 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071397503 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071331653 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071911444 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080416545 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071969994 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079824505 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077425082 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07123425 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08350357 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077347826 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.077543894 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.08053187 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072800074 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.07215864 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07194895 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.075082641 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077461876 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078778504 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072267898 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071706066 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077217452 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080882343 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071315341 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077678178 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077764911 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.078217306 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071932667 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071607274 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082167932 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081166096 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078249286 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.078545581 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079333822 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071857836 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077915708 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078056142 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071491001 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085782456 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071817221 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.082425214 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078947262 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078223143 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079059624 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079743374 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.08057311 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.08115178 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.084017607 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071785253 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071318928 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.078076382 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071168544 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071779708 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.078252382 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072253569 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072348272 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.084364096 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069408275 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.080711146 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.071040225 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.079134709 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070460667 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072146652 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083528591 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071895988 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071638882 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077844837 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071873055 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.077776317 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080988686 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07588557 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071088247 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072086396 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077807252 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.078078311 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.0710989 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070753946 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071570703 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.076559114 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.076350547 seconds)
  done (took 19.288794185 seconds)
done (took 40.029777009 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.17543991 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.120176422 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.21380528 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.207234683 seconds)
  done (took 2.343468369 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10122685 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067765817 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.084377068 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.094046208 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.068028749 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079397922 seconds)
  done (took 2.061989758 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.19961842 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175582559 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240518106 seconds)
  done (took 2.179200744 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.372256652 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.154221043 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221785059 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.509404254 seconds)
  done (took 2.925337164 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.112949234 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.104278717 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.081492308 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.115609658 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.089114793 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.065706948 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.138458825 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.072822923 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.104096159 seconds)
  done (took 2.512562288 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.133232793 seconds)
done (took 13.760805621 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.110618541 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.243000585 seconds)
    (3/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.193905268 seconds)
    (4/341) benchmarking ("sort", Float64, false)...
    done (took 0.141269898 seconds)
    (5/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.131104353 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.125942433 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.129013058 seconds)
    (8/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.204860795 seconds)
    (9/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.074427702 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.193023957 seconds)
    (11/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.225780232 seconds)
    (12/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.280102071 seconds)
    (13/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.205913305 seconds)
    (14/341) benchmarking ("sort", Float32, false)...
    done (took 0.141246406 seconds)
    (15/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.223138758 seconds)
    (16/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.242738881 seconds)
    (17/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.085653888 seconds)
    (18/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.078070442 seconds)
    (19/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.077550774 seconds)
    (20/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.118819407 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.078982118 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.138803753 seconds)
    (23/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.233509772 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080838055 seconds)
    (25/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.077177205 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.183595748 seconds)
    (27/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.239788522 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081200506 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.091150438 seconds)
    (30/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.146960899 seconds)
    (31/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.148592748 seconds)
    (32/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.145248796 seconds)
    (33/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.082657771 seconds)
    (34/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.187201781 seconds)
    (35/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.16234451 seconds)
    (36/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.071167773 seconds)
    (37/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.189300243 seconds)
    (38/341) benchmarking ("sort", BigInt, false)...
    done (took 0.268402744 seconds)
    (39/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.081219868 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.077839381 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.178802335 seconds)
    (42/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.080306788 seconds)
    (43/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.257298756 seconds)
    (44/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.080027294 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.098310678 seconds)
    (46/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.086824058 seconds)
    (47/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076828262 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.079242235 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.079499405 seconds)
    (50/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.087146591 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.135480629 seconds)
    (52/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.076213535 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093463394 seconds)
    (54/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.089301299 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.100904771 seconds)
    (56/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.146854618 seconds)
    (57/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.09499372 seconds)
    (58/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.201506369 seconds)
    (59/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.167799134 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.09336162 seconds)
    (61/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.076432425 seconds)
    (62/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.195847655 seconds)
    (63/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.075888562 seconds)
    (64/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.06842659 seconds)
    (65/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.079159088 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.077818069 seconds)
    (67/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.226484317 seconds)
    (68/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.07729276 seconds)
    (69/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.07792416 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.091335517 seconds)
    (71/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.221700739 seconds)
    (72/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.150087811 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.09373549 seconds)
    (74/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.203941755 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.090404671 seconds)
    (76/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.077135762 seconds)
    (77/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.36929225 seconds)
    (78/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.080779637 seconds)
    (79/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.208267238 seconds)
    (80/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.073186133 seconds)
    (81/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.206896275 seconds)
    (82/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.099012991 seconds)
    (83/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.203589676 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.148100304 seconds)
    (85/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.081570489 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.07743738 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.09889375 seconds)
    (88/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073614693 seconds)
    (89/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.086352581 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076910371 seconds)
    (91/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.093783024 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.091984011 seconds)
    (93/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.079146111 seconds)
    (94/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.247353556 seconds)
    (95/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.069232569 seconds)
    (96/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.166392502 seconds)
    (97/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.08077507 seconds)
    (98/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.068887849 seconds)
    (99/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.081392216 seconds)
    (100/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.153114801 seconds)
    (101/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.071131559 seconds)
    (102/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073489373 seconds)
    (103/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.181160206 seconds)
    (104/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.176550049 seconds)
    (105/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.070455431 seconds)
    (106/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.15216486 seconds)
    (107/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.079682392 seconds)
    (108/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.069419668 seconds)
    (109/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.069269171 seconds)
    (110/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.143978206 seconds)
    (111/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.072587781 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.068468213 seconds)
    (113/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.071236112 seconds)
    (114/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.06854419 seconds)
    (115/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076404017 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.12236516 seconds)
    (117/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.076531984 seconds)
    (118/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.090272041 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.06872176 seconds)
    (120/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.06949148 seconds)
    (121/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.081524011 seconds)
    (122/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069677967 seconds)
    (123/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.077734757 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.089989443 seconds)
    (125/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.068302652 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.068509661 seconds)
    (127/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.168570569 seconds)
    (128/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.142946509 seconds)
    (129/341) benchmarking ("sort", Int8, false)...
    done (took 0.152545371 seconds)
    (130/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.073088465 seconds)
    (131/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.086593768 seconds)
    (132/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072670153 seconds)
    (133/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.17615453 seconds)
    (134/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.069479736 seconds)
    (135/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.141834162 seconds)
    (136/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.185793385 seconds)
    (137/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.067961602 seconds)
    (138/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080709951 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.084275803 seconds)
    (140/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.146815586 seconds)
    (141/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.077001877 seconds)
    (142/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.068248688 seconds)
    (143/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.090022565 seconds)
    (144/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.077591824 seconds)
    (145/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.068566351 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.145114228 seconds)
    (147/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.07360291 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.077732466 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.089385889 seconds)
    (150/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.095927458 seconds)
    (151/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.078457016 seconds)
    (152/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.069694777 seconds)
    (153/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.069050957 seconds)
    (154/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.088084345 seconds)
    (155/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.077316594 seconds)
    (156/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.068948537 seconds)
    (157/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.076647475 seconds)
    (158/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.223216641 seconds)
    (159/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078922638 seconds)
    (160/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.159109439 seconds)
    (161/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.20496234 seconds)
    (162/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.148382372 seconds)
    (163/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156335198 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07841453 seconds)
    (165/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.069016071 seconds)
    (166/341) benchmarking ("sort", Bool, false)...
    done (took 0.145755377 seconds)
    (167/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071596366 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.092165593 seconds)
    (169/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068130537 seconds)
    (170/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.085323938 seconds)
    (171/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.069306569 seconds)
    (172/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.193509055 seconds)
    (173/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.195742569 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075848059 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077781795 seconds)
    (176/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.068349863 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 0.069382576 seconds)
    (178/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.068670781 seconds)
    (179/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124746161 seconds)
    (180/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.153477365 seconds)
    (181/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.075491443 seconds)
    (182/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.327078811 seconds)
    (183/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.073898299 seconds)
    (184/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.076434774 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.06856008 seconds)
    (186/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.068138263 seconds)
    (187/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.075744928 seconds)
    (188/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.160192468 seconds)
    (189/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.067171936 seconds)
    (190/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.131072247 seconds)
    (191/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.069356529 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067232973 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.069098824 seconds)
    (194/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08758942 seconds)
    (195/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076782488 seconds)
    (196/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.070521138 seconds)
    (197/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.073743979 seconds)
    (198/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.069759087 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.150866966 seconds)
    (200/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078337489 seconds)
    (201/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.069076906 seconds)
    (202/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.202679368 seconds)
    (203/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.074521386 seconds)
    (204/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.07056994 seconds)
    (205/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066590169 seconds)
    (206/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065115396 seconds)
    (207/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066914796 seconds)
    (208/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.155281726 seconds)
    (209/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.08504972 seconds)
    (210/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.144652016 seconds)
    (211/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.083392517 seconds)
    (212/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066751003 seconds)
    (213/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068459032 seconds)
    (214/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.069327982 seconds)
    (215/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066722303 seconds)
    (216/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067384954 seconds)
    (217/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147367126 seconds)
    (218/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.075794471 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.13004033 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.153222833 seconds)
    (221/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.076456421 seconds)
    (222/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071507466 seconds)
    (223/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071238605 seconds)
    (224/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.144194457 seconds)
    (225/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068796222 seconds)
    (226/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.075700627 seconds)
    (227/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.069513382 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087238612 seconds)
    (229/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083218357 seconds)
    (230/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.068429547 seconds)
    (231/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067209805 seconds)
    (232/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.069404169 seconds)
    (233/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.240768135 seconds)
    (234/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.075684209 seconds)
    (235/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.204894059 seconds)
    (236/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.077494679 seconds)
    (237/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.091761336 seconds)
    (238/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.067765016 seconds)
    (239/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.07041983 seconds)
    (240/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07627874 seconds)
    (241/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067731795 seconds)
    (242/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.070727404 seconds)
    (243/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.069573054 seconds)
    (244/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069729188 seconds)
    (245/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076628329 seconds)
    (246/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071502908 seconds)
    (247/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.072974563 seconds)
    (248/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.085868275 seconds)
    (249/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.069310529 seconds)
    (250/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076603741 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.068299315 seconds)
    (252/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.068733907 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.134325814 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.08086959 seconds)
    (255/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.078824717 seconds)
    (256/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.067159167 seconds)
    (257/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.068632795 seconds)
    (258/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.069577275 seconds)
    (259/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.155569285 seconds)
    (260/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.070979934 seconds)
    (261/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.069544026 seconds)
    (262/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.069203512 seconds)
    (263/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.069745285 seconds)
    (264/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.06781942 seconds)
    (265/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.070156897 seconds)
    (266/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076259961 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.089467757 seconds)
    (268/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.076299952 seconds)
    (269/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.073090745 seconds)
    (270/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.096559232 seconds)
    (271/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.06994663 seconds)
    (272/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.069858544 seconds)
    (273/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067470648 seconds)
    (274/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.168440986 seconds)
    (275/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075919626 seconds)
    (276/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.176625039 seconds)
    (277/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.156857488 seconds)
    (278/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.069253991 seconds)
    (279/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.069471567 seconds)
    (280/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.071930374 seconds)
    (281/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.071476094 seconds)
    (282/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.067932887 seconds)
    (283/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.07017805 seconds)
    (284/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.070317315 seconds)
    (285/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.224396372 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.118678472 seconds)
    (287/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073836916 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.068546615 seconds)
    (289/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.069113655 seconds)
    (290/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.087036831 seconds)
    (291/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.070009301 seconds)
    (292/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.067976404 seconds)
    (293/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.068935416 seconds)
    (294/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067678248 seconds)
    (295/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.070534473 seconds)
    (296/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095819783 seconds)
    (297/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080304404 seconds)
    (298/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.067126295 seconds)
    (299/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092435066 seconds)
    (300/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071095409 seconds)
    (301/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.070528833 seconds)
    (302/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.069053425 seconds)
    (303/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.068543275 seconds)
    (304/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151885288 seconds)
    (305/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.06801309 seconds)
    (306/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.068404279 seconds)
    (307/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075708354 seconds)
    (308/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.068902842 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134141341 seconds)
    (310/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.249002107 seconds)
    (311/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.069728747 seconds)
    (312/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.069257925 seconds)
    (313/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.070027056 seconds)
    (314/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.070786895 seconds)
    (315/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.070729313 seconds)
    (316/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.077738209 seconds)
    (317/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.07047509 seconds)
    (318/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.074258662 seconds)
    (319/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.070862457 seconds)
    (320/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069425757 seconds)
    (321/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.070341177 seconds)
    (322/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.070545037 seconds)
    (323/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.069333225 seconds)
    (324/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.172305752 seconds)
    (325/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.069794415 seconds)
    (326/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.155874578 seconds)
    (327/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081316768 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.119614959 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.081093213 seconds)
    (330/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.070472681 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068801611 seconds)
    (332/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073747682 seconds)
    (333/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.06866166 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068283131 seconds)
    (335/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.071757665 seconds)
    (336/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.069319647 seconds)
    (337/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.168955797 seconds)
    (338/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.069419759 seconds)
    (339/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.070797207 seconds)
    (340/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.174334482 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126908669 seconds)
  done (took 37.992254092 seconds)
done (took 39.582863054 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.091040135 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081873401 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080428511 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077046381 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.080838217 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07938613 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.080755949 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079408713 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080406012 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080202827 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.080927021 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.06815012 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.07654113 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.084141281 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077957788 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.08472855 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.081564807 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084492898 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069430105 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.084084302 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.096874441 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.081031989 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077783458 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083080103 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069318116 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078066749 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093959924 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.090555539 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.075767582 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.078199526 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076458822 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.087187976 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076660321 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.074970758 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078907645 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074857966 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078861995 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.075793128 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093224634 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074897715 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069029805 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.081389875 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076179912 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.077134112 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077966489 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.081059573 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074581396 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.0823248 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068360581 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079709493 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092628609 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073879351 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.076531722 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077115978 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.074375522 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.078304934 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07581804 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080403503 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.074185827 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080619826 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.080984331 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077529446 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068745931 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077284561 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.076083723 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076458157 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067311001 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074182901 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068886276 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068354558 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067942441 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077500508 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075812336 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073498881 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067996255 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068469548 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067598058 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080821945 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074854372 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078112753 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.069208115 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074021589 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073428309 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068844042 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073962959 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.079791274 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.067866015 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.069016739 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068061861 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.083102352 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075077892 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068609058 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080241773 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074660136 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07385568 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068487668 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068072876 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07434616 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076524374 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068789039 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067869646 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074108052 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073608131 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077453009 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.069231135 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074759498 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074066002 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067557623 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.077877557 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.076013278 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.077792584 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.082157472 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077750403 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080609537 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.069274063 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.069670962 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.078687135 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.069025527 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074031031 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076730311 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074058046 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.077577376 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.069612711 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.068205096 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073882212 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074797907 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068843306 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.06900611 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.068972277 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.078023995 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075830141 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.067473385 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.068246492 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.07730975 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077228716 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067668525 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067224671 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.077117075 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.068488057 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.07401959 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.073780082 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.076716954 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.068415756 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.068230335 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.221048529 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.069384473 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.068673259 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.075087264 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074788436 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.069391035 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07784992 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.075087051 seconds)
done (took 13.34626686 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067698623 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109003131 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.076398339 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085489468 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.081506851 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070455088 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073162983 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086256623 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.072921728 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089793385 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.098076685 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091726362 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096945055 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.068941639 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069396759 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.070618838 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.068132997 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077842695 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084629218 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092922992 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.098579838 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069471362 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078581717 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086362373 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080696154 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086210769 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070690267 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070540595 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.072632273 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.12749199 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095588203 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.069459973 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070522858 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083213694 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.084159112 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.077139395 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.070655406 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073768555 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.073187591 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069431227 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071277665 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083857064 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07352994 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073596049 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.07037827 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.070946181 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069823005 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073090106 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.086055993 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072663168 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077755112 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081760193 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071461675 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069766761 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067769285 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073425059 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.06960952 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070374557 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069763304 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069722672 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069870509 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.072016377 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070303122 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070253048 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073418843 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072289167 seconds)
  done (took 6.780915664 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.08319847 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095619504 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084760609 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08468995 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.0691709 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069926262 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.070088397 seconds)
  done (took 2.264935227 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067982442 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077363762 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.082579553 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.082438157 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.092277374 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.079848118 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.07071696 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102904157 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069349978 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079044371 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086073354 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083772032 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.07342355 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.082369242 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.07029185 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082321463 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070784833 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076863526 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.078101589 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083216498 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07394828 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100439 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083729217 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070492574 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.0838544 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077545713 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.072309065 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070552269 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070451871 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069788606 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068965851 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.091941599 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076330459 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082574807 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070417351 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068824408 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.075194958 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070488561 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.073974469 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.079062861 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.07381416 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.070388488 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070629027 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069828526 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.071338831 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074297142 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.070843435 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069735544 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069628265 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077479475 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068718475 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076547285 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.072187552 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.075041628 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.0746593 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074242352 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077233362 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.070085045 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077285432 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076180484 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069708617 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.082519307 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.083638143 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.07346179 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.081983419 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078429882 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076746192 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.073548415 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.069403367 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.069042901 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.070191659 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081999764 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.073310158 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071749019 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.07077169 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074800758 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.07418015 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.08542737 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.085301884 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.083623982 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072680139 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069940563 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073537954 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.085490705 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074943657 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.07003313 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070813601 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069523839 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074742046 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070030838 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074495175 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069987416 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076656387 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072630942 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072998045 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078911953 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.07016757 seconds)
  done (took 9.050054741 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070259953 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.072369848 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.071483773 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.071075733 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.071270298 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.071588849 seconds)
  done (took 2.165206121 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091512234 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.070732771 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082324507 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070835638 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.093301087 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077449491 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077576861 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072544904 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087422772 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.081161466 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077255417 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.08005344 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.077060354 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.072205315 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.076834382 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071556939 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.076789233 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073591084 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080491852 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072661089 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.087038063 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072593997 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072585392 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.083258351 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073899549 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071521831 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.07170491 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080783559 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080083029 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.072040351 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071900472 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073429219 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.079473461 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.072093181 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.077301659 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.079258858 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070436792 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.076043231 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.07277951 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073672446 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.079478671 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072725869 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072916355 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.076071165 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071906765 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.078973906 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.078256839 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07442012 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076753218 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.075955884 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075970693 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.071236534 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073596421 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.076081593 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.079473318 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071909532 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.076453764 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.076787469 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.072262033 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.079569031 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070276142 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073884755 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072307662 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073444144 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075417412 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.07650176 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.079163813 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072665027 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072350577 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070449373 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.07671374 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.070687984 seconds)
  done (took 7.167446149 seconds)
done (took 29.120815862 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552772642 seconds)
  done (took 2.219795037 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.599480916 seconds)
  done (took 2.313029395 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.518469207 seconds)
  done (took 10.235121226 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.306792429 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.3280789 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.738510058 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133028112 seconds)
  done (took 3.264033504 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.759104047 seconds)
  done (took 2.49275918 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227570462 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221932175 seconds)
  done (took 2.19522086 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.347495906 seconds)
  done (took 2.075222189 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.176369639 seconds)
  done (took 2.884834336 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.2285528 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164815102 seconds)
  done (took 2.11678971 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.545758125 seconds)
  done (took 2.264720032 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.559508658 seconds)
  done (took 6.284552459 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.234283463 seconds)
  done (took 1.99822605 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230141518 seconds)
  done (took 1.957914175 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.081162699 seconds)
  done (took 3.803782209 seconds)
done (took 47.837248265 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084931025 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087090201 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087309964 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082642688 seconds)
  done (took 2.034824656 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07604524 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071305742 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074599945 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074968709 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072866073 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073349165 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073959233 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071258486 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072173194 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.07377422 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072655418 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.07359629 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076705262 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073975584 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076628912 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.077817798 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073893569 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073689674 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076329286 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073522663 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076897091 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.07366884 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071711943 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.07387099 seconds)
  done (took 3.500657565 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081835312 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074987088 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.078775387 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.077061227 seconds)
  done (took 2.042328873 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.08039383 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.080051187 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.089550429 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.094908426 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.079815107 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.080840187 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.087990771 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.087970158 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.069420274 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.091596163 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.072188146 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.07049478 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070466276 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.089660155 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087177496 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066030085 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067585713 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080866845 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.079886819 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083167402 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.071984602 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.070438832 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.079750829 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.08075975 seconds)
  done (took 3.643270572 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082254965 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.069258285 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082489237 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.095110494 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.096210989 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069060944 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083118361 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09726078 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.132491139 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069501722 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075118344 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.070512945 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.109593746 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.069365534 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.085052253 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112471251 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.116073138 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072851354 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102461875 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.069075242 seconds)
  done (took 3.498908762 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077934575 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072873559 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073665995 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.069222678 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080451272 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076888022 seconds)
  done (took 2.19706922 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069138792 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069316311 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.073703439 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.07600436 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.071457059 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.071259421 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070683554 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069454777 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069355273 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.06943133 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068790654 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.071013502 seconds)
  done (took 2.592806844 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155714169 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071783438 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071085459 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066857013 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072158468 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068021277 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082247329 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071850976 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089175209 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070544946 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070646523 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.073478467 seconds)
  done (took 2.699260708 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101202602 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103207521 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149678814 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121688388 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121917363 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101417972 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124439275 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.097945539 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.162824993 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.141085649 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120734849 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097648482 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090733028 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.07329942 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104381774 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105800061 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140219984 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076382927 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117645413 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.169585932 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119823079 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.116043885 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126819103 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121396789 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085446147 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126086766 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097226726 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107119384 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128537585 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113900313 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123101194 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.102244207 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075701681 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.075900481 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153903141 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.105141445 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112430114 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097127233 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104655044 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092217741 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113445414 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072972566 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090508445 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110410939 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088542332 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120557682 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091912591 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108199771 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085386386 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134861495 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111001971 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103381704 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089576507 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108930618 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134916514 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099531524 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11495938 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110506552 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086000232 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.121470291 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104296509 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.263052047 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099156971 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085435367 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.164126139 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093567757 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11647282 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117058321 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.086164623 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093580514 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106445691 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134712791 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109137576 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.110409008 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116805138 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098271436 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114374897 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.09595939 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.132414498 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097082379 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.076800034 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108821881 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.132682181 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089436855 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105378011 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134218284 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095837268 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080832156 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096129654 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.122836988 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084293271 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.099791321 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073658876 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.101747353 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111388074 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101405051 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116629677 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112175072 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081983409 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129588209 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11343636 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076142565 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122128896 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10358097 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157862478 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10106402 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080510424 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104996491 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098367217 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.153939133 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08894159 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084329405 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103017906 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145117638 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099024191 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.176369581 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100875441 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133781905 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10159314 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091529624 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079308349 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.094647494 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105388893 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111170041 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10396984 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092079723 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.078499453 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087184648 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096339367 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.261286742 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085309054 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119452212 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.108318395 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.079401289 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093008623 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.083807189 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130129256 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.082430111 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111337195 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128136696 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.081183505 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107761166 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102151802 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112276148 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.100641335 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110986839 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143980097 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.120806815 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083637616 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.087981743 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112560926 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.147341056 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.118466453 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08917911 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080837864 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105034109 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115697352 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101865663 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111857219 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104860605 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113534343 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102133662 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145609102 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123271861 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095611823 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099758303 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100945744 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.1284103 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080753336 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160874866 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099103223 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123568695 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089339643 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146200655 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.119423202 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094304256 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088994418 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100244481 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.109827018 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110150763 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145437339 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099090802 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.076631091 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098221068 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136899555 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080866966 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105069635 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094975196 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.0974319 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123458279 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.087376899 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08555676 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.072187892 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10568018 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140125177 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.073121089 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116928187 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.28779318 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10865289 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.109677911 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.073591407 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104359461 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142594513 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110025644 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145381319 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121527201 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104830645 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122282907 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.103553073 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110125424 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083789582 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.129603158 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.139967358 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100463361 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094373938 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139587954 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122489876 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.139076083 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.100760421 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118433143 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.108599577 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105824062 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110961755 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.105474835 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148134553 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125393234 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.128699126 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090608344 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111418276 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114342897 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142005042 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086678902 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120417028 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.080015368 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1162557 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.081720883 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11236015 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.084433223 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.116629182 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084047224 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.105248579 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073670792 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.078250409 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14720576 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.118483489 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094074534 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090950892 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.142159397 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136859544 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.085068493 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106481778 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107997228 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105189955 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103582478 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112775796 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.08923917 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098760735 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.282208788 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084219597 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086667186 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103968511 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099441434 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112054236 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088520979 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078971676 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140648171 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108600239 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099185555 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08128216 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098838105 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.124994661 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093496377 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091400094 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10961505 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107995413 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145048816 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094674057 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101675633 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121690626 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084167124 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096276435 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073684395 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088584562 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.080322025 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113717361 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080233458 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112949531 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072517407 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135074223 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091627679 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097149531 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107691861 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105759369 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133428 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096408306 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133637426 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094457394 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106771755 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112804431 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099346881 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084219713 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108484151 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100488186 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114309055 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100554836 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110540761 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114708612 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098870325 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146225065 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094985095 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126048193 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111513101 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113000772 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109410424 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122049779 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14445408 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117406033 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116758826 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079388834 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087260531 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110304526 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104348875 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150697857 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106686467 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.076183691 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090018008 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094684443 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099651416 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.275455597 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08866677 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14779763 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091813408 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.09188186 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118188741 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.094859342 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102263355 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08045421 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099792956 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104907347 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09888622 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099494826 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112277367 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122176021 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117932706 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.13732966 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.103480544 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.097060958 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122616305 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115103655 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115246742 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090081614 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090578884 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127922164 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10745298 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.133051875 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.105244305 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099489459 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106961029 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095484905 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105149878 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101592524 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.114981411 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084965626 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080901209 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072479505 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.076479873 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122652184 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113463453 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103798804 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103481228 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.076103163 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108968807 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104281103 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076360141 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092138115 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099093823 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104132795 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.088633439 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09717386 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.119476219 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.095781437 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108581162 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104250091 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13355749 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.104113879 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093298077 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149633137 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133625462 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093036266 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098400857 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075904004 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083531249 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106818162 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148133488 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119847521 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080167704 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087303401 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.081019346 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.259480122 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.07672701 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.092067745 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.094658712 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109036119 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097387967 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.116876432 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109280828 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079905643 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108038655 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102026278 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098595589 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101106862 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10657827 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110601823 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.128386768 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105177516 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101969108 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08023413 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.085246972 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07943986 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083741141 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106779725 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.08201095 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080301158 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134424799 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095941311 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109156496 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113638456 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089538451 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079785803 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137690752 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073881415 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138053236 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.076151294 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086468183 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085134603 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083846485 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098604779 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109389807 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101365222 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118764181 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110553995 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109552891 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115297861 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160803958 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075324487 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.149632334 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080141359 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080183618 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080392887 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119465949 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09526949 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110420376 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146967935 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094426914 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097715666 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081762899 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134836393 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.103916511 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10879839 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08747093 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08352581 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134233304 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084149317 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.076026738 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091511182 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.116554129 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076608312 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1082407 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088671499 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.253564882 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117075316 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.636798014 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094950796 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.080467665 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093977469 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147814415 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133694152 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088092506 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113019625 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.123708243 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094299172 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088119011 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112205342 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188165008 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078353056 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098864474 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.108016451 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102609109 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09692479 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096604742 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090594073 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09609103 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.089868381 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083861098 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11251175 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092000526 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096757762 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102186553 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087564707 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084038521 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.137962517 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.108858177 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08685235 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093396271 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105842225 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08974341 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095008602 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.073224271 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118499073 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095779345 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106266711 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.096296933 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113219957 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125345159 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093399542 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117987243 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.093830767 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114224574 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08937687 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082898973 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107148706 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.082497785 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082137687 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123034875 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.089654558 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.098426699 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109633742 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.100580753 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119579339 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123984773 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117125408 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103130458 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083981981 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091166974 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.093185119 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079804192 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082013152 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.078248294 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.080265387 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111488581 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.259638605 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088878217 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120383511 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087044389 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108258214 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.105854858 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114353619 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087590303 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10562256 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113684607 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095082172 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107534804 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104904932 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132290123 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150606567 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103907607 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128102511 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137873846 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.081542127 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.080140201 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072630051 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120016332 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083613569 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.084822974 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085509807 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137645777 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.086504064 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099593569 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.235449283 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084198032 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086086737 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101449476 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.07442915 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08771009 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113287704 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089302414 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0849053 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102384719 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088519771 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122488709 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116383082 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094594593 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087488507 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085879528 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098521425 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.108861269 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130109698 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091721036 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077865255 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111503223 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108194988 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128554576 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.077029056 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085522281 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135135341 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096680853 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112341371 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085335498 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124047174 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138084386 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095692266 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139129847 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075227961 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088038476 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094382863 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.131375549 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079259496 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093027724 seconds)
  done (took 67.525735829 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.155790334 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.166127043 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.107363385 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120519242 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.206174048 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.228284426 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.154732381 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.124251118 seconds)
  done (took 3.191499855 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.07285081 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.087382223 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.08504493 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.213971395 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.113076799 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.071679086 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.077590853 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.085559332 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.071379795 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.071329012 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.106195066 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.071987076 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.071537793 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.38441155 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.070444683 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.076109828 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.0712646 seconds)
  done (took 3.691925262 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.327678529 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.613761047 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.223877414 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.969500375 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138709337 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486795902 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078131962 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.086745952 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.644243011 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368457894 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135706044 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092194613 seconds)
  done (took 19.058174305 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.080128142 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.082562688 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.081963582 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07907845 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.078288554 seconds)
  done (took 2.286481338 seconds)
done (took 119.720765838 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.087687635 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17791004 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.072133813 seconds)
  done (took 2.169745242 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.087042278 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.085030168 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.085383596 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.082711208 seconds)
  done (took 2.233136454 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.079070446 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.081098143 seconds)
  done (took 2.045004196 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.228386421 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.18073038 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094940331 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084249274 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.084068412 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.084456841 seconds)
  done (took 2.156149208 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.076285579 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.075926849 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.075981838 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.076545953 seconds)
  done (took 2.189486378 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.072143886 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070083935 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072173648 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075115128 seconds)
  done (took 2.176040434 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.089364395 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.088137816 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117174911 seconds)
  done (took 2.181005216 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.088090825 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086672707 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082303748 seconds)
  done (took 2.147290434 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.114446071 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.101693412 seconds)
  done (took 2.110582851 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.084397424 seconds)
  done (took 1.975510717 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093883257 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102236989 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.145388624 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.112380766 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.146240138 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.130714437 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.081524069 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.082515792 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.077684855 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076357913 seconds)
  done (took 2.936865064 seconds)
done (took 26.802249272 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085073102 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.373480946 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.364234037 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.092798952 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.676386918 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.36112687 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.009394271 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096172577 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105285089 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072716898 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090412881 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.653389829 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.001005302 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.330498068 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.987016169 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.334655043 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.657488652 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073081631 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072056248 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073074306 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.994243175 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072479828 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072493924 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073235569 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.658252271 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.379265558 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073985327 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.329368291 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.0736432 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.076024434 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.361269873 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073960158 seconds)
  done (took 16.600686066 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075188121 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128670202 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077009549 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08937338 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.075402557 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073784088 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07592596 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.073472284 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115894626 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07322848 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091153368 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072774821 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.077230429 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.0745889 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093474999 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073121823 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074188084 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.077123033 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.07290785 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073928271 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091888747 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072327323 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073689301 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073688811 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073354984 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086383151 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074047182 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.072564698 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073295601 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075312183 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076266441 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074729268 seconds)
  done (took 4.46486023 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.126819182 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.132711778 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077853082 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.114362753 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.123613241 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.075098256 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156493446 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.097063217 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.119173169 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073155357 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091596888 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.07265894 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10914923 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074324536 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09376348 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073156837 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074526238 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073487401 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072953588 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073480578 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092775171 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.073233804 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073466416 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073638067 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073855801 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.087841597 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074274761 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.072746852 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073178008 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075177744 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.077819968 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07441124 seconds)
  done (took 4.743374588 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.074186903 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.075720801 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.084615828 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.085934746 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.070768255 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.073402712 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.073873638 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.071002609 seconds)
  done (took 2.523346133 seconds)
done (took 30.247542919 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.084030152 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.072166459 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075099628 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.09233964 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.078474645 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.074414075 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.06860792 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.078870288 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.07574279 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07569262 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.077353061 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.070960405 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.074165553 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.069265409 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.076425983 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.069926684 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.076722963 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.074537803 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.075122925 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07626302 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.072683234 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.075981727 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.078758558 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.075401709 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.075125888 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.074963603 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.079159432 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.076254525 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.070312185 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.073136254 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.073153516 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.085193371 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076651349 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.076162308 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.070207036 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.0705195 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.074748251 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.072182375 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.077155565 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.079323233 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072973677 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.079526454 seconds)
  done (took 5.042414835 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.093964996 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.099097992 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.091757458 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.086836923 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.112489591 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.086817861 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.09540925 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.084376828 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.082305786 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.09572757 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.078314412 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.084112336 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.085828004 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.080418459 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.08325548 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.079023652 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.084682105 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.078497727 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.083367941 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.083071509 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.095616574 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.076909649 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.083491731 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.084322802 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.078767225 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.084042584 seconds)
  done (took 4.177760259 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.077098677 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.09232452 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.097199225 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.146728155 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.114516176 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.087087402 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086495637 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.102060336 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.105460793 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.072497679 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.076176572 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.099878628 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100906934 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.079169961 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.110803189 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.090451775 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.084635133 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.073543704 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.078515125 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.107181524 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.095116531 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.091468621 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.104793173 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.092979952 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.07179547 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081439773 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.078947433 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08819629 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.079735738 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.084330702 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.076795215 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.075645256 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.073495811 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.084957562 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.07950862 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.070487851 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.095110404 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084799032 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.088075625 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.110561755 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.082279567 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.07357454 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.102401243 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.137717622 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071619608 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074988959 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.076240825 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.084402847 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073425744 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102061126 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.091103921 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.071864717 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.091411663 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.073439878 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.073251485 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089660592 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.073753805 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.074092315 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.084467901 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.078377599 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.093377974 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.077293941 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.094269707 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.07227076 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.083642472 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.073582664 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073991665 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070883438 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.108144258 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079442397 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.126389344 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.073269719 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.070532747 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.084616918 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.083436557 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.078852489 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.071899561 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.09235047 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084716084 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07586159 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.083953632 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.075331517 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.075494304 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.1081547 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.070878291 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.070253041 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069972986 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.074577374 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.075314819 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.0727447 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.086213587 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.071373957 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.074882971 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.088172528 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.072067937 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.072396153 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.075033111 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073449151 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071368269 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083693704 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.076023648 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.074013526 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.084908967 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.07339348 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075539468 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08728699 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.081735863 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.071117756 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.073543513 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.074485445 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.073711985 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.076804601 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.075576587 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.074004428 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.079293597 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.079469062 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.077998702 seconds)
  done (took 11.717644102 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.170851565 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.160162913 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073113356 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.153934243 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.080545755 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07668402 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.156188931 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.092682216 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.073193725 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.073417225 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.072305876 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.100668281 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.096101062 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.110474871 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.076919186 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.07275669 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.099025331 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.106664529 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.158880838 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.152909701 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096345033 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.081072844 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.075320131 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.074139359 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.074074924 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.081233562 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.091211122 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.081755146 seconds)
  done (took 4.776904204 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.080986375 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.088538762 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.076617506 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.096878702 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.091478096 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.07279061 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.074735141 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073712016 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.090105874 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079963048 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.073352734 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.07718609 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.076411152 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.073436258 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.073582493 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.079233683 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.079372199 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.072360956 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.076291175 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.077392823 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.083368802 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.099063891 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.077032297 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.072577944 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.075477214 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.073274706 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.079500237 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.082409963 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.072187614 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.102942849 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.069864714 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.076969848 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08693032 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.073307381 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071937687 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.072985169 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.072616651 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.072536437 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.072622015 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.07057155 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.070558937 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077248912 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.070965278 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.078443189 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.086893101 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.080009349 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.074121689 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.078584526 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.075113714 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.069384127 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.075357253 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.07704416 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.075077534 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.08094918 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.076124088 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.075041002 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.074034323 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.103636032 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.078637714 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.072103932 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.071556056 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.070578983 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.074631336 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080942652 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.089023017 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.074444674 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.071283198 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.072859013 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077497275 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.086727441 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.072054798 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.077847786 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.069663344 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.072601398 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.074705393 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.075211644 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.073771114 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.071056404 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.072312187 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.07254947 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.072016545 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.072216788 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071893541 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.075150121 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.070205275 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.071251299 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.072951056 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.073933535 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.079762782 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.071532453 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.075825957 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.074053285 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.071507914 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.075789368 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.077641525 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.075497802 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.092747425 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.081800763 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.073125308 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.070748867 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.087003803 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.074375657 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.071503382 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.078773176 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.077315494 seconds)
  done (took 10.036043368 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.096010064 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.074017366 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.092430855 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099326331 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.082856674 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.077886362 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.086637643 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.072972931 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.089235137 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.071719475 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.081623106 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.071220456 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.085789301 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.081515414 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.074113138 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.082877642 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.074931407 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.093302367 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.087561092 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.07136311 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.081950048 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.085078155 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.085178918 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.090857838 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.090043918 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.09080039 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.08457255 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.0746916 seconds)
  done (took 4.303318357 seconds)
done (took 41.96761052 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.976782921 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.152372491 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.978154263 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.247953204 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.040941466 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.221993612 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.102992283 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.980509267 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.094352215 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.000221443 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.313973893 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.321213941 seconds)
done (took 69.401078152 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.062807511 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.119828037 seconds)
    (2/2) benchmarking "String"...
    done (took 2.193511617 seconds)
  done (took 6.218546644 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.578504815 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.983281185 seconds)
    (3/3) benchmarking "different"...
    done (took 2.02835471 seconds)
  done (took 8.492706563 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.068735381 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.663984546 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.218946051 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.978543335 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.977842756 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.353265026 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.802134947 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.456970929 seconds)
  done (took 33.35433828 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.230287362 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.166894004 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.744544893 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.786854925 seconds)
  done (took 16.885343351 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.585876429 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.241837978 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.240594302 seconds)
    (4/4) benchmarking "different"...
    done (took 2.238539477 seconds)
  done (took 11.27064695 seconds)
done (took 88.356896561 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.979108589 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.094087932 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.021908453 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.128222198 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.02216231 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.005117733 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.991139649 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.00204072 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.974998556 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.976993858 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.414923634 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.973767023 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.982492668 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.016725777 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.98397668 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.028827466 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.002990125 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.98787526 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.981095173 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.580499421 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.487607621 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.993872737 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.989838249 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.02734259 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.1252486 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.987873934 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.049763927 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.987827428 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.588562994 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.990426057 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.192529398 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.985758895 seconds)
  done (took 210.457692783 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.987800323 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.997123131 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.089086748 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.014014531 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.460073644 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.178761797 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.116941546 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.512504047 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.99277317 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.01429113 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.19059236 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.983761084 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.19568554 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.936704904 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.986037261 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.006286231 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.131718574 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.206437191 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.988961201 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.165747262 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.006565886 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.084595122 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.025702673 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.168583036 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.025545234 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.011520697 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.996817598 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.001229067 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.175590051 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.12043226 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.017286314 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.990428657 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.19434748 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.855788789 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.001774907 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.001479396 seconds)
  done (took 177.745997953 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.159995098 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.993150532 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.000267993 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.049014547 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.122506628 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.752918569 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.72426108 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.991770927 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.989471393 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.990122858 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.997315378 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.987649998 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.058274943 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.860349409 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.005716185 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.985589784 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.992678614 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.570119724 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.986722864 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.990236189 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.992913979 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.056833907 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.362958761 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.125213743 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.993420888 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.002533328 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.127786215 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.999982888 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.988086836 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.129276928 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.993910769 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.071757453 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.124932708 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.001070784 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.074067283 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.994533727 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.486276993 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.987790734 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.991885723 seconds)
    (39/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.990344403 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.99155587 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.055880021 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.989753575 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.102495195 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.083483731 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.990547324 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.007176589 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.188138978 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.678237596 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.991255055 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.993489501 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.993254823 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.992859141 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.993286274 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.722630272 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.99042199 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.019137638 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.627292082 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.992594375 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.993672162 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.994071593 seconds)
    (61/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.994901568 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.992549601 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.994502592 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.998311549 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.026800141 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.80113384 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.03612585 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.380751608 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.801728893 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.994102747 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.978539804 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.046202745 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.991259148 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.072829932 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.988312745 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.992061507 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.992667972 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.992747731 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.09089005 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.078979595 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.991424154 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.130576798 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.996758434 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.995192299 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.226223568 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.448551006 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.99089709 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.006883482 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.04786717 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.9939729 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.994727883 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.002353782 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.087585455 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.991281879 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.995961823 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.993300535 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.091589208 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.997776667 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.138133541 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.211575608 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.063558169 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.235254319 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.23027644 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.999010422 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.99189217 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.008818775 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.996896455 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.996458023 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.006337105 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.997941366 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.995931941 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.995764536 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.996871604 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.998770393 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.996260209 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.998890702 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.011710094 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.992415277 seconds)
  done (took 434.957671249 seconds)
done (took 827.284726898 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.704338867 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.768718724 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.614191909 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.645412746 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.622590645 seconds)
  done (took 15.271603279 seconds)
done (took 17.191874525 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.029211334 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.012595807 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.99952986 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.063722224 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.019042333 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.007348383 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.045004063 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.043313225 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.025862084 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.010085356 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.063477201 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.011820368 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.029388122 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.030994584 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.085504862 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.034467626 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.009947501 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.00687517 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.06500189 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.010459615 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.015054036 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.012813406 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.007005471 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.063190709 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.086888038 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.018958332 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.009171961 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.053442516 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.019681828 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.058328872 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.066768166 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.030363076 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.042403289 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.086582404 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.070544863 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.089188301 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.018750057 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.075569484 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.015783295 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.102417408 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.067684615 seconds)
  done (took 85.534028717 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.010209088 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.147273816 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.209339026 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.036381725 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.009432034 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.223641249 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.05986464 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.132902424 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.135367027 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.216589195 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.219813678 seconds)
  done (took 25.325847431 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.011158448 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.143425175 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.213206515 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.039537813 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.008309377 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.228248045 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.066585637 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.143641439 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.143143745 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.23494601 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.226513676 seconds)
  done (took 25.390036734 seconds)
done (took 138.171651597 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.381571894 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.027418781 seconds)
  done (took 6.329630142 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.00562337 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.018668487 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.154148853 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.003497972 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.002944249 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.004090457 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.004992443 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.002685946 seconds)
  done (took 18.120218956 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.004733172 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.002552954 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.003427001 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.003735987 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.002843154 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.003025863 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.001614746 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.006432924 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.002939783 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.005658079 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.002324976 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.002441259 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.00395253 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.003950613 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.006741454 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.003293965 seconds)
  done (took 33.982285624 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.004766267 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.004048954 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.005311572 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.004787063 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.00345857 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.004909224 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.006503438 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.005298606 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.00548458 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.005401089 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.005700889 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.006878606 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.005162538 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.005895663 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.006182367 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.004071676 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.005229286 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.004640851 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.006205261 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.003702645 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.006021578 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.00552625 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.008247588 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.007120986 seconds)
  done (took 50.056307163 seconds)
done (took 110.419622569 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.188532563 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.934620279 seconds)
  done (took 9.047770846 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.010598675 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.006927082 seconds)
  done (took 6.019574107 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.999987188 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.000690212 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.00112405 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.000687835 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.002492086 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.001169146 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.999832469 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.9997191 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.000200498 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.004443235 seconds)
  done (took 21.943252142 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.000535329 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.000706526 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.999680698 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.001406431 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.00117453 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.999359465 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.998642872 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.999884552 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.001357706 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.999896732 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.0025458 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.000571748 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.000300436 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.002686021 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.000409901 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.999201685 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.999722002 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.999484757 seconds)
  done (took 37.934069495 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.005004399 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.007118183 seconds)
  done (took 5.939504616 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.005052214 seconds)
    (2/7) benchmarking "second"...
    done (took 2.004166808 seconds)
    (3/7) benchmarking "month"...
    done (took 2.006140574 seconds)
    (4/7) benchmarking "year"...
    done (took 2.003947833 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.006618988 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.005004251 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.004676801 seconds)
  done (took 15.966751814 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.007334733 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.155139619 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.20745565 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.608554649 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.007260447 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.005286592 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.871932069 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.005924285 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.000520918 seconds)
  done (took 21.800040013 seconds)
done (took 120.576272461 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.858946892 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.998494572 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.314547231 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.074502451 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.056818175 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.328406046 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.996157601 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.534631235 seconds)
done (took 44.081381177 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.149161575 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.993301982 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.026178484 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.020393077 seconds)
  done (took 22.956169821 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.996307513 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.333857578 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.011673176 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.983989682 seconds)
  done (took 23.255951139 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.368462815 seconds)
    (2/2) benchmarking "read"...
    done (took 2.345736471 seconds)
  done (took 6.630937539 seconds)
done (took 61.910919714 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.991400626 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.992316634 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.992392773 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.991448315 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.995236401 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.992845247 seconds)
    (7/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.991633518 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.992044866 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.991948337 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.992507648 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.99210962 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.992727669 seconds)
    (13/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.992397089 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.991549743 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.993911334 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.993680722 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.992706583 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.993084543 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.993630438 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.992439905 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.992334828 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.992426891 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.992626939 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.994924371 seconds)
  done (took 49.741731479 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.991435896 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.991289794 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.992139117 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.993262908 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.993126651 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.992965869 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.991487697 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.993304484 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.99487065 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.993610139 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.991735059 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.99214048 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.992286766 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.993185199 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.992098846 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.993640498 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.993573502 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.993030921 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.995826523 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.998307487 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.992714325 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.994182609 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.99327913 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.993624433 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.999548751 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.993214965 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.994049906 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.994287706 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.994468085 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.000350707 seconds)
  done (took 61.727681282 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.994506832 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.994392563 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.993766875 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.996829989 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.993261734 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.994088768 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.99403303 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.993906899 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.996018969 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.994221287 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.995078715 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.994901674 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.99468618 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.997097438 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.993823777 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.994380834 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.996525735 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.994846226 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.99662523 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.993528194 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.994713319 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.995033518 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.994576849 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.995558898 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.992561459 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.993107954 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.993028209 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.992679565 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.99293693 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.986012223 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.986600262 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.986351806 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.9859468 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.988268976 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.984979411 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.98578974 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.984457891 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.984389939 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.992073103 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.984995665 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.986135026 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.985550072 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.986624094 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.989275702 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.985960228 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.984782324 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.984298118 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.985037322 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.988760496 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.984637718 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.98455989 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.983777832 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.982800712 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.9850249 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.981983961 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.983537765 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.983855907 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.984181109 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.98489904 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.98276485 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.980905482 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.981226932 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.981654916 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.983430087 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.981399775 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.981147422 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.981533468 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.982759157 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.985339573 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.980405809 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.981523668 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.980936129 seconds)
  done (took 145.088179029 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.981513531 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.979832863 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.981293836 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.982092461 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980064533 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.981866498 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.983039375 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980669821 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981459554 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.980381736 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980797524 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.980855998 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981388722 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.981080174 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.980285556 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.979986644 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.978449096 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.978716625 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.979140494 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.978821821 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.97863071 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.983741359 seconds)
  done (took 45.476668533 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979885665 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.980410785 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.980984361 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.983038218 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.980577554 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.97947035 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.97982839 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.979852088 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981584169 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980110734 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979807418 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980225245 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.978915262 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980244043 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.979154267 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.979368499 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.9796803 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.980182878 seconds)
  done (took 37.543834621 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.980211481 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.979795558 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.979930518 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.979902692 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.981157142 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.979713911 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.979453814 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.97964378 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.979732116 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.980093458 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.980497163 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.979404836 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.979646843 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.978977135 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980051572 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.978450538 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.978585604 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.978711918 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.979725415 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.983311074 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.97905448 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.979973478 seconds)
  done (took 45.463036573 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.978936425 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.983859163 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.979445715 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.978910046 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.979675226 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.97956402 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.981143987 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.978793353 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.978738911 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.979096762 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.979641313 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.980251754 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.979230238 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.979062214 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.978601337 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.978552583 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.98230257 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.974904332 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.978822478 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.978520379 seconds)
  done (took 41.487995669 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.980889509 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.982157215 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.980976637 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.979739895 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.98165706 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.979263936 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.980781377 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.980409622 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.979489304 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.979631483 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.980995175 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.98002593 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.979673465 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.978276319 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.980182287 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.980633281 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.980897355 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.980833821 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.980451645 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.98087076 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.981899548 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.981018464 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.980612639 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.981487671 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.981816209 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.98058202 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.981458029 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.982329366 seconds)
  done (took 57.359693562 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.980269582 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.978729597 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.979211656 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.980380982 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.979781207 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.979478561 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.979659607 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.980515054 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.979494381 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.980331118 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.979680125 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.979591987 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.980142795 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.979956469 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.979919496 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.981163768 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980805919 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.980543403 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980536409 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979764848 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.980505903 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981108524 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.980938518 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.981216831 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980796939 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.981196687 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.979142591 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.980927877 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980993513 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.98130799 seconds)
  done (took 61.308536225 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.002126175 seconds)
    (2/2) benchmarking "in"...
    done (took 2.002795579 seconds)
  done (took 5.907431594 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.98238215 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.982629912 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.982356141 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.980586474 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.981568244 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.98236233 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.981184058 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.982251442 seconds)
  done (took 17.757425007 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.982822411 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.983914241 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.983121486 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.981738466 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.983700336 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.990790371 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.983173203 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.981885111 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.983400934 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.984898835 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.988580786 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.984775889 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.992313367 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.987152421 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.983681344 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.982805709 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.98366343 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.984900782 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.984727842 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.98270554 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.984477007 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.986084969 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.983317815 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.984716741 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.982947233 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.983752877 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.990301551 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.984504738 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.984491403 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.984512193 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.991030535 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.98414287 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.984825328 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.985400141 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.986134806 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.983789041 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.99103284 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.986347686 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.985994641 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.984977491 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.98652812 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.985935436 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.988122286 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.992009683 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.985553805 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.984571407 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.984081482 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.985740875 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.985755925 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.989544434 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.990816233 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.985112524 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.985482393 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.985698993 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.986868484 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.98527501 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.986169884 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.987015397 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.990154352 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.991109724 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.988245494 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.006135593 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.994612647 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.987125792 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.985751529 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.993964259 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.010947846 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.986372416 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.988007589 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.98513004 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.992721009 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.98554235 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.985738698 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.987089223 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.998854026 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.996558696 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.987881636 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.986588763 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.98663492 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.988262093 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.987662309 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.989132205 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.98722886 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.988469155 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.996506529 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.012348717 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.988540588 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.989493638 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.987907775 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.988546897 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.9903353 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.990052534 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.987457224 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.986131333 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.987143902 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.987960139 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.98816091 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.98856323 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.986901447 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.995765442 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.98868711 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.987333898 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.987396985 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.997221646 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.98796988 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.99084466 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.989393352 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.988563675 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.996700232 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.990485652 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.988948101 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.988901429 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.988029218 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.994369146 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.987824328 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.991581936 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.99710083 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.995520259 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.99102182 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.993158508 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.991708141 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.991582578 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.997489155 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.012806273 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.984812278 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.989863887 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.99319792 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.001034593 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.991782997 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.988404363 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.99078298 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.989860358 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.98903951 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.989860422 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.988200994 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.989889618 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.986826645 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.989931127 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.989419115 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.991524104 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.992477209 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.99085112 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.989664769 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.990802528 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.993676869 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.98963613 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.991139796 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.995826279 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.991175477 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.991111882 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.990199532 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.992198626 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.98978995 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.988707291 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.987246349 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.990241336 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.991832119 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.989086018 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.991050382 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.991510596 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.990162286 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.990539491 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.990957935 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.990577975 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.992106278 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.990882389 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.992824397 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.993091782 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.990839057 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.991758087 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.990484365 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.992690591 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.995647282 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.993080709 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.989370378 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.99047208 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.991057104 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.990922093 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.993700005 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.001575414 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.992933919 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.000485325 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.993221121 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.996565333 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.991061388 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.990894258 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.992339328 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.994162009 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.993071692 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.991954728 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.992824255 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.995789324 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.014786017 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.001415563 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.994082914 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.994321055 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.998090022 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.99410747 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.997481811 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.993346759 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.993245076 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.995736782 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.994415483 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.994393911 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.993045962 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.997375603 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.994056923 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.992829729 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.995954647 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.995047655 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.994475298 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.996051724 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.995136566 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.994437169 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.993985922 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.993812367 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.994449209 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.994953167 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.001983312 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.99480184 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.995207202 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.99565277 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.994974798 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.996710091 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.993621939 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.994192823 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.995666037 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.991378306 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.994341813 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.001248345 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.996918048 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.994628283 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.994391211 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.993998686 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.996444472 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.993537848 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.99648269 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.003908527 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.99768999 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.995475492 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.000258679 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.996301729 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.99808993 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.99747256 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.996156576 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.996411858 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.99882582 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.997044893 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.99508485 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.002348609 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.996098339 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.997230827 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.995324614 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.000692284 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.998219177 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.997644456 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.996347068 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.000183223 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.007207654 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.003648975 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.998988157 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.001824854 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.998221851 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.996535099 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.001176067 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.997924439 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.009592142 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.007311035 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.997304148 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.996418033 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.9989663 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.999073892 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.997135861 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.000022424 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.005047186 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.998341372 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.999173434 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.001904034 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.004434475 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.999228268 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.006131036 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.000115298 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.000445626 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.00061845 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.998714955 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.999095634 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.99878533 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.999889737 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.999557787 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.999817045 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.003046682 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.998844081 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.999144176 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.999407049 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.00823373 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.998929001 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.998216449 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.006654522 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.999823711 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.998537632 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.999717044 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.998004227 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.999448199 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.000475259 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.997675233 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.001630473 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.002505585 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.004641983 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.00992502 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.002283252 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.008002276 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.001501302 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.009142516 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.001539834 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.998720609 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.002037135 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.002030559 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.008923206 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.000565341 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.001250972 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.007783728 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.001575303 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.001133327 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.006809029 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.999653188 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.00276838 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.003228039 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.002938307 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.006099331 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.004755292 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.000762375 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.003122838 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.00152026 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.001771331 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.004796418 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.003450791 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.001480871 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.002583849 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.000519547 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.004056669 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.002221677 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.003387471 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.003177491 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.002347984 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.002034928 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.010120026 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.003879418 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.001787427 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.00693891 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.003168317 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.012448527 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.004335735 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.003873621 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.004239321 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.003338885 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.004988748 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.004727438 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.004119732 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.002092704 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.002789101 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.004640991 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.012775605 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.011391332 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.007601438 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.005860976 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.006079473 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.002700883 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.012563374 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.027697584 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.005457461 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.006513135 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.008328151 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.008869877 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.005479546 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.009101369 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.007346975 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.012482135 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.006107013 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.004365826 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.006112137 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.017140095 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.00520196 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.004730929 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.003981718 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.009899918 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.007143614 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.004532281 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.006464102 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.008887546 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.006985844 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.017561343 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.005716499 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.007509521 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.004377584 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.003766233 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.006458589 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.005306693 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.007466461 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.005150404 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.007682898 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.006526872 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.007487258 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.009294329 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.006052328 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.008942514 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.01632445 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.007053882 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.007517313 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.00875595 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.008689602 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.008880446 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.007929236 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.006241002 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.008905488 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.006535026 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.007331001 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.010513041 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.01560556 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.008973574 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.006993945 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.006402715 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.009821765 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.006573876 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.008340924 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.007414732 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.016665662 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.009860486 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.01838482 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.016825824 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.008433319 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.008269775 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.014176466 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.018378816 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.009337848 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.007939913 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.009122266 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.010352336 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.009261274 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.008918944 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.008444402 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.009201032 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.012645359 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.00882208 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.009061764 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.008862873 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.008099948 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.011002119 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.010842987 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.013225178 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.008206132 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.008758224 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.00883858 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.008216168 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.008025936 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.013061348 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.011131341 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.008191257 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.010667606 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.010602371 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.013886233 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.009762567 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.008204031 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.010573119 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.008654812 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.009309012 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.010101746 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.009289605 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.010351458 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.0127542 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.018139209 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.008498425 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.010888805 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.010050688 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.014592141 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.012249282 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.01167345 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.012286368 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.009731977 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.475774843 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.008624298 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.010906602 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.011991594 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.010255022 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.016594049 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.010956113 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.015586087 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.011018422 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.011903367 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.011491795 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.017657972 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.016588857 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.016159573 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.014491183 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.018826463 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.01835051 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.007583455 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.011433384 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.011558715 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.011378367 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.011960796 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.014196495 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.011454228 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.0143104 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.012668716 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.012570505 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.012508861 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.012579538 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.012652545 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.012017187 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.014737889 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.021627542 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.019936712 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.010884196 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.0139169 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.013232142 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.014294795 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.024616604 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.013408631 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.013235583 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.013024662 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.013714955 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.013017463 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.018662307 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.022159008 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.015260481 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.013801071 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.016696789 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.029725624 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.014200986 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.022271884 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.042642422 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.014022446 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.012775012 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.012983376 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.014211373 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.013806571 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.016419946 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.015453087 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.019660026 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.014609332 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.01323503 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.020668255 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.013220375 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.012746176 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.015063101 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.014699292 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.016914849 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.090537883 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.156641421 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.010262938 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.014018975 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.014271464 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.017019484 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.013141469 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.013867426 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.012941734 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.015747447 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.01406307 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.016101288 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.023525487 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.015388432 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.014143238 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.027447716 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.026385758 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.015230317 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.01376919 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.015505331 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.018471568 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.017475076 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.01404405 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.017369771 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.02211917 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.018664406 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.023552621 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.015605166 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.015933908 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.015556609 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.015486304 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.016318089 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.027305877 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.026421066 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.016824816 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.01593032 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.022221168 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.014450802 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.021139587 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.022181848 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.020490733 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.01809958 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.017097255 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.016625793 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.016120844 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.016190315 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.019344788 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.02543562 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.017576662 seconds)
  done (took 1195.625688697 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.016160988 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.016251902 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.015859319 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.014481716 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.016574243 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.015264095 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.017313574 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.017070669 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.018173279 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.016640798 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.016546584 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.017071718 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.017356154 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.016726707 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.017591985 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.017450035 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.016875629 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.016904151 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.016857925 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.017230398 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.016012046 seconds)
  done (took 44.286321634 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.017737938 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.017631146 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.01823539 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.017405461 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.017733007 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.018233578 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.016899549 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.01683809 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.017677862 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.017964625 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.017920232 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.017519793 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.01758051 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.017787844 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.018074657 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.016967994 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.019382046 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.01637573 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.018562072 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.016566698 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.018427106 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.017872842 seconds)
  done (took 46.325284393 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.020647041 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.018528379 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.018036777 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.018573821 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.019463143 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.020131244 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.018982791 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.019955126 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.01845361 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.020059678 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.026331753 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.028514301 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.019354492 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.022451594 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.02022564 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.021704206 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.164952553 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.021181044 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.020338528 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.01897278 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.020567188 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.026911419 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.019332992 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.019974794 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.020700353 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.021144468 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.02047551 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.020461109 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.02090701 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.021395929 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.026365948 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.017149995 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.017647859 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.023149821 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.022630766 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.022227477 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.025266908 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.022100892 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.020608418 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.021706262 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.031439981 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.045771432 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.021188408 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.022033548 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.028916185 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.023563311 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.021900161 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.024932356 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.031287275 seconds)
  done (took 101.177051743 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.019877668 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.020342528 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.022275231 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.021422382 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.022639353 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.020083206 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.020803915 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.022178356 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.023237637 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.023269264 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.021192667 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.022036059 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.021801323 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.021624216 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.020982544 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.022318747 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.02036986 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.021886008 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.020492707 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.021048622 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.022451814 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.022333846 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.01985902 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.023577046 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.023071003 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.021291608 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.023644295 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.02241322 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.023932788 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.023109435 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.022652284 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.021183064 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.022077857 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.023902382 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.023232909 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.021606613 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.023971754 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.023766639 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.023988407 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.023769642 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.023064162 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.023631899 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.023750881 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.022868874 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.023792103 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.022775446 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.02357553 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.022975528 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.022728205 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.022573965 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.022542966 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.022024825 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.022455831 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.024799561 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.024564129 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.022071349 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.023576599 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.022868089 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.02342784 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.025155311 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.021209829 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.024638341 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.024212836 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.024614849 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.026307868 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.026557089 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.024733077 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.025541616 seconds)
  done (took 139.490686591 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.026900986 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.025835738 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.024316273 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.026304519 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.026733286 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.0271422 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.028332878 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.026757975 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.027933228 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.027431061 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.027279953 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.025131502 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.026192697 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.025042147 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.027967148 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.025766017 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.025835358 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.027631385 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.026019726 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.025869673 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.026481085 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.027816486 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.027694078 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.028758088 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.02605391 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.027232482 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.028399173 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.025150586 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.029004959 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.027821376 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.026701924 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.026945378 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.027293401 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.027852396 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.028933294 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.026326342 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.025807608 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.028442446 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.028761376 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.026303144 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.026230971 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.027746545 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.026135063 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.027462491 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.027571109 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.028018836 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.030426369 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.028974888 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.027978312 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.026783041 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.030559625 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.030208113 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.028461594 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.029674586 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.029157719 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.027635501 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.02929079 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.03058805 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.030604932 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.028821031 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.029488046 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.027833712 seconds)
  done (took 127.653221463 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.026970421 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.02877837 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.027840673 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.027417318 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.026701812 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.029683889 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.02875372 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.029143187 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.026402976 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.028364761 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.029672176 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.030078554 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.029403697 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.029869809 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.030448927 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.030485532 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.029925827 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.030622281 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.028167365 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.029307848 seconds)
  done (took 42.522771164 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.02913428 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.031288305 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.030595301 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.030026442 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.029311254 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.030662832 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.029189167 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.029998274 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.029629367 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.029441668 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.030613619 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.030366308 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.030282274 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.031511168 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.031958788 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.028896262 seconds)
  done (took 34.430896304 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.029703623 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.031640495 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.029414692 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.032533825 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.03054071 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.029521703 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.031000628 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.031345567 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.028764987 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.031631078 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.032105737 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.031588463 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.031196905 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.031475111 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.029951257 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.029331968 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.032053418 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.029820522 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.031373345 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.032105988 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.031433552 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.029870166 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.029658194 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.031074942 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.032357147 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.031419924 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.031662322 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.032670907 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.033410594 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.032469543 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.033681294 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.032607601 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.03411036 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.032797217 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.033378097 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.032491659 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.031552035 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.031437202 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.031875281 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.033235173 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.03308816 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.033975247 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.031815135 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.034153112 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.033222379 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.032606481 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.033994441 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.031931125 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.032247083 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.032627662 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.03314054 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.034746116 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.032100455 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.033710133 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.031693491 seconds)
  done (took 113.704924921 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.033150145 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.032317629 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.0312606 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.033525935 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.032932931 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.034949374 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.034525294 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.030641127 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.032636101 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.033668025 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.032919092 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.032941171 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.035036638 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.033140947 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.03461815 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.032295263 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.03631539 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.034886744 seconds)
  done (took 38.553690992 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.034459347 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.03427689 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.035239286 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.034204794 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.034166846 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.034462017 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.03414834 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.033417152 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.035083653 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.034232014 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.034592926 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.031664464 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.033547389 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.034285344 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.03436579 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.035503338 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.033922195 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.036815642 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.036318817 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.034661988 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.034530171 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.035683107 seconds)
  done (took 46.710140207 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.035879749 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.03372947 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.049999794 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.058728889 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.055835952 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.072836363 seconds)
  done (took 14.261000522 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03393238 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034107147 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.035721064 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034609715 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033458785 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035697797 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03543444 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03552414 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.034730986 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035963559 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035513934 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.033860202 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035411098 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035811396 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036565698 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035713609 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036036128 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035415515 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036133513 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03693883 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037755803 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036763583 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037288862 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033876063 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036113974 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036564746 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037700959 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037634557 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037371089 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037436937 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037457241 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038361442 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036951669 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037821332 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038237509 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038445794 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037416143 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038961975 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037297594 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038737302 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.0378629 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038698926 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035601283 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.0389639 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037228574 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036732946 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037609604 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036478956 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038264317 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037519571 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036758239 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03703309 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03785191 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036389883 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039679719 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040619383 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039559631 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040018912 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039818296 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040798095 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038178603 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038705979 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038246055 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039588722 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038675941 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036519189 seconds)
  done (took 136.403936099 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040191797 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.041177223 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037802212 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040616562 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038725092 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041773324 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040651801 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041812486 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040478456 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040617216 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04128593 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040321899 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041957015 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041387671 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04016645 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040640019 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043280679 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.041367085 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041507924 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041780341 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040705106 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041794769 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.040058048 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043133537 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042876766 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041686953 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.041351792 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042760575 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041461163 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042844572 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.041961861 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042136758 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043351947 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.041575349 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042087033 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042932239 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041991046 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042380624 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043042604 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.041436579 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.042005275 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.043279187 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043253433 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043036607 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040839994 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.041312674 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.042807514 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040771321 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.042539214 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.041583551 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.043428492 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.043141524 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041880926 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042569311 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04423879 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.042224221 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.043244547 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.042901509 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043748519 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.042613318 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044792175 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043815527 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.043063187 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042208488 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044330396 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044511362 seconds)
  done (took 136.732304062 seconds)
done (took 2788.659419116 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.116386062 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.118196704 seconds)
  done (took 16.197270727 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.204418432 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.080605619 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.225039639 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.156593297 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.067168342 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.053930413 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.037211096 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.041014932 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.134801041 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.042765529 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.061816071 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.046444356 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.043096571 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.043719629 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.042945771 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.043024556 seconds)
  done (took 55.293824208 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.045074951 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.04549343 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.043041179 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.04195997 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.054031587 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.116635897 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.059866623 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.045455574 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.058915896 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.074602236 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.063107395 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.045512401 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.052259813 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.053472191 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.131472507 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.084632871 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.097296265 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.113585704 seconds)
  done (took 39.184061987 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.123745017 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.052018621 seconds)
  done (took 11.143260861 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.064396392 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.055763849 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.060388389 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.038183507 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.055481777 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.061264734 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.059560399 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.060848271 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.064743881 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.055989774 seconds)
  done (took 72.555278439 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.04514488 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.044605468 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.30428648 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.055012387 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.049725006 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.069958586 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.044183676 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.077057901 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.045682901 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.043169994 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.051521448 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.305012513 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.052335442 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.046084337 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.392398443 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.057909194 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.049739765 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.076447398 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.074889805 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.054007845 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.050583407 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.04666908 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.205392982 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.749429404 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.042388556 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.045798293 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.052715444 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.042261509 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.042790041 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.044391983 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.046312079 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.044078626 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.047651966 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.047123051 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.046649408 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.057056769 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.534136273 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.060117684 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.051369587 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.122805283 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.091175665 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.047733292 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.842158317 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.045057726 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.045353956 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.051481424 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.733427142 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.174781612 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.047831746 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.289656532 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.41945272 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.06014933 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.202405303 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.184825456 seconds)
  done (took 142.518785065 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.045274737 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.275908033 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.196025893 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.051159827 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.301024055 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.251860786 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.04340577 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.089825458 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.042542138 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.248912916 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.296325318 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.148550294 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.046097702 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.043875292 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.039331013 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.039980465 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.191023282 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.11277476 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.04275092 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.04385436 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.067805315 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.247789787 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.165618996 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.046932421 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.072512922 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.251343387 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.166215881 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.148407714 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.815041998 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.045305054 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.105970817 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.044065898 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.045538169 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.042015683 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.20039152 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.139955366 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.124322088 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.045449933 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.044784508 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.045941202 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.720546685 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.246797838 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.137647411 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.166602939 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.293756912 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.257821898 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.662477827 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.045053092 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.672711816 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.209123416 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.251526328 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.255046477 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.163232302 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.047271659 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.334966804 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.046974546 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.045846709 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.266731889 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.265143377 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.142688537 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.046804502 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.046726152 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.044184136 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.28515786 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.045683252 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.135358412 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.047867288 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.045992075 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.14152333 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.146320484 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.27400222 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.26535596 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.075151656 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.36806715 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.541949584 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.249026055 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.109237735 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.264946951 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.045897505 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.043658634 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.129749889 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.881899674 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.298720767 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.28671073 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.244844074 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.075218796 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.700702514 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.048445582 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.235616587 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.237040276 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.278859607 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.297098131 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.280511815 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.419010982 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.047810652 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.048979945 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.366053632 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.161803347 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.047407908 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.400096535 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.273995617 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.53292179 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.073598531 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.335420914 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.177335095 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.04749404 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.695463161 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.048466798 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.255640824 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.089906499 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.050402874 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.048045975 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.23851337 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.950351332 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.047471657 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.763397602 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.110988574 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.050622517 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.257204095 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.048618471 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.295895235 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.050219271 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.284782967 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.677923519 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.081350074 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.224030336 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.296658837 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.676738065 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.340923256 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.289810241 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.161100671 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.270814356 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.850720622 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.055265529 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.314037309 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.051224274 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.050171911 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.221102646 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.057453676 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.195380849 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.050117835 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.318248745 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.068464255 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.280736034 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.05170316 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.288006032 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.080804594 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.102495562 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.053806865 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.175411499 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.053422961 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.894473971 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.209896756 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.058763449 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.053013086 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.636589139 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.054806508 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.20547019 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.27891296 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.07119597 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.122854616 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.618725284 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.047968922 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.13956601 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.072956167 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.325585374 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.054185001 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.302049227 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.009336245 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.526600974 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.054057598 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.287378745 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.235050615 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.056776029 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.050346787 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.896617945 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.051578406 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.05391576 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.210300546 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.068853068 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.954045914 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.252427799 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.053415554 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.180692771 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.057589213 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.124465303 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.394542241 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.052277825 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.054638023 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.053922791 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.054554453 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.058102343 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.26094604 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.079018951 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.485265026 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.1899836 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.310730044 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.356894706 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.252425926 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.091994163 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.058841145 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.27367776 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.054174258 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.115254668 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.05416901 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.075217803 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.28328275 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.055631293 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.261401004 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.288445552 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.041470571 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.103057339 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.05419872 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.056182148 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.968431225 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.201653725 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.138681139 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.056298572 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.054444609 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.171372922 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.173486214 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.238367844 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.870158243 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.221227081 seconds)
  done (took 941.229083666 seconds)
done (took 1280.088661385 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.056929957 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.056403898 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.057169203 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.058305026 seconds)
  done (took 30.204264455 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.057859281 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.058519389 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.057948533 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.059185419 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.057741026 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.060556999 seconds)
  done (took 14.327214192 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.055852213 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.059114194 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.05873157 seconds)
  done (took 23.148695082 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.499057978 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.473206578 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.129560118 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.196041853 seconds)
  done (took 11.274213125 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.062042422 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.059102784 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.059392582 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.059219145 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.0577365 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.059247613 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.061000124 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.060627877 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.060071158 seconds)
  done (took 20.523946305 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.317470629 seconds)
done (took 105.769555049 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.194828052 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.192282615 seconds)
    (3/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.782909682 seconds)
    (4/341) benchmarking ("sort", Float64, false)...
    done (took 5.772967232 seconds)
    (5/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.059487636 seconds)
    (6/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.897175289 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.066040787 seconds)
    (8/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 8.355270162 seconds)
    (9/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.156455771 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.08293243 seconds)
    (11/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.20938137 seconds)
    (12/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.448181122 seconds)
    (13/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.273168449 seconds)
    (14/341) benchmarking ("sort", Float32, false)...
    done (took 5.741964611 seconds)
    (15/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.196365456 seconds)
    (16/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.252484728 seconds)
    (17/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.062472506 seconds)
    (18/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.136428542 seconds)
    (19/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.068324358 seconds)
    (20/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.916832278 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.082389176 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.184636094 seconds)
    (23/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.426220473 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.081727742 seconds)
    (25/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.069974292 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.05962208 seconds)
    (27/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.362604033 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.175133633 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.296670718 seconds)
    (30/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.187591861 seconds)
    (31/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.239856259 seconds)
    (32/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.260777743 seconds)
    (33/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.74041363 seconds)
    (34/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.267603664 seconds)
    (35/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.283335213 seconds)
    (36/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.98127924 seconds)
    (37/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.342964401 seconds)
    (38/341) benchmarking ("sort", BigInt, false)...
    done (took 7.060423949 seconds)
    (39/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.062951149 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.132760205 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.15602602 seconds)
    (42/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.059286036 seconds)
    (43/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 5.207377964 seconds)
    (44/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.062121227 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.814651873 seconds)
    (46/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.15603063 seconds)
    (47/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.076114769 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.143916103 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.28911424 seconds)
    (50/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.041310059 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.15948486 seconds)
    (52/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.156315072 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.93142917 seconds)
    (54/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.486991174 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.141542448 seconds)
    (56/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.297035465 seconds)
    (57/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.372053106 seconds)
    (58/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.474151681 seconds)
    (59/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.148368521 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.987276291 seconds)
    (61/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.19549829 seconds)
    (62/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.062696647 seconds)
    (63/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.304388724 seconds)
    (64/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.061400928 seconds)
    (65/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.510602155 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.27461057 seconds)
    (67/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.062028303 seconds)
    (68/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.23258616 seconds)
    (69/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.073624688 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.359766269 seconds)
    (71/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.389430338 seconds)
    (72/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.165738304 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.951571431 seconds)
    (74/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.355528852 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.459367001 seconds)
    (76/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.066390213 seconds)
    (77/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.299323675 seconds)
    (78/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.074505312 seconds)
    (79/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.281308052 seconds)
    (80/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.772561152 seconds)
    (81/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.297069877 seconds)
    (82/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.342226739 seconds)
    (83/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.493553614 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.202562801 seconds)
    (85/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.0637809 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.15099982 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.775664463 seconds)
    (88/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.148663819 seconds)
    (89/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.335733364 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.07416066 seconds)
    (91/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.003295715 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.461441402 seconds)
    (93/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.139320081 seconds)
    (94/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.901615536 seconds)
    (95/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.171492419 seconds)
    (96/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.346072583 seconds)
    (97/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.064102444 seconds)
    (98/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.113015457 seconds)
    (99/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.908680209 seconds)
    (100/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.277216719 seconds)
    (101/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.84264218 seconds)
    (102/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.22089251 seconds)
    (103/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.067088704 seconds)
    (104/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.496041696 seconds)
    (105/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.361742565 seconds)
    (106/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.093766672 seconds)
    (107/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.20391681 seconds)
    (108/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.182758883 seconds)
    (109/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.27163755 seconds)
    (110/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.150093073 seconds)
    (111/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.128121928 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.301794251 seconds)
    (113/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.296714542 seconds)
    (114/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.162508589 seconds)
    (115/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.39127177 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.187859602 seconds)
    (117/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.075315735 seconds)
    (118/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.165482556 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.404763887 seconds)
    (120/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.473909291 seconds)
    (121/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.198172647 seconds)
    (122/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.369027638 seconds)
    (123/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.072574295 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.073581671 seconds)
    (125/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.381848145 seconds)
    (126/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.369440787 seconds)
    (127/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.187422133 seconds)
    (128/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.066598095 seconds)
    (129/341) benchmarking ("sort", Int8, false)...
    done (took 5.009676121 seconds)
    (130/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.197663845 seconds)
    (131/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.366222132 seconds)
    (132/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.341712345 seconds)
    (133/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.069611259 seconds)
    (134/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.152735582 seconds)
    (135/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.202319454 seconds)
    (136/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.286147585 seconds)
    (137/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.069911213 seconds)
    (138/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.865967805 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.4195674 seconds)
    (140/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.334982872 seconds)
    (141/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.078041256 seconds)
    (142/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.463540048 seconds)
    (143/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.07275034 seconds)
    (144/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.991643755 seconds)
    (145/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.268037885 seconds)
    (146/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.195858668 seconds)
    (147/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.546381148 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.080053867 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.010366506 seconds)
    (150/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.074170734 seconds)
    (151/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.08525934 seconds)
    (152/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.334481356 seconds)
    (153/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.179007737 seconds)
    (154/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.383893626 seconds)
    (155/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.026504662 seconds)
    (156/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.247935836 seconds)
    (157/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.161304714 seconds)
    (158/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.32467174 seconds)
    (159/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.31390276 seconds)
    (160/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.066811966 seconds)
    (161/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.483471537 seconds)
    (162/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.661063244 seconds)
    (163/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.170798277 seconds)
    (164/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.30687524 seconds)
    (165/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.407363968 seconds)
    (166/341) benchmarking ("sort", Bool, false)...
    done (took 2.295414915 seconds)
    (167/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.128576036 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.009004096 seconds)
    (169/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.315823662 seconds)
    (170/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.15469911 seconds)
    (171/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.284984877 seconds)
    (172/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.068533194 seconds)
    (173/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.068669889 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.094614717 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.085347394 seconds)
    (176/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.06791684 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 5.749833506 seconds)
    (178/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.407840324 seconds)
    (179/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.424594263 seconds)
    (180/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.210695672 seconds)
    (181/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.314246553 seconds)
    (182/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.456254621 seconds)
    (183/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.097269524 seconds)
    (184/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.185018839 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.419842198 seconds)
    (186/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.355616973 seconds)
    (187/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.086120974 seconds)
    (188/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.96416946 seconds)
    (189/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.298866517 seconds)
    (190/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.072115048 seconds)
    (191/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.209143784 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.281211331 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.471737389 seconds)
    (194/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.202027619 seconds)
    (195/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.076079858 seconds)
    (196/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.069846228 seconds)
    (197/341) benchmarking ("collect", "all", Float64, true)...
    done (took 4.042491332 seconds)
    (198/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.588604247 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.066465015 seconds)
    (200/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.092675274 seconds)
    (201/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.388295029 seconds)
    (202/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.49549793 seconds)
    (203/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.216786794 seconds)
    (204/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.26965513 seconds)
    (205/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.238295092 seconds)
    (206/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.223514342 seconds)
    (207/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.485613145 seconds)
    (208/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.567491445 seconds)
    (209/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.438922132 seconds)
    (210/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.174488623 seconds)
    (211/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.457415722 seconds)
    (212/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.54734567 seconds)
    (213/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.067730647 seconds)
    (214/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 4.052519598 seconds)
    (215/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.250649847 seconds)
    (216/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.154102046 seconds)
    (217/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.069318594 seconds)
    (218/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.086335273 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.562972059 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.193071316 seconds)
    (221/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.149402262 seconds)
    (222/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.149093467 seconds)
    (223/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.205745589 seconds)
    (224/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.169858355 seconds)
    (225/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.206982555 seconds)
    (226/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.183207451 seconds)
    (227/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.332875357 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.29558898 seconds)
    (229/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.95774305 seconds)
    (230/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.388497265 seconds)
    (231/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.090710224 seconds)
    (232/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.84462614 seconds)
    (233/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.068716934 seconds)
    (234/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.138233272 seconds)
    (235/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.289524441 seconds)
    (236/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.218471155 seconds)
    (237/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.548774086 seconds)
    (238/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.148503666 seconds)
    (239/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.537682856 seconds)
    (240/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.090636533 seconds)
    (241/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.206417008 seconds)
    (242/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.071345723 seconds)
    (243/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.149104457 seconds)
    (244/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.360250395 seconds)
    (245/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.088601034 seconds)
    (246/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.403470983 seconds)
    (247/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.319203149 seconds)
    (248/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.35746893 seconds)
    (249/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.608176013 seconds)
    (250/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.079967621 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.375670274 seconds)
    (252/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.412867274 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.196925669 seconds)
    (254/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.734837775 seconds)
    (255/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.362470008 seconds)
    (256/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.149413685 seconds)
    (257/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.466823461 seconds)
    (258/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.07276855 seconds)
    (259/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.084541907 seconds)
    (260/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.073074122 seconds)
    (261/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 3.812908218 seconds)
    (262/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.450290707 seconds)
    (263/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.451750607 seconds)
    (264/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.151612365 seconds)
    (265/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.48310802 seconds)
    (266/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.084687365 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.079236315 seconds)
    (268/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.102709541 seconds)
    (269/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.151324076 seconds)
    (270/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.090958179 seconds)
    (271/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.845502867 seconds)
    (272/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.412157206 seconds)
    (273/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.161863636 seconds)
    (274/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.234263094 seconds)
    (275/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.081930107 seconds)
    (276/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.073382127 seconds)
    (277/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.074311018 seconds)
    (278/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.242614496 seconds)
    (279/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.444544559 seconds)
    (280/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.061775936 seconds)
    (281/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.217862557 seconds)
    (282/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.197643925 seconds)
    (283/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.075153396 seconds)
    (284/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.57668252 seconds)
    (285/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.647423816 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.318659354 seconds)
    (287/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.15409649 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.362316996 seconds)
    (289/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.39926273 seconds)
    (290/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.777106094 seconds)
    (291/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.070707378 seconds)
    (292/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 3.663874049 seconds)
    (293/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.387047631 seconds)
    (294/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.194400951 seconds)
    (295/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.074281982 seconds)
    (296/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.118507996 seconds)
    (297/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.676399019 seconds)
    (298/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.097122114 seconds)
    (299/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.089478719 seconds)
    (300/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.134490264 seconds)
    (301/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.849290263 seconds)
    (302/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.21544471 seconds)
    (303/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.165444242 seconds)
    (304/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.073344802 seconds)
    (305/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.718223147 seconds)
    (306/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.391144118 seconds)
    (307/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.214114246 seconds)
    (308/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.843493911 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.174456693 seconds)
    (310/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.228029527 seconds)
    (311/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.191193746 seconds)
    (312/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.266296759 seconds)
    (313/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.485822292 seconds)
    (314/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.186725253 seconds)
    (315/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.18351702 seconds)
    (316/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.090091334 seconds)
    (317/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.195547514 seconds)
    (318/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.33876958 seconds)
    (319/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.516122777 seconds)
    (320/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.767416815 seconds)
    (321/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.202033057 seconds)
    (322/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.491703942 seconds)
    (323/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.390078367 seconds)
    (324/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.546736232 seconds)
    (325/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.272138708 seconds)
    (326/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.079760311 seconds)
    (327/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.681296123 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.217496107 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.962509891 seconds)
    (330/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.075685114 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 4.307338692 seconds)
    (332/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.165133379 seconds)
    (333/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.234783328 seconds)
    (334/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.26972522 seconds)
    (335/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.177472441 seconds)
    (336/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.186283708 seconds)
    (337/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.278884813 seconds)
    (338/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.235257953 seconds)
    (339/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.07465469 seconds)
    (340/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 7.947520824 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.080386513 seconds)
  done (took 1168.059677212 seconds)
done (took 1170.13630065 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.097016435 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.077997055 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.594323645 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.088671261 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.078709194 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.0820044 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.60831992 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.105191651 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.095042849 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.610467079 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.085336938 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.080358747 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.093332412 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.115143947 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.092267472 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.095136085 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.086276131 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.106791371 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.11531848 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.087383078 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.131755118 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.087143425 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.080237981 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.132964647 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.080217455 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.09568638 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.096315654 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.133753609 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.131149382 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.084251157 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.086269565 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.449077461 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.132852655 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.084536615 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.092117711 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.094697628 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.087202993 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.097327556 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.098890552 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.0964019 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.082275295 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.090299399 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.085208566 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.082466635 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.079994909 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.077384854 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.085562472 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.206725857 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.093966258 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.431156973 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.141746091 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.09894898 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.131996212 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.085793086 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.085006541 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.085284462 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.132539303 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.088201459 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.084791331 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.430783586 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.179777941 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.096910932 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.435643386 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.146697041 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.09130684 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.092305138 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.084201936 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.102115563 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.447436963 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.654340528 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.112904434 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.103661307 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.083927581 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.085459076 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.093121212 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.609707532 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.094831249 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.678044191 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.107147203 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.097935403 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.088943458 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.084783877 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.083104378 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.101893819 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.102487886 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.080581045 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.089691247 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.090336323 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.0975744 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.452089115 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.130857147 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.604357467 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.088743773 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.104391331 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.101790697 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.680786955 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.108236802 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.101394536 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.088743884 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.449777842 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.126364926 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.104566746 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.086182801 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.098218018 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.198825832 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.10344188 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.10479376 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.083425275 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.105356097 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.091730413 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.085118119 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.098222465 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.105419272 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.120768694 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.103038474 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.08471188 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.095318613 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.090404091 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.099526062 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.092948922 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.09345336 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.097889969 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.087909263 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.136682804 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.103329471 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.099691547 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.201175008 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.091750977 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.209918344 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.098877464 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.092693511 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.086520451 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.441070427 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.134320212 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.106636416 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.092765752 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.108593572 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.109812986 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.103482089 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.089079785 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.101298107 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.08974816 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.140747102 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.087901023 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.111093877 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.139478534 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.101325144 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.094257418 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.105363132 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.125127231 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.109882716 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.091911839 seconds)
done (took 328.579792716 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.135886593 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.089266374 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.167093902 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.091490315 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.156379165 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.141885523 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.087787934 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.087528618 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.08765328 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.479191504 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.088339059 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.094464138 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.089317197 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.088196992 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.136731991 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.08867777 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.088295711 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.323305986 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.089373579 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.146810589 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.08468583 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.088921873 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.088597085 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.480914059 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.089489116 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.087648486 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.148348539 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.088147289 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.355267561 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.088172814 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.087149848 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.344946143 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.148291071 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.102242915 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.100696961 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.092823957 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.156048483 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.097173421 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.13864121 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.135389761 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.166544875 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.126948084 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.08776537 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.086696928 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.093673617 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.091014959 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.089918721 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.122474053 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.088544229 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.094836683 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.326202484 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.094070849 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.097883444 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.090002108 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.08968767 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.104864228 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.089961895 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.094266347 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.149094829 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.090771587 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.138339288 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.527530062 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.483101379 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.090291196 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.087798215 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.088952247 seconds)
  done (took 198.454624716 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.158658034 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.177100226 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.159583086 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.095824619 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.140773335 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.156996351 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.094350647 seconds)
  done (took 16.98841631 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.098284626 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.090576394 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.113839317 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.115416314 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.091313621 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.23233548 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.100674818 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.09681864 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.117402681 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.092266325 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.427700579 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.114467353 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.099695682 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.092142532 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.105428887 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.119689025 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.093778499 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.092863875 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.189890495 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.169414048 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.097884628 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.100229679 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.12041474 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.104679011 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.093976148 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.091976979 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.093387962 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.101019069 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.091901506 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.092682619 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.093691867 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.105363919 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.093939376 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.091785723 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.093386163 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.092325894 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.094135449 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.093032323 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.093640269 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.094022043 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.09263858 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.091574608 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.094305952 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.094013873 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.09266761 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.116150316 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.093675373 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.095268669 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.09370755 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.09449521 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.135165935 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.104628315 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.105254449 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.110259548 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.147409026 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.111688564 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.108620444 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.104162733 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.107008376 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.103858432 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.105697201 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.184222013 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.129423978 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.106696719 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.12839112 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.140823638 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.104397591 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.10265393 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.105381602 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.130898371 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.108032906 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.131524543 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.10898228 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.207076176 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.105795132 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.253937016 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.12857073 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.109888545 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.109001973 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.107987963 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.1150495 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.105136988 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.109756446 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.115499763 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.11347449 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.107223777 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.10884634 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.109251294 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.113669318 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.111555048 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.153910291 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.109356652 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.110087713 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.208036598 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.109641838 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.207015598 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.133455684 seconds)
  done (took 227.442224471 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.11185583 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.109968008 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.122369565 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.111513943 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.11143951 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.114026895 seconds)
  done (took 14.70477191 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.112822569 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.112690589 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.106874835 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.111309528 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.110534573 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.110884801 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.108983407 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.113989958 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.116047385 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.110497758 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.112525194 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.110293291 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.11129645 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.112505771 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.109669519 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.109972325 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.111542756 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.109512334 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.109939724 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.111389428 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.357412602 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.109890836 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.112384671 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.116534463 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.117437176 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.110588789 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.119975059 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.112086496 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.11200303 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.119848596 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.117984465 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.113064318 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.113458122 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.118682357 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.115336654 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.112878464 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.114281656 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.112703979 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.108841155 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.113011947 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.113475428 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.111900169 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.114180076 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.11097066 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.114674125 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.119854499 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.117117369 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.123554413 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.112760283 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.113472904 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.112001651 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.111366368 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.114353428 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.113534763 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.118725507 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.119818471 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.11583679 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.112878009 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.114912613 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.11783604 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.11673482 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.115082714 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.116096583 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.115698171 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.119583833 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.113885783 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.117932679 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.120147601 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.114036117 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.110612764 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.114550684 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.11387499 seconds)
  done (took 155.4694738 seconds)
done (took 615.064885478 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.168862542 seconds)
  done (took 9.196359518 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.21386988 seconds)
  done (took 9.331671573 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.81979626 seconds)
  done (took 12.851650428 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.142543105 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.130640343 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.121007033 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.113639305 seconds)
  done (took 30.547613207 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.350338846 seconds)
  done (took 9.379743069 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.127591887 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.10593004 seconds)
  done (took 16.323558628 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.244386605 seconds)
  done (took 9.272256225 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.306154451 seconds)
  done (took 9.366491906 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.13994204 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.147796416 seconds)
  done (took 16.333874812 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.115211937 seconds)
  done (took 9.143539367 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.393426413 seconds)
  done (took 10.501905213 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.126802175 seconds)
  done (took 9.17195881 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.122273605 seconds)
  done (took 9.15188188 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.240084528 seconds)
  done (took 10.267797551 seconds)
done (took 172.867781093 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.120081152 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.106033514 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.108550459 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.107071497 seconds)
  done (took 30.47089149 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.150425229 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.149349378 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.159106366 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.14937978 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.140173483 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.138450903 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.150064933 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.148806836 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.138489071 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.147700133 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.1497542 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.145741822 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.150096743 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.15838833 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.15749905 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.14640657 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.146952591 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.149524889 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.137342993 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.160326501 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.148268271 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.150163778 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.115643331 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.116093918 seconds)
  done (took 53.532750251 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.305401394 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.181613989 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.267539042 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.159720708 seconds)
  done (took 10.942326438 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.113762005 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.181148871 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.163801028 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.161464833 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.164327738 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.219919894 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.16995525 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.248459563 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.243017296 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.24007689 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.123321319 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.135867929 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.14091729 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.161405453 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.217874733 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.114045665 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.114696324 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.232553883 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.178793738 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.370396391 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.118186139 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.170198144 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.167965203 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.168644585 seconds)
  done (took 54.34742185 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.118172276 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.124191826 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.123224348 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.116248923 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.117122611 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.118348467 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.122867706 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.120288142 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.13865466 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.119658877 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.115723006 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.119148691 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.122257358 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.117816191 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.119843594 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.13295455 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.13016571 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.116582671 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.121809467 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.123419557 seconds)
  done (took 44.467912963 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.113233413 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.961738237 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.46188217 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.367712989 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.115552446 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.10968713 seconds)
  done (took 33.160279101 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.131074406 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.137254106 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.123181981 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.142193679 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.164964634 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.121334541 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.178228774 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.277851064 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.122454412 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.175595113 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.131821949 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.126879649 seconds)
  done (took 27.864231545 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.116769079 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.117953724 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.116881142 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.128211069 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.128872598 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.127946456 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.124174701 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.115027766 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.12987549 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.136654477 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.128185094 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.130345317 seconds)
  done (took 47.53273096 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.331608415 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.34666913 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.334203534 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.731216889 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.425847273 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.0923941 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.405205124 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.331838144 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.766310616 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.858754465 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.39981419 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.090586582 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.067370005 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.039242225 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.01653261 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.362901317 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121402529 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.975920321 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.372109149 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.158070393 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116689052 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.120883071 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.122249316 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.406898033 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.447185959 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120478576 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.333573335 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137184493 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.119773986 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.380470833 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.721311847 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.167149663 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.322951354 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.378071386 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.454226105 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.192990898 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.118576138 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.320877438 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.158370705 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.153103729 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.12870438 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.132453417 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.664487588 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.130579451 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.392801132 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.119195591 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.145244952 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.10205325 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.039960539 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.415079985 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219405458 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.120567509 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.156820065 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.553536522 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241465286 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.364025782 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.125145733 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.325870023 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.172740223 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.354334092 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.238814736 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.120873475 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.332577681 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.045730845 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.455365282 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.231433581 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.123392408 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.128008003 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.822366042 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.364512263 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.203271796 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.430778175 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.871175491 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.122303585 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.124675451 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.164829125 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.220653403 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.117715213 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.42027969 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.1016121 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.044382958 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.222111082 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.527346343 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128555077 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.120842792 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.131795774 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.970342629 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050439034 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.218642233 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.357210278 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.431800087 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.123973093 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.124458506 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.146327786 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124486403 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.071753902 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.704854897 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.183603092 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.050484566 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.684798469 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.733614117 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.08350879 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.609903494 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.16147272 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40264948 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.262677345 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.523760802 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.331504196 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.369786326 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.654586049 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127918404 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.739728483 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207299745 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201064035 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123738895 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.683659441 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.33641622 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.398282644 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.226258304 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.122492577 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.049909732 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.136553884 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.32707848 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.736974221 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.174036935 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118858112 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.131503154 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.123288246 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.129315063 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.240587905 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143413804 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.426019693 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.192867466 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.125766727 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.061412369 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.12511749 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.405934732 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.820880492 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17981208 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.376220448 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.386800606 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.827585545 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.718256108 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.072299367 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.392048038 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.19047773 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.198673932 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.701591639 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.253742044 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.222849303 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125192115 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.245231309 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.126753066 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.129585337 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.56877664 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.534644474 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.564286261 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.170379523 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.125996983 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.080958017 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.334020616 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.361792793 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.162187259 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.147680022 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.132980286 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.210645521 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.355304416 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.12759139 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054033574 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382853765 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.368433803 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.416323609 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.536508197 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.153547811 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.198124252 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.139223196 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.342400222 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.213696451 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.785450575 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.677111989 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.346292797 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.715729211 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.090493618 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.798169404 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.375531014 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.498357327 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.149269882 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.577090019 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.333933162 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.83932653 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.155584134 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.654333736 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.057243023 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13686413 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.482503764 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.08486143 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.443835268 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.184017576 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171701084 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.134415922 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.134334222 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137890774 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.018647316 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.232249224 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199623547 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20405076 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058966872 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.796991218 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.163782283 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.133306105 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.133128457 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.415685422 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.943178178 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.077568452 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.131250373 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207387761 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.880529968 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.682347082 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.131025637 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133957171 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.739215178 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.134267648 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.043858097 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.184632781 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.858060605 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.153825696 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.375239689 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.822129847 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.424100718 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.205375805 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205142661 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.131670937 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.139018799 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.833009127 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.141376535 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.833794727 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419261121 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.401839395 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.577238042 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.189794253 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.344967214 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.149929485 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.136050851 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.614815833 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.153269919 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136970223 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.338867272 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.652943348 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.438239544 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.083957081 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.221041856 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.13284098 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.398754592 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.130872556 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.739054709 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.814022416 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.125945132 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.134485167 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.379917354 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.819320329 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.135190018 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.108305991 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135405607 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.346869557 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.337156113 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.409249908 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.425748868 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.577448793 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.060927674 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.140669825 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.158460657 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.379967034 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.132659243 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.171547185 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.580209639 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.162989333 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.557409365 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.414626321 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.495412924 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.761004929 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.399573587 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.193260599 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.145420641 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.785408188 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.253567527 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.063346046 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254520384 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.063108323 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.787948233 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420768485 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.154197852 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.396094581 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109505191 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.46872701 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.4291738 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.378841058 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.169590469 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.159976521 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.13656761 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.168293489 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.136030968 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.366184693 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.246992548 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.141666821 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.698771101 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171206767 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183607267 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.143474001 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.610350382 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.152034331 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.136110632 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.831801428 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.157782498 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256695709 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208740744 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.864335617 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.770968235 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.158331157 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.089471063 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.788954419 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.400017672 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.187311239 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.59978455 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175981052 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.542961569 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.13632797 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.35188333 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.141100426 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.733675131 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17969147 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.409736485 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.090213787 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.346993725 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.342279823 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.16348105 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.138364498 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.065459071 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.238829449 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.012608743 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.114426976 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.142002346 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.822473835 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.540707155 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.37066708 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.571517259 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.954809532 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.142340751 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.42634773 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.520759712 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.78621677 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167614642 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141410584 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.449252857 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.252971835 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.431105796 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.420057497 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.149394234 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.165459027 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.353442731 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.266981048 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.062433583 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.632807241 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.723274871 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.840676043 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.153107577 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.345391988 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.460347275 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.445096617 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167162576 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216822533 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.546262236 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.401579778 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.202536867 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.064817713 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.141687796 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.537029378 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.543465686 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.239452691 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.367921382 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.444218317 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.722516163 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.808908983 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.575275058 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.488889329 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.529255103 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.520262733 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.341370868 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.499266976 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.453253067 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.717035297 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.541167072 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.339853305 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.232512349 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.402853128 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.997149403 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.836702689 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.372286404 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.132939873 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.056176896 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.336707469 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.251171519 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.478161618 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.701772005 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.375470015 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.375109495 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.576044408 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.667405508 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.347449282 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.149115491 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.092079119 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.152646297 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.149250963 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.127013589 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.621043761 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.418667324 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141205351 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069085182 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.796965831 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.056795041 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.33995004 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.339688025 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.158572812 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.683557087 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.371957733 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.217325868 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.41441115 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.40715521 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.159388321 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.05412055 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.862211102 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.070740922 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.160698514 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.549828011 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144994799 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.131859459 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.330972539 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.058505472 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175972002 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.133230951 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331986461 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.713280666 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.392520481 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.24887431 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.378462769 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.430457223 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.948558032 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143673025 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4016209 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.05724198 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.771195445 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.824881794 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.170385486 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201838339 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.129755909 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133526466 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.402950139 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.444586279 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.327145066 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.792964016 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.159866933 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.153611502 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.453097656 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.209330091 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.134091667 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.134127524 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.630531161 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.359646498 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.130871857 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.099737559 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.341619008 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212653992 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.326198032 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.205180983 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.644981368 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.136186039 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.950979957 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.220976709 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.08100842 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128454541 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.791498663 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.189519558 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.130937024 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.400871116 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.748838147 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.334843995 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.526847559 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.995835317 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.343379127 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.168419351 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.13372368 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.253517815 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.413205434 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.431703574 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.131917831 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40040327 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.174926906 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.138353557 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.793272235 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.102886054 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.134473264 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.78905127 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.01265115 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.860003341 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.530644483 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.137212225 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151240242 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.136814641 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.061440286 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.132284313 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.299924133 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.121553824 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.255149636 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.398468794 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.422044923 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.211116311 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136873524 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.134106718 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.13838166 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.34641963 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.649256291 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.150362043 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.834548026 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.338584357 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.136492128 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.629234581 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.584631444 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.411230985 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.169457702 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.344863025 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.375022762 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.674449917 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.347549372 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.107413676 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.358901859 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.135076489 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.409002898 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.408977549 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.135629397 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.347979437 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.758916631 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.415721841 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.493164149 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.445279822 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.195554974 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.360897194 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.021873504 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.137485167 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.138562854 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.400010772 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185898125 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.136479579 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143844064 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.691423598 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.857395626 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.613072588 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.287592401 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.449720412 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.88299998 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.886613965 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.137642395 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.062591703 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.134616242 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.157461132 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.139698053 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.063232133 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.794483903 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.854684327 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.348099046 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.448407474 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.061287322 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.341893662 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.71616822 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.059610504 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.104721244 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.154915099 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.376187591 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.064900208 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.141029456 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.092490674 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.395149778 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.869420077 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.405241219 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.135674406 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08317773 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.139260274 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.142195503 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.138689507 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.224220765 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.139559341 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254270908 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.402721908 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.497838291 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.234329574 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.779156255 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.864074463 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.072812381 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178004288 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.754074347 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.706563418 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.399420512 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.256868796 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.799877056 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.079993897 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.139274121 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153783064 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.401261992 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.140553187 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142961291 seconds)
  done (took 2237.358533014 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.160149996 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.185298583 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.172720492 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.210220435 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.245315426 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.230944255 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.248295405 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.164146612 seconds)
  done (took 59.668837282 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.143766122 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.086962483 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.144545979 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.140773055 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.137784961 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.141200307 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.345483511 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.170199845 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.143344326 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.143343646 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.142571145 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.14185839 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.145044858 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.134984537 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.142614043 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.455614818 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.1614141 seconds)
  done (took 80.998412403 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.206882427 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.569425879 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.156633126 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.866904206 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.170923517 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.533650524 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.155954919 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.155593776 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.28319419 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.446089849 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.153197852 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.167262819 seconds)
  done (took 94.420662059 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.156548412 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.157191411 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.156183897 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.155806034 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.155174014 seconds)
  done (took 12.844430769 seconds)
done (took 2789.697269216 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.394762029 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.2561987 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.22793978 seconds)
  done (took 6.548702108 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.299165719 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.347076369 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.461932731 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.467933349 seconds)
  done (took 11.650055445 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.442699828 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.546352696 seconds)
  done (took 7.054626413 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.583361226 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.168176816 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.543302325 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.158840142 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.158755393 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.159544512 seconds)
  done (took 23.548658752 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.157438226 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.156512419 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.157028013 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.156405836 seconds)
  done (took 10.6955408 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.154151626 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.956613333 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.155787102 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.165198386 seconds)
  done (took 22.498509243 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.371400713 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.950244564 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.924053497 seconds)
  done (took 13.312436929 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.781702178 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.60404956 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.77191068 seconds)
  done (took 10.22517299 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.012790394 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.971891137 seconds)
  done (took 8.051828341 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.298724433 seconds)
  done (took 4.365160361 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.989965194 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.470823906 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.632308026 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.678301286 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.741692566 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.376522567 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.49732147 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.440230697 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.553450543 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.611021192 seconds)
  done (took 28.061634557 seconds)
done (took 162.768780481 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.604032332 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.181048543 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.379891129 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.540402318 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.40672428 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.379179985 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.437578407 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.530711697 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.217071026 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.196773897 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.536205853 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.396533554 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.39223474 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.187335294 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.400344815 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.187570018 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.399809919 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.623663916 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.219629971 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.432778082 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.452291019 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.186248635 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.376471647 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.202319566 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.395051212 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.32475834 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.790465278 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.184442298 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.373552338 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.8005193 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.319271977 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.58538961 seconds)
  done (took 178.709152348 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.041818397 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.156763752 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.157767104 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.157269565 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.492119558 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.159011612 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.15621121 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.155324348 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.402199162 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.394681857 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.156660335 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.48746367 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.159307659 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.156860064 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.156481899 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.156164165 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.526829035 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.080299709 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.156053669 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.155510037 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.158895713 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.350787946 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.157459616 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.366596657 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.509684349 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.15741332 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.158279021 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.158475868 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.159200203 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.157698141 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.158602468 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.157540774 seconds)
  done (took 217.190598407 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.1618072 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.159422889 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.16026229 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.158187965 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.158952152 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.161210613 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.159312895 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.156176159 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.960208096 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.947984124 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.158519584 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.158532746 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.159997581 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.157322293 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.160790295 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.159368915 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.159236041 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.156913233 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.158591607 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.159524861 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.159348786 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.892786553 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.160134285 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.910619901 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.159285688 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.165007415 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.159423503 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.158839005 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.158845854 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.160580226 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.159736289 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.160354074 seconds)
  done (took 230.252752829 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.40831975 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.164824444 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.167242618 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.175429266 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.164841784 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.164194338 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.173096901 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.417203362 seconds)
  done (took 21.91249254 seconds)
done (took 650.15091091 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.570710909 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.914365706 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.294968787 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.186273636 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.451439518 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.229531311 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.183298152 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.256948276 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.830535198 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.263038412 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.616706697 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.189428303 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.933060218 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.213432946 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.300694778 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.250806487 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.585474286 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.855203422 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.314661309 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.847783336 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.389081868 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.139538654 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.273499419 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.877380177 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.629855024 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.154747362 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.202615902 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.604249005 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.188058006 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.423178345 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.895750059 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.449822369 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.199593869 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.184124761 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.242545894 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.227824457 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.377746301 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.195102584 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.300152927 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.93138965 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.852495499 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.719712649 seconds)
  done (took 112.82246929 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.173770226 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.171832137 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.172869488 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.17189604 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.182146831 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.172170426 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.174287723 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.172370005 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.171631974 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.173339523 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.1717385 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.180622015 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.172630883 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.183167846 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.172914321 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.174208986 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.171567404 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.181961033 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.175042577 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.174544097 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.174703267 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.174478127 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.171320543 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.173021202 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.174614175 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.176669415 seconds)
  done (took 58.629586598 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.168160827 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.348839367 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.458995917 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.19869075 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.169665436 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.171571894 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.200504724 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.173035177 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.171274863 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.172365857 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.284175523 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.168562347 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.182924078 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.454885919 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.197635729 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.169761686 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.17083189 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.171708726 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.358871713 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.188035671 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.200377777 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.174866684 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.199860526 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.181780536 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.172629177 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.171432041 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.174805518 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.589950732 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.180530348 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.286028788 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.226515393 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.20220601 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.524399251 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.466610832 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.243067279 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.174008102 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.170136372 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.33459284 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.179711012 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.172863832 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.198879153 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.178606477 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.459312656 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.6986929 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.182867251 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.17253149 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.587214293 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.339734786 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.216664397 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.187080755 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.46833668 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.202733615 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.174074212 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.172900695 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.209453782 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.184468807 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.171242343 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.454836266 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.185931389 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.20170281 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.181660716 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.174721307 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.365224267 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.17705398 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.355507928 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.17867128 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.180084005 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.175251459 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.463779383 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.202643756 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.698143263 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.184218452 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.174004868 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.289022801 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.352888671 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.606352117 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.183847132 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.367419972 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.538210927 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.213109711 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.185531209 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.575256939 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.21229121 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.180568922 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.173671214 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.174123418 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.174064072 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.216500566 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.203085319 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.607728108 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.694807277 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.469583034 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.210497056 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.18470512 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.175923943 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.457330534 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.181067031 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.176052853 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.456117827 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.722570752 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.185711172 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.180682195 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.676577866 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.1878615 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.205124207 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.182884264 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.473742719 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.206008012 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.216850686 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.174934083 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.17971652 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.178723966 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.204904125 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.181690209 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.170088972 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.66543596 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.347111735 seconds)
  done (took 268.445869874 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.180126328 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.171416804 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.175720533 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.171255166 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.175884286 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.175672734 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.175398663 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.174529785 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.174880335 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.190080664 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.174008626 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.175287633 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.177613023 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.182936972 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.218269894 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.175648829 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.662967802 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.174391348 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.171724919 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.170618656 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.749879178 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.255954516 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.173518139 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.171000038 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.175169078 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.176098725 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.180973506 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.207502715 seconds)
  done (took 176.232093848 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.175275741 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.224272771 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.191047232 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.223815537 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.188239093 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.175128439 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.198058722 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.187943897 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.182478767 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.177449832 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.175381462 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.203348597 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.181201919 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.293304867 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.202130137 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.208713833 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.252296643 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.179134547 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.176151657 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.178532826 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.223092574 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.190345662 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.206534922 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.230336928 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.188656603 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.225352533 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.189133072 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.176675719 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.177978549 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.267240149 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.196981691 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.205464781 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.212192908 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.192423421 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.268236837 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.267143899 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.251741898 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.201326555 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.184344193 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.175829465 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.177134019 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.18106544 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.226006024 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.19130689 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.178815286 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.267862893 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.200241202 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.179008641 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.198325763 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.178179835 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.188672515 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.193453714 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.210673723 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.277927501 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.224237073 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.20103498 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.200184105 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.196774033 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.180441451 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.251921321 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.183728304 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.267224794 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.200236111 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.178301908 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.179527565 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.183483612 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.226690573 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.214309856 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.253788144 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.184215298 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.251844399 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.230227181 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.194488428 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.180023781 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.179804501 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.225957446 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.268194724 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.229170975 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.241999411 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.218231391 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.186165495 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.179644954 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.181241824 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.207174574 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.188217778 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.269778582 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.270206412 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.183491042 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.181674817 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.18108861 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.180184982 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.203536911 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.234012993 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.221974646 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.263561367 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.210818732 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.217945697 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.187681283 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.191703519 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.18315376 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.210807899 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.186526119 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.192995791 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.522005933 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.216225411 seconds)
  done (took 234.141991643 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.557859898 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.22922661 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.250318879 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.460495688 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.568812771 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.307922674 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.218415818 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.237190991 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.240403791 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.349852175 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.291256196 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.283173474 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.217207087 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.204744192 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.230297125 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.242091091 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.265701216 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.52294245 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.324383654 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.018993722 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.223053543 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.478057368 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.510631675 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.598110639 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.269108823 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.615241068 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.872747971 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.318410937 seconds)
  done (took 71.00428403 seconds)
done (took 923.353904959 seconds)
SAVING RESULT...
DONE!
