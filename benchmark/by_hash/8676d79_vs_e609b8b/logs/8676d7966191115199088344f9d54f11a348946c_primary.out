cset: moving following pidspec: 4809
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.793946724 seconds)
loading group "shootout"... done (took 1.091845341 seconds)
loading group "string"... done (took 0.662178459 seconds)
loading group "linalg"... done (took 8.480118536 seconds)
loading group "parallel"... done (took 0.163991462 seconds)
loading group "find"... done (took 2.96850614 seconds)
loading group "tuple"... done (took 2.107811391 seconds)
loading group "union"... done (took 14.753298448 seconds)
loading group "dates"... done (took 1.433267093 seconds)
loading group "micro"... done (took 0.217740843 seconds)
loading group "simd"... done (took 4.728613509 seconds)
loading group "io"... done (took 1.070009791 seconds)
loading group "random"... done (took 9.447867224 seconds)
loading group "problem"... done (took 1.616346775 seconds)
loading group "array"... done (took 24.930314926 seconds)
loading group "misc"... done (took 1.87710714 seconds)
loading group "scalar"... done (took 43.082860546 seconds)
loading group "sort"... done (took 3.299524198 seconds)
loading group "sparse"... done (took 12.7009601 seconds)
loading group "collection"... done (took 18.037250878 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.422512189 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.123095942 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.12792569 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.112776389 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.186292202 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.12142444 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129371134 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.084981393 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.847145632 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.136861911 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.114599871 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.424190968 seconds)
done (took 5.274909733 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.204154177 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092169427 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082328372 seconds)
  done (took 1.40206173 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071300146 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062732343 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067187043 seconds)
  done (took 1.422991177 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064813254 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.134473217 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066181681 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06651409 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066724356 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06613265 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066022953 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065771302 seconds)
  done (took 1.756444004 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071620423 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067096113 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065159422 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067269665 seconds)
  done (took 1.494907052 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.064888523 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.120988701 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064724488 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065067643 seconds)
  done (took 1.53711883 seconds)
done (took 9.125616566 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138427158 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.817974941 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.747361634 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.122183782 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.24823686 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.448138998 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123805512 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.182362478 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089005139 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07508575 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.120935609 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077478535 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.397369066 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.397077211 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071061384 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.174091189 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.711974631 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.086707534 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.144338636 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.653759721 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074951443 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087125252 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086845434 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.070893882 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.393975225 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154719809 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.755917381 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.099065828 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06803032 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095423898 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069949419 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077514686 seconds)
  done (took 11.11969373 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.092036657 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.089453103 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068751888 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123450506 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093132486 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.069345818 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07506732 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067296388 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.08863778 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.12348147 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089263087 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.097698822 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066066448 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.073979197 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.073592262 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.196058851 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.079742982 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080741418 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067598917 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081023139 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.104903425 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078054054 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.077801794 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07776836 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.131529393 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169309898 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097202187 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098289067 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.065705441 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078730423 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11520119 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.124669958 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066707819 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065010429 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.11971871 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.094718049 seconds)
  done (took 4.639104694 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.897870358 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095372499 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081900121 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073758102 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106195358 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112796771 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.120523952 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.121716935 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099307444 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06841018 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.149753202 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.637426916 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.14980134 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.074414607 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118883582 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.358861897 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.113113877 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.069658699 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067722539 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070622252 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069558262 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111395166 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065773344 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.173493866 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.582521698 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.0706732 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069123513 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096038475 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.069861359 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140220107 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092781574 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070823895 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.549879539 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065881679 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.06375196 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090765023 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091793455 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065455437 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066801809 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077231209 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.176501141 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109349281 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079790006 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.486807489 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069780718 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.559953155 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225180619 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072581751 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072351279 seconds)
    (49/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.113407603 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101439681 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063980673 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067516996 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.855815634 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.124772418 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066623517 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.27160272 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06980714 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068966903 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068915819 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099074389 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067757066 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071312394 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073418416 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096336773 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.880431411 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088160164 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096309087 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066907499 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.403760561 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073682622 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069070651 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069708938 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.083397442 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.110697747 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066958555 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066339927 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106653541 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089086198 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088709001 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069693952 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067251258 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06643119 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.321464757 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.174080777 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067227301 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067278794 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.483925533 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064652574 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066454488 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068135852 seconds)
    (91/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089038663 seconds)
    (92/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066415492 seconds)
    (93/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063525091 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064030284 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064606497 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098647569 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067192765 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.332994638 seconds)
    (99/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.183292513 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067278005 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.44636194 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068892853 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10292652 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118951714 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067982173 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.09490818 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068435858 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065180055 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07338066 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066177865 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064933689 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069498181 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065904162 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066250052 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.068990629 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068440227 seconds)
    (117/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.065108827 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0675241 seconds)
  done (took 22.665448251 seconds)
done (took 40.551482275 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.333507759 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078374931 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078209082 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078527798 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078227361 seconds)
  done (took 1.925573495 seconds)
done (took 3.296477287 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132297944 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075058528 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064256338 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100413355 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068947005 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.10123986 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.107939216 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.103744118 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068761497 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068748757 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069058055 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.10445012 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.104710446 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069201854 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.097949505 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103285847 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.068795143 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064512336 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068875053 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.06886048 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068772779 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064390696 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.068966138 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068815075 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099214761 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.068446759 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064489994 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.098317137 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.068545643 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098390395 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068795145 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.068902131 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068773122 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100019636 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.068727735 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.213465582 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064700915 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.06900461 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.068584775 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.068810797 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068882468 seconds)
  done (took 4.72925682 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070869208 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081321089 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082899932 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06170948 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07146931 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082091771 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062360061 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082001314 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090747961 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082067848 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.081888827 seconds)
  done (took 2.170532461 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069928396 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082429847 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083935506 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062041983 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073335833 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082942452 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061715996 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082792063 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085077157 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083353342 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083555377 seconds)
  done (took 2.158152348 seconds)
done (took 10.357811063 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095862258 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065858376 seconds)
  done (took 1.449569998 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.223067298 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.503845181 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.308769582 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092772024 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072135191 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085574948 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201632921 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067301596 seconds)
  done (took 8.029224251 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.098432762 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.071337764 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069585109 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069200212 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068845309 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068888142 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068572064 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069528331 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070097116 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06820346 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067983303 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069042528 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068178371 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067994063 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068332442 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067778003 seconds)
  done (took 2.532522709 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103235096 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069309015 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099020656 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062031091 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072018276 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06255361 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070713242 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072631639 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070078282 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070987143 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.071948164 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070654939 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071541785 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071840717 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072898965 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072715957 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072706638 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070169039 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07249442 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073309206 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072536429 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073005266 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073120772 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071308726 seconds)
  done (took 3.180319626 seconds)
done (took 16.499526061 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.173501143 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074273151 seconds)
  done (took 1.546098814 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067657363 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068359286 seconds)
  done (took 1.447736153 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072592319 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.06087678 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07788151 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.069973979 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06144087 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061090476 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076972504 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061574905 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061179318 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061745952 seconds)
  done (took 1.975874479 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062627623 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068748831 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066248606 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064941128 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067161864 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06361326 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065438298 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063110691 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069529424 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062056477 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066316326 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083066225 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.06587541 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083476094 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065703284 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066543345 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067518526 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064786484 seconds)
  done (took 2.528164547 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061367559 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061732143 seconds)
  done (took 1.438673796 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064646779 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061998341 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064084379 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064281817 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062028353 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062878964 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061777948 seconds)
  done (took 1.750816527 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.419075793 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121530622 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.340573221 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068869669 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076294456 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.253855628 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064075184 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070041431 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068521065 seconds)
  done (took 2.838557296 seconds)
done (took 14.855485468 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.081604581 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180374324 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087388847 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.403672336 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091654366 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067372078 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113267841 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.173236406 seconds)
done (took 2.538818387 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.277961618 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.247345232 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.396105731 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125795075 seconds)
  done (took 3.091206419 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337950955 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078668717 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077071916 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067290716 seconds)
  done (took 1.89274942 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065219203 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071342661 seconds)
  done (took 1.465366297 seconds)
done (took 8.068456821 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072361217 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.097400376 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062673326 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.064225971 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065036316 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.06415563 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063986786 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.075198845 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062282128 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062351154 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064607662 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064756833 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064886315 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063737284 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064262483 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064322129 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064774888 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064264065 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064718544 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062480138 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0645529 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065182023 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063688314 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064786512 seconds)
  done (took 2.947421733 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079464214 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065969813 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066903919 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066506175 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067548294 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066914931 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067049202 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065621665 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.06687624 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065382127 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067295231 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067512043 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066457087 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067561098 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06571073 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067760322 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067630743 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066137208 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065554653 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067570224 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066828206 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06607782 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067887951 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067174866 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067307534 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067675972 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065657588 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06638875 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067344484 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06752432 seconds)
  done (took 3.360642884 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066309621 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060170884 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060546416 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070425309 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060527189 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060659845 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061398476 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059827019 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060681649 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061787855 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060947237 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.06044136 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061511888 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.06052998 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060542377 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061043686 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065191639 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079803553 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060684778 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060575173 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064953091 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061213091 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061062027 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060907431 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061647317 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.06076682 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060386983 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060549588 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060717367 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06150427 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060407146 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064833478 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065544021 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060371645 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070451262 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064975672 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060321497 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.06478222 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061662599 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060184519 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060460034 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060401364 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060168355 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.0608547 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070355196 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061113266 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062171995 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061195215 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060604367 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060486654 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060609402 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062170199 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068368001 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062014408 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060213422 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061293567 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060277269 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061073973 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060117076 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.06001703 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059973034 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063591783 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061777679 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061214108 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079958917 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062144333 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070466485 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061055023 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061555525 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064217603 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060836502 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078016006 seconds)
  done (took 5.856013684 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072519858 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07311211 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.084479487 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070498083 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065053332 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06162045 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065408471 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061576845 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070823233 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065571051 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062045308 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065287354 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071017756 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065597109 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062782371 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.07056611 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06546671 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064788931 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061511097 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.0653691 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062530991 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065312457 seconds)
  done (took 2.829644162 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.13484047 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066774163 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105473998 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074536563 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068595953 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07489094 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066395287 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066316634 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066597607 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067201311 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066965274 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066739393 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068887002 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067145332 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067180781 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066794386 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06644344 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066739515 seconds)
  done (took 2.67585191 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076810425 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066360332 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089850524 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066146883 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066180429 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065723706 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069685871 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069903611 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065967555 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06633836 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070216424 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066229165 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065950367 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066442589 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065983534 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066301878 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065938875 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0661843 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070432041 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069706782 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069591136 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070077964 seconds)
  done (took 2.864605325 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076960982 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06486812 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080439137 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066464405 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061161102 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06071971 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066371133 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065572646 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065965356 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064879242 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065213595 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061009971 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067003303 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065415712 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067073545 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065746019 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065454774 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065653289 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065193395 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06073049 seconds)
  done (took 2.670896493 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086796939 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063429244 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063308078 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.083155808 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063355675 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063181959 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082815965 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063501568 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070201677 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084994208 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063598459 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063653559 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082927379 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083166817 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063631275 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08300455 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083343087 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083222635 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063749118 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063662367 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085118534 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063426794 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.082781784 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063318916 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063331766 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063253848 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063233029 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082572873 seconds)
  done (took 3.376789416 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06445193 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063684455 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063816576 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063841427 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064004046 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063928935 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064621127 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.06469347 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06430564 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064508221 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064496974 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064428391 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066752917 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06419549 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064208233 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06416761 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064110853 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064565682 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06413826 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064380501 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063941064 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064179006 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063981507 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064620913 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06445067 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06431096 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064375551 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064192998 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06399617 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064375812 seconds)
  done (took 3.285344458 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072925737 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071993757 seconds)
  done (took 1.500614999 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062177684 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077663001 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060067876 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072918661 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068914153 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064006913 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069805488 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069187917 seconds)
  done (took 1.895030612 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066878838 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090531467 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062862346 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062865258 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066042859 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127325571 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074735562 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.0779084 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076492326 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065139867 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062749833 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074195247 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062261825 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075432983 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06343241 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.0713692 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069672362 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080064231 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07482901 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06066455 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074509409 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063565893 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061025449 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063594084 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062400489 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068937113 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077554347 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074606069 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070810876 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060394467 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081237119 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061442196 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062578834 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071470677 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065488648 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061459484 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098024296 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062221926 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.06611125 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060850918 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073515009 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081768072 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075766908 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079138878 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063435354 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.0633526 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061069766 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06310195 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06509783 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070878401 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061540393 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068933058 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060600732 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062938402 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072092095 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061824716 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066780373 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070729882 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075300534 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072096897 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070290243 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076684968 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070326255 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069371337 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062842856 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080663438 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063244219 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074905691 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076046443 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062617917 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074618884 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061056338 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060160785 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061109657 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094880859 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063593122 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.0625622 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061587611 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061135193 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062442288 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070921384 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066358353 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068180075 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064263704 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076659588 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069920451 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060987692 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067351672 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078382342 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.063715636 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060929596 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.076945663 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064016429 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059958016 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078456141 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070038917 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062609418 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061570435 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063935174 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073771188 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061838886 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059598972 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069280909 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062445499 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062926743 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06496451 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068841783 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060567932 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070792646 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065532993 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061893757 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059022864 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064053864 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061025873 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058856581 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.0693498 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060271207 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073836987 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066541243 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073898209 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074372735 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070110294 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075705445 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060200435 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058493131 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077200257 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069043304 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.196065325 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.079864742 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.061682253 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074839973 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061222494 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063249374 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070861859 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060546247 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06331258 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061052144 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066256916 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062658908 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062963977 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06695394 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070066268 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073285598 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062799648 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069964976 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061688288 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076631007 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071448716 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065959433 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064681906 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061845633 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.07320442 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069282421 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070395285 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060876528 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061816905 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061665229 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072317942 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070943318 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062977804 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068821184 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065436212 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062508901 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061243557 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06249651 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064771142 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064765411 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062369324 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069182983 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070141117 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074948551 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068514296 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070065757 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060845109 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060925974 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062841068 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060879579 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065451854 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070309115 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076365079 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072860615 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082114137 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061598123 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071084071 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063281876 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077858685 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074530664 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062534893 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065853183 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060572983 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06275572 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070489301 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07295374 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074834085 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076005293 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065780738 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065407857 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061261043 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076121294 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061864261 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070107316 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071089765 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065818898 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061209397 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063124123 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070378376 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065571267 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061098102 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076953258 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067281808 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061151796 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075630044 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06190269 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072017071 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061073617 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065046842 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066600148 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063330302 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071153419 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076496425 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060413088 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062348516 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07694878 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063431335 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062741831 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069340126 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076269349 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065648686 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068958139 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071807728 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070921641 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065749041 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07038846 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062010366 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070388325 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064032754 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072166057 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060847978 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077992267 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060161803 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075327159 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060988071 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071451283 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061668281 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069800365 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06139559 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.0768412 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062021651 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061590208 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071820343 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059519872 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069525343 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059924631 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064985847 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066545443 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.06993345 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061903337 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069521183 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062281864 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.208314441 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067885751 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071377777 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072193635 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066612376 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061812175 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.0707459 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073140053 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.069953752 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062731904 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063358187 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.06220957 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070933314 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063681114 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062733319 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070179999 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066559994 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067130735 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06306564 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063425767 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063244817 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070062381 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070820222 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079049718 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070409345 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069368952 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070814657 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061121518 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076792193 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061593423 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071221524 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060670582 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066928508 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070346684 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061731047 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080099628 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062757313 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069493516 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074072297 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070285207 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065449753 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081271136 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064483517 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069703726 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069735698 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065584897 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067865868 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063180031 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069690137 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070739263 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072219448 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062728198 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069399331 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070400884 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062692897 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06870013 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063142375 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.06958816 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063673967 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060550769 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066113332 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073055779 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066130178 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066477493 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062047973 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060282297 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061700783 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068109203 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066000116 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070308973 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077225765 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060664709 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062477386 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061109823 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06522939 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07924607 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071452643 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069663201 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066026138 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060814388 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.06318078 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063320021 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062169943 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064986658 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060522253 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061152542 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07185837 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063604355 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065980554 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061570356 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062563375 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071012374 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065948958 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061879098 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067623902 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061200331 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066663269 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060543827 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062735168 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065853704 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060816872 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064782332 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071518066 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077532759 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067527318 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069944777 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06249579 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069275103 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076625703 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068042579 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062787834 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070470261 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060214799 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079025494 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069927943 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069469599 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070850102 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061839596 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077075498 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064609739 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069582259 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075322423 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061143773 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066444794 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059670078 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07554786 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064601295 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059812741 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067656326 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068349706 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066306224 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071888071 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060817933 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.213658384 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067697416 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06615589 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063735969 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063562683 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070732993 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077910605 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062364004 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065477343 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069848932 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070465077 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066009217 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074094305 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.06983304 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062635694 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063354534 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064938223 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062249286 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073427846 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061790923 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065770155 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065907277 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061176599 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068416709 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078167967 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071193692 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071121613 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061005805 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060521394 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078802305 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065231293 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065062112 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069327012 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070934775 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073756732 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071256764 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078466126 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062278331 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06676629 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073705492 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062306965 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061614816 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065172362 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063342 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070616532 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071405071 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069619155 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063436795 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068201184 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074957295 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.0624453 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066249953 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066216622 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06232974 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072020238 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069439975 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072097255 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062545605 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060850273 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064924117 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070446039 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069173188 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070416683 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062531106 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067854506 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075391961 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069015901 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064460961 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.060846052 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064605629 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070668544 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06599079 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061066126 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065985723 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065487493 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068457173 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070928051 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066096084 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061270819 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078306492 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069854678 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.07104152 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063509136 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063551147 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062030134 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061151155 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072769009 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061124557 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063004713 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065897192 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063070329 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078572813 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069594982 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077196965 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06204364 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065967689 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060969312 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070982415 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06585572 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061845763 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072207866 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.06092637 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07717917 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073334122 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066462332 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.080536481 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06594108 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069104548 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076236662 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070883096 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070066374 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064665022 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070825389 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062842103 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071859767 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060785915 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059917051 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.07144639 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069231551 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072852089 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060224526 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070752308 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06254825 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068808489 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068082906 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061949977 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061728983 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061784596 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069284648 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064707647 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069622644 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065127423 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.219472302 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063808042 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073969172 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071903592 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072949185 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075682136 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07411025 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069660482 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062451502 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06921914 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069415325 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062947988 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066602365 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065034534 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082642485 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063644347 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062794958 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075386929 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067665006 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061557509 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067878191 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066180048 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072066197 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063105118 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071877154 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065656458 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062365181 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06591302 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066086501 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060705287 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060837987 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061284297 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071514786 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065789851 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061970587 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080181595 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.06334993 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070324113 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072889727 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068350755 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063510073 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060538719 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062502767 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074737827 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076775926 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064951081 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070197628 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063345917 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070733652 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060424771 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070338427 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.06925977 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07019257 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.06082772 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061775644 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076525805 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077074461 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066378472 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071194047 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.07062645 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063144384 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082780962 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069985972 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06271322 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072849163 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064235653 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060910586 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060726898 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063418239 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072926493 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061601931 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064142081 seconds)
  done (took 42.231151583 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099300633 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062284609 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061219086 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061491095 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071826371 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062362492 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061311879 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06212967 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06212581 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063718156 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061317131 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063914034 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071952506 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074384166 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071577593 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065036331 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061661449 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06230096 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061472344 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06233542 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071443376 seconds)
  done (took 2.871641216 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065470564 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066328529 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065419038 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065257917 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064576679 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06145281 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065678131 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061286713 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065790276 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062629257 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066033962 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06143017 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061816812 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061803704 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062096297 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063095724 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065888484 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064704775 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061518121 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065356913 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062963107 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06535941 seconds)
  done (took 2.858884583 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062811716 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062148619 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070657845 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060977218 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060707897 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064641591 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061050514 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065181509 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065690955 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065629259 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070077218 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06191844 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060885251 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067284761 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060773229 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061847657 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103560244 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062528023 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062166669 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060809907 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063941162 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070330921 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060826869 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061198278 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065427604 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064171299 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060919555 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063382893 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06165727 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065559139 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062553166 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060824357 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070558135 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069656392 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065930822 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065460654 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062725004 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062171146 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060758072 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060872761 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069646281 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062451016 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061179792 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062611794 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069958655 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060899156 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060700618 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070175636 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060727259 seconds)
  done (took 4.624133249 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071519033 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113422292 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066975152 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094759703 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073539619 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067065772 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067146163 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095665119 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062414903 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063015085 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074861671 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075003501 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06431744 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.06529336 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068606842 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063824196 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064737671 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063094738 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066724301 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063417506 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066498643 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068033209 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.07337009 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074456269 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064515571 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063120741 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063592093 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065060066 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074012675 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067335223 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065623623 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065889706 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074094229 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067802073 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063398207 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063532408 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07470061 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064417892 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063716489 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062465738 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063881541 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065137009 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068058948 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.07480096 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063746379 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068534745 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064036588 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061916476 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074094426 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063570377 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067429967 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.074850189 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064740785 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063931249 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064987158 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073956241 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064019209 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062657903 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064042725 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073951421 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.06203455 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064756056 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079623213 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063194037 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067490717 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075122259 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068997335 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06484359 seconds)
  done (took 6.277417723 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07025723 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.0963674 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071811484 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07233331 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071982897 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.07162178 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071270233 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071209091 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071711554 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072026088 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07140608 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.111435497 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068193423 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075744228 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071531303 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071684399 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071671478 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071700708 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07142843 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07121941 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071222477 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072444045 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071884654 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072866447 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073873945 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067976937 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071559266 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07118375 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072173574 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071324248 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073814738 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071513567 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071379819 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072252315 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073845264 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071279284 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062183712 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07133388 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071636985 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071370807 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068006085 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072232473 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071334205 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067950258 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071773485 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071703207 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071966123 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074127238 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078515133 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072156263 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071888678 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072036922 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071908215 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.07164125 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074547287 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078853987 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072350282 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072150175 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071768471 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07266031 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072197327 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078166909 seconds)
  done (took 6.018066723 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074335837 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067673863 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079562397 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061420866 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061136206 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070262864 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061241239 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061313847 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068148004 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067930216 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069816898 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070390493 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072597688 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069726128 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070363676 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072460946 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070412234 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070276882 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067953068 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070151007 seconds)
  done (took 2.864937556 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.075813302 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079781911 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067212658 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070238341 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066833261 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070373944 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065861779 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066932674 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067060355 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066715878 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071418329 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.07187642 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067447146 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070478339 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071275055 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070309387 seconds)
  done (took 2.595723824 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065062299 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069722671 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067784635 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062581337 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06462863 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061916701 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063369238 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060776056 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064066982 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075479977 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062190897 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065388949 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062906308 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061414108 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06183686 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064874733 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064041569 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062156072 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063134992 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066563557 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.073651528 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063240846 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065524792 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062221391 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064526358 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.074272842 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063671541 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064933136 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062467158 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065224338 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064972757 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069045007 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065017407 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062825037 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061923844 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062376596 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063017762 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.0652072 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065459048 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.063057136 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060889401 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067395654 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063000238 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063015815 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06418948 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06561063 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064083077 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068002 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062522818 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064737317 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062743346 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064064052 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062685017 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.06930491 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064530142 seconds)
  done (took 5.036063475 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077996456 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066537065 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.06117762 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061007808 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066363375 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066727702 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066745675 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066461269 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067061274 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06186058 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067068368 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066193591 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067288677 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066260585 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067114701 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066682575 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061046009 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06669052 seconds)
  done (took 2.682668619 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068199605 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067134634 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066122045 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063125601 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063253785 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067600608 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062018253 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06297725 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062531886 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063404025 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063486678 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062383044 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06267712 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062750477 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067071133 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063102107 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062598475 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061386226 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063214788 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061883206 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067467561 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061333095 seconds)
  done (took 2.889506912 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088470944 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084770748 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127657023 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080350609 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089396815 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072321506 seconds)
  done (took 2.027821641 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094783461 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104537068 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066335657 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066192625 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074376733 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069320182 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069355554 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069774544 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074932532 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072918386 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069554715 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074665478 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074729762 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071824106 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074901434 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076918337 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0696203 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069367495 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066462482 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076766752 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069306209 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074860505 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069489123 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069330727 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06930091 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070830347 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077465823 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073307921 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069537699 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074711919 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077181005 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069672822 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074824467 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072969562 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066459839 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074677696 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069186799 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077337658 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074690174 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071128782 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066215168 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074844708 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074759133 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070772749 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077067396 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069425853 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071170531 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069400729 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06972703 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079126606 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074875851 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071136101 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074522861 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077184202 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077366146 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079545667 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073311998 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071590003 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075230753 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073152256 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071442402 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075479662 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071540278 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073616679 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077418458 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07126659 seconds)
  done (took 6.337999514 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100689968 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066853536 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069741438 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073503345 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070999701 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069836678 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069942434 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069530109 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069587153 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067001525 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10481494 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069717917 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071629413 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073730603 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069713084 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069722557 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069568035 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071566473 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06724898 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079584865 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069882726 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071130793 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071751549 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071335935 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073381141 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077059621 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070056577 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069457597 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069630208 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069724854 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071499041 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069481563 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071183458 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066695932 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070990395 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069406123 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069745073 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071152015 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069247769 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074963789 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07108584 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077064316 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069291711 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069162082 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073249841 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069141657 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069388191 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066750111 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069329761 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066762441 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073152433 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073293832 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073555948 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071050798 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070055321 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069670519 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069569348 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069639453 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069797195 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077356769 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071427593 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069452422 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079221234 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069622878 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069447248 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071357482 seconds)
  done (took 6.260412704 seconds)
done (took 130.174533865 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.236936631 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.201756554 seconds)
  done (took 1.91604277 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075171154 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.168304328 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075438932 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075116153 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.113252186 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108557696 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076626456 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072669023 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075149023 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07262091 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140199778 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.07628825 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073186628 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072643432 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07278893 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072880227 seconds)
  done (took 2.93063429 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108165823 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185569064 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082984765 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070338669 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114674163 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077236364 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072690129 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076445849 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.07756103 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.07098331 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107502064 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082040447 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074581687 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076770019 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072474119 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074017044 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075038747 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077001067 seconds)
  done (took 3.081851746 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098082935 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.091441179 seconds)
  done (took 1.701263935 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155377226 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105362956 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.14470388 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.327925003 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130502757 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.126941339 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.130645868 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125135237 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111704428 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122093332 seconds)
  done (took 2.987126121 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.105986914 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105200798 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305416405 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102619453 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082611082 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077702375 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075415136 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.08006784 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07549384 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076496793 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121552438 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07552547 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072798708 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123880199 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098738555 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106492135 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071270597 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077953689 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080052146 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070941359 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076251657 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079616835 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178050439 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078688991 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099976366 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075568886 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077289235 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074563608 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074878034 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078284258 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078978429 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099534509 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078572423 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082862814 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07674416 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097133536 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072181972 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098809911 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074293785 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072583623 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075251705 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078978641 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072386337 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077964858 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075817465 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07808831 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08002137 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.07129854 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075284521 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074103285 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072771547 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076532742 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076770865 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077715479 seconds)
  done (took 6.293716901 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107833549 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108250463 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070365907 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113210598 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105668289 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070464252 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105192917 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100441872 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108148633 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069801255 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069279777 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070187764 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076468678 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079517405 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116583829 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.107640474 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071987074 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.07041361 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107725193 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107358518 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068986397 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102054773 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100031994 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106179475 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06896782 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070342164 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069017158 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069375204 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074734774 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075545925 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069437772 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075863175 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.080691886 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075648602 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06813249 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069278899 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06861535 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075388887 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076255743 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076328966 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075267924 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06855702 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068695955 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069201543 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069679243 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068544167 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075385829 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075827947 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074636736 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068988999 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069208159 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068474951 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069596186 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075908092 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074890056 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076221469 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075930932 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068740697 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068964824 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071081101 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077169193 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077315706 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076630609 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07015637 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077171515 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069270813 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078084213 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080928358 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069213631 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06972523 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069532563 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069367563 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069886736 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074778699 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075208477 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069799211 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069592874 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069011339 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077162468 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075367829 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069167192 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074708294 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068944253 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069161396 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069525444 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069549444 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07460057 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075873783 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069474414 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068744862 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068952791 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06872116 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068175194 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074283803 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075109874 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.0750166 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074138424 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069406755 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074309412 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07453564 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068944067 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073576694 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068240727 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068910798 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068244136 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073691813 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072785809 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075641407 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068200147 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067645681 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073803237 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076164313 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.206323956 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076662801 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078707469 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076481832 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.0696629 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078948788 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069955993 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077396038 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069811534 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077426988 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06958542 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075448003 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069696413 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068793633 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069191542 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075330051 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069546231 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069675944 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070347062 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069596998 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.30734472 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078401586 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06998836 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.0750623 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075172936 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070028858 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075050093 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069171535 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076563875 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069079608 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.0696337 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068689227 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078086141 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069538525 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069203834 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069265508 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07689233 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06915228 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077256009 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074512523 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068740552 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078881986 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077263947 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075472868 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077745849 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06999145 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069752507 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069409881 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072160538 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074231886 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076045891 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069880363 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069754756 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074510701 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077536947 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068854953 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07465675 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075261599 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075055224 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069197136 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069438523 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077964795 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077342469 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075371518 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074882949 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075962343 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069107165 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074829006 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074861282 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069087198 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081127811 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068902293 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078867581 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075329378 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074663116 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075886339 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076703771 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.078080254 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077699861 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079243483 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069107466 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069471764 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075578665 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069259148 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069322265 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074823747 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069547248 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069764864 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080107381 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069520187 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077827663 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068752699 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075732123 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068666235 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069707165 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079128574 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069035559 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069406039 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074668192 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069087384 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074713429 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077097839 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.0747918 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068204906 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068507681 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074702848 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075267576 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067812426 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.0678014 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068202999 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072843156 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072580495 seconds)
  done (took 18.64988274 seconds)
done (took 39.085366757 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.17136884 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115671803 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.20732721 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198433194 seconds)
  done (took 2.305842082 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100983664 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065963018 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081396326 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.09073393 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065754079 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076657661 seconds)
  done (took 2.037310818 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.199329506 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173831621 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239303488 seconds)
  done (took 2.163847003 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.365558053 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.148677856 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.214935735 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.500631901 seconds)
  done (took 2.884926437 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110305448 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100343554 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078022986 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111509187 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085367583 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.06326804 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133718168 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070536218 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100065844 seconds)
  done (took 2.468690954 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.128981988 seconds)
done (took 13.572653881 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.238455635 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.187882264 seconds)
    (3/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.177114767 seconds)
    (4/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.271431628 seconds)
    (5/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.214347207 seconds)
    (6/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.211836293 seconds)
    (7/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.225322768 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.123967764 seconds)
    (9/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.106783066 seconds)
    (10/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076876791 seconds)
    (11/341) benchmarking ("sort", Float32, false)...
    done (took 0.137738469 seconds)
    (12/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.180425795 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07702698 seconds)
    (14/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.125429597 seconds)
    (15/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.157764777 seconds)
    (16/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.183124999 seconds)
    (17/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.07757575 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078020481 seconds)
    (19/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.091310355 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078979044 seconds)
    (21/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.145588199 seconds)
    (22/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.0743626 seconds)
    (23/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.180097275 seconds)
    (24/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.196556576 seconds)
    (25/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.166156918 seconds)
    (26/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.078752917 seconds)
    (27/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.198610623 seconds)
    (28/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073234514 seconds)
    (29/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.074677333 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075227408 seconds)
    (31/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.15283993 seconds)
    (32/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.066477239 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.156321187 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.180781595 seconds)
    (35/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.180812095 seconds)
    (36/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.112546356 seconds)
    (37/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.07044908 seconds)
    (38/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073645824 seconds)
    (39/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076703272 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.088456349 seconds)
    (41/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.06594349 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076320261 seconds)
    (43/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077198055 seconds)
    (44/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070829387 seconds)
    (45/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075122528 seconds)
    (46/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.203054959 seconds)
    (47/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.083019745 seconds)
    (48/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.142572034 seconds)
    (49/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.079747264 seconds)
    (50/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.193172573 seconds)
    (51/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.181564954 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079321238 seconds)
    (53/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.07759422 seconds)
    (54/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.138607401 seconds)
    (55/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.07590076 seconds)
    (56/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066190728 seconds)
    (57/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066530211 seconds)
    (58/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.094248021 seconds)
    (59/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.181539121 seconds)
    (60/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065429939 seconds)
    (61/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08515913 seconds)
    (62/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074366957 seconds)
    (63/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.19769792 seconds)
    (64/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.179253658 seconds)
    (65/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066412395 seconds)
    (66/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.06574857 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090629411 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075396306 seconds)
    (69/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.19462197 seconds)
    (70/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.09129877 seconds)
    (71/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.197418165 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.090369379 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084076124 seconds)
    (74/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.142332527 seconds)
    (75/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066476816 seconds)
    (76/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075105436 seconds)
    (77/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.139082559 seconds)
    (78/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.239410272 seconds)
    (79/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.295430848 seconds)
    (80/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.070554211 seconds)
    (81/341) benchmarking ("sort", BigInt, false)...
    done (took 0.265507846 seconds)
    (82/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.072487557 seconds)
    (83/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.236955634 seconds)
    (84/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067429522 seconds)
    (85/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.144638367 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075281216 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.126562653 seconds)
    (88/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078803959 seconds)
    (89/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074655706 seconds)
    (90/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066370857 seconds)
    (91/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.066916671 seconds)
    (92/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075290291 seconds)
    (93/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.138829674 seconds)
    (94/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070059802 seconds)
    (95/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077155245 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085144145 seconds)
    (97/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.172508093 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134120053 seconds)
    (99/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.201019802 seconds)
    (100/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066746843 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.089460249 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.08844031 seconds)
    (103/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173508621 seconds)
    (104/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.073891283 seconds)
    (105/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075706995 seconds)
    (106/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075409829 seconds)
    (107/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.179830951 seconds)
    (108/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.067178024 seconds)
    (109/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067040395 seconds)
    (110/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067578078 seconds)
    (111/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.074718288 seconds)
    (112/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.196284677 seconds)
    (113/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151253861 seconds)
    (114/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067120402 seconds)
    (115/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.080005523 seconds)
    (116/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.083578754 seconds)
    (117/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.066750728 seconds)
    (118/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.07390901 seconds)
    (119/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.135127718 seconds)
    (120/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.171172852 seconds)
    (121/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066946508 seconds)
    (122/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066403626 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.117789239 seconds)
    (124/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.073727182 seconds)
    (125/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068949553 seconds)
    (126/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.165959275 seconds)
    (127/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.198239794 seconds)
    (128/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.077590128 seconds)
    (129/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.088522183 seconds)
    (130/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067212789 seconds)
    (131/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.190758835 seconds)
    (132/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073882363 seconds)
    (133/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.253800786 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066774805 seconds)
    (135/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.156617241 seconds)
    (136/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068785065 seconds)
    (137/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.163404235 seconds)
    (138/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07406182 seconds)
    (139/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069025055 seconds)
    (140/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.07064603 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066161458 seconds)
    (142/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066105823 seconds)
    (143/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.065745504 seconds)
    (144/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.082950149 seconds)
    (145/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069266902 seconds)
    (146/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.169158208 seconds)
    (147/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.208395707 seconds)
    (148/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075475386 seconds)
    (149/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.140328897 seconds)
    (150/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078252898 seconds)
    (151/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067937379 seconds)
    (152/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.227413008 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12506595 seconds)
    (154/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.220761902 seconds)
    (155/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.200856988 seconds)
    (156/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.084108397 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125293504 seconds)
    (158/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.082805245 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065906435 seconds)
    (160/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.076546009 seconds)
    (161/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066088845 seconds)
    (162/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077255451 seconds)
    (163/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074745325 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.150904523 seconds)
    (165/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.161519834 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091330364 seconds)
    (167/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072492474 seconds)
    (168/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.065825131 seconds)
    (169/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066564665 seconds)
    (170/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.070569839 seconds)
    (171/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066400937 seconds)
    (172/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091596116 seconds)
    (173/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073849978 seconds)
    (174/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072868662 seconds)
    (175/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075352423 seconds)
    (176/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069047294 seconds)
    (177/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074842674 seconds)
    (178/341) benchmarking ("sort", Bool, false)...
    done (took 0.143552529 seconds)
    (179/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067671342 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064731233 seconds)
    (181/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.067399675 seconds)
    (182/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066267174 seconds)
    (183/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.241614371 seconds)
    (184/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.080221972 seconds)
    (185/341) benchmarking ("sort", Int64, false)...
    done (took 0.069748252 seconds)
    (186/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070933368 seconds)
    (187/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.168690737 seconds)
    (188/341) benchmarking ("sort", Float64, false)...
    done (took 0.140515942 seconds)
    (189/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.067893705 seconds)
    (190/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.085809293 seconds)
    (191/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.158990784 seconds)
    (192/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.06616234 seconds)
    (193/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066861007 seconds)
    (194/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094342815 seconds)
    (195/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.084563911 seconds)
    (196/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.230575574 seconds)
    (197/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068411081 seconds)
    (198/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067472575 seconds)
    (199/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067268895 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067583107 seconds)
    (201/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066826397 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.081818315 seconds)
    (203/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069998129 seconds)
    (204/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066757218 seconds)
    (205/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075417349 seconds)
    (206/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.065807115 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.147935722 seconds)
    (208/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.179759812 seconds)
    (209/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075211487 seconds)
    (210/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064953979 seconds)
    (211/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.06678039 seconds)
    (212/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065788083 seconds)
    (213/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088582796 seconds)
    (214/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.068995866 seconds)
    (215/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.067548055 seconds)
    (216/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077628689 seconds)
    (217/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064995208 seconds)
    (218/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068432993 seconds)
    (219/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.069256203 seconds)
    (220/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066044128 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125114746 seconds)
    (222/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153062149 seconds)
    (223/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147745218 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134011143 seconds)
    (225/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.06678897 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.06631811 seconds)
    (227/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066308575 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091917807 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086137372 seconds)
    (230/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.165158934 seconds)
    (231/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065246081 seconds)
    (232/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066965852 seconds)
    (233/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.08690385 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133778735 seconds)
    (235/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075351397 seconds)
    (236/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090417272 seconds)
    (237/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074774157 seconds)
    (238/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073567215 seconds)
    (239/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068179865 seconds)
    (240/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073318667 seconds)
    (241/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071308055 seconds)
    (242/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066764742 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066926025 seconds)
    (244/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.075934218 seconds)
    (245/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066539876 seconds)
    (246/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068647965 seconds)
    (247/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066975366 seconds)
    (248/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066825825 seconds)
    (249/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088915814 seconds)
    (250/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069841059 seconds)
    (251/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.19084878 seconds)
    (252/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.066759465 seconds)
    (253/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.06706733 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087058115 seconds)
    (255/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.195013697 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090102334 seconds)
    (257/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069862019 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.067497839 seconds)
    (259/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.066937989 seconds)
    (260/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076554501 seconds)
    (261/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078714529 seconds)
    (262/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146967917 seconds)
    (263/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.083264414 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066309205 seconds)
    (265/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074801067 seconds)
    (266/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073885386 seconds)
    (267/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067078717 seconds)
    (268/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169966499 seconds)
    (269/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073660341 seconds)
    (270/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069946341 seconds)
    (271/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065748467 seconds)
    (272/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149842396 seconds)
    (273/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066802925 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141440756 seconds)
    (275/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111448141 seconds)
    (276/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068474678 seconds)
    (277/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064892628 seconds)
    (278/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.082870896 seconds)
    (279/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067098631 seconds)
    (280/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.06984352 seconds)
    (281/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066519965 seconds)
    (282/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.066791642 seconds)
    (283/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067460286 seconds)
    (284/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067972313 seconds)
    (285/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.068970967 seconds)
    (286/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09521871 seconds)
    (287/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.064835993 seconds)
    (288/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.067071649 seconds)
    (289/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07414757 seconds)
    (290/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.065878663 seconds)
    (291/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066606566 seconds)
    (292/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066849761 seconds)
    (293/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066265683 seconds)
    (294/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.066415946 seconds)
    (295/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067784309 seconds)
    (296/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.064877554 seconds)
    (297/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.083567135 seconds)
    (298/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064632044 seconds)
    (299/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.077516397 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.142752018 seconds)
    (301/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.065137324 seconds)
    (302/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.0822998 seconds)
    (303/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148948503 seconds)
    (304/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068115918 seconds)
    (305/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065404684 seconds)
    (306/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.066043505 seconds)
    (307/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066222107 seconds)
    (308/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065841329 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.092789954 seconds)
    (310/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064654523 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.243255916 seconds)
    (312/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.074205571 seconds)
    (313/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095492947 seconds)
    (314/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.069305212 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092907634 seconds)
    (316/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082832001 seconds)
    (317/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066850737 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153546849 seconds)
    (319/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.067367372 seconds)
    (320/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.070497719 seconds)
    (321/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067760169 seconds)
    (322/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068871035 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078730233 seconds)
    (324/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.070266263 seconds)
    (325/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078207173 seconds)
    (326/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067548499 seconds)
    (327/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067377684 seconds)
    (328/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07469872 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066564583 seconds)
    (330/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067415797 seconds)
    (331/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066683368 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.130802323 seconds)
    (333/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074709392 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153289826 seconds)
    (335/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081672979 seconds)
    (336/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073397879 seconds)
    (337/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.179003906 seconds)
    (338/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.06768044 seconds)
    (339/341) benchmarking ("sort", Int8, false)...
    done (took 0.149659783 seconds)
    (340/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067678676 seconds)
    (341/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066570736 seconds)
  done (took 36.934290719 seconds)
done (took 38.511282353 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092455638 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080454126 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078725229 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075788503 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079020353 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077658772 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078627739 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07669154 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.07793848 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077556157 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077520911 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067107897 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074916067 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081640468 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075729243 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.082215408 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078861468 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.08226454 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067606347 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081000331 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093627541 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078334662 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075537424 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080619386 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067277194 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075841757 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089874874 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087768494 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.07302273 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075786827 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074159748 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084250024 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074254497 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072722089 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076397281 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072394776 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075884969 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073977709 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089491158 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072577904 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066940867 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079108477 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073969443 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074351401 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075160185 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078098929 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071773319 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079588421 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066044558 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077409991 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089415251 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071658158 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073234216 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074728411 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071716134 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075653964 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072608215 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077613212 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071459316 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.07812742 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078156965 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074914225 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066412877 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075291113 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073571772 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074205862 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065389683 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071570095 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066509173 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066322117 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.06551648 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075101506 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073258517 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.070923346 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065877302 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066300999 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065384255 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078429008 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.07234516 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076041772 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066452121 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072088201 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071118942 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.06634965 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071329519 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078034362 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065287545 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066370367 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065656288 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080490035 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072650343 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066366328 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077866698 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071123682 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071327951 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066164261 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065272025 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07124623 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073957909 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066301695 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065171302 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071263792 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071336736 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075357349 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066644449 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071123262 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070914021 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066193364 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074657276 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073615093 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074857414 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07959379 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075525566 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078558116 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066564281 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065553341 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075747603 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066741109 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071437111 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074188199 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071783767 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07470984 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.06677661 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065632982 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071920874 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072472815 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.0666133 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066935397 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066025686 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075464812 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073191345 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065287455 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065536821 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073981191 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074067353 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064519356 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064694499 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.07395085 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065760571 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071236194 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071478023 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.07371346 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064852344 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065512773 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.213041557 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067448348 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06675755 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072389157 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071816863 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067180207 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075556702 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072936518 seconds)
done (took 12.954811687 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067378618 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105665644 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074262429 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.08267308 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078382315 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068374958 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070899111 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083232459 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070633153 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086377611 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094850302 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08900355 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.09369802 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065972088 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067174021 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06804872 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065557247 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074558271 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081834804 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090221046 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095441742 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066670195 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076356081 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083297748 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077577226 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083104761 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068034904 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067775767 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070057581 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.125176934 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092324903 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066690253 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068131352 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080549357 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081274516 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073908404 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068028181 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071131573 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070052138 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066965701 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068858688 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080875549 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070871493 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071229111 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068523849 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068199225 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067866701 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070193081 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080384713 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070710522 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07485194 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078540383 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068747511 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06722236 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065851783 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070764403 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067446756 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067784221 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067391803 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066983277 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067722218 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069651613 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068423242 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067682815 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070492853 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069466882 seconds)
  done (took 6.598596228 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083310613 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09300881 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081785343 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082289797 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066719327 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067316735 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067538156 seconds)
  done (took 2.235466526 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06817007 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074800722 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079248943 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079368392 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088508742 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076864756 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.06797992 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102078403 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066765353 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076510657 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083290054 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.08040493 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071055005 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.07967469 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067840651 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079285364 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067813869 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074609275 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074978614 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080451914 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071303123 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100692469 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081142074 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068152945 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080972421 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074762501 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069661472 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068192198 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068055728 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067229834 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06726496 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089382477 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073728945 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079302408 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068359462 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066645969 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071906031 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068489185 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.072585955 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076483137 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071132487 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067331384 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067876739 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067184111 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068513159 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071974181 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068223219 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067427683 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067303846 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074788913 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066435185 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073784396 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069580755 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072595265 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072183665 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071752941 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074362684 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067704473 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074514359 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073518016 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067442881 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079630518 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079514574 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.0709469 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078785007 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075993412 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073811261 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071711624 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066997553 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066846278 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067780754 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078975646 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070869706 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069648047 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068917015 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071950927 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071008542 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082567325 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082583712 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080708361 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06974683 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067595368 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071037632 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082258329 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07228845 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067658192 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068412118 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066716036 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072240467 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067576011 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072296251 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06742515 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074808993 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070341452 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070033698 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075465452 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06784737 seconds)
  done (took 8.79051602 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070999093 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069708971 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068683131 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068992356 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069045259 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068655391 seconds)
  done (took 2.148429517 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091037339 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068177722 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079766268 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068181107 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089923721 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074511749 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074554735 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070191275 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084701564 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078736914 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074151479 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076814218 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073997006 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069870904 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074028266 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069055829 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073866282 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071004313 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077683899 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069827682 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083539288 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069312129 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069714557 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079823054 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071171726 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068843352 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068965217 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078477016 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077618094 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069632332 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069802862 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071027881 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076082509 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069223129 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074096754 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075995222 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067819454 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073465135 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070229564 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070998995 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.07640281 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069755656 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070219982 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073089656 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069656434 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076363916 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073110091 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071670697 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073876679 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073544688 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073426399 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.06838431 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070835284 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073292949 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075973487 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069737771 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07372527 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074180513 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069320142 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076829565 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068305829 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071098641 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069718299 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070880967 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.07266554 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.07323412 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076409291 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069949465 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069836732 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067979998 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073355738 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067813318 seconds)
  done (took 6.96272825 seconds)
done (took 28.418528629 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552691445 seconds)
  done (took 2.224548479 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.671815915 seconds)
  done (took 2.385037401 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.529177057 seconds)
  done (took 10.246133116 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.293774993 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.322783304 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.733256197 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132970851 seconds)
  done (took 3.208755289 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.748602172 seconds)
  done (took 2.471668508 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227396546 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217502443 seconds)
  done (took 2.175031982 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.339246566 seconds)
  done (took 2.054174978 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.147651225 seconds)
  done (took 2.867650288 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235902312 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161010008 seconds)
  done (took 2.121116114 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.540631939 seconds)
  done (took 2.257963118 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.211848942 seconds)
  done (took 5.935189606 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.23384153 seconds)
  done (took 1.988358902 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.229400549 seconds)
  done (took 1.952158087 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.025943359 seconds)
  done (took 3.742053589 seconds)
done (took 47.356245463 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085415008 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087310164 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086999156 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082360388 seconds)
  done (took 2.03102409 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075584886 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071805434 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074728356 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074913061 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072802715 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073407498 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074247143 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071261111 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072666205 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071240127 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.07012022 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071212806 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074343 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.07109605 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073771949 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07503438 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071157596 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071346291 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073527093 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071083193 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073783887 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071158327 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069442777 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070944964 seconds)
  done (took 3.457561225 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079344664 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073493213 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076172763 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.07227346 seconds)
  done (took 2.027716889 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077364025 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077632821 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086604529 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091278582 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077022576 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078020499 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08457284 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084861499 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06717514 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088031488 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069569762 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067849297 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067997423 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08663985 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08430684 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063644669 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064901768 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078368372 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077029732 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079732539 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069703359 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066642736 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077148156 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078097845 seconds)
  done (took 3.569420178 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080001314 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066742017 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079486419 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092149777 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093043533 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066483022 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.07971557 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093841245 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12885604 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066675117 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072792908 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066642387 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105847923 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067224392 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081929576 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109713169 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113186545 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070698573 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099772476 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066486309 seconds)
  done (took 3.436748532 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077055998 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070159398 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071295317 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067229131 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078021288 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073960416 seconds)
  done (took 2.177442045 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069379159 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06919913 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070864886 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073338046 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068790903 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069089265 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068461848 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067363432 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067610274 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067971618 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067673458 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.06822502 seconds)
  done (took 2.559689462 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156382165 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071008546 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072568332 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067164974 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072253931 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06750403 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082490207 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069541006 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085732951 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068079743 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068155532 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070258491 seconds)
  done (took 2.681881326 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100836676 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101652573 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14604762 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118928917 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117185104 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097209918 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120723593 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096412595 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160986834 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137486786 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117235665 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0943051 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087872343 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070758578 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100674022 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102471228 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136620158 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073605922 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114327959 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165511161 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115439579 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113052411 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122590859 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117283127 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082264736 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122686685 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095154953 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103107541 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125181805 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111509333 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12003159 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099214707 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072960537 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072405045 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150380105 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101454865 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10800404 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.09453281 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100914332 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089122447 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107858239 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070409338 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088799301 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107083944 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085308142 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117364148 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089369948 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104398442 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082012425 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132272908 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107100047 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099508997 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086545447 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104866808 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131217161 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095894351 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11150667 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106701463 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082925486 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118041789 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100459576 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256189264 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095950412 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082417141 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161349626 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090892584 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113530612 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11384917 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083746939 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090717925 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104164453 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131649879 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107874827 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108283613 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11529105 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096707599 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111121145 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093194461 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129814751 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09405218 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074213402 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106125284 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129374565 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086094875 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101400157 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130424004 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093216235 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078475075 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093457138 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.11996371 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081929706 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097426895 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071169884 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098797672 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108027126 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098409359 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113054635 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108076072 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079284287 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126044723 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109861502 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074065859 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118302823 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100440542 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153618069 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097252461 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.078129967 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101277382 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095261451 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149846658 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086274765 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081600209 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100123939 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14295027 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09561064 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170902287 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097343214 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130111712 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098527473 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089327058 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076125384 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090164012 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101915589 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107136903 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102035674 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089456426 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077530074 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087005258 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095529705 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.255007506 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082994286 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115246651 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103038407 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076606816 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089800344 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080704732 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126321617 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080183401 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11047637 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1256343 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080403983 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105740075 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098976737 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108303025 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098520427 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107501043 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141140933 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117268075 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080895403 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085093195 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108797686 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14326366 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115273208 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086666192 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078180909 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101686128 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111935174 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098933321 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108241438 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101570258 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109931277 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09883765 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142044562 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119042753 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092206229 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097321968 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098246344 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124204036 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078014306 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157040762 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095364613 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119474621 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086202423 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142050005 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115777497 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091032156 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08639613 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096969364 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105727911 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107303744 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144430771 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097247502 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073897663 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094564564 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132816232 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077685795 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101130413 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091789181 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094378697 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118924353 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.08438137 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081959489 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068966716 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1021052 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135389083 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.07033498 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112779625 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.117813987 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100398294 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.102228672 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069458499 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098634154 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135525486 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104375337 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136707367 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114983357 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099198692 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115654611 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.097848083 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103833661 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079232146 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122514766 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131224888 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093882026 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088823922 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131188237 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115876488 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.131975768 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.094517303 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111400431 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102375113 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100502629 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101085248 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.100366053 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138871171 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117895875 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121516514 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085023899 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103848375 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110368556 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131807596 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081326032 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113966216 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.074508779 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109091865 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.076410768 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105374443 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078930299 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113725835 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079120744 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098204123 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069200122 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073613441 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138150651 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110045194 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087597445 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085313067 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.136073057 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128076426 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.080514068 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100717764 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102660222 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09902 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09935976 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106455016 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.08803412 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093208807 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.383968398 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083665514 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086406522 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105299494 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099340091 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113888369 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089746152 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080122652 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141551155 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109419466 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099610769 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082076854 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099541956 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.127787679 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093789542 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091101451 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109530547 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108052941 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144674664 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.093535145 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101431045 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122059147 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084045814 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.09543556 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072265333 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.087709955 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078615698 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111684771 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078181445 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110980179 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070790757 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132345988 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088773739 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094535051 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10434718 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101721473 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130123773 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093702493 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130349915 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091952962 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103853633 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110013147 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096883238 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08196018 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105701135 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098073591 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111588703 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097877791 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107514923 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112082895 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095801824 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143603934 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091940311 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122107145 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107166466 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109085304 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105678388 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118728772 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138884137 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114707147 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114295022 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076997831 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08470215 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107125051 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101609919 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147398683 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104322763 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073917519 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087623906 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09256139 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097166145 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.273775689 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085134246 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143299796 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089419643 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089070902 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114506342 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091268074 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099038542 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077800271 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096821112 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102325913 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095992877 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096540466 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109345833 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118924394 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115891115 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134377778 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.1007346 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094422156 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120144944 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11231642 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112408262 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08777451 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088465464 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12576194 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104434814 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.130762712 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101503763 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096464031 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103353027 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091556093 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102539051 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098347584 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111086254 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082851352 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.078056035 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.070152546 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074465449 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11940515 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110611081 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100849821 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100761086 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074364452 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10575154 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102055591 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073514801 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089288785 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095954526 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101196219 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085424165 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093978947 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115781842 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092366506 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104862547 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101576642 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130504176 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101758308 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090444442 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144909058 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129595544 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089398413 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094358844 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073134464 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080502896 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103667678 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146646211 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119733997 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078889775 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085101074 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.245300687 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088844739 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073646005 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088841436 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090928503 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105217663 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09461328 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.114000947 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105063064 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077341197 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104603241 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09917337 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094106672 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098161464 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10375768 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107374975 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125328616 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102746381 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099225375 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078237652 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.0820766 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077346632 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085956788 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104051844 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079511114 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078152344 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131343624 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092951178 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106819756 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110538453 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086727607 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077519119 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135199162 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.071359271 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135849312 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.073204032 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084092043 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082657796 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080947385 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095615214 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107243909 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098200668 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114897204 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107482216 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106249955 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112663918 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157627518 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07275098 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145689574 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077648789 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077330665 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077938951 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115447425 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091686798 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107097815 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142659185 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091395213 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094233768 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078437459 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129977315 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099404612 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104746908 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084460168 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080491214 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129487203 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081027801 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.073041216 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08786794 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112912709 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073993408 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105904155 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086342758 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.246658186 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1156284 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632758116 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09261477 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077819436 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090875267 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143810784 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129409953 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085786093 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110332351 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.121042022 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091949675 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086037479 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109583747 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.18607436 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076387733 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096650181 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105374926 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100612161 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094776362 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.09382535 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088555227 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09427948 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088004414 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081585189 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109489529 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089641059 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093280428 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099483769 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08541927 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081913769 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132756101 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105306753 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084065522 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090217517 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102521273 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089591263 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09478507 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071454178 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115737505 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092723373 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102725614 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.093120475 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109445036 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121831644 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09049312 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113904235 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090016157 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11115227 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086558606 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.080016034 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103865092 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079686573 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079463187 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118919507 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085456048 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094587548 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105845779 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097303121 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115571783 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119569867 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112633162 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099414809 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08034127 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087561908 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089558649 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07730925 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080423041 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076035557 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077954938 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108726179 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.252903815 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08639145 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116311398 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084003761 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105867891 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101980449 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111017542 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085446552 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103060497 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110925311 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092508108 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105151257 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101786265 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129605937 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146480676 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101214304 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125466022 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135478447 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078827533 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07763757 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070714129 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116845666 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081014148 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082923792 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08288437 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134526452 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083805966 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096772503 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.23451675 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082832199 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083401625 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098234091 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.07190413 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085038401 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109743357 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086532472 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08225264 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100381726 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085583604 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11943871 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113473048 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091232771 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085054427 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082761915 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095486226 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.107000037 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131001881 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092631663 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077402136 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108256231 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105285087 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124978536 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074724985 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082732743 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131280989 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093507202 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105199357 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081976955 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122459556 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134574519 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091997573 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135160964 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072762896 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085408869 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090562656 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127058934 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076093598 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089972336 seconds)
  done (took 65.512272923 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.172526292 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.15930608 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.097493532 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.112281233 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.201153454 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.210145355 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.133163011 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.106873223 seconds)
  done (took 3.155840944 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069501794 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084369929 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082887413 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208562439 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109829471 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.069237065 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074635545 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083781077 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069276045 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068907978 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103256723 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06923832 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069311469 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.372965475 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067938921 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073364278 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068913542 seconds)
  done (took 3.69113817 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.323127147 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.545539472 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.226540619 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.746247202 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.139283134 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.487799874 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.079003615 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084754663 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.632310616 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371362416 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.132498815 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089731167 seconds)
  done (took 18.786572382 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078176145 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.080345928 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079986673 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07665959 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.076098235 seconds)
  done (took 2.315919559 seconds)
done (took 117.167531149 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084938722 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.173002048 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069030462 seconds)
  done (took 2.204250323 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083385698 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082432616 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082332975 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079831044 seconds)
  done (took 2.262528499 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076121574 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078140957 seconds)
  done (took 2.080751069 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224110788 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176760268 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092278696 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083798565 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081162017 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081364403 seconds)
  done (took 2.188589134 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072723826 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073287447 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073644912 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073415712 seconds)
  done (took 2.222266082 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068974131 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067288727 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069908587 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072658315 seconds)
  done (took 2.209822667 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086625184 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084085247 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113305293 seconds)
  done (took 2.214779358 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084405833 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084593911 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079405715 seconds)
  done (took 2.183591748 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109967645 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098153694 seconds)
  done (took 2.138750936 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081689365 seconds)
  done (took 2.017226941 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090704019 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098589106 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.140415395 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109002155 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142308356 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127840443 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078637094 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.07997154 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075185274 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074196743 seconds)
  done (took 2.947901816 seconds)
done (took 27.183067764 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079771943 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.368055173 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361139811 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088554883 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675172147 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358386973 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.985806901 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092537616 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101813982 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069981891 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086743842 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652659937 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.977952496 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.325775262 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.962448565 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326412973 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653894572 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070445253 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069162141 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069902841 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.969911198 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069298179 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069881905 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070575231 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652594739 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375811003 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071052207 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.324712188 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069969057 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072603191 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358327848 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070814424 seconds)
  done (took 16.456397685 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07174885 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124179613 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074025234 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085587613 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072132443 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07120972 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072877853 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070792689 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112343649 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070332011 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087408381 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069321136 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073806649 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071341513 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089803947 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069869481 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071429285 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07369363 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070307695 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070638257 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088467424 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070116554 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070624891 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070935702 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070160242 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082777368 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071062058 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06976598 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070297021 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072378273 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073605696 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071284367 seconds)
  done (took 4.399962751 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123108544 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127898231 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074699681 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111253454 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119635775 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071822973 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.153751585 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093376451 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116308722 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070647914 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088252726 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070112626 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105734996 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071330731 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090551333 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070093702 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071916023 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070966143 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070404791 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070921236 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089446854 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069882379 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070587783 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070851515 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070516276 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085406877 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071080837 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070339233 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070132723 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072606815 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074065739 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071203862 seconds)
  done (took 4.67706667 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071296092 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.07310432 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081484256 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.08259961 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068440141 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070954742 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071766728 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068404811 seconds)
  done (took 2.540230566 seconds)
done (took 30.029690712 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080743204 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069537102 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072843812 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089090026 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075708713 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071652664 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066405 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077122573 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073490877 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073056249 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075272483 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068891984 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07221583 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066690981 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07385348 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067763388 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074393288 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072327279 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072648887 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073572808 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070365086 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073418414 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076740128 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072313537 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072592905 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072299787 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076768544 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073804088 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068395619 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071004535 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069985324 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082375512 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074301658 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074332496 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067524447 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067758088 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072302423 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070096682 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074051548 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076685782 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070017079 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076660892 seconds)
  done (took 4.984196348 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089681658 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095448304 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.08752269 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083942801 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109385642 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083984122 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092198588 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081471638 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.08003972 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092360787 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075842119 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.08164594 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083295546 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.07778873 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080941597 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07685854 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082373382 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07550211 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080604169 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080352007 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092859596 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073644344 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080648789 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081505723 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075674582 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081687906 seconds)
  done (took 4.14096501 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074558194 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090022578 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094527304 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143880827 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111396844 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.085002003 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084022319 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.099542567 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.1030012 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.06980763 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073615622 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096670525 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098805814 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077089718 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109331778 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088207866 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082721543 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07162766 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076489665 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104744532 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092938628 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088494783 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102629 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089850428 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069241794 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078871657 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076133204 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08539194 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077351024 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081744985 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073587216 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073365874 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070560988 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082275149 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076151274 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067625848 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092039054 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082280084 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085670528 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107848953 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079688491 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071183176 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.10003798 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135181344 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069053149 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072013135 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07333357 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.08208022 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071005913 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099435062 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088114029 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069391427 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088447392 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.07074586 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071552292 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086275516 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071342493 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071325571 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082160534 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075916368 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090310698 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074928736 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.0907407 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069354434 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080818533 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071046519 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071244586 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06826246 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105790555 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076899135 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122688405 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070601812 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067777941 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082164375 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081016635 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076721454 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068950195 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088595149 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081336864 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07316236 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081247726 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072006145 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072733513 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105392935 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068908901 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067334533 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067432677 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071689878 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072669646 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.07009414 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082696996 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068828415 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072929954 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085290972 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06936185 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070545867 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072043748 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070682297 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069173715 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080302053 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072919068 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071014887 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081639276 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070259626 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072935238 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08427897 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079796762 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069142005 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070725119 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072074684 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07142938 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073993488 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.07321658 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071473863 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076754375 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077121021 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075164895 seconds)
  done (took 11.450806659 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165292709 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155414465 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070748094 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150190425 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07809963 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.074352476 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.152590602 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090365734 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.07039484 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071457791 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069797042 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098410294 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093858275 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105220257 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074044468 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070872604 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095902846 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103389837 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.154317411 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.14870464 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093670028 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07813743 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072898925 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071738077 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071418113 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079323053 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.087053522 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078238816 seconds)
  done (took 4.727020332 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077069505 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085394195 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074175389 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094111411 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08799671 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070491875 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072292667 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071522022 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087782528 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077193681 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070579289 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074674388 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074042138 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071524648 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071408632 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076631187 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076802676 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069347217 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073822956 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074973641 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080534735 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095459929 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.075123359 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070552041 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073333766 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070389371 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076585292 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079624101 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.06977725 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100175352 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06750798 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074067231 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084054448 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071178754 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.06977429 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.07064 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070287439 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070255533 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070442576 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068475425 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068133197 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075332398 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069246983 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.07618385 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084602277 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077653441 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071313731 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075063085 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072893923 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067070568 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073214615 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073388905 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072660583 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078199407 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074201491 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072590688 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071447889 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099967133 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076482524 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069684151 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069003067 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068254303 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071835776 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07742653 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087003491 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072140525 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068284303 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070234627 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074833774 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084311047 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069522404 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075760651 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067093284 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070373998 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072484499 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072874677 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071891788 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068194783 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069871806 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070152956 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070360895 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070387343 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069565865 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073090423 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068265026 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068506803 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070848135 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071871557 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.0761648 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069133251 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072856613 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071149122 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069297804 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072664528 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07535886 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073156014 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089661645 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078499557 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070745842 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068496112 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084489548 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072427807 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069192524 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075491854 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074662884 seconds)
  done (took 9.811944738 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093349501 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071671579 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090181155 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096539433 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080285629 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.0750619 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084472238 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071015066 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086522095 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.07000589 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079144828 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068894418 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083728252 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080060261 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072112261 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080941281 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073424609 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091102807 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085558188 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069192756 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079842213 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082995491 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083225816 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088732331 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.08808897 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089571923 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082587214 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072638741 seconds)
  done (took 4.283232376 seconds)
done (took 41.35093745 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.032241723 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.191624873 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.029873146 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.288463722 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.077474232 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.18632339 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.232913034 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.024606594 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.178669472 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.048759489 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.354654913 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.379136826 seconds)
done (took 70.050393335 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.093773738 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.172081833 seconds)
    (2/2) benchmarking "String"...
    done (took 2.239981515 seconds)
  done (took 6.380450485 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.628815047 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.028001285 seconds)
    (3/3) benchmarking "different"...
    done (took 2.075222529 seconds)
  done (took 8.687733365 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.120622717 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.71489688 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.275324118 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.026774385 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.032731525 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.437620727 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.826101544 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.496868053 seconds)
  done (took 33.768617917 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.121667857 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.220610554 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.728216657 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.752309525 seconds)
  done (took 16.817519855 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.635374118 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.290400264 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.290021673 seconds)
    (4/4) benchmarking "different"...
    done (took 2.283682933 seconds)
  done (took 11.508814471 seconds)
done (took 89.423240385 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.029218747 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.080884875 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.044783897 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.184437235 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.071341557 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.059189174 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.029350406 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.03117098 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.03057523 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.028705385 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.467629563 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.028139747 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.031052155 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.064679613 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.028906562 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.060872117 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.644801666 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.045183785 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.081065013 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.680299883 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.553947661 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.035082257 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.044454742 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.085593527 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.175881681 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.042523954 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.279372687 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.033912102 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.649137889 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.039595063 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.027712337 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.032557935 seconds)
  done (took 212.680971001 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.028444504 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.832411183 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.9158289 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.072888359 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.296151869 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.21825981 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.167036519 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.384992093 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.031039397 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.042531986 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.164614181 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.029366611 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.198236559 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.971526193 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.023994499 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.073709693 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.167868522 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.209907957 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.030484373 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.208501299 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.032500172 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.082155012 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.98511179 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.150343716 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.042052837 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.049474905 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.061740577 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.286225703 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.219178717 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.128568345 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.064076432 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.041680844 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.246174616 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.896266027 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.054991883 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.040638915 seconds)
  done (took 178.407163129 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.204540167 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.071043336 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.095617988 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.170539104 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.802300906 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.791983371 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.034761001 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.043857534 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.033002679 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.039811126 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.033225469 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.100655186 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.809505406 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.051663743 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.034799885 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.033574328 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.497084415 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.034388921 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.032730039 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.034019188 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.098289491 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.40837009 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.176250732 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.037002607 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.044287055 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.169883163 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.042758038 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.033568847 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.170742832 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.035320169 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.111835515 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.171276659 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.045718109 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.114898315 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.041724654 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.545988351 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.036858751 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.033787402 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.035292505 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.096824394 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.034863722 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.133202212 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.124871094 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.035582243 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.047383965 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.232869692 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.769600551 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.038085322 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.034013228 seconds)
    (49/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.035034436 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.033830015 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.03426327 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.035732098 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.595009494 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.037388592 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.060767964 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.709810627 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.038008875 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.037545154 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.035943951 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.035895777 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.036447556 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.041861526 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.073108416 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.853250548 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.117209714 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.42580289 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.854527373 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.039198455 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.149840752 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.095491929 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.037362782 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.11533824 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.035550877 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.035278228 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.035609883 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.035708967 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.212946909 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.174960297 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.037565425 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.173088386 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.039145459 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.036746979 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.159622636 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.589471854 seconds)
    (85/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.03799402 seconds)
    (86/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.048570416 seconds)
    (87/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.093939213 seconds)
    (88/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.037513155 seconds)
    (89/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.036545319 seconds)
    (90/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.044377597 seconds)
    (91/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.177095122 seconds)
    (92/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.038162844 seconds)
    (93/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.037470088 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.037183578 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.038031034 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.138037347 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.040739396 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.076997914 seconds)
    (99/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.038950553 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.262522236 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.110481073 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.28658667 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.297539471 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.041312709 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.038743621 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.052846432 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.038870558 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.037019156 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.049323267 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.039130093 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.038170195 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.039354861 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.040164503 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.03802535 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.028334801 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.052548612 seconds)
    (117/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.039061261 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.038287475 seconds)
  done (took 440.212094096 seconds)
done (took 835.502352618 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.743668125 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.813626429 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.658122522 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.694106189 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.663945514 seconds)
  done (took 15.542236356 seconds)
done (took 17.510554084 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.071447829 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.054272548 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.044903237 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.103910584 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.064664008 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.051176059 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.085326041 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.08630579 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.07076229 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.051292883 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.101972032 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.056909586 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.07264705 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.074287017 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.127359376 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.080801991 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.056589948 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.048121463 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.108823442 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.05700864 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.057601372 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.053809648 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.053810946 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.104739345 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.134640697 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.063837866 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.053166937 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.10061115 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.064688379 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.101235563 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.111747587 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.075864574 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.087264739 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.128601014 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.112966164 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.136836522 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.062718132 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.122317326 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.061318598 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.142775957 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.11323964 seconds)
  done (took 87.382286444 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.050721064 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.182689022 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.262632477 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.081218189 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.050645048 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.268573611 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.105613011 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.176453087 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.179133138 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.262802857 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.26988823 seconds)
  done (took 25.865565016 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.049404193 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.187148097 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.269443568 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.085625747 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.074298438 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.264182073 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.113215714 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.178746152 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.184391476 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.271859814 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.277545362 seconds)
  done (took 25.934525598 seconds)
done (took 141.152992829 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.432874812 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.075821166 seconds)
  done (took 6.481205693 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.046489383 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.063090521 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.194730973 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.046225249 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.047362043 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.047913461 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.04789596 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.046241632 seconds)
  done (took 18.512199765 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.04633009 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.045426209 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.046408653 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.046348646 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.046597476 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.046993329 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.046256682 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.047197626 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.046457005 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.046600587 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.045949985 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.046712 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.04711638 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.046775778 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.046183697 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.046320768 seconds)
  done (took 34.717448116 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.046688971 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.046215391 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.046636649 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.046413557 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.046589157 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.046724637 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.04909706 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.047185189 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.047131017 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.046820314 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.047837499 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.047707725 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.047450525 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.047533405 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.047876075 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.046975893 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.0484213 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.047835522 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.049142822 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.047916428 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.047322591 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.048354899 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.052475239 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.04845206 seconds)
  done (took 51.119843303 seconds)
done (took 112.810989708 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.262733908 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.653601776 seconds)
  done (took 8.891071758 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.051652131 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.047943562 seconds)
  done (took 6.148201766 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.04787015 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.049149429 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.048803282 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.048830636 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.049077094 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.049221635 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.048924332 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.049364789 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.048644188 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.049520063 seconds)
  done (took 22.465296895 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.049563806 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.049536604 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.049467977 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.049995025 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.048838173 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.049412968 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.049480137 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.049887054 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.049623746 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.050212395 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.050177548 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.050056622 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.049547065 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.049981748 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.050507106 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.050337583 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.050780182 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.050282594 seconds)
  done (took 38.874587421 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.049858776 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.050267166 seconds)
  done (took 6.077932357 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.050508709 seconds)
    (2/7) benchmarking "second"...
    done (took 2.050711969 seconds)
    (3/7) benchmarking "month"...
    done (took 2.050508975 seconds)
    (4/7) benchmarking "year"...
    done (took 2.050074182 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.050781289 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.050729826 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.050904724 seconds)
  done (took 16.331833044 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.051907348 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.204215935 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.257386613 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.675109664 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.053239614 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.053417278 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.904658561 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.054518565 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.055702901 seconds)
  done (took 22.288528845 seconds)
done (took 123.054885519 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.875356496 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.051473778 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.359221512 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.210831749 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.071303233 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.345438636 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.080979649 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.594818829 seconds)
done (took 44.568665896 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.177345557 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.050481595 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.084361751 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.083825397 seconds)
  done (took 23.198447629 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.051256682 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.413970407 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.078624851 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.017241311 seconds)
  done (took 23.553175272 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.436076061 seconds)
    (2/2) benchmarking "read"...
    done (took 2.410524778 seconds)
  done (took 6.830203775 seconds)
done (took 62.740744317 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.052826305 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.052513114 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.05330991 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.053096111 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.052153191 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.052968843 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.052953663 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.053806562 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.053058519 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.053803619 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.053702033 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.053478677 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.053984941 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.054619668 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.054331058 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.05455868 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.054638602 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.054477518 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.053705664 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.053777699 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.054069019 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.054435017 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.054315871 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.053723728 seconds)
  done (took 51.267737914 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.054782178 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.054289072 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.054201627 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.055114659 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.054663282 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.054371022 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.054659953 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.054847799 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.055035912 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.054989612 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.054594845 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.055445044 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.055745776 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.054701465 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.055242006 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.055338696 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.05448084 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.056082756 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.055626716 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.056341938 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.055241525 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.055289045 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.05508146 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.056016067 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.055717293 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.055031192 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.055853047 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.056516689 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.056267794 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.055660465 seconds)
  done (took 63.638913211 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.055116986 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.055770502 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.055136481 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.055689792 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.056223093 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.056050729 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.056055793 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.056783473 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.056697693 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.056403263 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.056630859 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.057579451 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.055488982 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.057052936 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.056871134 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.056990131 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.05722229 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.05687883 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.057373208 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.056822976 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.056536621 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.057329748 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.057040632 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.05756402 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.057471997 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.057204171 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.057523271 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.056214103 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.057318524 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.058209341 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.057623041 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.05734656 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.057010621 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.058811635 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.057522054 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.058524222 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.057735504 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.05704154 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.058155274 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.057890676 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.058270145 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.058291424 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.058808952 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.059365443 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.058978959 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.058156097 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.058943633 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.059159048 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.058437283 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.059506588 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.059409971 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.058453483 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.058479552 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.059065123 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.059293866 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.059606162 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.05892787 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.058898827 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.058887857 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.059801737 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.060022572 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.05953079 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.060260378 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.060450862 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.060524343 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.06019597 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.059542268 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.060027793 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.060272613 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.063191851 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.060922095 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.059756058 seconds)
  done (took 150.167454401 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.06040874 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.059244538 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.060459281 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.060669933 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.060917093 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.060990826 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.060689747 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.061357764 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.06204176 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.061091104 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.061896296 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.061354362 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.062024367 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.061319501 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.06116632 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.061447563 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.060975283 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.0617815 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.061810672 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.062284394 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.061510938 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.061439427 seconds)
  done (took 47.334418857 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.061903377 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.061141696 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.062343588 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.061236447 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.062154391 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.061560507 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.061956993 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.062076392 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.062032357 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.062317324 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.062097933 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.062127624 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.063079635 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.062956319 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.062724126 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.063681023 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.062610395 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.062834337 seconds)
  done (took 39.110059167 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.062991712 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.063131938 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.062550627 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.0622231 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.062676028 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.0638827 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.063914498 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.063232339 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.063612546 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.063455832 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.06353889 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.063549495 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.06399802 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.063951139 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.063818572 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.063880235 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.06404531 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.063706472 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.063247354 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.064173151 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.063489147 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.06365297 seconds)
  done (took 47.385889384 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.063766839 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.065377732 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.064589079 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.064502484 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.063810055 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.063996684 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.06496271 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.064706146 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.064825495 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.064508999 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.063961749 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.06451701 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.064583628 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.064659014 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.065136013 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.064619399 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.06528718 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.064809036 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.0645217 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.065596926 seconds)
  done (took 43.283720908 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.067200956 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.066404412 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.066872405 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.067304564 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.067337328 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.066907053 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.068188946 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.067449103 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.06701799 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.067455725 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.067004219 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.067182362 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.067356116 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.067575942 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.067431765 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.068012847 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.068469068 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.067533938 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.068284016 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.067400889 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.068899962 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.068143015 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.067991808 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.068126225 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.067935663 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.068160067 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.067638647 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.067871647 seconds)
  done (took 59.885586636 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.065859085 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.065301291 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.06512258 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.065750323 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.06653739 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.065817361 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.065595677 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.066556973 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.066043947 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.067185108 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.066524431 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.066468274 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.068192692 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.067338928 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.067549096 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.067089452 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.067898958 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.066675925 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.067691362 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067683974 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.067794045 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.068692243 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.067817639 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.067499067 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.06803205 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.068248398 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.068934357 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.068389659 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.068410652 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.068490772 seconds)
  done (took 64.008564257 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.087116486 seconds)
    (2/2) benchmarking "in"...
    done (took 2.089935419 seconds)
  done (took 6.171864537 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.068796096 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.068727206 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.068968939 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.069086369 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.068669826 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.068778023 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.069421119 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.069108754 seconds)
  done (took 18.546540342 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.06937674 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.071872918 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.068857053 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.070169417 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.071570123 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.076550327 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.069372267 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.069888032 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.070637561 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.070508415 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.074532465 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.071151873 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.079047286 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.074391409 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.071852779 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.071866867 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.073092037 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.074327069 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.073947265 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.072572292 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.074666962 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.072741599 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.071213575 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.072345002 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.070681113 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.07335843 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.081138278 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.072636434 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.071393183 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.071053029 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.077590488 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.071254763 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.072735907 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.072849761 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.073288263 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.071790348 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.078715027 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.07340009 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.073254039 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.072155805 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.07417156 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.074814752 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.076011668 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.079704686 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.073385618 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.07218667 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.073070819 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.074064715 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.072215123 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.077158825 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.081515181 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.072585595 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.072231187 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.07324596 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.075074357 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.074555117 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.074045504 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.076158683 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.080481536 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.080326471 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.077188152 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.094669462 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.082405191 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.07520089 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.075212332 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.083698778 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.100369728 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.07567847 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.075633596 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.073686363 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.080821434 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.074322855 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.073793651 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.074222069 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.087886464 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.084557268 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.075198556 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.074085616 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.07472284 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.075341434 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.076264504 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.075579369 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.075279475 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.07547745 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.085732848 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.100526688 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.076619865 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.075405702 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.076738347 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.076395794 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.081441751 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.07718476 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.07563827 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.075301933 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.07573124 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.078750024 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.076440273 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.076723144 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.075272071 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.085425622 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.076860984 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.075775193 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.080189663 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.086008529 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.076519943 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.077561713 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.077364586 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.077086297 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.084329858 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.07713362 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.077370548 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.076270049 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.077569114 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.082207884 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.076859999 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.079797758 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.086465349 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.084015526 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.078424896 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.080954983 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.080362281 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.079228375 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.087431426 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.104009937 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.077146538 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.080087449 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.082568464 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.09192467 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.080461067 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.077478038 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.080423864 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.077417815 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.077002725 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.079124242 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.077335846 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.078957947 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.077467525 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.078832905 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.07779565 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.078705751 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.08078264 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.079648678 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.080912774 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.079850071 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.082289137 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.07968855 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.080668054 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.084743087 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.078548444 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.080085934 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.079228672 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.081561268 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.079724479 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.079694424 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.078786922 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.07771188 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.079805619 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.079589916 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.08139028 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.080510053 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.079451737 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.080255563 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.084282128 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.080935878 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.080750414 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.079811349 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.081083331 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.081433301 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.079645829 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.080476201 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.082232545 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.081327279 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.084233709 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.079545882 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.080197115 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.081266985 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.079278955 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.080271189 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.083611562 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.091906289 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.085088501 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.09014041 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.07974199 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.088295055 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.080994394 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.081994964 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.080535251 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.082025966 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.081660949 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.08086002 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.080768807 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.084556319 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.102578006 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.093101784 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.083526499 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.083456422 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.087108894 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.08579221 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.086684047 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.081552141 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.082811418 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.08413818 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.082693252 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.08225595 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.081833712 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.08560954 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.082494469 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.08109586 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.085181437 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.083458313 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.082142432 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.082651221 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.082496021 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.083706202 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.082624461 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.081877094 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.082124713 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.084748901 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.090859201 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.084849234 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.082243142 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.084594645 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.085826497 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.084794619 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.082641449 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.083914927 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.086564119 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.083173706 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.084224889 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.091222008 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.084603101 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.083998736 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.083785387 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.083936633 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.086637016 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.083805323 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.08797891 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.093567639 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.087065042 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.083742382 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.088984805 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.083997282 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.086615595 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.085211291 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.085161538 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.085298914 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.086205891 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.085537116 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.084641067 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.092504823 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.085101533 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.085275958 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.084496052 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.087600651 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.085796994 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.086740092 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.0862159 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.088915368 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.095661837 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.091171919 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.085595893 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.088933287 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.087679396 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.086827616 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.089985666 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.086535195 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.099685684 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.096774806 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.086875226 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.086174455 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.086808926 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.088276721 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.086492772 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.087967371 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.09724512 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.087264015 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.087349373 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.091452959 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.088301418 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.087575979 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.092831797 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.088140109 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.090296812 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.088412344 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.087991243 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.087893169 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.087227284 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.089475511 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.088843745 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.089192341 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.092711581 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.087430389 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.088213188 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.087276229 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.096059937 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.087815513 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.08860579 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.094619697 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.089458709 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.087928143 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.089125976 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.086818438 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.089015555 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.089169425 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.087730437 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.090036913 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.089765544 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.092421282 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.100039707 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.092808689 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.0989385 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.091501604 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.099132092 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.09007374 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.088985912 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.088327741 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.092342103 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.099339758 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.088318847 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.08885307 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.095961637 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.090071018 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.090736924 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.094831439 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.08917563 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.090875362 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.090770039 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.09125324 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.095323707 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.092685812 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.089302302 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.091227283 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.090677445 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.090050766 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.092878284 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.092257187 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.091145386 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.090676101 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.089916056 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.091163311 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.091633672 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.091372767 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.09205128 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.090382187 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.089986074 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.097374595 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.092120517 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.091517879 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.096959595 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.090439006 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.099576614 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.092269042 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.092952159 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.092120767 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.091777547 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.094283444 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.09150897 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.092681337 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.091591071 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.091900533 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.093583115 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.104083076 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.099137856 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.095633562 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.093989157 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.093406866 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.09295006 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.10240877 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.11693991 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.093143706 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.095010767 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.09650133 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.099369129 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.095485948 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.098832413 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.095978778 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.103014125 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.094148151 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.09236636 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.096261537 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.106654454 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.093765642 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.092590211 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.092578892 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.097713101 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.096024904 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.093122251 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.094337422 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.096463923 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.095195044 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.106020313 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.093502204 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.094960064 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.094528567 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.093096068 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.094860272 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.093964199 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.095803024 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.095211896 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.095026423 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.094896331 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.096298615 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.100150407 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.092976984 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.097747402 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.104819327 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.094909174 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.095705882 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.096406026 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.096300136 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.09678691 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.095325939 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.094390937 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.096745367 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.094659643 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.095684963 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.098697623 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.104659084 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.096634749 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.095558557 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.094897231 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.098698194 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.094787507 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.0965378 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.096826016 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.10471548 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.099346137 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.108056009 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.106063857 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.096512629 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.096866162 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.10449717 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.105702581 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.096719599 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.095945833 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.097056879 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.098033822 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.098701805 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.097527741 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.09747639 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.098171586 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.102311714 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.096655607 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.097340339 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.098007461 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.09595427 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.098690248 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.098447515 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.102968993 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.096800166 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.096417119 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.096232319 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.097340308 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.098478285 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.09990547 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.09816754 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.09785338 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.100050324 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.099551109 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.102063455 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.097533894 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.09759716 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.099835231 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.098433908 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.097834907 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.098772379 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.098536748 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.097503497 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.101355279 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.107353237 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.098493412 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.09985103 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.099011794 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.101815375 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.099960392 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.099162948 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.099979009 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.582763356 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.107266288 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.09843782 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.100073054 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.100131159 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.099399957 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.104410594 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.101455051 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.103305354 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.100974814 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.100175782 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.099369373 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.103288532 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.109777006 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.105777136 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.102907867 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.108055042 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.104395091 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.101004124 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.099645591 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.099594757 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.099383194 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.100618563 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.10364678 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.102326127 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.102718265 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.100960867 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.101855209 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.101444323 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.102583869 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.099705691 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.100037966 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.104454693 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.110197459 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.108359625 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.100857164 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.102039815 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.101465196 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.104446575 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.112443304 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.102650642 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.101813418 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.102490419 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.102960635 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.102580018 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.109233868 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.110489462 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.105196685 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.102877657 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.107159408 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.121107832 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.104290085 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.112387916 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.134578118 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.103328754 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.103932874 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.102131508 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.103126941 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.103957681 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.10563048 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.102888497 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.108200949 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.103646875 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.101888256 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.110300047 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.103040147 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.101698093 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.103192052 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.104140815 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.109067473 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.102954352 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.109458515 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.103731816 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.102626644 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.102892771 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.105881495 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.103370744 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.103341124 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.102726101 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.105393663 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.102095389 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.204649184 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.110807589 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.104504317 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.104290505 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.116104076 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.165258353 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.104233433 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.102492478 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.104984989 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.108453041 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.106167679 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.103371803 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.106625733 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.112032441 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.107957802 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.112138987 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.105023586 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.10510362 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.105137018 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.103706422 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.104822455 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.117117682 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.115490864 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.100558662 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.103871088 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.110781486 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.105810443 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.111816878 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.112031467 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.109427455 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.107827795 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.104800084 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.103801753 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.105086984 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.105752026 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.108621717 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.113547467 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.107268527 seconds)
  done (took 1248.583969057 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.106379673 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.107298602 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.106615617 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.105335357 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.104779216 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.104616055 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.104559566 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.105158289 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.106279108 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.105935414 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.105728123 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.105408311 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.105509985 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.105395611 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.105441376 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.104993611 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.105509325 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.106256716 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.106013981 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.105866884 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.105751574 seconds)
  done (took 46.250813326 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.107325237 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.107754002 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.107354069 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.107622703 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.106425512 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.106900323 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.106115996 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.106409593 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.106286495 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.107066334 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.107180099 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.107091587 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.106735737 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.106975754 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.106447307 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.106699113 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.107244751 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.106714218 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.107954125 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.107502028 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.107051806 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.106912928 seconds)
  done (took 48.385570392 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.108963193 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.108986628 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.108881903 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.107400611 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.107400632 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.108778646 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.107480989 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.109654325 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.107990997 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.109186647 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.116928225 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.118195069 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.108456316 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.111093834 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.10845335 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.109139921 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.254140596 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.109890545 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.110406796 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.109337553 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.110316659 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.115074286 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.1088087 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.109142767 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.109058609 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.110561456 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.109215046 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.109229056 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.109184388 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.111826266 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.115399837 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.109081074 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.110689583 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.112520214 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.110028837 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.112055606 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.115817199 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.111186757 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.109919313 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.109335452 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.119940251 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.135795411 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.110833482 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.112672488 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.118142351 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.110175355 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.109770796 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.114283522 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.119427832 seconds)
  done (took 105.643082583 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.110874173 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.109519361 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.110090647 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.109972492 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.110505007 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.110484636 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.10958202 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.110515026 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.111500845 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.111079199 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.111266858 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.110836778 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.111591023 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.110925081 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.111136316 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.111724096 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.111138618 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.1116222 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.112322226 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.112353153 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.111839828 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.111586869 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.111063872 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.111896252 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.112012155 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.11176337 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.112805242 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.111822606 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.112502516 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.112521436 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.111474915 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.112289415 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.112532067 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.112359806 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.112337873 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.112541073 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.112733417 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.112904966 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.112379013 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.111662417 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.111842214 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.112879786 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.11211031 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.112641425 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.113605684 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.114517383 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.114495943 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.114454743 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.114981362 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.113970372 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.113962398 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.113390568 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.113517389 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.114218867 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.113636123 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.113571669 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.114017439 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.113935733 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.114045018 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.113512534 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.114498763 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.113843979 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.114229873 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.114280128 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.113482565 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.114193051 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.114054883 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.114632034 seconds)
  done (took 145.686176815 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.116808784 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.116271609 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.116085318 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.116098901 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.116711682 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.116705584 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.117072312 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.116889627 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.116911843 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.119415943 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.119197119 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.117468118 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.11814329 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.117267543 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.119192033 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.119554796 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.118479911 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.118952145 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.119077357 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.119115247 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.119073219 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.11866774 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.119414218 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.119556717 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.119841739 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.119374291 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.119558992 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.119847695 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.119932743 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.119312957 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.120600984 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.120082397 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.119009773 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.120847901 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.120732488 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.12029898 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.12006524 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.120464547 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.119884601 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.12063464 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.119958448 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.120657345 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.12050152 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.12078868 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.120394119 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.120401438 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.120986731 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.121517443 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.119539 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.121238783 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.121568288 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.121018893 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.121080886 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.12139147 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.121806126 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.120014611 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.12130665 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.121208451 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.12128872 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.121594752 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.121658045 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.120467327 seconds)
  done (took 133.453885184 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.12060859 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.119447964 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.12010702 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.119480877 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.12055499 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.119971044 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.120322836 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.120600972 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.121036904 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.120675198 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.12122998 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.121349269 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.122080945 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.120997391 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.122066063 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.121970427 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.121690703 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.121658201 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.121643618 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.121174637 seconds)
  done (took 44.463368305 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.12091716 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.121427011 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.121840685 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.1210769 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.121701882 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.122348918 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.121770363 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.122053957 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.121911637 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.121913536 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.122528473 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.122316199 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.122046903 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.122150365 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.122661042 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.121487303 seconds)
  done (took 35.996218037 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.122543526 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.122254679 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.124111738 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.123829271 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.122578324 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.122815203 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.123288551 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.122743694 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.123196085 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.122736062 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.12338733 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.122961183 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.12373064 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.125094842 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.123790152 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.123901477 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.124537911 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.123672533 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.124221581 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.125041699 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.124562636 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.124069448 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.123926769 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.124560187 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.124617998 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.12487881 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.124147644 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.123643578 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.125288625 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.124338584 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.124190375 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.124572518 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.124587426 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.124624862 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.126083405 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.124823195 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.125183716 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.124956628 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.125096052 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.124883482 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.125385909 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.124894958 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.124849562 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.125196988 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.125321082 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.125448948 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.125213562 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.125623958 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.125491955 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.125637815 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.125885371 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.127731848 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.125937521 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.125924655 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.12578626 seconds)
  done (took 118.895839501 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.125101578 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.125950714 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.12528274 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.126737294 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.12584839 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.12558954 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.12574963 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.126337446 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.125659443 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.126402359 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.126359331 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.126351179 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.126853615 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.127272537 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.126742253 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.126770772 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.12627285 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.126718671 seconds)
  done (took 40.322493755 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.127252878 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.127552544 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.126981075 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.127224219 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.127498585 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.127359734 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.127324876 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.127435408 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.127159942 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.127568142 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.127170736 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.127394557 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.1272735 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.127358507 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.127254086 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.127669097 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.127560673 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.128110515 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.126807825 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.128207966 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.128204925 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.127376251 seconds)
  done (took 48.854423921 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.128426999 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.128156679 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.143541275 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.151831325 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.150246168 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.166080732 seconds)
  done (took 14.920430168 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128621234 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128302366 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.129749109 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128947958 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128431828 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129156478 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129823577 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129087385 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.128619087 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129072015 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129153286 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128940148 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129597506 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12846824 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129418108 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129176084 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129735666 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129767782 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.12870905 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129638324 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12902869 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129239674 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129084127 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129799865 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130043086 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129463008 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129599927 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129846615 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129998857 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130819999 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13017699 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130751497 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130555106 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130635618 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130549402 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130886105 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130299345 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129807984 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130667592 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130347993 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.130897231 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130557589 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130437422 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131070239 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131043435 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130977506 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130436567 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131617004 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131230266 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.131578803 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131542816 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131963847 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131733739 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.131792332 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132145006 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131912173 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132195101 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130939713 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.13252865 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132077877 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131103334 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.131650157 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.13060187 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131769215 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132116821 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131633445 seconds)
  done (took 142.655229021 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132736914 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.131912813 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.13215004 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132585405 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132616472 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132473475 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133153305 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132537958 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132421347 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132956198 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133268033 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132898961 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132843263 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.134095123 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133704652 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132921853 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.13296685 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.133743561 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133468451 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133857986 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133110746 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133958978 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133651464 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133730299 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133513343 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133774012 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.133868301 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.13377465 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133543489 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134640624 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134599859 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134408923 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.134905446 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.134803151 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.134395343 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.13331181 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.134108006 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135071221 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134450038 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.134127864 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134953547 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135079904 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.135405237 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135552927 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.135280804 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.134915484 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135512568 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135819666 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13515062 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135814465 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.135513867 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.135520671 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135330323 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.13618921 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.135755594 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.135944449 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.135407359 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.133899805 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133753449 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133358082 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.134250782 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134370845 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134494046 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.134748152 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.134187049 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.133771443 seconds)
  done (took 142.908865776 seconds)
done (took 2909.809736714 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.148964712 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.268904797 seconds)
  done (took 16.475563375 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.299497954 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.15097036 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.322187253 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.253438368 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.143913315 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.136842874 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.138140703 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.138055766 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.228541662 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.138143357 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.175226615 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.137702212 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.137694458 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.137728157 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.138780472 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.137857823 seconds)
  done (took 56.883922557 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.140120367 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.14146942 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.139768299 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.138572606 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.151052653 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.213845536 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.162557007 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.14253875 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.152734163 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.173891583 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.156674066 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.145819853 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.146628009 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.14300142 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.225523877 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.18557588 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.198790042 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.217192919 seconds)
  done (took 41.035529573 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.221446236 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.150284264 seconds)
  done (took 11.439904479 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.160052185 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.146936765 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.167675949 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.142925813 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.170418877 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.157663038 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.146282369 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.167906387 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.155516779 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.164644264 seconds)
  done (took 73.675273419 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.142017819 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.142528997 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.443596881 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.15220997 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.147294686 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.164158862 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.140594298 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.170180104 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.144238636 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.138290053 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.152158511 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.448598354 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.153861306 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.141210125 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.484451757 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.154624946 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.145920151 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.17139204 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.172043355 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.146069331 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.146831418 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.144944498 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.303238727 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.843810176 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.144186369 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.14518125 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.148946562 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.139982351 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.140025447 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.142025183 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.143679192 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.141267242 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.145166628 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.141490067 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.149156459 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.145490852 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.636503249 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.16027559 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.149532967 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.222087003 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.186106219 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.148980563 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.977971421 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.144649882 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.14042763 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.148457521 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.839111662 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.229144382 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.144169275 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.326234942 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.528868744 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.158108063 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.319842318 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.282304754 seconds)
  done (took 147.9284037 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.140392028 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.376640295 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.294168033 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.14184623 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.399738296 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.354890894 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.143524638 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.188114892 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.144502065 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.344441194 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.397539354 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.246798613 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.144188168 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.141655063 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.14297177 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.140415812 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.285750174 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.21070585 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.145299328 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.141148282 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.166682119 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.345551364 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.265474809 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.146583437 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.168856749 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.349203033 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.265664927 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.246422015 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.116415925 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.142083158 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.205938024 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.1458543 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.145143946 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.141787054 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.296534968 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.237798354 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.228110145 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.145579581 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.142037614 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.142919815 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.815972351 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.344972931 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.239229565 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.268202547 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.391446988 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.359761837 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.834915523 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.14256291 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.769179274 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.307229491 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.349216322 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.351408704 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.264416405 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.147389729 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.701244695 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.143054119 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.143539439 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.36577607 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.363088302 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.244004407 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.148005803 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.142750048 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.144673251 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.383664795 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.146850599 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.236922438 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.147800853 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.143762369 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.236889741 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.24632361 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.370887654 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.366494584 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.176613126 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.481255887 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.630756379 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.34771405 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.211523688 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.366494276 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.149409011 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.144873497 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.227887207 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.993137051 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.400266697 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.390403701 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.344825531 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.177191468 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.796678128 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.145743274 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.333241817 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.337035981 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.381182469 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.388875018 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.382422615 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.518248141 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.145412086 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.146199205 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.43489406 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.264179631 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.146396103 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.505272775 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.375769622 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.640379421 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.172056463 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.476413608 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.276761619 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.150986897 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.794286055 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.147057693 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.354814648 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.187924512 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.148786535 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.148694632 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.337044063 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.053953498 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.147571145 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.097294399 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.208029313 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.153033687 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.350984415 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.151945532 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.392511156 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.152276526 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.380009871 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.803978304 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.17841877 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.375071593 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.390473915 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.777941788 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.388846055 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.391521008 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.263976401 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.421717777 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.151914736 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.150104718 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.410398845 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.151487764 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.148046363 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.317918041 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.153215721 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.29247639 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.152616294 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.414929672 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.171099854 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.38038467 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.153600188 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.389083372 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.182586547 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.200511251 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.15425215 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.279706781 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.153211964 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.000054569 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.307725104 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.154828486 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.150458697 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.915652106 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.151384438 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.29816982 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.376441322 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.172550247 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.219618409 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.718482516 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.149872659 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.233807945 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.174131381 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.798826025 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.150171917 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.402438888 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.112133486 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.633755877 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.151173258 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.385888275 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.390633537 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.152654055 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.149772887 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.993966359 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.150708215 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.150950382 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.307528161 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.148777638 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.09673509 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.349514368 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.157905785 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.279919177 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.156406821 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.490487792 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.497859349 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.150323875 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.15101195 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.151752001 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.152095199 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.152453878 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.413630682 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.179845813 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.58517107 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.289219014 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.407947076 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.456515293 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.348823491 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.193938047 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.155297594 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.375351769 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.157140629 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.21528258 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.156696755 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.172550478 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.381560649 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.15721671 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.358093841 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.389018534 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.036058331 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.200835489 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.156979808 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.154311141 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.132212852 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.301577265 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.240572108 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.157160991 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.153799591 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.267469237 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.276071829 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.336563178 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.971168326 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.266215762 seconds)
  done (took 965.502529134 seconds)
done (took 1315.00114023 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.154429632 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.157322016 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.157346364 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.156591364 seconds)
  done (took 30.703826586 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.156998564 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.156802589 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.158344715 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.157869454 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.157677501 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.159046628 seconds)
  done (took 15.025514979 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.156963024 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.158830692 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.158833382 seconds)
  done (took 23.554446417 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.591225718 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.570834 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.23265525 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.301745275 seconds)
  done (took 11.777144401 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.162872708 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.159136394 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.159977562 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.158836079 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.158981629 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.160131695 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.159507107 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.15885288 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.159278737 seconds)
  done (took 21.527049375 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.678096581 seconds)
done (took 109.344177078 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.921332297 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.345797495 seconds)
    (3/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.712506784 seconds)
    (4/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.420956298 seconds)
    (5/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.363265476 seconds)
    (6/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.263984091 seconds)
    (7/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.579832876 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.600890184 seconds)
    (9/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.244605533 seconds)
    (10/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.422810289 seconds)
    (11/341) benchmarking ("sort", Float32, false)...
    done (took 5.83383239 seconds)
    (12/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.132060925 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.185480875 seconds)
    (14/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.195600177 seconds)
    (15/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.610136985 seconds)
    (16/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.161077375 seconds)
    (17/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.338778286 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.176371491 seconds)
    (19/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.867795254 seconds)
    (20/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.171754271 seconds)
    (21/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.883457373 seconds)
    (22/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.388202307 seconds)
    (23/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.619552503 seconds)
    (24/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.157826417 seconds)
    (25/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.608445489 seconds)
    (26/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.159310417 seconds)
    (27/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.524001713 seconds)
    (28/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.565550335 seconds)
    (29/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.236963018 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.165697991 seconds)
    (31/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.102636126 seconds)
    (32/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.363741387 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.562564325 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.384327603 seconds)
    (35/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.273492077 seconds)
    (36/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.027122424 seconds)
    (37/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.22618696 seconds)
    (38/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.305936471 seconds)
    (39/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.175414554 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.391964159 seconds)
    (41/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.436667968 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.241091167 seconds)
    (43/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.391372532 seconds)
    (44/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.288406086 seconds)
    (45/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.168177882 seconds)
    (46/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.482798137 seconds)
    (47/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.434947927 seconds)
    (48/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.307321282 seconds)
    (49/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.169448558 seconds)
    (50/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.155213711 seconds)
    (51/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.43547062 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.576414825 seconds)
    (53/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.158634174 seconds)
    (54/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.239979923 seconds)
    (55/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.172562085 seconds)
    (56/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.15678813 seconds)
    (57/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.863726581 seconds)
    (58/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.1590348 seconds)
    (59/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 3.849170246 seconds)
    (60/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.569180272 seconds)
    (61/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.069529739 seconds)
    (62/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.181728043 seconds)
    (63/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.3892346 seconds)
    (64/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.318252008 seconds)
    (65/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.262443828 seconds)
    (66/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.272275457 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.041936078 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.410086132 seconds)
    (69/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.563320568 seconds)
    (70/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.268837166 seconds)
    (71/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.364555411 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.556716484 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.071121681 seconds)
    (74/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.553217884 seconds)
    (75/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.262709671 seconds)
    (76/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.291734108 seconds)
    (77/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.341085756 seconds)
    (78/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.16098218 seconds)
    (79/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.307498855 seconds)
    (80/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.871791764 seconds)
    (81/341) benchmarking ("sort", BigInt, false)...
    done (took 7.164512592 seconds)
    (82/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.260328264 seconds)
    (83/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.156543906 seconds)
    (84/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.951824592 seconds)
    (85/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.276944881 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.173246196 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.287391885 seconds)
    (88/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.94893824 seconds)
    (89/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.181190856 seconds)
    (90/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.370700275 seconds)
    (91/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.247107188 seconds)
    (92/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.563812171 seconds)
    (93/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.433422221 seconds)
    (94/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.391927487 seconds)
    (95/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.290359765 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.256529078 seconds)
    (97/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.123411762 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.287252158 seconds)
    (99/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.461761667 seconds)
    (100/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.494317936 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.48145242 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.313021968 seconds)
    (103/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.163406231 seconds)
    (104/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.407932712 seconds)
    (105/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.173576407 seconds)
    (106/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.169275971 seconds)
    (107/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.3728554 seconds)
    (108/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.639396807 seconds)
    (109/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.587801859 seconds)
    (110/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.166068204 seconds)
    (111/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 3.632828261 seconds)
    (112/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.483753455 seconds)
    (113/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.166139794 seconds)
    (114/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.565814518 seconds)
    (115/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.162221883 seconds)
    (116/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.837113998 seconds)
    (117/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.444078607 seconds)
    (118/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.240437622 seconds)
    (119/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.159141893 seconds)
    (120/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.710646893 seconds)
    (121/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.238094464 seconds)
    (122/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.469990999 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.296077325 seconds)
    (124/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.367000954 seconds)
    (125/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.293334939 seconds)
    (126/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.280671564 seconds)
    (127/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.576219521 seconds)
    (128/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.161600528 seconds)
    (129/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.617165118 seconds)
    (130/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.475620957 seconds)
    (131/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.564103744 seconds)
    (132/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.283936566 seconds)
    (133/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.550329888 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.664434255 seconds)
    (135/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.380978447 seconds)
    (136/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.95687998 seconds)
    (137/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.329501759 seconds)
    (138/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.182413629 seconds)
    (139/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.239322272 seconds)
    (140/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.295331883 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.478867074 seconds)
    (142/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.36270509 seconds)
    (143/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.302212071 seconds)
    (144/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.451590889 seconds)
    (145/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.438611288 seconds)
    (146/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.656576813 seconds)
    (147/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.931855778 seconds)
    (148/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.165609362 seconds)
    (149/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.262897466 seconds)
    (150/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.328658327 seconds)
    (151/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.161925876 seconds)
    (152/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 3.886557957 seconds)
    (153/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.165977556 seconds)
    (154/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.217802872 seconds)
    (155/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 4.250162274 seconds)
    (156/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.643887578 seconds)
    (157/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.506831769 seconds)
    (158/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.642900225 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.499495811 seconds)
    (160/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.168407724 seconds)
    (161/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.282446109 seconds)
    (162/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.091126234 seconds)
    (163/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.192890399 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.186874254 seconds)
    (165/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.462456446 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.881657579 seconds)
    (167/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.178198707 seconds)
    (168/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.164135863 seconds)
    (169/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.217880171 seconds)
    (170/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.324251403 seconds)
    (171/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.381788163 seconds)
    (172/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.045499396 seconds)
    (173/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.268746758 seconds)
    (174/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.174148629 seconds)
    (175/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.408612501 seconds)
    (176/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.223296976 seconds)
    (177/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.405473719 seconds)
    (178/341) benchmarking ("sort", Bool, false)...
    done (took 2.381073333 seconds)
    (179/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.165507803 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 3.601946112 seconds)
    (181/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.193000874 seconds)
    (182/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.996700928 seconds)
    (183/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.181182434 seconds)
    (184/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.178951737 seconds)
    (185/341) benchmarking ("sort", Int64, false)...
    done (took 5.822685839 seconds)
    (186/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.248041449 seconds)
    (187/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.273979709 seconds)
    (188/341) benchmarking ("sort", Float64, false)...
    done (took 5.882729305 seconds)
    (189/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.898301811 seconds)
    (190/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.369348092 seconds)
    (191/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.072190656 seconds)
    (192/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.288018839 seconds)
    (193/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.374514764 seconds)
    (194/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.182769991 seconds)
    (195/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.315300128 seconds)
    (196/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.566421275 seconds)
    (197/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.165218829 seconds)
    (198/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.634246963 seconds)
    (199/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.597553008 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.180439264 seconds)
    (201/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.598106998 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.512860925 seconds)
    (203/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.411116647 seconds)
    (204/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.568091018 seconds)
    (205/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.185628989 seconds)
    (206/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.464793761 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.192791964 seconds)
    (208/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.165653304 seconds)
    (209/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.248279015 seconds)
    (210/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.315620331 seconds)
    (211/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.372689111 seconds)
    (212/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.276438702 seconds)
    (213/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.174451026 seconds)
    (214/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.410774564 seconds)
    (215/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.369233891 seconds)
    (216/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.30006874 seconds)
    (217/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.403097612 seconds)
    (218/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.419174752 seconds)
    (219/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.260127718 seconds)
    (220/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.511472516 seconds)
    (221/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.173676047 seconds)
    (222/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.21021529 seconds)
    (223/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.166396405 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.272492474 seconds)
    (225/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.328379668 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.407977116 seconds)
    (227/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.489215917 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.946517526 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.208986454 seconds)
    (230/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.301053896 seconds)
    (231/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.184224982 seconds)
    (232/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.239783901 seconds)
    (233/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.442139828 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.265599296 seconds)
    (235/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.174181105 seconds)
    (236/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.139607545 seconds)
    (237/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.322092799 seconds)
    (238/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.178088974 seconds)
    (239/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.162427196 seconds)
    (240/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 4.212193426 seconds)
    (241/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.198468834 seconds)
    (242/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.364537032 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.480530093 seconds)
    (244/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.222120603 seconds)
    (245/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.610559126 seconds)
    (246/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.513954546 seconds)
    (247/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.501780391 seconds)
    (248/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.390065652 seconds)
    (249/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.181152594 seconds)
    (250/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.223347308 seconds)
    (251/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.16418416 seconds)
    (252/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.164819366 seconds)
    (253/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.459976312 seconds)
    (254/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.493251112 seconds)
    (255/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.101024655 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.123845747 seconds)
    (257/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.239292294 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.1662765 seconds)
    (259/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 4.102113316 seconds)
    (260/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.459348769 seconds)
    (261/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.828067382 seconds)
    (262/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.165722418 seconds)
    (263/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.258226165 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.458569107 seconds)
    (265/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.185969652 seconds)
    (266/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.180605009 seconds)
    (267/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.428448501 seconds)
    (268/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.167646053 seconds)
    (269/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.186976095 seconds)
    (270/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.243248612 seconds)
    (271/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.172869518 seconds)
    (272/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.164676558 seconds)
    (273/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.405366805 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.302119372 seconds)
    (275/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.288200135 seconds)
    (276/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.537006408 seconds)
    (277/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.258533339 seconds)
    (278/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.180436407 seconds)
    (279/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.491927888 seconds)
    (280/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.263329661 seconds)
    (281/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.46110533 seconds)
    (282/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.466177652 seconds)
    (283/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.170147427 seconds)
    (284/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.189648236 seconds)
    (285/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.295275149 seconds)
    (286/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.172344436 seconds)
    (287/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.323038553 seconds)
    (288/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.598241332 seconds)
    (289/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.181394502 seconds)
    (290/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.475190089 seconds)
    (291/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.325396571 seconds)
    (292/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.365485509 seconds)
    (293/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.289173784 seconds)
    (294/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.460845109 seconds)
    (295/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.167852712 seconds)
    (296/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.304827381 seconds)
    (297/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.452802782 seconds)
    (298/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.184806241 seconds)
    (299/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.855371912 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.326621789 seconds)
    (301/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.303355851 seconds)
    (302/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.565274708 seconds)
    (303/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.168766133 seconds)
    (304/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.499045689 seconds)
    (305/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.406003344 seconds)
    (306/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.320679972 seconds)
    (307/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.719250177 seconds)
    (308/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.578133347 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.288821622 seconds)
    (310/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.410910314 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.504094086 seconds)
    (312/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.304903683 seconds)
    (313/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.35008725 seconds)
    (314/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.279310999 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.963010814 seconds)
    (316/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.645864293 seconds)
    (317/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.302199728 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.19333922 seconds)
    (319/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.286401702 seconds)
    (320/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.28303338 seconds)
    (321/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.437427354 seconds)
    (322/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.216848437 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.11015882 seconds)
    (324/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.4310755 seconds)
    (325/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.783073728 seconds)
    (326/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.49115173 seconds)
    (327/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.589516676 seconds)
    (328/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.1861469 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.523293554 seconds)
    (330/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.958452012 seconds)
    (331/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.394737193 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.297623954 seconds)
    (333/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.183771965 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.172533832 seconds)
    (335/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.058464734 seconds)
    (336/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.191508943 seconds)
    (337/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.173135101 seconds)
    (338/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.176580576 seconds)
    (339/341) benchmarking ("sort", Int8, false)...
    done (took 5.100788652 seconds)
    (340/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.764553732 seconds)
    (341/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.448058129 seconds)
  done (took 1202.527448345 seconds)
done (took 1205.047486533 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.202366737 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.17457638 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.692706768 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.188139376 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.174785617 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.180344941 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.706555297 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.207563299 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.192345026 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.706549138 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.186876663 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.175336711 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.190168715 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.210263206 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.187225521 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.189035548 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.182058314 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.200436125 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.210352231 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.182410227 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.227421669 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.182247613 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.175216683 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.228516368 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.176127223 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.192105818 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.202205618 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.227274731 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.227339099 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.178466553 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.181451247 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.543083018 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.2331973 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.181089704 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.187440823 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.191633981 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.18260756 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.19183954 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.200963673 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.192484935 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.177554833 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.187456808 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.181283104 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.179769841 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.177340681 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.176198318 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.178840742 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.302289667 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.191063692 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.527401268 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.248191634 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.201211887 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.230266502 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.179711305 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.178973799 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.180065443 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.228878661 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.1849892 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.183192576 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.526995075 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.279273431 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.192779457 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.525270298 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.247862092 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.188328587 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.186383419 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.17834546 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.202315419 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.543454178 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.757113662 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.212704455 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.199911665 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.179786308 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.180295171 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.193189916 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.710220254 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.195487885 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.780958604 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.207021915 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.193883622 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.185306436 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.181638103 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.180606049 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.195645971 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.204652909 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.179542824 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.184179531 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.185663978 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.193928065 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.545637589 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.22837766 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.698238659 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.189356242 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.205752283 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.204419125 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.779734913 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.210974259 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.203730773 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.183053503 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.546458012 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.226172636 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.205774248 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.182476318 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.191061657 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.295308089 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.205186864 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.206334795 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.180012748 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.20257244 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.187730763 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.182715601 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.19510092 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.201138268 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.216337347 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.197083119 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.181141698 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.190072246 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.186121879 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.206374892 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.190788519 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.187584512 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.19292075 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.182200002 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.233679255 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.206418486 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.198283067 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.296842965 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.187843632 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.307085455 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.198286613 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.189680498 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.18147059 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.530733168 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.231342166 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.204391045 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.188612667 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.205499595 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.206110659 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.199428401 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.184397218 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.198704105 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.185477208 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.235541315 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.182971792 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.208153249 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.234580435 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.19732268 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.189266791 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.206475064 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.218397714 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.203272384 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.187210284 seconds)
done (took 343.402854364 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.233252168 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.181914825 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.259825301 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.184382723 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.251513861 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.237893348 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.183862846 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.18477958 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.183987351 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.580498115 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.184641438 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.188736083 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.18550807 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.184418843 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.235296884 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.184895617 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.184365477 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.421576483 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.186479161 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.244648611 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.183160354 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.184765852 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.184646222 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.584922918 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.183852174 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.184782047 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.245028229 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.185913736 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.428544197 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.186196961 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.183459573 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.428319316 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.245494793 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.19852699 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.192449502 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.192596063 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.253782825 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.195054121 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.234217728 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.234419196 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.262828769 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.220473078 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.187064628 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.184482593 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.190045685 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.188359127 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.186224645 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.219255576 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.185802531 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.193992369 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.42348318 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.192379238 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.194888377 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.186901079 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.186881629 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.201724469 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.187149284 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.188612203 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.246887088 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.188820561 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.237327101 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.587911701 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.582918296 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.186396112 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.186021816 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.187552184 seconds)
  done (took 204.883551488 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.257292578 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.274054419 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.254310282 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.193848939 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.24066873 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.258065305 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.193588439 seconds)
  done (took 17.77922166 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.195048293 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.188452431 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.211184388 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.212027112 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.189681932 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.325352161 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.199897464 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.194231571 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.213330162 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.188880216 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.52371361 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.211671912 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.196597068 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.189855749 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.199999044 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.218112437 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.19124046 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.191207025 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.286412766 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.268133686 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.194212045 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.196473966 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.217962048 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.202316836 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.190453213 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.190183853 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.191784036 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.197082021 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.189803817 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.189679488 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.19008634 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.203614736 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.190008257 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.190599974 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.18971078 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.191025428 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.191379068 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.190725846 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.190172247 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.191392753 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.190134473 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.190050146 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.190261408 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.19142766 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.190986138 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.213931648 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.190903926 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.191045186 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.190191305 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.19078097 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.219811946 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.191581435 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.191094407 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.196945485 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.230720007 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.196295092 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.193304578 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.191509507 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.191356053 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.191618471 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.190906313 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.271460619 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.214591857 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.191157692 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.215127555 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.230058902 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.192038254 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.192138513 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.190739309 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.2157796 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.190069704 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.214773348 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.192148158 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.28892444 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.191151683 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.333467205 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.214685905 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.195285491 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.194543295 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.19135163 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.199901192 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.192320342 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.194987398 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.199918158 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.197494932 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.191950719 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.192714554 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.194802382 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.200942092 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.193761974 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.239579469 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.192989671 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.19480025 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.289528257 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.193323348 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.290793833 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.219849376 seconds)
  done (took 236.399606077 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.198864726 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.195095284 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.207324395 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.195026154 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.194368597 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.200921737 seconds)
  done (took 15.306148817 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.197262696 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.198934612 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.193705876 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.193830998 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.196158805 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.196625704 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.194552171 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.196470792 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.200747866 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.194435415 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.196990402 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.196105646 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.197309236 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.196572511 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.194909393 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.194825552 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.194879555 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.194149586 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.195074646 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.196178709 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.439411556 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.196628144 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.197100978 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.199373068 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.201947195 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.194821817 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.204437077 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.195708338 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.195132689 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.201876039 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.202956834 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.197770857 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.199440755 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.202530663 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.200933357 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.200657751 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.201162215 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.197642939 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.195711931 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.198122847 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.197128041 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.197812419 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.195782718 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.197328456 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.198443024 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.203895761 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.202199032 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.206091685 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.197065746 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.198202324 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.198807668 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.196087896 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.199442642 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.198571639 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.202711164 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.203417525 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.203386806 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.197446881 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.199013732 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.201174831 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.20349635 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.19926342 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.199951928 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.200945621 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.205127956 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.199573896 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.201810345 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.204209584 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.199017571 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.196730673 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.199216566 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.197918858 seconds)
  done (took 161.661681019 seconds)
done (took 638.13655074 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.240385847 seconds)
  done (took 9.358642463 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.353423775 seconds)
  done (took 9.560095835 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.970807092 seconds)
  done (took 13.091272291 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.21457588 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.241969585 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.215210675 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.204364716 seconds)
  done (took 31.006504456 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.436702047 seconds)
  done (took 9.555256244 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.211356392 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.196564993 seconds)
  done (took 16.588768276 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.273808279 seconds)
  done (took 9.393399575 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.210738637 seconds)
  done (took 9.343329611 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.211287405 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.223240485 seconds)
  done (took 16.569971819 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.200610483 seconds)
  done (took 9.319562194 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.976017458 seconds)
  done (took 10.173614484 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.217193873 seconds)
  done (took 9.354033269 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.254684532 seconds)
  done (took 9.374361897 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.377331671 seconds)
  done (took 10.496584921 seconds)
done (took 175.304458501 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.208608097 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.199512735 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.198901834 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.198054887 seconds)
  done (took 30.924052472 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.234870565 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.235423446 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.24308674 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.234786797 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.225692863 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.225235471 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.235409797 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.234852778 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.225449788 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.231111455 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.235032831 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.232589099 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.234550824 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.244025191 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.243747007 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.232732298 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.234626244 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.235258503 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.226239592 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.244493375 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.235301703 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.23498139 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.201720789 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.201167293 seconds)
  done (took 55.68288141 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.39119407 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.270200412 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.3567506 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.249194847 seconds)
  done (took 11.387428382 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.208965496 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.269852021 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.257442646 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.252510635 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.257714496 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.30840487 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.25907213 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.342163506 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.334724896 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.332968222 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.213410509 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.22848488 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.230728675 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.252037276 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.30957934 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.206158061 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.206616602 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.323520916 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.269433319 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.447769725 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.206976113 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.261830994 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.259254237 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.259964685 seconds)
  done (took 56.623470791 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.208307782 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.216423208 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.21469498 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.208276458 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.208393175 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.208678912 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.215474106 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.210857344 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.230411444 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.210578834 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.207783944 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.209529861 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.215541187 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.208739665 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.208336773 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.222443165 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.224038354 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.208163067 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.212160809 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.215894645 seconds)
  done (took 46.391570548 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.20751778 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.054235483 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.556046912 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.45926591 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.206933905 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.208077824 seconds)
  done (took 33.819168337 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.223264939 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.228980592 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.216958148 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.235221797 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.260195033 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.217191862 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.272215201 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.377508937 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.219031483 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.269709446 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.231330575 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.217928074 seconds)
  done (took 29.098452572 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.210189765 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.211365692 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.210502423 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.221648578 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.221266299 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.218180015 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.218131348 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.209601607 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.223381299 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.229006555 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.219166596 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.222498694 seconds)
  done (took 48.742994324 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.424160076 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.436429937 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.42542304 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.925622479 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.53009217 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.186947433 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.494301083 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.422408671 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.990725213 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.961034529 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.512773716 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.195258311 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.158159636 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.135639042 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.128352194 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.452894727 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213144409 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.067593049 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.470644137 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.265084025 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214857017 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.211408216 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.213390303 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.509035125 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.543015674 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219523475 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.42358379 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227904483 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.210602837 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.469051203 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.912149918 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.267645361 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.415037315 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.471360673 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.555637301 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.273472318 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.317753661 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.520752623 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.259056037 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.247375865 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.222118777 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.2223063 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.754499582 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.224204629 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.484461167 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214076105 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.221167753 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.337570513 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.138363893 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.571792196 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.337158261 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.211755512 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.247719586 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.644551301 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.331445 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.455946268 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.217774356 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.520271667 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272208548 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.505664017 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.333393396 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.318731218 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.425622729 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.139162545 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.650538687 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.34927461 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.215561088 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.218972782 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.914295915 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.456199894 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.294993906 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.576355829 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.98701167 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.214883709 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.21689348 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.256845901 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.303677275 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.214342895 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.511199132 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.185008827 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.140897304 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.313153115 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.617399852 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.220679716 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.214737089 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.223039403 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.061182605 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.140033994 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.311545602 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.503165276 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.549481765 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.216424304 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.215574668 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.237889389 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.217774718 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.163463113 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.914096509 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.284199976 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.140950776 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.780445425 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.925176706 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.184433496 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.793650273 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.260463662 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.496894228 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.360791741 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.621674601 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.423540508 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.463920785 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.747494517 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.221594831 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.832291773 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.297812439 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292566626 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.215913769 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.802237066 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.523213869 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.558518694 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.341815022 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.216428658 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.142649701 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.228195772 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.420606821 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.926961631 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274398334 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.217794257 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.221694852 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.216757749 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.219555667 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.331453438 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233363803 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.515636499 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.298332854 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.217959612 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.155339097 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.221930537 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.506150261 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.087270649 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.278659614 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.478619776 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.492190937 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.918824659 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.815468691 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.165901356 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.492351282 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.295986267 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.293641447 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.796247698 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.353966259 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.315720666 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.217805885 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.329525603 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.230613525 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.221676123 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.819642609 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.634499811 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.644683575 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.261964311 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.219294463 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.168481493 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.527745487 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.464302533 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.336278308 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.246405937 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.224519424 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.302654399 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.445660666 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.222384438 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.145930762 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.468363192 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.46589241 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.525718581 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.638114827 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.321377619 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.293890102 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.231094507 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.433527804 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.304354296 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.922168958 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.768104661 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.446706591 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.907269987 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.187128891 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.868343595 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.524413685 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.611740921 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.235702842 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.673451237 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.525951648 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.026170121 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.254658533 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.74995387 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.147247302 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226134821 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.563144625 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.179084923 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.53898425 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.296309371 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.24527193 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.223326633 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.222717486 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.229579156 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.186910854 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.331721402 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.29137233 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.294854431 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.148642272 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.98173305 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.263695036 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.224252259 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.222747584 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.643213736 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.076304735 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.176667778 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.22215849 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.299315897 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.965393972 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.780646613 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.229493761 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.226214927 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.846095587 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.230768295 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.811384743 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.223009049 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.129491315 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.249733114 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.520745141 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.931825599 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.519678677 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.302647741 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.298075017 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.222606721 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.229815161 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.92307769 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.230607792 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.922507547 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.51205102 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.504976107 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.681335801 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.296563962 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.43095183 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.237347993 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.224283244 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.762088915 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.249605341 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.224183634 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.426547468 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.75072989 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.593296301 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.878897297 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.307547255 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.222655363 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.495127457 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.237279501 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.919987353 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.925347454 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.239454693 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.22365133 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.455084945 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.908486965 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.22487403 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.19913713 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.2314246 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.436192711 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.427668573 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.500789539 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.527215884 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.681524989 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.151647524 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.229231942 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.282819209 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.468284762 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.224457752 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.259629593 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.65993425 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.328771645 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.654866267 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.512689637 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.655987971 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.870379369 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.49803431 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.295431677 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.23692084 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.889264806 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.366609073 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.159615388 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.343658086 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.150922121 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.97126679 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.51717986 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.244336873 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.500358799 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.212969988 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.570328907 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.529389075 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.536112181 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.283414085 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.255179441 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.252379388 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.251422552 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.226700077 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.541465221 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.3457067 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.23348869 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.882371614 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.270080754 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274738831 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.233557154 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.771979396 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.250683591 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232127035 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.92420463 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.254977816 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.34854653 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30094786 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.022755317 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.959435138 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.259047965 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.180406543 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.056200582 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.500584645 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.291058923 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.686738137 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269714104 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.633276945 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.230070416 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.442411686 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.234864536 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.916613911 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278476115 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.503702337 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.188596293 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.443004493 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.435087133 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.269307268 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.237155016 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156747099 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.338235046 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.109624423 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.215041546 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.23319038 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.912479318 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.675744585 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.561261081 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.716291016 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.175266234 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.348908748 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.586745061 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.616633007 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.96713371 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26756071 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.232771867 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.532852705 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.36006053 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.511200226 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.498457361 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.240588899 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.257635447 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.445215209 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.357569782 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.151329481 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.728097106 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.816606522 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.932150186 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.242815551 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.435990121 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.535534643 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.637867138 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.270722754 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.310822256 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.63636947 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.497806647 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.297556011 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.15842811 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232242086 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.628959993 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.632823365 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.330585487 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.47378475 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.548593744 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.079893208 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.926102802 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.769837554 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.648016506 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.677676844 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.646123068 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.448689099 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.602696598 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.558323421 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.826222281 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.646420761 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.446522564 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.327341848 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.511050352 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.103781543 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.944047859 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.47899199 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.239562576 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.164079221 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.442205646 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.237524872 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.841975245 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.826564001 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.483538008 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.4565449 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.69828743 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.774547016 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.545751809 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.260619169 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.201166227 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.259958591 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.25586409 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.235973926 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.723568799 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.525681153 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.249653926 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.176722891 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.909398958 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.162609167 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.449409884 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.544471221 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.274338524 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.792137343 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.671547823 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.331590725 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.523191176 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.600023352 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.274298641 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.167998934 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.925106309 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.183045966 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.303471794 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.661358054 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254207713 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.239197629 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.440178361 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.16623283 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283524413 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.241460644 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.436577159 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.816986691 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.509383828 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.358798708 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.480743408 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.537800557 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.106139559 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.258522302 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.509995828 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.164735854 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.961526078 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.922789198 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.277925671 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309308705 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.236949434 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.241918585 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.509689132 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.538198746 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.326075416 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.040893709 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.273120394 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.262481231 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.532875598 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.324262304 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.240511831 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.243836348 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.862061101 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.473749291 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.273052537 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.193717717 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.452826306 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.325069478 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.434789702 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.312521563 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.75352617 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.244383787 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.10200963 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.334758757 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.192963872 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.32376917 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.989526631 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.299965691 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.239846529 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.510535313 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.861630065 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.444174647 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.635330038 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.128341848 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.554780579 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28362128 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.243636784 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.244281694 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.622375013 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.539438183 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.240791863 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.509410752 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.283895218 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.245945192 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.902549939 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.210010818 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.240695833 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.929768462 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.143547625 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.972390918 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.637610378 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.246844486 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.259883201 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.244122173 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.168278866 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.242727535 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.395346257 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.244312952 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.248189582 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.611610016 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.529027984 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.328577477 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.248082736 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.24388637 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.249161643 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.455912095 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.756298537 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.25904553 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.941517847 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.446158539 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.251650885 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.730046417 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.703130875 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.629606976 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.283367969 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.561934075 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.487484175 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.786033746 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.563877956 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.221053724 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.470741474 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.244864814 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.515598821 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.517312228 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.24523507 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.45585306 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.951625469 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.532582618 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.598925839 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.559244187 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.305479944 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.564620431 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.157983384 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.250656334 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.247134654 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.510660605 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.296796223 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.243690643 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.252863429 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.243960704 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.939567728 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.714194043 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.399808382 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.552473833 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.087131102 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.999261674 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.24675048 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.171170838 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.244717009 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.271617584 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.248087446 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.171044351 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.994111952 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.969419048 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.458319033 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.555755082 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.172628926 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.448938484 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.850241992 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.172045042 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.214470991 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.351578691 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.490956861 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17382622 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.248948445 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.199579425 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.512416524 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.069364646 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.517647776 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.246991646 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.189927416 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.251339633 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.248415887 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.24640435 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.333595342 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.247232809 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.363065429 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.51139983 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.603375777 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.348819661 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.885970983 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.94003897 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.185058383 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.291202948 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.804550658 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.816835372 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.50023688 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.373541036 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.002366801 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.192665165 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.250723868 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.264155776 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.489591891 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.25444067 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.25086444 seconds)
  done (took 2305.754291013 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.40003555 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.302847168 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.297436951 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.273830615 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.33087618 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.306541559 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.308658593 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.289290328 seconds)
  done (took 60.675038125 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.248175834 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.385511372 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.257623885 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.256181346 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.248280412 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.253363438 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.444640166 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.280501692 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.24926258 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.254716664 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.273007066 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.253749033 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.250663001 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.248325583 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.274614239 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.552357502 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.272511681 seconds)
  done (took 83.219201167 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.305594868 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.164316298 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.252392876 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.040882802 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.280266082 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.617651653 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.253777381 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.253961276 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.401232331 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.550136908 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.268236649 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.257577281 seconds)
  done (took 94.865798085 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.252434323 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.252341607 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.251579364 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.251555776 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.251697457 seconds)
  done (took 13.428287626 seconds)
done (took 2872.792857532 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.490339058 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.346283171 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.330915529 seconds)
  done (took 6.845740627 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.39457176 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.443688147 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.558409532 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.562397864 seconds)
  done (took 12.13332355 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.543015454 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.641336382 seconds)
  done (took 7.353668612 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.633705856 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.271953859 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.647859553 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.252469202 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.256109994 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.255609382 seconds)
  done (took 23.939901634 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.254067131 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.253549027 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.253124675 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.252694243 seconds)
  done (took 11.184169984 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.251405552 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.021594138 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.251357422 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.264144484 seconds)
  done (took 22.958446002 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.44305901 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.256400733 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.024591287 seconds)
  done (took 10.893802568 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.87760689 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.696838406 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.864946731 seconds)
  done (took 10.609824824 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.43225901 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.23788855 seconds)
  done (took 8.839766493 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.394996109 seconds)
  done (took 4.565472418 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.087182709 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.565669141 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.739259417 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.790658787 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.856662706 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.482817412 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.592675914 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.540719595 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.670337616 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.712733463 seconds)
  done (took 29.209983046 seconds)
done (took 165.748177597 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.682176326 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.288094447 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.470727855 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.637706625 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.500149482 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.469390299 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.536197681 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.628402567 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.319204581 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.298554475 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.637770017 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.498770969 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.49083326 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.284768321 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.497425867 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.285122461 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.496850987 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.704159752 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.321112756 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.564524333 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.552789042 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.282843899 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.477434229 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.305175898 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.497956973 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.418394177 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.875448871 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.28510446 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.472103662 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.892489555 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.420582687 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.70609631 seconds)
  done (took 181.971596799 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.256349417 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.256226143 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.258778596 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.257209453 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.595363821 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.256546734 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.258814345 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.256524555 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.577587877 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.560012038 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.257433534 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.574886884 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.259246693 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.257331982 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.259892016 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.257155216 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.697489938 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.263560688 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.257379879 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.257942422 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.259809267 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.449924774 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.257697937 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.493262087 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.673214013 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.258951593 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.258691017 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.257998351 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.25905693 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.265054768 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.257791596 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.258973791 seconds)
  done (took 221.00191669 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.258409952 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.260084735 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.257448462 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.259201214 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.260133882 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.262115253 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.261368684 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.258788864 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.171459683 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.161170748 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.26026844 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.26686448 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.262567793 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.259359255 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.264809173 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.260057675 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.258895589 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.260717831 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.260584664 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.263391543 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.261170603 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.008489629 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.260164308 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.048654231 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.260555873 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.262927824 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.259809267 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.260469596 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.259668346 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.26087489 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.260312097 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.261112594 seconds)
  done (took 233.869784121 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.499961481 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.260823918 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.262003926 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.276736259 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.261326114 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.260970035 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.269204025 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.507099657 seconds)
  done (took 22.776009976 seconds)
done (took 661.809806962 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.633999489 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.007656658 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.398422282 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.286450337 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.539087663 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.336835913 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.280060745 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.351796299 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.934773397 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.362690917 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.675713841 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.28973258 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.974869952 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.314843045 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.396196694 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.350042713 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.629420877 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.890303593 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.422938959 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.961429867 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.49109486 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.238298916 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.371585354 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.978990856 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.690418353 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.253628227 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.337418004 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.633774524 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.28779667 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.522696288 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.988475561 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.570974703 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.301190082 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.284284325 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.343849161 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.324705221 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.514418165 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.297956534 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.395858797 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.030556376 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.939412803 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.820257117 seconds)
  done (took 116.834546159 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.271632801 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.268839634 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.269233252 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.268698664 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.277277076 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.268810354 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.269191328 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.268760167 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.268068002 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.269617284 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.269003444 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.27728972 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.269262804 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.27792897 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.268956878 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.269874122 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.269640859 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.277792053 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.268826436 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.270053243 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.269983577 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.270163379 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.267642708 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.270057541 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.270062556 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.269485871 seconds)
  done (took 61.228591823 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.265126778 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.419141479 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.559550732 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.302859311 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.267609584 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.269837519 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.295811681 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.274185744 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.268819296 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.268708681 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.362027191 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.271566022 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.279629477 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.556163946 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.301418796 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.266019439 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.266346424 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.267965473 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.425891306 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.284369864 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.298358773 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.274834184 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.297292025 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.283888141 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.269894125 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.26889679 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.271598345 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.726406062 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.280799144 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.364913852 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.313640564 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.302944157 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.654411938 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.568788548 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.340945045 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.276644371 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.268306503 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.411159026 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.281212367 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.269020285 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.297415194 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.27783996 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.561623292 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.793017044 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.285236728 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.26826695 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.721986861 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.423641529 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.318536118 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.28648506 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.568381866 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.304722886 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.269000991 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.270443382 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.306804994 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.284421274 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.270029089 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.54851145 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.286729385 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.297767059 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.276782348 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.271989295 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.436234785 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.280273908 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.425323644 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.280159322 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.276383383 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.271488977 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.56437964 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.305238706 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.78020716 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.286255235 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.269626592 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.36632482 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.431590482 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.748842675 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.286139134 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.436702476 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.673895419 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.309516323 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.282839661 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.710723808 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.31054722 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.279801067 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.268180616 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.268799902 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.268403243 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.31311096 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.296096566 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.700819503 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.786154616 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.567391207 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.310704839 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.281821365 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.270281891 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.54761765 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.280543951 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.269204317 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.556471352 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.817061166 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.285949026 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.276142519 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.762877123 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.2864645 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.298274157 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.281114397 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.573506876 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.305907935 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.315045135 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.269921173 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.276934369 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.273477161 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.29981582 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.280783161 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.270138323 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.755325012 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.426385062 seconds)
  done (took 279.925427671 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.274450852 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.269583189 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.269787809 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.270443509 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.269643493 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.27017815 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.268942311 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.269220173 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.27082922 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.269378948 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.269979009 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.269766409 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.272809013 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.273949209 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.870860763 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.276506335 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.766624592 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.273811387 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.274902867 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.276866142 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.904427654 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.282757246 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.274559122 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.278270383 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.275967025 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.276540628 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.282439963 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.321399951 seconds)
  done (took 179.618586879 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.279611143 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.349736968 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.292989146 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.325110075 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.290891139 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.277032873 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.299065047 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.298009333 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.282762789 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.277643082 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.276655442 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.30547783 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.285849493 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.436644123 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.318464157 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.30750554 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.356095836 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.286784932 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.277857072 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.277701268 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.325601407 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.292587939 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.305980631 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.33500752 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.293935637 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.32696743 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.293430017 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.289640104 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.277951055 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.391731477 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.30114091 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.306340971 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.322270705 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.297978647 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.375973796 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.377479043 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.36403487 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.309206237 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.282949451 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.278684921 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.284225887 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.28105275 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.327565637 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.294406187 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.280840306 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.376201316 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.302778973 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.279976961 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.299444586 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.285287755 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.291689591 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.296920393 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.313620754 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.391670318 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.33258178 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.306499006 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.302651346 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.299190479 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.283257121 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.355123266 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.288639725 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.373439296 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.305275871 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.281972891 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.28222576 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.284404051 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.328955595 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.317189208 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.360067935 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.289357458 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.354331487 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.338014604 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.295501842 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.281315068 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.28119948 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.330367193 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.369974185 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.338544591 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.344610302 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.319644174 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.291331831 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.281112881 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.282313415 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.309300604 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.28923589 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.373725002 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.379281054 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.289911778 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.291355838 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.282287064 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.281429873 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.306326368 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.354093702 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.324937052 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.366808611 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.318427124 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.318348045 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.295503461 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.293649948 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.287766141 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.31331435 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.312296953 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.29421918 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.617775143 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.320905414 seconds)
  done (took 245.273482438 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.632410794 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.334038007 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.351098634 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.56993587 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.659868371 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.392648628 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.325331005 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.352989015 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.345495545 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.452275575 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.393798488 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.391865736 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.32198437 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.30718632 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.334310281 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.343911329 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.360324185 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.631283513 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.431313333 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.10230374 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.331274445 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.618924409 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.634249968 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.669352872 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.373478418 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.718094698 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.947156347 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.422405897 seconds)
  done (took 73.965730541 seconds)
done (took 959.026694382 seconds)
SAVING RESULT...
DONE!
