cset: moving following pidspec: 763010
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.285899962 seconds)
loading group "shootout"... done (took 0.892300647 seconds)
loading group "string"... done (took 0.221938167 seconds)
loading group "linalg"... done (took 3.18349916 seconds)
loading group "parallel"... done (took 0.021778783 seconds)
loading group "find"... done (took 1.216973509 seconds)
loading group "tuple"... done (took 0.717392761 seconds)
loading group "union"... done (took 3.168185963 seconds)
loading group "dates"... done (took 0.156316102 seconds)
loading group "micro"... done (took 0.057818118 seconds)
loading group "simd"... done (took 0.368236667 seconds)
loading group "io"... done (took 1.423426281 seconds)
loading group "random"... done (took 2.324544193 seconds)
loading group "problem"... done (took 1.1518893 seconds)
loading group "array"... done (took 4.473666909 seconds)
loading group "misc"... done (took 1.115453238 seconds)
loading group "scalar"... done (took 3.477594444 seconds)
loading group "sort"... done (took 0.306957366 seconds)
loading group "sparse"... done (took 3.561565646 seconds)
loading group "collection"... done (took 6.043408281 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.546952465 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.07519459 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.25375116 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.073179344 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.279779828 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.084323129 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.087634143 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.073868025 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.152994012 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.163031751 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.214533475 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.388511007 seconds)
done (took 5.110118519 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.316762245 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.034003961 seconds)
    (2/2) benchmarking "String"...
    done (took 0.125810652 seconds)
  done (took 0.745889288 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.139187128 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015979929 seconds)
    (3/3) benchmarking "different"...
    done (took 0.023048725 seconds)
  done (took 0.754831483 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020783199 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.099662451 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021751323 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022457436 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.022338506 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021790952 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021641333 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021558121 seconds)
  done (took 0.808593244 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029613791 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023223428 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021258474 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.02258361 seconds)
  done (took 0.677452888 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023003457 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.094382917 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.027545324 seconds)
    (4/4) benchmarking "different"...
    done (took 0.02746773 seconds)
  done (took 0.745156342 seconds)
done (took 4.659546202 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.198387615 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.784266382 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.978933205 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.180535725 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.357652387 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.29641849 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.076974567 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.240155004 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.152747381 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.032854431 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.184225901 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039772335 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.506216653 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.475229173 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.02804783 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.144435456 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.577241982 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039148694 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070737374 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.237194063 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.039311462 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039320782 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043664941 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.027781214 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.152623441 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.141684768 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.584995321 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.067786264 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.028560088 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.048588943 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.029061708 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.032524529 seconds)
  done (took 9.453677373 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.164574647 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.145800993 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023917917 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.059846342 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.051182591 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.025199923 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.03050963 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.023236354 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.043398573 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.088924559 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.046254977 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.157508537 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.021331419 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.024744739 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.137806519 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.116460869 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.038101352 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.037492765 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022700972 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036528208 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.049442076 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.034989563 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.033020217 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032600697 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.068393378 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.089882983 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.04472906 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.067651507 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022874876 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.035252456 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.054894668 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.063854248 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022973353 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.021697117 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.065228318 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.043711881 seconds)
  done (took 2.691746627 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.718809808 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.051630398 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.14356069 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.130326905 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067921614 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.054087288 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.182058108 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.078856681 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.055650874 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024154242 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.207857244 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.651556714 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.169647094 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.098171535 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028415579 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.181002189 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.910014748 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.969864412 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023773533 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0240883 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.134304046 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026517504 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.173814881 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.024961152 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.135757358 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.714826128 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.142561247 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024910864 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.05389577 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.143183887 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.021146329 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.096809921 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.047045546 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.025282883 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.556162601 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022061773 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.02010326 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.04193705 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.051428972 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022386729 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023311914 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.03123432 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021399849 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071950108 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.033676867 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.512605782 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.025221625 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.701405119 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.810759318 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.029804879 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.026756278 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.059166443 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.020012059 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023547666 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.538630413 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.098784079 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.022967555 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.290953321 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.025662048 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024388406 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.02454361 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.055235442 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023248399 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024553665 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026344615 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.040909751 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.033343332 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033684034 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.042783362 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021993085 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022949172 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.021601005 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.399396135 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029965836 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025500195 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020842689 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.026706208 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022983663 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022446185 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.063219106 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.048690636 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.046262885 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026401881 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023417234 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022581876 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.541826024 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.953485246 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.025749131 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024794866 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.510619613 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.021043322 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023104321 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024734105 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.045204424 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023496206 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.020543077 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.062761069 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025642503 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.131658668 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.347480424 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.025090347 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.020831179 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.384919508 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.025090416 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05928968 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07977212 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023171247 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.069499937 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.023835506 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020790399 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026932954 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.020445355 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024881246 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.02164237 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.022540979 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.02154754 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.023585871 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024466862 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023491938 seconds)
  done (took 23.580362712 seconds)
done (took 38.022161047 seconds)
(4/20) benchmarking "parallel"...
done (took 0.800536391 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.214147642 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.050349289 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.020020169 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.162102952 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.045809808 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.134777503 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.175616171 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.127537195 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.046788853 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.046524447 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.046525433 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.180463067 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.191616871 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.047755454 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.116938957 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.190530736 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.048115611 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.020084429 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.046922817 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.047508841 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.047565734 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.020194781 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.047300592 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.04901706 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.117119116 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.04739036 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019933178 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.11724251 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.048211931 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.118446286 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.04950496 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.049380065 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.050173576 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.119568782 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.050545441 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.119262532 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.020285505 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050562044 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.051015056 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.052113665 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.051726836 seconds)
  done (took 3.953716979 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.047305639 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.03894152 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.041141052 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018453094 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028571669 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039114975 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018410201 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.038548555 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.044280585 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039047403 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039020683 seconds)
  done (took 1.123223781 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.042117117 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.039742608 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.040994279 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.018400747 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030256219 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039584788 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.018392833 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.039224691 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.042074975 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.039731746 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.03978511 seconds)
  done (took 1.062448878 seconds)
done (took 6.7928368 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.152752533 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.125537935 seconds)
  done (took 0.939721259 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.589678157 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.206385113 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.132248218 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.255345271 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.123756072 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.157034511 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.790172118 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.159442072 seconds)
  done (took 7.132151976 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.0763552 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.143012728 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.02483537 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.023310848 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023557015 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.023474392 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.025006338 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023729937 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022973636 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.025505888 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.025111339 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.023238266 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023955811 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.025174645 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.023256196 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.023445628 seconds)
  done (took 1.361857629 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028870396 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.026170912 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.027183627 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017463523 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027552824 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026320848 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.027369353 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028673142 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026792689 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.027008269 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.02501057 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.027964335 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026676416 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025487788 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.027946951 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.017438212 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.028321039 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.027582009 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.029499521 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027652016 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026723239 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024981887 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028485752 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.026352261 seconds)
  done (took 1.320733231 seconds)
done (took 11.427136551 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.144157768 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.030225028 seconds)
  done (took 0.846911407 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.128390565 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.127497739 seconds)
  done (took 0.942978339 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.029198544 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.016270469 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.032966341 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.024830395 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.016610153 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.016322388 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031921283 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016535961 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.016340336 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016551703 seconds)
  done (took 0.902375351 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019743015 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.023436944 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021388436 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.019716816 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.021377625 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.017429743 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.019782151 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017642944 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.02323719 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016697577 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020486647 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.038856903 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019971784 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.03925508 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019889607 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020476952 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021871843 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019669934 seconds)
  done (took 1.085513728 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018103252 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.017202307 seconds)
  done (took 0.720288599 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.02096526 seconds)
    (2/7) benchmarking "second"...
    done (took 0.017419438 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019035905 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018923809 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.017002283 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.016374864 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016939154 seconds)
  done (took 0.80605551 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.397744999 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.090878497 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.32306968 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.02517314 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.038456039 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.237759002 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.020157988 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.024415129 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.024191583 seconds)
  done (took 1.86377034 seconds)
done (took 7.859406059 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.045416667 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.145535121 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.150340218 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.450455805 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.03467476 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022840014 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.057478103 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.229843088 seconds)
done (took 1.831838751 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.49144209 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.2930106 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.191396926 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.024017239 seconds)
  done (took 2.198366194 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.31442689 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.142195756 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.031194667 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.023260568 seconds)
  done (took 1.213082227 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022376471 seconds)
    (2/2) benchmarking "read"...
    done (took 0.027788168 seconds)
  done (took 0.748081261 seconds)
done (took 5.358661125 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030522883 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.017093087 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.023562718 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.01875753 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.018431765 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017891086 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017841967 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.018822841 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.0167417 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.0187902 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018838607 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018794713 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018448222 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01843306 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017934246 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018783365 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.017038391 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.019584032 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019135543 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018704247 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.01688145 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0188628 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017999077 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.018488121 seconds)
  done (took 1.14135053 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.03850486 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.022776942 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.022716853 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.022722311 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.023890267 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.022705278 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.022649944 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.022615523 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.022931975 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.021611657 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023876014 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.023922833 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.021466847 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.023944354 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021633926 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.023975022 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.022880727 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.022670003 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021616456 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.024009918 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.022759021 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.022698947 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.023929065 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.022803372 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.02389388 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.023858898 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.021713271 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.02280247 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.022815022 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.023851838 seconds)
  done (took 1.403459991 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023489122 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015407947 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.01562815 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.025835768 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015313959 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.015478412 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015962888 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015152458 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015537048 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.016371291 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015926002 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.015287469 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.016117837 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.015241594 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015292265 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015933144 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020601004 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.036546266 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015641496 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015378581 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020134813 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.015602796 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015354713 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.015370735 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015916028 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015417376 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015210718 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015752906 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015416651 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.01594078 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.015321347 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020089096 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.021686368 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.015866181 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.025822121 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.0206632 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.015865969 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019919687 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.016285364 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015206629 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.01521008 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015214802 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.015357952 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015358972 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025975312 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015572467 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016500019 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015841176 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015529214 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.01522113 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015361725 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016876094 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.021096346 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016572104 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015243084 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016489114 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015234901 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.01603293 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.015402529 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015242932 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.01528965 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019454136 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016656643 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.016004106 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.037386726 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016579865 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.026153701 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015488063 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015843766 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.019638004 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.01588301 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.03537979 seconds)
  done (took 1.982937052 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.028189849 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026025097 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.034980413 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.025517252 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018908026 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016303213 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019507926 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016302696 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025721856 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019923871 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016290803 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019432821 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025774227 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019888307 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.01745036 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.025669393 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019895108 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019104047 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.016311309 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.01984599 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017357378 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019532685 seconds)
  done (took 1.174627237 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.107863883 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.023015184 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.069576468 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.022827334 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.021356458 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.022701896 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023010899 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.022858388 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.023068197 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024217678 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024144335 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02310893 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.021370482 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024089635 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024157585 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02397919 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023155921 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023972397 seconds)
  done (took 1.253039074 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.034861124 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.021531818 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.049231856 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.021332467 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.021427695 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.021046494 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02542658 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.025114542 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020984861 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.021488192 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.025080367 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021049483 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.021097511 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02161965 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021189901 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.021547374 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.021126992 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02154765 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025169716 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.025663689 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.02565606 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025077975 seconds)
  done (took 1.240853254 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037342411 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021368899 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.040428012 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.023680389 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01578778 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015802553 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.023683596 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.022376281 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.023619852 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.021383971 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022558902 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015918254 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.024653006 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.022507363 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.0247667 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022548321 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021480499 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.022563388 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021421913 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015961412 seconds)
  done (took 1.160823063 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.131148668 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018028135 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017845191 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022356185 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017720347 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.017781751 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022478183 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017747366 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017803671 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.042363066 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017822019 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017793934 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.022414397 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020616206 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017730732 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022376755 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022342587 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022403217 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017790178 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017775828 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.042380312 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017780577 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022415603 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017744003 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017720969 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017694384 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018349005 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020632782 seconds)
  done (took 1.399957796 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.039903924 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.015196813 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015395008 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019362992 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.01935428 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.025399165 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019424233 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019312034 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01531344 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015463503 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017448958 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.015079555 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015115765 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.024846541 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.015082558 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017436069 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024840721 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019384137 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.025539847 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.027481621 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017439507 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024676975 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.01743968 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015467043 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02560359 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017425395 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019442238 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020230537 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.01737211 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.015470025 seconds)
  done (took 1.307493421 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030156574 seconds)
    (2/2) benchmarking "in"...
    done (took 0.026939462 seconds)
  done (took 0.760634268 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018793015 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.03373409 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.015195638 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.028854636 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024887359 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019604317 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024314988 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024762963 seconds)
  done (took 0.886481288 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.126294526 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.151610527 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.018506248 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.018120883 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.125234671 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.085244767 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.134963758 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028948463 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031036591 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020086466 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.017279063 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.134758365 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016818847 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.030481546 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018338913 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026640028 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024086333 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034864166 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.030316938 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015758127 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029592552 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017561578 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016725668 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017650666 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.01796237 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023724574 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032756356 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.029293939 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025103169 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.015174212 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035523135 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.016006348 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016652482 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025096456 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.124342896 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.016213869 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.053961135 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.016466197 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021654854 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.016277867 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.028337516 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.037299954 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.030540872 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.034203866 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.017372907 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.01786704 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015851738 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017507274 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020002466 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025207209 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.016094293 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023391292 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015741161 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.017454097 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026634931 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016194752 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020691367 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025236627 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029693031 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026485224 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.02850606 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031573449 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024881477 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024523107 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016696969 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.036137676 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017705174 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029466475 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031028068 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017242921 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029051351 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.01595696 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015256637 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.016127393 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.050211715 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017462264 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016912727 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.016158141 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.01631593 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017426644 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025607114 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020909749 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023475836 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019153658 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032079443 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.025327131 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015989447 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023368701 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.03464425 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.0202147 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.016117029 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.033297284 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020129249 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015927437 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.034319682 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.026671722 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017595632 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.0167665 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019977129 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029845662 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.017966496 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.015572414 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025009524 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.018091189 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.127437498 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021390036 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024705188 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.016330624 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.026789845 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022972851 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.018004542 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015557348 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021234856 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.017303249 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015529524 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025916976 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016516317 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031646711 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023526515 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.031294283 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031678763 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.027168167 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032764459 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.016395262 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015611028 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.035267163 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025939189 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.01776937 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.03499804 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.016407675 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.027109393 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016536702 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017998277 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025863886 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015888078 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018183279 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016704732 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.023165006 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.018258215 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018382347 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022727219 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.025163596 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.029172804 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.017744043 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025521703 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.01698731 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032919381 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026412876 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021629784 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02010452 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017380673 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.02901348 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023665749 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025921484 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016538909 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017414536 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016713012 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027841971 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026258692 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.018406812 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026252089 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021636156 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.01744788 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016678088 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017693487 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020604627 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020169417 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.017338502 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024488068 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025993812 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.031673448 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.024668456 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025944958 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.016077214 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016540411 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018410316 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016531906 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021539283 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025961733 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032514817 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.028676814 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.038559825 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016836391 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.02636111 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018387444 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.034082233 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.03023233 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.01772132 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021645768 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015844221 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018546186 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.026184645 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028293626 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.031291229 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032050858 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.02182582 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021702884 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016647953 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.032193619 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017182549 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025219921 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.026157858 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023236931 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016651783 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.01859969 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025955492 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021716184 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.01779568 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032851497 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.024783341 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016674848 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031409921 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017082273 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027637296 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016676893 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020759161 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.022279019 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018825198 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026486123 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.032427093 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015888068 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.017087121 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.03275056 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018639074 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018568884 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024843447 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.032281433 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021717567 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024667103 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.02746793 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027414823 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021618141 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.027121641 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017859626 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.026069369 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020321001 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028774287 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016835418 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.035691478 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.01587681 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.03228933 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.017524273 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.028100526 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.017178781 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026229432 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.017642148 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.03459498 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.018443261 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017688908 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.029226906 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.016898839 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.026672943 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.016785186 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.022138187 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023863698 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.026105925 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018711535 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026285733 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.018542393 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.025789524 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.171394167 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025095027 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025232148 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021034747 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015817448 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024318381 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026703929 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.02406835 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017236854 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.01720638 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.016227951 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.02516401 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.017207653 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.016720983 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024025364 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.021051821 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.022128493 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017178859 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.017299587 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.017114601 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024280991 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025184137 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033807933 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024353779 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.023301213 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.025000328 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.01567635 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.031350451 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015686545 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.023205015 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.015056069 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021899868 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024815449 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015942119 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034661548 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.017098485 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.023574529 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027515436 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024175082 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019888332 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.033674132 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.018501788 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.024072652 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023576345 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020722725 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022796826 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017069776 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.02410629 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.025044334 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.026014922 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.016367145 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.023169973 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024529581 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017107615 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.023468398 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.01695679 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.024231118 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.017231324 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.01509835 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020770269 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026777861 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020949285 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021104639 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015873469 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014893032 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015836108 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022215427 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020656817 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024156041 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030917868 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.015011763 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.016322885 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015569015 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019772178 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033563905 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025040009 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023494749 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020708744 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015098725 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.01677034 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017000316 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015669495 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.018457175 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.015184909 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015552868 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02606588 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017176121 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020605842 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015921086 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.01676929 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025664991 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.01974117 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.016097056 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022929608 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015608864 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021343194 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015304795 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.017242209 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020796839 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015536163 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019933092 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026194882 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.032410119 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022918299 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024764869 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016760037 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023793685 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031449884 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024061577 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016909858 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.025443955 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015647331 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034922624 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.025366058 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024498667 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025691011 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016879062 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.033176677 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.021013177 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025993848 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031450803 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01706202 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.023746627 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015962666 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031861122 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.021037001 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.01593388 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024648257 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023856073 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.022370869 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.027725655 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016839292 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.024666504 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020839688 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020300994 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017928772 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018121014 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.025212112 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.032939685 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.017319746 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.022459639 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.024466624 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024765553 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021419418 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028817821 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.02470407 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017527777 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.01819605 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020357164 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.017220817 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028704126 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016813645 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021393887 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.022664136 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.017054192 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.024098875 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033767831 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.02592495 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02602084 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.016377123 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015775727 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034738651 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020488552 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.01991855 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.024478766 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.026258813 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028705381 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025748923 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033631836 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016899667 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022593361 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028640959 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.017313194 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016255915 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020430714 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.018008158 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025502979 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026191467 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023809275 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018311567 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023572871 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.030037889 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017838148 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021400188 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022940978 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017429321 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.027099358 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024540772 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.025135347 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.018100506 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016423722 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020273464 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025306481 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023979001 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.025516067 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017545723 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.025383681 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.031144711 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023996372 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020019583 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016352221 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019910819 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025553194 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.023102475 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016417216 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021541817 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.020401245 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.025506243 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025917522 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021854154 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.017524061 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.034578231 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.02535494 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025626608 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.018319067 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.018403903 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016866539 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016416015 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027768496 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016426076 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.018181782 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021574961 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018502697 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.034767354 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024577884 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032695503 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017466417 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021420168 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.01642388 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026159291 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021526676 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016573496 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.027101882 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015991012 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032229751 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028708932 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.02428187 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016527564 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.022103222 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025377174 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031941414 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026298047 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025569104 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020145713 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026233532 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.018471646 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027880837 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.016648428 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015802596 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026845809 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025213023 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.029338569 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016634527 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026908336 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.018650971 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024885361 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.025464243 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.018424503 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018490279 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.018375478 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026221136 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.02169094 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.026029457 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021838429 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.034104223 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017673405 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.028027832 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025705882 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.027884581 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.030647372 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.029330217 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.025484976 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.017127847 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.024071924 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.025413576 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017857109 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021870784 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.02029426 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039855547 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.018519233 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.018461716 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031822458 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.025775194 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.016856686 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.025269597 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.02187189 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.026966025 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.017664633 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.027138299 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.022749974 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.017783035 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.021702227 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.021767755 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.015849105 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.016575519 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.016966993 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026520586 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.021910789 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.016770194 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.187321187 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.017290321 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.024599862 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026672844 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.023006001 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.017135561 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.015173554 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.01660487 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.029473836 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031439513 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.020275435 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024466594 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.017317833 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.025006123 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.015147249 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.024496676 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.023738286 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024331809 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.015699938 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015996604 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.030827478 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031229992 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.0209131 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.032891893 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.024794167 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.017202964 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.037557825 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024758817 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016619727 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.026405459 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017628736 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.015463212 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.015210143 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.017138838 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.027070101 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015658479 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017664055 seconds)
  done (took 15.350634119 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.062032989 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017148902 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.015642365 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.015718778 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022925802 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016956408 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015702026 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016930617 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.017041663 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017999153 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015729401 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015831036 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.021301543 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.031093842 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.023767447 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019466493 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015808038 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017049206 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015804343 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017081862 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021851023 seconds)
  done (took 1.184035533 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020476432 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.021102596 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020070613 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020092886 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019248129 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016088832 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.019457116 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015970191 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.01989432 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016341272 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019897393 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015998504 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.016267847 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.01628218 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016229388 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.017389518 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019861666 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019094672 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015975175 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019458812 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017340633 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.01947944 seconds)
  done (took 1.140791451 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018644177 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.016381957 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.024385823 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015344417 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.015224555 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.018047836 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.01532515 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.020136732 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.020107572 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020152235 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.024288576 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.016113135 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.015391111 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.021427066 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.01526164 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.016055756 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.062774945 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.016151627 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.016225917 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015459649 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017670105 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.024471689 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.015483234 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015671905 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020081795 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.018124026 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.015395892 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017688352 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015976318 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.020090766 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.016138883 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.01531845 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.024231592 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.023504718 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020148931 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.020121219 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016654903 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016161482 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015422384 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.015430073 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023697002 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016679694 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015695359 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.016408996 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.024200116 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015543708 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.015278246 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024288461 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.015307611 seconds)
  done (took 1.673562527 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028840071 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.069609437 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.023518797 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.051091246 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.028751599 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020902915 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.022465683 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053867101 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016720677 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.01715074 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.029532834 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.030299643 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018184426 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019383926 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.022475317 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018076452 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018670534 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017453934 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.020382489 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017699523 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020373975 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.023673357 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.028467433 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.029657051 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018974369 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017433152 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017696835 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019224195 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.029408303 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020818175 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019389604 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019853457 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.029037354 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.02477586 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018450278 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018907613 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.030579185 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.018628974 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018285688 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016751059 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017835014 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019211157 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.023841054 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.029774018 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018277192 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.024725332 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018150122 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016261992 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.029582404 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.018050455 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021264422 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.030575715 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019102375 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.01841724 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019469108 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.029310898 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018285612 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017053861 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018377336 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.029564502 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016600263 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018926924 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.03040425 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.134487974 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.021919096 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.030947344 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.025015013 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019485633 seconds)
  done (took 2.586860282 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.027897221 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.022798508 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.027107099 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02721665 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022770969 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.022965351 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.022813597 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.022830369 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.022683417 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.025541514 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022826304 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.138404561 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.020010685 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.023713316 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.022992384 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.022920085 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.022946074 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022947644 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.022963499 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022809423 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.022894875 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.02738043 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.022868411 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.027410674 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.056162881 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.019787886 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.022748508 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.02283171 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.027562125 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.022827051 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.029842482 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.022887449 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.022875712 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.027488869 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.029900966 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.022744859 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.016077744 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022681739 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.0229149 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.023020085 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.01991936 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.028014989 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.022999352 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.019892624 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.023178115 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.022972015 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.027875905 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.030263094 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.02395511 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.026045909 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.023236935 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.028252478 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02432342 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.024654083 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030213874 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.063574719 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.0301336 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030243031 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024812553 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.030032048 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030210927 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.0372835 seconds)
  done (took 2.479345968 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030973661 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021403676 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.026892018 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015473019 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015365628 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.021255842 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015350125 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.015384421 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.02131823 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.021251166 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022788465 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021407238 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023220781 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022681317 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.021251529 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023175078 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02129326 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021296366 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021285731 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021338435 seconds)
  done (took 1.190849805 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019191719 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020783694 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016113109 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020008545 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016146062 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.019595996 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.016114346 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016091788 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016106109 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016196304 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020690314 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020638935 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016116735 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020183113 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019621047 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.019665118 seconds)
  done (took 1.039884005 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020596368 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.026473963 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.126507918 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016813803 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018661996 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016172223 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016987111 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.0158913 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018188425 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.030038471 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016938462 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.019027185 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016992963 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015700232 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.016253175 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018976818 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.018121909 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.01701317 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016958383 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.127362475 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.025404323 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017538927 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019079479 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.01765821 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018687728 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.025074411 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018263262 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018652209 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.016925755 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019024473 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018625688 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027982382 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018604169 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017468772 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015680222 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016614607 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016929864 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.019019189 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.019007725 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016981785 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015889624 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018636207 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016989583 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.017233362 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018109859 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018884625 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.018105588 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.027199133 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016763893 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018584827 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016945768 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018003525 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.017316059 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.028151438 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.01884592 seconds)
  done (took 2.009368343 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.036023633 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022101682 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015280184 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015205344 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021595676 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.023003544 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.021829902 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.022445579 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022986242 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015289093 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023122627 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.021387973 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023118285 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.02211177 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023179582 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022034912 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015313734 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.022887633 seconds)
  done (took 1.145069346 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024678011 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021059224 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021223758 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.017311531 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.017269603 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021288567 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015679946 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016893988 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01693752 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.017305628 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017328503 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016881057 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016901716 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016875486 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020920797 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017303336 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016966544 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015867929 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017296175 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015689256 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.02134375 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01580233 seconds)
  done (took 1.146469668 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.187865584 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.147345836 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038888991 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.034071583 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.02573499 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.051992218 seconds)
  done (took 1.242126986 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.054266632 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025523466 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.021985805 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.047465286 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021512196 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020130027 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020143183 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020482959 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023557281 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029305337 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020538907 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023255436 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023571186 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025281489 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022127449 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021537431 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020443268 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020473748 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022216135 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.032029392 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02062017 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023080252 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020545895 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020258804 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020473915 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02523791 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023612763 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029404828 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020353196 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02318406 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021614634 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020529463 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023577408 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029402364 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022021812 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023584779 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02049403 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.032069453 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02154388 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025154978 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.021702892 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022174385 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023649306 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023158719 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023086974 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020626439 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023277009 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020688929 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020848787 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034928471 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021946223 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025228482 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022400373 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023503538 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023824637 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034931515 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029757263 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026211602 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023746497 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.031548873 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027421211 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023260614 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027261579 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031571786 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024026631 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027462887 seconds)
  done (took 2.397881838 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031155643 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.049905569 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020337043 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029200605 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.024829469 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020473157 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020418383 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020380166 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020410486 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022644776 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06075972 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02069671 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025122607 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025191236 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020581761 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020454055 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02040721 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024912221 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022554559 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.03443124 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020437559 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025063682 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024980674 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025127777 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02942713 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021696159 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020472998 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020395954 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02040349 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020383006 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023233757 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020609224 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02501225 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.022514025 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024998954 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02061855 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020458363 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02335186 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020427068 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02166999 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025239743 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031514885 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020469531 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020472235 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029618716 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020650021 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020610121 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022728088 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020673908 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022688058 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029672832 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02969495 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029542456 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025622757 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02090027 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020873154 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020619649 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.020733944 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021982137 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023075407 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027123659 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021939032 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.037551662 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02203433 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021956938 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027423619 seconds)
  done (took 2.389869589 seconds)
done (took 51.380706327 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.214162562 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.169050239 seconds)
  done (took 1.121613794 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.137266029 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.135078481 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.164152799 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.023893563 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081464253 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174142683 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125171096 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026470038 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.02412863 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025614032 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023746333 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025244981 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025478654 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023685689 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.085996485 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026442937 seconds)
  done (took 1.886430363 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073590621 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.274037009 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.067982758 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.023126131 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.10390915 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.029196881 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024095867 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028619063 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.029058098 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.023286981 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.070471913 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.044903815 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.029024038 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.029130448 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024123081 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027582424 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028642914 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.029060702 seconds)
  done (took 1.721802443 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.094485663 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033390707 seconds)
  done (took 0.884906291 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.138776988 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.063757618 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.105824297 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.314056979 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.098934125 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.294359502 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.102788834 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.099722226 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.068936421 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.09663088 seconds)
  done (took 2.136549309 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.060196868 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.055608226 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.280572458 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054880946 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034372467 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029307835 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.030331139 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.030063251 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.030613797 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.02946924 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.071891573 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.028042534 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024515199 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.067663482 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.049023645 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.059027085 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.02383082 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029553734 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.033135268 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.024822761 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.029131581 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.030187272 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.133762295 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.029755809 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.050559127 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027184055 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.028890313 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.029564898 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.029421977 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030368693 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.030465618 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.053719114 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.029549994 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037291048 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028237814 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.050107526 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024555332 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.04912685 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027214884 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024439853 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027044412 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.030522097 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.025122038 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030163383 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.030624553 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.02958098 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.030090883 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023701468 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.030677582 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027467808 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024621133 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028294592 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028609409 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.02911218 seconds)
  done (took 2.987035533 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.076916808 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.06690891 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024319622 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.074233476 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065683408 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024542239 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.07858991 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060307146 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077353192 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023916895 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023557335 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023618595 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.03138566 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.035697222 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076810664 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.069385922 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025642006 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024292632 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.068759641 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.068659062 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023016184 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.079405401 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070841642 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.067466405 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022660338 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024159312 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022872054 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023591355 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030844819 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031041467 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023340409 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033234572 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035092008 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030684203 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022681441 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022948359 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022808049 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.0315404 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032149494 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032102347 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.030072178 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022624607 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022962983 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023563831 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02406006 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022535185 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032118067 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030984904 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.032016161 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023493476 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023557233 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022846319 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023798398 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031001309 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.031051175 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.031719721 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033615549 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023954661 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023801632 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024801959 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033888611 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.031555859 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031336379 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024304644 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.03178831 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023187138 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032775222 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036579273 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023144708 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023789758 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023378518 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023349154 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023733243 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029902172 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.029925007 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023782899 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023968698 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023389261 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.03137606 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030102345 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023097535 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031269161 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022756189 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023381943 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023769866 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024001578 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.032228569 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.031530801 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024036554 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.024123301 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023835153 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024229189 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.024252033 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.033102583 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032519326 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.032422597 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.033649474 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02431717 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.034338123 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032763175 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024490917 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.031774058 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023992935 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024339529 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024262408 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031673175 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031310251 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033013565 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02393639 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023523378 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032658034 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035458304 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023741281 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.031373766 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033340824 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.031892924 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.02336527 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034975895 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023953283 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034104002 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024185324 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033543013 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024265234 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032381419 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024077362 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023279536 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024042758 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.034808186 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02483061 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023986486 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024423347 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023939187 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.032417293 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.035634878 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024597187 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.032659393 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.032471979 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024582439 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033805262 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024172469 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033863038 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024205751 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024558788 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023350203 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036230191 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023956863 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024447781 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02406942 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.03416682 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023955306 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03420468 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031468394 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023486154 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034631267 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.0340364 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.031491755 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.034602547 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024807787 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024225393 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023811364 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024142022 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033724269 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035357967 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024977249 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02413369 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.031145879 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.03425777 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023581628 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.031767764 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031652235 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032098831 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024448972 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024349706 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.035140685 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036402504 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.032232643 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.034285018 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033257826 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.024075068 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.031780244 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034435976 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02404364 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.038694546 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024053359 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.035512129 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.034812638 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031278816 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034489079 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.035784561 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.033920656 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.034255587 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.179417511 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023021663 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023207685 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.029829742 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02319107 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023497365 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.029440586 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023854954 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023904926 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.036005824 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023537497 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.031727178 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022831714 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.030308231 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022715979 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023752917 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034656967 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.023158805 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023740662 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.029766442 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023297954 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.029251108 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.03207636 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.029341387 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023103543 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023631081 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032046022 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.031102162 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023094789 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022943626 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023567121 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.030958605 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030411211 seconds)
  done (took 7.82778264 seconds)
done (took 19.337225998 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.146375884 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.073942898 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.144967137 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.085133902 seconds)
  done (took 1.206972398 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.058282264 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.01982483 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.142495406 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.154036003 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.020027164 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.136287539 seconds)
  done (took 1.303474587 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.264108859 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.155793774 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.164745569 seconds)
  done (took 1.35914883 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.154131803 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.280990664 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.549262334 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.146508749 seconds)
  done (took 1.918820261 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.170108999 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.16550481 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.031649035 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.182793341 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.038788341 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016398803 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.108071636 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.017233241 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.05206018 seconds)
  done (took 1.61838613 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.095996465 seconds)
done (took 8.275684354 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.198854054 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.138674278 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.03419377 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028185174 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.124796447 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.131906763 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.143502782 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.030440344 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.134295338 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.314493478 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.182240912 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.049181232 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.154544119 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.042933399 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.261133314 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.031298913 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.029869243 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024831483 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.140694307 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.131771604 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.241553628 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.028624373 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.097119337 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.031089513 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.101065691 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.079768803 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.188973198 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.313079625 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.274404325 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.031347695 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.119230361 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042561652 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.115784537 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.123917922 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.134399381 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048912387 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.020291605 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.241917198 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.105328916 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.321143548 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.165603777 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027559388 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.141162546 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.027024255 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.020272277 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.146060073 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.033525389 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027358805 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043624517 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027450974 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.042481495 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028532134 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.132287086 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.024167682 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.093338307 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.141073015 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.185650131 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.103109509 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.026547544 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.039507933 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.030461057 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.159174407 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038781675 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026017846 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.03244069 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.020516283 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.137941733 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.040110053 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020813233 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.031452901 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.029394156 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.098251727 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.155529173 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.065971879 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.032257224 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.11938659 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.097826227 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.046744468 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.04958097 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029945236 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020068125 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.190791514 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025552287 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.038497858 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.027192054 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.053654091 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.020259284 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035844637 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.169263831 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.148929084 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.086921297 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021465475 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.237028234 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.02235267 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.046854155 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.021791102 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.021014064 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.187758051 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.020728168 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.020841402 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.031072118 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029615899 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.022508229 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.169737762 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.103029571 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.02890663 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.027718526 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.021334656 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.026668224 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021892948 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.021400705 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020747614 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.096187395 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.037623924 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.179123792 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.106955802 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.119654765 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.032049583 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.036750651 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.085158722 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.023930838 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.030518637 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027844607 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.136346582 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027051459 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.132766224 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.022107772 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.042700362 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.120499887 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.096887884 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.103131407 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.020311291 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.140482132 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.030161629 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019561369 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027466893 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.047202086 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.029617514 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.036942954 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.028123603 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.138299331 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030898944 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.025748757 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.119591798 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019348558 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.116598662 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.098447348 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.129519949 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025120472 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.03062825 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.092608035 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042537701 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.049714541 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.042174969 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.02403055 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.020083766 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019782429 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.032897631 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019157342 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019953837 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.032777492 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.02678418 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.035925664 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.241135273 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.029762936 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024168405 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.24993226 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.032193119 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.091533356 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.040150369 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020406276 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.101178271 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021900507 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.04026221 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.084152864 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020503777 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.097061159 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020811176 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.020330896 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.026375429 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.02196505 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.029894254 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.033935716 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020840649 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033428415 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027975082 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.020296236 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.101316979 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.022081184 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.18888095 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.09962341 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.095136332 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020493149 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.03891031 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020167467 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.132954098 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.020509184 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.069796635 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.111783122 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035094457 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.040473659 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.021622426 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.099100281 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034667964 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.025339012 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.099360996 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.1331203 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.092800531 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026729989 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.246786951 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029333159 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020694383 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.02621478 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.02919929 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020820734 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.100225841 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.025107527 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019759028 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020035209 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021923875 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019587253 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.04607436 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.019822797 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.028333601 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.02591786 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.023222054 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.02201026 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019459354 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.028535804 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.100557149 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.119743798 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.026315163 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039462144 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.033579202 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.031443001 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.067378449 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028344238 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.15926347 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019784444 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.030181554 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.041343409 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020003297 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024995666 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.025813896 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.037921845 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.023794979 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021649435 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029408116 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020632522 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020643806 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020356552 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020601957 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.029236288 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021781107 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019956452 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019875861 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.036323644 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.02524142 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.02526742 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.0313515 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.040250002 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.478783997 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.021838187 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022525051 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.032991011 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.025988546 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020756333 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.022081732 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.020407397 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.022287143 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020555443 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019951849 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048590607 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025395117 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.021231371 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.041562451 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.026465899 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.03059474 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.120517677 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.037318543 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.025258712 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019805844 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.261773598 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.094996302 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.041960067 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.040306613 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020866196 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.031661407 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.020820201 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.021269426 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.019895779 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.047203258 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.025608138 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020845408 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.019869702 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.020158637 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.068883492 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.028845914 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.02021834 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.028827905 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.020634817 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020494718 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.047507289 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.021205882 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.020478114 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038565569 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032960749 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.107198731 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.032701278 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.023868024 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.07191326 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.019975387 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.020541657 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020868659 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.119223341 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033963441 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.022190175 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020561694 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.028138851 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.030058003 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.074536206 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.026877681 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.024125721 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028408672 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.019937009 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020802281 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.04738422 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.049501751 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.021770141 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.024239775 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.020404592 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020787926 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.279125803 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.032912409 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.025687112 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.108178151 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.022209491 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.02906831 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.020983465 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.493247879 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.024736598 seconds)
  done (took 22.46769755 seconds)
done (took 23.256691233 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.153965312 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.033809182 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.040366362 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028669958 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.032067638 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.031907731 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.042334691 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.029636811 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.032787823 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.039700805 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.142851633 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.020092329 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027657659 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034260383 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.028516444 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.032677499 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031619172 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.032312684 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.020622889 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.032543915 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.031165039 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.031652626 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028875795 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.031893349 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.020605828 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.028502032 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.155996658 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.034968978 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.030255849 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029638599 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.027606983 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.04202706 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027621751 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027029146 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029350679 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.025417128 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.030159696 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.026478405 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.150449677 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.02579674 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020527281 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031992054 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.027281372 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027779484 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.0286788 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.03110646 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025374142 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.032729474 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.028234492 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.039608955 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.149473979 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028734809 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.030120212 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028298856 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025376774 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.029325144 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.029945709 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.030591635 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.025330121 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.039040291 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.028651675 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027962368 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019881997 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028528936 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.027089488 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027437884 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.019081426 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028573192 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019831901 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019759323 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.028139775 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.02831481 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026844105 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024888465 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.028073323 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019719131 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.027692788 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.038910806 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.0283647 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.029754252 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.020670503 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025827633 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.025159776 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.020437564 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028771077 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.030971076 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.028916275 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020330465 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.028082536 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.039236968 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026528307 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019777811 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.030901585 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028483769 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.028331961 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019875746 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.028276094 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.028304672 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027781205 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019807004 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.019088628 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028403739 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.025077397 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028548379 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.020293475 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.029909331 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.029168752 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.019389357 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028554554 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.027082267 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028868317 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.030690621 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.028420894 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.031130585 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.020305245 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.019059244 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029623258 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.020161391 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.028591141 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027893951 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.025239216 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027589601 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020356355 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.027666911 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02839 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.02585033 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.020203644 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.020316474 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.020177651 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.02859197 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026976623 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019130598 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019758003 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028578016 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028375758 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.027710259 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.028200328 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028506381 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.020352713 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025841855 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.025239833 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028547511 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.0279729 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.020176401 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.027994314 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.027890983 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.028732793 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.025241958 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.028595169 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.020402195 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028448092 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026925832 seconds)
done (took 5.680684886 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.077221326 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.064930961 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.17913203 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.143090734 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033807775 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.034559983 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025445002 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.041197039 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.027385438 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.046260208 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045953148 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.043495068 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.164181852 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.041212991 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020423001 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.032493365 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.020824245 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.048103288 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.145837702 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.045326885 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.063915957 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019136366 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.036897019 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.039142072 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.033261875 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039349299 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.044587467 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.021330414 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.038306728 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.038001809 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.047587714 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.022884618 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.02077663 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.040294523 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.036960201 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.029537231 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020114263 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.027420743 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.032428851 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.020219088 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.064846662 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.039259302 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027874604 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.029195621 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021467445 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.036163735 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021211492 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.02889667 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.035174275 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.02716704 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.033415389 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038061764 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.022545124 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.038829569 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019273824 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.028204184 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.027894127 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020137238 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021057456 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.020245239 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020214982 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.02321042 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.033481558 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.040008871 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.024417816 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.028178056 seconds)
  done (took 3.5697473 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.047509094 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.067377158 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035045241 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035578878 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020084632 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020602844 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020575722 seconds)
  done (took 1.129317504 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.093828349 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.138277618 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.146246094 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.147640055 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.157876349 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.144268031 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.03340494 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.051045022 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.055959827 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.158843345 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.154683052 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.149070723 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024740676 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.033347315 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.053422156 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.151760247 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.034141576 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.02957085 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.145597176 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.150348213 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025937438 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.052555564 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033820672 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.023824187 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.14763547 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.143291365 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024862999 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.062824514 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023288771 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.02112093 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021160204 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.044014558 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.139962993 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.03662728 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021443135 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020155287 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.137354482 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021738649 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.139999472 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028447812 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.139926677 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023774975 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023863594 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021613031 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022584218 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.143080535 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022631281 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021240735 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020797677 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.14201793 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032347035 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.140589017 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022835951 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.026513269 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028477623 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028050498 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.028391068 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021682975 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.143252624 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.031555768 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023091115 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.151378183 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.150566361 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.140541432 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.15157006 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030496692 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.141516328 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.140428947 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.02159424 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029458893 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022176399 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.154486808 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.025332656 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023797333 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019887037 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028634609 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.15831388 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.159080223 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.158942214 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.035770468 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.023023727 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022383385 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.157064703 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.159557269 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027213356 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021748383 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021987378 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.037712117 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046676707 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.02405341 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.026552406 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021821186 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.032523533 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.024168956 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023543875 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.154091844 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.02100349 seconds)
  done (took 7.787968026 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.036950448 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.021805575 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021305188 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021726689 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021899113 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.02184259 seconds)
  done (took 1.121395151 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.049388496 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.022299773 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.034862267 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.022154964 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.04525149 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.136150891 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.136204265 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023351862 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.038874169 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.034382176 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.136171264 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.138902001 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.138528743 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.023247711 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.136090476 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.033977727 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.136491581 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026887727 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.033229133 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023360101 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.032918325 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022915405 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023176006 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.151510952 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.017193712 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.033541672 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.03173873 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.033434228 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.032947578 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022933375 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022806864 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.016847438 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.028016527 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.02285621 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.137694181 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028362079 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02224316 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.017928246 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.026383975 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.016867406 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.140264655 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023552587 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026837689 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.018116527 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.023018132 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.028202901 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.018116064 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.032360439 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.138476764 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.018261385 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.018015729 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022724623 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.01694533 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.017918227 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028271995 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.02303978 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.017937397 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.139008711 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.024660562 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.029177894 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.022704324 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.017221739 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023063367 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.01692933 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.027317399 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.018016483 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028210034 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023379082 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023320647 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.022260724 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.018025925 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.022210035 seconds)
  done (took 4.070307912 seconds)
done (took 18.562046752 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.459684434 seconds)
  done (took 1.345757673 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.023564447 seconds)
  done (took 1.921851996 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.051335124 seconds)
  done (took 0.966698349 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.314742128 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.484329412 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.71665759 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.093588143 seconds)
  done (took 2.512580271 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.843553281 seconds)
  done (took 1.768050278 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.214275424 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.179851901 seconds)
  done (took 1.349105957 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.495379782 seconds)
  done (took 1.406873382 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.321790308 seconds)
  done (took 2.239510311 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.205378857 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.135903781 seconds)
  done (took 1.263741689 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.60921084 seconds)
  done (took 1.52395322 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.453218583 seconds)
  done (took 5.370874597 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.188344661 seconds)
  done (took 1.158967474 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.191372041 seconds)
  done (took 1.108770007 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.716596469 seconds)
  done (took 1.635303528 seconds)
done (took 26.501764678 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.044256299 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.037463194 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.037543153 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.034837173 seconds)
  done (took 1.059749946 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.031299457 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.025410659 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.027670046 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.028075466 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.025413377 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.027354595 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.027965152 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.024184977 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.025355863 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024595905 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023065647 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024473791 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.027132935 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.024288441 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.026918146 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.028226395 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.026046962 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.026347414 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.02716685 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024520279 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.027381511 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.024632339 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024656436 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025993845 seconds)
  done (took 1.548138287 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.034636533 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.026041185 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.02779289 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024887629 seconds)
  done (took 1.039206387 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.033591336 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.031204495 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.039929298 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.040331585 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.03101378 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.031646031 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.038293969 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.038646849 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.045405993 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.041440466 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.02210667 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021843324 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020955349 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.035839724 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.037626145 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.016289398 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017566643 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.031865798 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.030795002 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.033679542 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023990067 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019624489 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031136295 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.031516801 seconds)
  done (took 1.664016771 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.038464284 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019943102 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.036484269 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.04464182 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.044713748 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019713579 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.033939468 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045196191 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.083881252 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.019766079 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025735262 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019749412 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057492037 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019712328 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.034959294 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.065387895 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.068332398 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.023815336 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.050752211 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019770144 seconds)
  done (took 1.698231163 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029056304 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024639751 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025272213 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019495547 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.030898813 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026928409 seconds)
  done (took 1.08878969 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.024506637 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021617865 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.021390029 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025757333 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021333431 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021225927 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.021265744 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.02016468 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.020144925 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020931009 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020913696 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.021390557 seconds)
  done (took 1.181176068 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.162983676 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026896061 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.024798478 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020191344 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.02187097 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020991974 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.036043994 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.02300996 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.039083475 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.02080984 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021178601 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023448542 seconds)
  done (took 1.362458609 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061355403 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065990793 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098713196 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075093602 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080447823 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051175893 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.19982056 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.033777827 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.115729921 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09096663 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079525751 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047389817 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040835039 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.024086154 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056167661 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075213116 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091660325 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027263546 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075024811 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.239523325 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086810479 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.086878793 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104270859 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079160134 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047300187 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103323697 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050829583 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058186726 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077084676 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082841453 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076961741 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.058177192 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.025699912 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.025396653 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116235207 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.058018342 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075414486 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047911551 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060698309 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04421229 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085324813 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024714527 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037975916 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.067543892 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043103463 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092598538 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.049777541 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074492192 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036693485 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09841739 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087881295 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.176392913 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042861731 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061880898 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102749408 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072117746 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092231881 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064356934 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03718874 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.077885821 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.066890128 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060274827 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068304253 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036414291 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.290573783 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04336518 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.07941253 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069350402 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.045777302 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049300076 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065524943 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090571702 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080142079 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.072691742 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084928503 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046505989 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083633814 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.054930018 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.078070404 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057124222 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026610632 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.075743093 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081364041 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.052562735 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055894016 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083412002 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047382848 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03023383 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.044327212 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.073572585 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03465629 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.064172217 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040024203 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.086061898 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090962488 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053573802 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071026568 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074248404 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03301008 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121853579 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064577876 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027508514 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074114961 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069244464 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108957517 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052446679 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.02961455 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054998502 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059009418 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.116230453 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060859375 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036165578 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0742885 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101983156 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05146181 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.257343065 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051804363 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101869809 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074410437 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042192267 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03091583 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.051161738 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071496027 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06993008 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08414861 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052337416 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.039356607 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042405548 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079967464 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05072018 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035215095 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077424275 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.060902181 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.030511361 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047373786 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.032510522 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.26709221 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.040879989 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09151653 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086534343 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.02998886 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060372517 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050714664 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059363542 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.054629414 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072633872 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093974033 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.137396646 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.044496064 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.037675838 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063357479 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097222191 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079996192 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.045161808 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.039702922 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055320597 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065358652 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.055400622 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078369627 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.047859004 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065373126 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057145372 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09554652 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10068838 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056725696 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.06046151 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061209109 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.078552971 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029593153 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113503137 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059083049 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077854596 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042093149 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097674218 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.070813795 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063187997 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041493613 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059734395 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.058743739 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061672808 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100238786 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.048597978 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026797769 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049710029 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10567646 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032185752 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076639775 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.045514259 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.047367483 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072843518 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.050256872 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038217916 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.02330296 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085257451 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121308871 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.025118201 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074650175 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.072126002 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062810931 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.083478541 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.024633896 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089566687 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097940879 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086975621 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110951472 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.315736142 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072964409 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070993283 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.0759297 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.066859062 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033660651 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.078948645 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087881923 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047563702 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04601216 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089583912 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072326396 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.088716515 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.067678646 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076111918 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.058756324 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060507937 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058026288 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.053611608 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096813974 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075808479 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.079132476 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038320893 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06906617 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074069078 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09387681 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035878297 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098014835 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.040106791 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100574912 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.033296031 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083069393 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.030846352 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.124946913 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034186271 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055204113 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.02424247 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.027184479 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098933757 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.078168729 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061142148 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054729291 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.091572607 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094189469 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.032566667 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068473369 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071084553 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060047593 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072435579 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065583883 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.044737625 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053522389 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.064296859 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041392657 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.037630796 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086541726 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053466825 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096284892 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.038912839 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030075811 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098708576 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070204515 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052496855 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032072479 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067825055 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.084315326 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.049548888 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042522831 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080453146 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063025315 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104385637 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.046929971 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.059839839 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.240838102 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.035915057 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.050166808 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.024094763 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.043567182 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.030944906 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082500176 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.030349904 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.071031573 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023058585 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083288568 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039885348 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.051236988 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057802149 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062722077 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088154716 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047855885 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094053834 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043353544 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070831766 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062759451 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067710562 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040400729 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055849506 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058230202 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.074989743 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.047224724 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07580445 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102280738 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060242472 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099593714 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045819477 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078016718 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061306843 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078104413 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068651392 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151189145 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095629026 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070048197 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067941651 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029844054 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050799321 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067410154 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065647001 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134285489 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082386455 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026809872 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060345918 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048522153 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062797784 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064525224 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034691746 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099938414 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057166573 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.042247399 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067134903 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.048103071 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061692704 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03172333 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059519092 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.05409809 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052080284 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054500134 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07313116 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089400403 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069242966 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106426666 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.059348253 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.047388622 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.077666822 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077699386 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075103409 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039931848 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040436795 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.255738357 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071323418 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.080575978 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.05171105 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063074679 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065006105 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053415638 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085121822 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060585043 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.079023526 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033728465 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.030601428 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022638842 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.02600644 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076906287 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065281566 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063519696 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058265104 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026117439 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059255527 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061138471 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026110717 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039452143 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048274569 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.05291956 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.036641404 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059780334 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.069104388 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.048228755 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056354326 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058839234 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09980526 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.05556883 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044936888 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10058182 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107765803 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043707263 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049386259 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025986948 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033690068 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079704129 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100892679 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106242826 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.033791374 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041160159 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.039096769 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042760889 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025753157 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.042494848 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.043768872 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060362839 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052879412 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.069565626 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059923308 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030097863 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064245496 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055462973 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048113024 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.063131999 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075949073 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08592973 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.099726372 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070854549 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074549881 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03160966 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.035736981 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03176394 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035177881 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.063884449 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.034434557 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031681221 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109038035 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.048314878 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070879518 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073366469 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044984538 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031448514 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095745842 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.024824336 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096875466 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.025881977 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036548455 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.190856457 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033117712 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048628145 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093099401 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060347456 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061736054 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.307684224 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064717698 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141916086 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110899614 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039818713 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094444242 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029517487 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030413361 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03019717 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061592423 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043743582 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071336068 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097461598 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041955824 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054589756 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031918497 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09666392 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.049836123 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056394544 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040236308 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03377478 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100259931 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034853855 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.044531591 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04592749 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.067928383 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026738997 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056694449 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038097052 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034248564 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147865489 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.666901304 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051857697 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.029103212 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051699928 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097804789 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090207147 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051437542 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066827463 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.074058101 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.060935549 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049576371 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070047965 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.156407991 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028351196 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051264 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.053376434 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058431291 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065309973 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051736023 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.047823506 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.052958572 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.041572231 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.034568562 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072384555 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042854117 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053821065 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063337823 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038905391 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.045190309 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088479502 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.05904594 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.040284286 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046124656 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.067198414 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042954452 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065619529 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.024668949 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06817194 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045704675 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080950066 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.055975893 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.221852726 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080629215 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048352776 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090425084 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.060919333 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075202806 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040712917 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.031626808 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077275661 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.042886583 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031112429 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096637315 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.048394641 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.057314113 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0607504 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.049051835 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062625435 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067155932 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065616585 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054276789 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031858064 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052169518 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.059803763 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039742806 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033995793 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.028639684 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.03006008 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06408681 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04034015 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.040631933 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070734432 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043615507 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056851023 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.05358215 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078210204 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043838546 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060479153 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065486286 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047582037 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090609316 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05585035 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084358609 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133586313 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089679888 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085929049 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09061298 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.032977157 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.034843468 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.0234492 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069692246 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034534735 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042174664 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033727859 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090317623 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.038838227 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067996332 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.215798537 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.035205627 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049297207 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052730233 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.024507812 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038687328 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066504872 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041478904 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034949727 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070610279 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037499609 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087285194 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066634272 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057178348 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053072147 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037179723 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0686753 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.061161226 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.08812134 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.056590981 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.031062548 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08615387 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064898544 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105313393 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029896529 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037338036 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.241233498 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057761832 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085508294 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034971012 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109600833 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095704588 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.057543861 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086649237 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025170452 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04327527 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042862613 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.075551961 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038246077 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059984673 seconds)
  done (took 41.597692566 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.134911462 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.127451727 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.075984758 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.08956792 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.246201443 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.255659101 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.111510455 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.078333259 seconds)
  done (took 2.171228417 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024929259 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.054348959 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035537392 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.293578007 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.055452013 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021202273 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.028661008 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036428326 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.021190747 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020645413 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.056487673 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021035782 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.025012577 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.466568638 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.020411066 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.02573101 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024944593 seconds)
  done (took 2.287051612 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.315580911 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.669866552 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.24671147 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.374583487 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.105308769 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.561006243 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.029110232 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034326972 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.634835266 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.352630896 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.099367284 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.181105932 seconds)
  done (took 17.647707845 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031581564 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.156286782 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.155261797 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.028184244 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.02772596 seconds)
  done (took 1.514856086 seconds)
done (took 76.852430905 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.041063923 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.124260753 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021183538 seconds)
  done (took 1.220279404 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.159268585 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.15460657 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.154648194 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.157040655 seconds)
  done (took 1.662209901 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030955112 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.030230103 seconds)
  done (took 1.107938675 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.185945981 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.258224169 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.044818784 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.04029457 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.034436487 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.035819255 seconds)
  done (took 1.157761805 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.027421783 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.025233989 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.025330632 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.025787036 seconds)
  done (took 1.146772248 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.136442528 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019901152 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.022543076 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.024293927 seconds)
  done (took 1.239831877 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.041170057 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.040270119 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.071481211 seconds)
  done (took 1.193396123 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.040222784 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.039221197 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.033901072 seconds)
  done (took 1.15397215 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.064681984 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.050364231 seconds)
  done (took 1.156350825 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.036646661 seconds)
  done (took 1.076698134 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.049070249 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.052708861 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.217324281 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.183340294 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.221807656 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.204799502 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.033989675 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.031111434 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.032758163 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.035823334 seconds)
  done (took 2.09821637 seconds)
done (took 15.783534369 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.036860173 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.142762094 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.270994927 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.040813525 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.781170209 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.267706172 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.679043702 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043705452 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.054083113 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022297364 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039049513 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.758606202 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.685052034 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.101868381 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.667379157 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.094756964 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.515740132 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022740689 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021596208 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022188361 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.662115185 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.02198148 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022241526 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.024111652 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.515452541 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.414102834 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023407314 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.093863788 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022269926 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02609135 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.393193095 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02302626 seconds)
  done (took 12.556370246 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026629317 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.076462317 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027013998 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037710525 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023880956 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024179705 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025826711 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022541384 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.065418858 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022211967 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039421286 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021724072 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.026433873 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023237207 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042534357 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.022093051 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024181314 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022740772 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022215928 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022711413 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041242517 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021946924 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022601796 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022639278 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022532951 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037046513 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023295009 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022029763 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022446619 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026077922 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027183887 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023508901 seconds)
  done (took 1.984809071 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079067395 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.077990696 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027913002 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.062048176 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.073995189 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.025095598 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.105287368 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.044037918 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.067772694 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0227622 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.03963941 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022226447 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.058994139 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023569686 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.043211014 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.02231045 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024625993 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022981297 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022166426 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022697567 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041747243 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022048988 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022454193 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022776335 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022839873 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.038667195 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.023282583 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022070735 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022372984 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026202208 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027980258 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023769911 seconds)
  done (took 2.260067065 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.026075107 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.026431605 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.032174141 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.035462743 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020674824 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.023251672 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.024437305 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.02083286 seconds)
  done (took 1.263414289 seconds)
done (took 19.124657796 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.036018142 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022591419 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.025527623 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.046664311 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.028772104 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.14419835 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.025036043 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.027550928 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.026069444 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.026701216 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.028856951 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020404519 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.025075752 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.02500833 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.026631982 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.02059671 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.147955669 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025020033 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.145090537 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.146848346 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.02329421 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.026297477 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.029061753 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.145944729 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.146098215 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.146727392 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.030086306 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.026606902 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.026387383 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.023777136 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.145190242 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.146881504 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.023421346 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.142342401 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020902178 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.020695977 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.025088709 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.022288101 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.149355506 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.030058275 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022918905 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.029653233 seconds)
  done (took 3.463014437 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.150436132 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.15555702 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.14848398 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.033244642 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.029433163 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032511313 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.154136631 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.029819223 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.028492076 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.153384527 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024203999 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028236139 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030535957 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.021286638 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.02786295 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.024690972 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.030042208 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022436034 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027953174 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.02824219 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.153983353 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021662029 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.030408801 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.030274312 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.024287164 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030119874 seconds)
  done (took 2.543434724 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031083977 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043769406 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.046086642 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.109984552 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063610572 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.043892202 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.037588152 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.047808496 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.053428753 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021412668 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.044034423 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.051040297 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.050224751 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.028677273 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060504563 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.04064427 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.034467957 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.023144627 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028126454 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.056204075 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.04502117 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.040833963 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.054402641 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.041420431 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020639896 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030557512 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.026046419 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.038269676 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.033061878 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.034101129 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.025247751 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.025117355 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.02229527 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032515985 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.025307733 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019860476 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.044867805 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.034438978 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.036331518 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.060699307 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.031809795 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022780074 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048310001 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.081577056 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.02038431 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.024561092 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025759219 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.03434084 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.023549604 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.063769517 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036835181 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020984881 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040762111 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022707504 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022926049 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.042633388 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.023105965 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.02354086 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.041977884 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027832371 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.043237963 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.027039282 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041851506 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020559622 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.033178049 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022855187 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.023164885 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020225204 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055678679 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028790059 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.068429446 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.02258408 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019909652 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.034011797 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.033033328 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028903222 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020370575 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.04001742 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.034155141 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.0253641 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.039780586 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024311166 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.025377539 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.067280201 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020911228 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.020332167 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019957286 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.024324269 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.025295438 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.022293917 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034664918 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.021128512 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.025291436 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.049030311 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.021460668 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.02249524 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.024416458 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.023441128 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021081315 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.031771728 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.025198239 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023406969 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.034473689 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022390336 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.025179845 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.036990458 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031310251 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020379072 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.023212119 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.024228441 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023633209 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.02350547 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.025650073 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.024952318 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027571051 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.029447126 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027709633 seconds)
  done (took 5.014987401 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.243320307 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.232203899 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022663857 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.228752195 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.030460881 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.15994484 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.231356204 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.232378843 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.022317139 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.023209839 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.021431676 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.174343369 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.168894939 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.181612378 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.160259235 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.024241105 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.05506642 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.179513343 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.235387255 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.231847476 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.054618334 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.029513812 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024631687 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.023916543 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022947382 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.031195678 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.039231424 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030900857 seconds)
  done (took 4.200005707 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.031015378 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.066721441 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025826397 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.047022788 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.039780397 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022702566 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.024103544 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.02288029 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.039040162 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.028113642 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.02244921 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.026343786 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025743835 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.024480898 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022375902 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.02860287 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.032771595 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.021108588 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025765494 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026834446 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033339526 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.046810427 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.026163428 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021989703 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.02559148 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021958881 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.027712576 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.03115882 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02186014 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021866745 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019382683 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.030873664 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.037293757 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.023346703 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021865508 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022734434 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022509859 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.022447112 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.022438214 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020734775 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020692562 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.027579546 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020915535 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.027505491 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035988621 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.024745783 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.024045249 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024825328 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.025053553 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.0197419 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025602934 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.025730777 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024999482 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.03091823 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.024589906 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024977181 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.024164698 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037470037 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028328641 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.021800625 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021646789 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020834373 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024783436 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.029317569 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038532032 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.024484824 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020830988 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.023051393 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.024385027 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035839853 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.021864282 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.029507366 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.019568403 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.02268431 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.024853304 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.025571715 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.023840581 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.021041118 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.022020973 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021713692 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.022512188 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022053232 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021646514 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.025065702 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.0204155 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020889548 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022986018 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.024143972 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.028120569 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.021230823 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.026149147 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023802567 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021456941 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.025034103 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.027932765 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.025140971 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.040272379 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.030549836 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.023112352 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.020252518 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.039598149 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.025237061 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021990659 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.024620045 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.031132116 seconds)
  done (took 3.879166581 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.05322997 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.024471322 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.04199247 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.058055203 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.032606261 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.028303151 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.036139137 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.023728798 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.044170965 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021591053 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.031651129 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020816131 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.035372878 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.031326961 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.024330448 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.032298365 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.025237804 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.043025709 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.037479333 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021091436 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.031194786 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.036488714 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.035862698 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.040309586 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.039553548 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.04091556 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.034658777 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025266065 seconds)
  done (took 2.03597554 seconds)
done (took 22.184942131 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.119179069 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.277362717 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.089405782 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.809470255 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.137244626 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.19908438 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.302317348 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.061544463 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.185671178 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.169837184 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.89769111 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.372505339 seconds)
done (took 59.762802123 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.086538258 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.236300409 seconds)
    (2/2) benchmarking "String"...
    done (took 1.324982935 seconds)
  done (took 3.653223706 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.508929811 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.078331091 seconds)
    (3/3) benchmarking "different"...
    done (took 1.108768556 seconds)
  done (took 4.76308965 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.393032829 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.87714471 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.349589135 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.059263189 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.07433455 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.526777997 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.235193182 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.766210711 seconds)
  done (took 26.969024037 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.084609393 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.325077924 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.451707601 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.555851295 seconds)
  done (took 17.579463985 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.526491828 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.579800326 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.580258724 seconds)
    (4/4) benchmarking "different"...
    done (took 1.700291302 seconds)
  done (took 7.587632861 seconds)
done (took 70.193062641 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.059053937 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.350068229 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.074762194 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.252119725 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.077065139 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.165415874 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.07720427 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.091477483 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.069285634 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.071739987 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.07120872 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.069393707 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.069350898 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.127453706 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.069938151 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.112149173 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.330558104 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.079898626 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.106230631 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.930336007 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.251639679 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.069101329 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.082472555 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.144466395 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.555320634 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.092725146 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.497155681 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.083747132 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.674471575 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.074237594 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.076259203 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.069675945 seconds)
  done (took 180.994279283 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.064913208 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.877857481 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.913507201 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.095163919 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.449642176 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.422043096 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.910082989 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.470047575 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.070085466 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.102757225 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.102791591 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.067537504 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.109609788 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.630361513 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.124961258 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.103058507 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.958607296 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.919546838 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.127202977 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.012786753 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.066520966 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.569470389 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.538797656 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.912175788 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.075366221 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.131484536 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.084067828 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.108361257 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.567391634 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.911688355 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.066242033 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.082407919 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.262514871 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.30623535 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.060772805 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.079846783 seconds)
  done (took 151.434823718 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.29712968 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.06645363 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.103657929 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.180557538 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.985204024 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.869180422 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.069208618 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.064486801 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.057757236 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.064634015 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.059359201 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.135328438 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.068465221 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.123070244 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.096522162 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.060539443 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.065814708 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.112349462 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.077590359 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.057685161 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.061980542 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.164318684 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.410525431 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.170493946 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.069067187 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.070524575 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.166882715 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.074805556 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.059416311 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.063255853 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.170721457 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.068830648 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.189536823 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.177401313 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.079977282 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.116000327 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.076183053 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.251358564 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.07086386 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.0586518 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.059496114 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.108712642 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.071346996 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.09128549 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.171750084 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.072219584 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.077194226 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.633210474 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.656504226 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.077730905 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.05905147 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.059065268 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.061407008 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.059416437 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.347683295 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.072573926 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.092536727 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.588418159 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.07499038 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.070855601 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.058282577 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.058593068 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.058762323 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.064714149 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.098532959 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.669905972 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.191134341 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.42719325 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.764893289 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.07460332 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.059077413 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.057772871 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.912249975 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.132441124 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.065298552 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.058231901 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.233266228 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.068813471 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.062394555 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 2.97618497 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.978328454 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.06963898 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.167066751 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.07427127 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.058585597 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.494938655 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.133058278 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.077822192 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.085406842 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.120233445 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.061819084 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.05788156 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.067762877 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.977105361 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.07005791 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.077657886 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.39464934 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.072261622 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.058208505 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.150072823 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.429514791 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.072344787 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.146355602 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.466897717 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.97618216 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.069369472 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.05786447 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.081548588 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.059872508 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.075869159 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.070690851 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.06093461 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.065670669 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.062976296 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.058018023 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.057984828 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.057876321 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.083807107 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.063998049 seconds)
  done (took 320.849551943 seconds)
done (took 655.754029028 seconds)
(4/20) benchmarking "parallel"...
done (took 1.058150113 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.313492905 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.084688529 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.26776115 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.316353845 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.264458223 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.241035762 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.270342719 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.360809578 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.301823415 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.23232403 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.29394517 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.237187616 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.352317516 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.323338583 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.362270816 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.326094066 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.2662915 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.766370156 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.280607054 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.235716461 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.263976017 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.242008875 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.225533319 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.294395013 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.358922812 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.240578355 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.468256824 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.307019282 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.272274463 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.319954561 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.338959605 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.349598568 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.29055805 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.346608929 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.308259934 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.362726822 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.261480348 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.330910517 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.254006302 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.279107985 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.291107285 seconds)
  done (took 61.575244114 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.508647875 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.261629092 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.373098425 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.38652216 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.928613987 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.370091804 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.478859344 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.250971455 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.260163688 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.377764756 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.390912051 seconds)
  done (took 17.68493672 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.358118765 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.258344191 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.383544823 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.400053397 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.479428372 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.381194095 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.432064104 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.276927332 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.260026389 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.387301705 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.43533486 seconds)
  done (took 17.145845566 seconds)
done (took 97.463985293 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.662776509 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.146552143 seconds)
  done (took 3.884871186 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.090969937 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.079504931 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.071831343 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.081339066 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.073439435 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.07902629 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.123430647 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.088768828 seconds)
  done (took 9.755933229 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.071866015 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.072411911 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.071704455 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.078152707 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.071321959 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.077736154 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.071492923 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.072832667 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.072707391 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.071488558 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.071837613 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.070674224 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.07702108 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.071553943 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.071453927 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.077148912 seconds)
  done (took 18.240961638 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.078138969 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.071647931 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.071414124 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.075277366 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.074422693 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.072421192 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.071435746 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.086455498 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.071511967 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.077824702 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.071330176 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.071769513 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.073352952 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.071312082 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.077068635 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.070852116 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.079283654 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.07165791 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.074920398 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.072715121 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.071323933 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.071812707 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.072671294 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.081531082 seconds)
  done (took 26.84998824 seconds)
done (took 59.816583263 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.682116944 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.857779877 seconds)
  done (took 6.607339905 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.076841282 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.071571623 seconds)
  done (took 3.283956215 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.080545648 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.07170821 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.079197221 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.071890461 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.070970172 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.071926209 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.071898588 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.075364287 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.0712245 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.075962005 seconds)
  done (took 11.808053491 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.075506234 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.071827707 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.071320675 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.071575231 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.072087613 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.078355684 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.071190828 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.071987059 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.078300467 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.072812537 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.075229937 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.258942339 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.073006475 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.297932528 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.074714167 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.071477981 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.071872542 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.078546124 seconds)
  done (took 20.804589093 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.072018725 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.072148702 seconds)
  done (took 3.216711867 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.07095033 seconds)
    (2/7) benchmarking "second"...
    done (took 1.077912128 seconds)
    (3/7) benchmarking "month"...
    done (took 1.071046053 seconds)
    (4/7) benchmarking "year"...
    done (took 1.070979802 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.077875201 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.071129817 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.074714084 seconds)
  done (took 8.58146401 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.524303203 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.237351811 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.290681574 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.538260733 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.745178091 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.984607916 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.740578191 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.980546841 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.833945087 seconds)
  done (took 15.9430205 seconds)
done (took 71.305727012 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.77350924 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.071256677 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.599537822 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.234182487 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.086354783 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.436329487 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.067520914 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.672600413 seconds)
done (took 37.006975857 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.377675724 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.059627813 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.100750895 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.100332589 seconds)
  done (took 19.337691283 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.058496601 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.647887057 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.102272881 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.115016977 seconds)
  done (took 19.075142912 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.472772674 seconds)
    (2/2) benchmarking "read"...
    done (took 1.474898378 seconds)
  done (took 4.040890771 seconds)
done (took 49.892296447 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.071069346 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.071354497 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.075085866 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.077014476 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.072195424 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.071455683 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.071473508 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.0708705 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.077741569 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.071639868 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.07063245 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.071585447 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.079851331 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.074541799 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.07179189 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.070759512 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.07153015 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.075212117 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.072964764 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.070925978 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.07176982 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.075998389 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.079105104 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.071742921 seconds)
  done (took 26.82943513 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.145786422 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.13782685 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.155601558 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.149324885 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.169806857 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.154265284 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.147448175 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.115252585 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.152387212 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.118091828 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.111738175 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.16435917 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.109003971 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.167135274 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.120717999 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.170760539 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.148800068 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.11393654 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.111530312 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.173097718 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.142951719 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.113276891 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.164056925 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.109282675 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.168719365 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.107818457 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.12048528 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.13798958 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.113748158 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.16122791 seconds)
  done (took 35.244958569 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.108652211 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.086865932 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.073088184 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.162642392 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.073182407 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.072112287 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.078557522 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.072081806 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.072095892 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.072511157 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.076335082 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.07634709 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.072118676 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.071703938 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.071742484 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.07880342 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.109035374 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.250947152 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.072191839 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.077066786 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.123268665 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.072322569 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.071956549 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.072454299 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.075917562 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.072846146 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.072476988 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.071983341 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.071934179 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.083998282 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.072411787 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.123129365 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.105634404 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.071640967 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.202279692 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.131567637 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.072199194 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.105108675 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.086707125 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.072405756 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.071746249 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.072161295 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.072137113 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.075574544 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.132041823 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.072048022 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.071834619 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.082317421 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.072654736 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.072326908 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.073237785 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.072093043 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.089944196 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.072429332 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.072134549 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.072556388 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.072455539 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.082030528 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.072447511 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.07163681 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.075083485 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.151897842 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.072816748 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.071615587 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.446479852 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.074157455 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.142836764 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.072045574 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.072104308 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.295933591 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.076391047 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.279343601 seconds)
  done (took 80.106820988 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.071537505 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.078968112 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.153919693 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.155226915 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.072609099 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.071468866 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.076786871 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.070837922 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.741518312 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.071781287 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.082096393 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.072108989 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.728720804 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.071753199 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.074628515 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.155315368 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.071780848 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.071844007 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.071840435 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.082163108 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.07162318 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.072392291 seconds)
  done (took 26.263044623 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.111067933 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.086877094 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.107711383 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.071576254 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.071704201 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.084791907 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.108259237 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.086509125 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.109140831 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.120405842 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.108384042 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.107697351 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.071752734 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.108316742 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.123550951 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.087756449 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.107445108 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.087116768 seconds)
  done (took 20.829037498 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.255114365 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.240493972 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.152831259 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.11398441 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.344433745 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.306695097 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.216147228 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.246831793 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.120403342 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.240292005 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.246969225 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.114439467 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.319467311 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.118225358 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.114029143 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.333139649 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.157056441 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.117081481 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.183359504 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.215431506 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.257833274 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.191752414 seconds)
  done (took 27.677084596 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.108222301 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.116677151 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.156642312 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.145620064 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.071936597 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.071669037 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.13803269 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.125371778 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.086746363 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.107821146 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.117904406 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.077208616 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.087126756 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.128659177 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.160522011 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.119485939 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.121317569 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.128456923 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.114362827 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.072967703 seconds)
  done (took 23.32526532 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.072122206 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.071735833 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.072004051 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.075907447 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.07769884 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.072386021 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.072007194 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.071967964 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.078843275 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.326894659 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.072018701 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.072334785 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.07490994 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.079777602 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.072650089 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.07199371 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.071967432 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.077010392 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.07189142 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.071990373 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.327290349 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.079913962 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.076950247 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.072371404 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.071936117 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.072261524 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.07436582 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.072035037 seconds)
  done (took 31.64630933 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.134989314 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.071817797 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.079687834 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.078571176 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.072565557 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.139288938 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.076410671 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.072059517 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.071871489 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.071828459 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.071422221 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.078628798 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.079934255 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.131669358 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.072014123 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.075198545 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.198987313 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.086125075 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.139956679 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.060530538 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.078812116 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.211489171 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.08249876 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.072160731 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.060101785 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.081538301 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.07574031 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.072426773 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.071942962 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.072133799 seconds)
  done (took 51.811606113 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.098244378 seconds)
    (2/2) benchmarking "in"...
    done (took 1.100837687 seconds)
  done (took 3.267238151 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.07245037 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.173855183 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.07771566 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.271022212 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.239194652 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.247438549 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.245042407 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.176313508 seconds)
  done (took 10.571680383 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.072318663 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.2248072 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.216732742 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.078997059 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.080089676 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.356469537 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.137645371 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.868063661 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.761587226 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.962832566 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.184832483 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.749268924 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.085393277 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.448134997 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.18526373 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.885850163 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.209561909 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.444051189 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.995820902 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.183023246 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.667732716 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.1505276 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.073123849 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.07966633 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.072763825 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.006814612 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.85343904 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.504091291 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.11602827 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.184048406 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.77290068 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.129840121 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.077870445 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.237139522 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.177164657 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.079871428 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.15906424 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.167818462 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.076940652 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.074829894 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.716295739 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.558000586 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.395737688 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.260159353 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.149226554 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.074446763 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.077574486 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.072675687 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.300833205 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.695025576 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.083385882 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.003225616 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.213800174 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.073330738 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.489204624 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.20379822 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.077112346 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.009492487 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.401291366 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.228603886 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.441705397 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.210414798 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.9947819 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.187688366 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.077671528 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.269311461 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.929178141 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.758950549 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.707757876 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.173222342 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.385022375 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.23109641 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.073002452 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.081538598 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.011614345 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.380769805 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.07972986 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.07319079 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.07804385 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.073099754 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.251180518 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.181180996 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.86270398 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.208842308 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.254559528 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.484901019 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.187099626 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.073609238 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.641261308 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.915957957 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.087331422 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.612943633 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.234385896 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.213144528 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.973128755 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.308017652 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.111576559 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.07391885 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.881012928 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.479307093 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.218529617 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.073333168 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.415348925 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.14904649 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.091466619 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.074072894 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.667795022 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.191092217 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.205751523 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.104760941 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.079942206 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.073438037 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.6935104 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.092869121 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.081020056 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.557488056 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.090553934 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.387650644 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.384306752 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.230734875 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.411799218 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.868153679 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.306952899 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.934562697 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.083988322 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.454281919 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.07924659 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.702445549 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.310640075 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.185522413 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.74850349 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.101442949 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.073100781 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.08202412 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.126310751 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.0733752 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.07966701 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.07304563 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.072832339 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.080694051 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.179947852 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.352682672 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.609893854 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.20601505 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.273900862 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.192371235 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.761321065 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.239490233 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.723476385 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.21183981 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.07381022 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.536873805 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.591867811 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.688621968 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.193490342 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.075709657 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.073253379 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.863977529 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.982726955 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.167162284 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.074226163 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.705998284 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.093632858 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.081972317 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.073896216 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.56438344 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.210783435 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.073473253 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.098651875 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.759651939 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.657302272 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.208404995 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.435974173 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.189177305 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.073759105 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.082948902 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.078866197 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.830956202 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.706586389 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.113193306 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.662142306 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.749938895 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.144655436 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.164725963 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.16043273 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.240570919 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.254255763 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.210426363 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.074143213 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.074269195 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.078168646 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.555832346 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.957555568 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.822681382 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.963372809 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.067752449 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.964807274 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.079781705 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.859135426 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.08882568 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.688808262 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.928514041 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.164101819 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.08510035 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.07418881 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.315046745 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.225351964 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.211885076 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.488045675 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.218950583 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.074388452 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.646943465 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.1886949 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.650971091 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.168038254 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.85544467 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.069159089 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.187927097 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.15372594 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.524235369 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.166237492 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.073449819 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.591930942 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.183614609 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.07396989 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.03157107 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.594245319 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.975948452 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.771618995 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.570746856 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.134995702 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.650945011 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.28172119 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.21186222 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.80585519 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.16285818 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.335683785 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.16492983 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.319026891 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.222936361 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.811603728 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.089152351 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.546154214 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.204701062 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.981103909 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.18470964 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.429584835 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.178980207 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.074581509 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.173942732 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.156772895 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.648052467 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.188815882 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.284609539 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.317406362 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.851655412 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.163000188 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.334668887 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.165996135 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.937253419 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.041739015 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.388666053 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.892820107 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.06140678 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.081456496 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.771972528 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.213095327 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.336476935 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.213377382 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.075492569 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.074169627 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.16504712 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.149710126 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.074170388 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.412702909 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.000670684 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.119223434 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.079821806 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.08843182 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.074469472 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.205313032 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.101398871 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.201515338 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.447885002 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.663133446 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.800050404 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.188230871 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.542880153 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.168482977 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.770653448 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.088922732 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.08216368 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.663455998 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.195781302 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.276796783 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.205955044 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.163061196 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.523664177 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.259752101 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.324055412 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.093934711 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.188391834 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.773940274 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.624444582 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.295949454 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.540351794 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.097833722 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.61461876 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.06788861 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.631075652 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.111746981 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.793772582 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.99153361 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.118598138 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.074449438 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.074731944 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.614913498 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.082693187 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.091880169 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.824718664 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.556159655 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.14875381 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.833955139 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.09111935 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.082495901 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.078705359 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.075237847 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.984501544 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.974092194 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.267427822 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.192055685 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.075534458 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.07436694 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.998370819 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.273409231 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.762717842 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.872280611 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.975304001 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.209555413 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.081695115 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.075072188 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.078494309 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.075386485 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.074671407 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.073499207 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.370058425 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.229746993 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.709228079 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.093366663 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.082893296 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.237588487 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.12691861 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.079903973 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.149024556 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.1340209 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.271652976 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.143170044 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.080270474 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.49615872 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.211762684 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.051911079 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.238249795 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.318183205 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.272205443 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.457908095 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.09495368 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.510904191 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.377836516 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.89028106 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.090361017 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.007280598 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.081424359 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.796234327 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.058258347 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.368484359 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.669414359 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.107649056 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.240705754 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.932187077 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.461596879 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.173739279 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.130887869 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.074905806 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.074602679 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.067310687 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.428841919 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.123731225 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.25949459 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.224587928 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.058497089 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.205169461 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.158273852 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.374662457 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.097413315 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.091454704 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.074435386 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.074562515 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.440937699 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.799255556 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.140444999 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.075655815 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.005127456 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.787847566 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.936255536 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.710587953 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.006676733 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.209152822 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.081702732 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.26083539 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.127644936 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.592229852 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.231343625 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.838396478 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.542411498 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.125856392 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.127953573 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.450864035 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.744265281 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.37494228 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.179101237 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.076535654 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.424360022 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.018276543 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.217943008 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.978865446 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.346588173 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.623962546 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.550479561 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.27610054 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.182009069 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.978127481 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.571917219 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.106079486 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.086531206 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.892859898 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.214259853 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.286243964 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.944717416 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.302292464 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.212965248 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.729364932 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.658581168 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.218691127 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.642512525 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.212326398 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.080127413 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.55910137 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.135887681 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.077633001 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.183823048 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.076618289 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.092649071 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.682023501 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.678917697 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.189956399 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.145430033 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.083087915 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.568791154 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.923183411 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.096578355 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.09126008 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.075441316 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.376331645 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.09488163 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.075710095 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.495985957 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.701780784 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.211402303 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.565125652 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.19131052 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.213695528 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.250616294 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.360043224 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.23161234 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.137576363 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.075638502 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.078802201 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.07626553 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.390873833 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.22280285 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.076699895 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.631423647 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.212490721 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.817459652 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.015658852 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.231060955 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.13414896 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.495531038 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.222173879 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.574803627 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.984396307 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.080148804 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.370784915 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.169618104 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.111901739 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.709996564 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.166782678 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.076184633 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.936922302 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.247024844 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.3813714 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.370017728 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.293034705 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.149755154 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.656257758 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.17342947 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.578379656 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.22587227 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.076386194 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.565592248 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.160813462 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.419495095 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.2114111 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.439459973 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.179623637 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.408801087 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.340356802 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.165387537 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.087327885 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.077205965 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.007006393 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.088283512 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.561973586 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.016176793 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.511697752 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.19700129 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.933380358 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.608030361 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.618887008 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.380867906 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.195858289 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.64587106 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.093550843 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.991267077 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.28261144 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.132997472 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.216871663 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.167207813 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.801139302 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.123693189 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.076366838 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.390616433 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.221255861 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.076997699 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.079981555 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.987940087 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.668993115 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.166684217 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.244824758 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.159753916 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.076732791 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.648681348 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.330360615 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.113455546 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.079809727 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.081854002 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.852619947 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.174163819 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.077188641 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.340718075 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.215435101 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.291343037 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.877854604 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.491956847 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.166632162 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.084180961 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.076237883 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.766928523 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.38109635 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.247059423 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.414635078 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.148828789 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.572435574 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.095801524 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.443391744 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.597613109 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.970746223 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.186013628 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.077000206 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.098515447 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.707493692 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.134654402 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.847362497 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.353025378 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.158795503 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.799039133 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.975295815 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.131859148 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.078867124 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.125965717 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.077528091 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.077064817 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.076028164 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.557576642 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.10070093 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.091668259 seconds)
  done (took 1393.377254661 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.35408931 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.07628369 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.083283236 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.077178999 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.08378922 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.082399117 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.076575463 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.08084902 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.077165311 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.076366656 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.076232464 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.076695222 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.084307363 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.366401184 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.077853837 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.076867313 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.080354998 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.076573984 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.076813193 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.077223306 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.076113331 seconds)
  done (took 24.286763535 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.077728901 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.080037619 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.076681348 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.080069626 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.077241481 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.076166045 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.076392869 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.076165646 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.083814518 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.076483042 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.084439697 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.076188376 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.079142602 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.0780877 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.076797678 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.07659501 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.076019929 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.082855204 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.077719494 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.081410809 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.076567438 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.076961548 seconds)
  done (took 24.804330608 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.075827062 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.076591049 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.691977219 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.186464568 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.081648198 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.076648595 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.080588215 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.261640485 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.068880355 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.000194662 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.421878298 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.153252735 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.087620775 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.232380738 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.172116685 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.080230611 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.201824405 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.079846408 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.076549002 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.076271471 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.0816311 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.217946827 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.20132481 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.076603561 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.87079424 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.215426194 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.078022765 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.076553747 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.081243648 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.07831814 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.081087696 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.086043257 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.819423394 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.702914079 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.354312732 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.003969462 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.0898488 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.091644248 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.077437717 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.077145522 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.282243194 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.890210263 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.087827481 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.077257719 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.382292861 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.180473295 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.080508209 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.423928807 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.154993688 seconds)
  done (took 86.182474548 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.092500625 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.206762813 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.137387799 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.077193526 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.196790355 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.076979971 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.130350341 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.083666292 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.077258284 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.08454812 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.214520401 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.242007622 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.077517555 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.076639585 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.140145836 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.078294895 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.079074636 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.076743543 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.084272734 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.077666153 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.081747302 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.131384078 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.191788387 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.236133872 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.078062916 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.078636759 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.078358715 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.081208476 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.22933109 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.080172875 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.076445757 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.076178552 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.202189501 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.186004575 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.079521086 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.076523243 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.210624955 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.07747219 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.081129096 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.077194513 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.076880521 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.076301224 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.13049812 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.218525092 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.076879696 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.183702371 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.078749921 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.081722412 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.22590845 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.076170546 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.076491908 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.249629327 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.078505438 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.077795557 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.08250746 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.200443473 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.081643082 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.077036993 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.076357025 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.220797757 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.082167106 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.077481673 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.237228918 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.084628944 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.077262917 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.249429413 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.180685837 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.076630564 seconds)
  done (took 77.311211095 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.083048627 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.078412599 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.078530432 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.082858883 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.078853295 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.081495785 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.078104454 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.077652942 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.078049756 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.081611705 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.078826302 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.078425259 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.077338843 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.081778069 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.084539789 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.078215798 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.078151916 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.078178685 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.078146827 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.082016718 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.078005109 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.078369917 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.086718828 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.084154779 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.442133987 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.079237738 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.078158824 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.078317399 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.084605139 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.078092565 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.440454197 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.086795914 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.086235107 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.077776825 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.437085256 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.078596839 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.082072623 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.07995829 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.078552262 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.078094487 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.083185467 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.085180105 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.078053607 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.078426955 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.07822041 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.08173953 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.079658793 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.437172355 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.076847662 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.083814811 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.082289426 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.078157233 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.078795368 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.078333901 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.084361055 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.178932031 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.078504548 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.077957077 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.083227474 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.084243316 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.078730444 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.178244435 seconds)
  done (took 69.687361539 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.079574131 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.07802169 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.07795404 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.077292429 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.081539859 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.084383967 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.077256553 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.076421737 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.076442669 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.076738443 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.080327205 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.077221204 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.077128792 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.077672761 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.090218997 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.077992796 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.077142829 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.076867969 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.077202667 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.080472594 seconds)
  done (took 22.652221538 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.077322217 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.077767136 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.08551767 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.084426355 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.077099205 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.077155761 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.077297468 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.080619545 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.0786424 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.077602764 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.076765705 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.081797146 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.082814799 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.077597738 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.07691108 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.077229558 seconds)
  done (took 18.340447236 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.079278905 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.076967489 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.077981309 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.077815425 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.090493729 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.077862917 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.077057321 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.077036621 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.07730959 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.541776895 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.076947803 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.077073613 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.080793058 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.083209783 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.077505986 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.077181491 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.077378711 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.077333326 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.083109087 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.078373995 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.653980435 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.083194598 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.080947761 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.077471785 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.077102694 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.648540856 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.084711751 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.077861697 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.077379836 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.077338342 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.087812061 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.553140193 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.077822797 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.077294275 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.078215108 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.081837701 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.07776746 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.077284971 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.077967405 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.085770127 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.077457001 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.077248853 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.077312139 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.077113805 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.082034326 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.077429929 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.077366584 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.531264686 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.089268941 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.077670861 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.077354052 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.078139011 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.077108782 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.551223631 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.077690321 seconds)
  done (took 63.43767995 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.121835594 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.142944929 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.07785952 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.076850506 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.134149314 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.12427534 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.119498287 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.092141305 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.121504874 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.077690028 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.151280412 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.092985203 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.122191883 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.13999202 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.140817945 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.123870871 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.078773983 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.146079618 seconds)
  done (took 21.158722342 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.087499895 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.077589469 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.077308262 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.07778124 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.07847016 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.080189462 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.07750537 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.077545328 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.076904775 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.085146776 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.07797308 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.07667162 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.076862484 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.076861626 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.084075476 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.077179364 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.077217434 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.077734377 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.080326285 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.084305496 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.077399364 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.077222107 seconds)
  done (took 24.813837272 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.116167474 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.126527702 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.078989014 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.077787613 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.07840131 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.112549648 seconds)
  done (took 7.664235599 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.130352789 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.077321003 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.118493585 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.129468028 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.077343015 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.077301372 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.078009911 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.085916217 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.07776524 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.385457696 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.077666445 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.084616647 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.078013149 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.077419333 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.077134255 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.076892622 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.086284039 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.078382617 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.123960275 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.16078976 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.08126268 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.077721427 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.078844369 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.077786948 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.077560945 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.088545905 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.07774985 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.384778568 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.077531868 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.081144595 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.078252307 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.077777067 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.077187715 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.381150294 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.138775004 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.077500958 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.077444995 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.161113412 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.084287451 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.077904203 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.114416126 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.078513376 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.077399072 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.088093837 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.078068178 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.077741905 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.077808493 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.08229154 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.077956007 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.394102411 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.078092263 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.078874336 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.088216344 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.077496277 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.077126863 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.383905711 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.388008863 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.077949688 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.077591308 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.385364931 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.080633778 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.082537167 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.078469761 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.384512509 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.084006998 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.078355121 seconds)
  done (took 75.237633452 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.077499809 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.113674817 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.081586165 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.393725083 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.078359982 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.077857218 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.084913522 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.078463256 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.078386547 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.132066873 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.163465652 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.084807369 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.086052229 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.078023658 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.077529737 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.080443187 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.079538998 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.078244495 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.132080763 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.386907954 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.081044494 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.085589472 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.077777549 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.077751936 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.383523659 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.078987054 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.077773438 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.079050012 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.078859643 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.082260621 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.085085159 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.078026897 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.07849059 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.121153888 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.078896771 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.07817133 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.077938259 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.077916431 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.080904892 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.08220698 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.078146804 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.164048916 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.079500484 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.081649123 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.381571632 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.078203722 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.077622037 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.144716691 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.086223584 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.132868234 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.381293026 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.388606978 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.387760821 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.078245952 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.07880029 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.083243519 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.084147184 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.078165038 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.07812249 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.077102995 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.082022169 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.078886433 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.389672192 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.077852747 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.0835786 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.085983647 seconds)
  done (took 75.279443426 seconds)
done (took 2322.865736079 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.184702152 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.120693517 seconds)
  done (took 13.37932249 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.079533299 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.080769452 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.236088963 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.084166263 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.088495209 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.161117572 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.093478191 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.091733029 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.088171353 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.162234407 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.079568075 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.213450766 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.185482382 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.079488574 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.090296791 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.090311692 seconds)
  done (took 38.996446088 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.039588955 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.408730304 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.028492222 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.722657468 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.086055652 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.775614161 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.311319749 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.218577045 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.457537452 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.527765316 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.342192225 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.64573992 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.753866364 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.128288113 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.702475908 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.514370037 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.594003111 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.655413251 seconds)
  done (took 57.99487165 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.073935314 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.231868752 seconds)
  done (took 8.392769908 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.069098106 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.101867791 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.087209629 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.080575757 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.08293544 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.08059821 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.120392397 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.118891489 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.116838556 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.113032409 seconds)
  done (took 62.072653307 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.074158621 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.746136309 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.495877152 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.574782616 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.562414975 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.51780196 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.262402944 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.418062652 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.172498034 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.067897349 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 4.821411065 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.667493423 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.803037362 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.008656835 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.634678185 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.509449481 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.662123267 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.440225977 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.405260452 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.517118923 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.246516536 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.901152563 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.411220908 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.922976362 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.073989444 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.138536214 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.300683119 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.189096474 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.157066309 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.943753426 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 4.830878223 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.207315542 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.947771703 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.180777094 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.281743242 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.596062726 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.804893481 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.290028384 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.334918541 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.398510995 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.460510399 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.297322605 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.240166189 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.279563619 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.339102669 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.258830642 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.031942847 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.306604484 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.186819989 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.208596031 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.631377963 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.254798457 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.217670906 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.190675202 seconds)
  done (took 148.510874412 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.071386984 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.533019952 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.24321533 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.072027391 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.466935518 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.285887799 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.917767319 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.54936473 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.086304721 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.294216545 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.247742807 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.202811049 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.0691417 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.083409775 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.078711111 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.078543935 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.264151361 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.571340833 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.088412496 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.077387015 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.292120868 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.319391168 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.208104209 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.07111247 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.246691268 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.320016418 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.482328253 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.203255584 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.460322546 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.075842139 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.523361366 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.087144259 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.077825156 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.970824501 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.471792517 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.422530214 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.525732041 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.09149961 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.883839136 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.076730915 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.733732268 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.278907439 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.413698764 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.215624084 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.228018588 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.307886278 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.703355756 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.067872505 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.863467212 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.254871084 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.292627019 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.291089611 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.354073459 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.084527688 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.543495607 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.077360241 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.075449653 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.371547263 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.227706349 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.204663902 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.069201807 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.076115027 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.082909997 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.324373796 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.07017551 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.201578599 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.073020448 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.07719738 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.204658112 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.206665521 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.230050523 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.324280366 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.327098554 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.995113605 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.392890881 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.317224206 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.493847688 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.338736 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.070166069 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.080954605 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.525124292 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.519428189 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.235533611 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.331328386 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.384744125 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.372696575 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.649619698 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.068859635 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.308989946 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.24225213 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.310716361 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.226418066 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.440637703 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.968793074 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.080867359 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.0760476 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.360447174 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.208305957 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.071793546 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.582621358 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.347809626 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.687164338 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.254550732 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.523103907 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.182432275 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.070829129 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.670835202 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.076987822 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.301178464 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.364505009 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.084104037 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.076889959 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.237678724 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.840141651 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.074413455 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.22172968 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.495951794 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.079487935 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.24373972 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.069961829 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.342545968 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.915606239 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.312852805 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.076102154 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.356805778 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.258640694 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.225183841 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.07708793 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.434064278 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.342881675 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.478340736 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.31333251 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.931557705 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.076915013 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.388399946 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.076704058 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.080778719 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.258092582 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.995556028 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.256232609 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.074498065 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.345963503 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.245511402 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.450014631 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.0715673 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.324774107 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.333386326 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.440412055 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.073726749 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.214680223 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.080083864 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.134736155 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.246010804 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.076758871 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.077698314 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.915041968 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.076133993 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.229853768 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.306554321 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.775928966 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.446888075 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.427521906 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.073027541 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.505314056 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.27893949 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.576282498 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.618770623 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.252532475 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.0772058 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.076560521 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.077405035 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.322620315 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.266948892 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.072048993 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.076772801 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.815483579 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.162417283 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.069063853 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.275704904 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.679947179 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.481526212 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.296960249 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.072821052 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.444453044 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.075134508 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.253819965 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.577721968 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.332763199 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.075390402 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.076546864 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.081114712 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.076669044 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.294730143 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.329723427 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.640848308 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.228717989 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.382379117 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.304025748 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.387195396 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.542093103 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.078020354 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.347916014 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.070002296 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.47493556 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.082437884 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.276448101 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.323871012 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.074918072 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.39407714 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.433101962 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.193553922 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.477713104 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.071075733 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.077040545 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.076793139 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.254554173 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.523806658 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.068404423 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.156864114 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.443701128 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.200270682 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.270282801 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.285285509 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.089381132 seconds)
  done (took 721.133000155 seconds)
done (took 1051.545322626 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.067184593 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.077944135 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.078519958 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.077331279 seconds)
  done (took 25.382703738 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.898942271 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.891093772 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.180010463 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.081478096 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.367751124 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.123614739 seconds)
  done (took 10.63226645 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.584281009 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.077127786 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.077795587 seconds)
  done (took 17.815105028 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.356627496 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.540497301 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.254206068 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.169347455 seconds)
  done (took 6.408381898 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.08300233 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.080477713 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.079745558 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.08416328 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.083546134 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.079172896 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.082225604 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.080785722 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.088614287 seconds)
  done (took 10.829667798 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.653819901 seconds)
done (took 76.790130202 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.485650064 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.377955615 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.082025099 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.388011069 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.206521935 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.392385501 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.197708543 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.098612754 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.424274042 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.513934245 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.59476236 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.283178662 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.577913749 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.540382535 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.325841481 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.116233705 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.095735875 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.14004 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.793124198 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.291598132 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 6.08651058 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.214378996 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.816598748 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.110266075 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.088872719 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.19783517 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.331198871 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.366117627 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.119350196 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.102998346 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.170180407 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.646318204 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.310672928 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.377274116 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.176251821 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.02400992 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.588934316 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.08108849 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.400449757 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.668927705 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.343266313 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.157268645 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.237578431 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.304787988 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.497371922 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.098736299 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.065928785 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.241788823 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.710986811 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.244778679 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.455478961 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.084063905 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.697618204 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.155119771 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.161948221 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.068766924 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.017347974 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.561501723 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.295199443 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.397224213 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.096401667 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.067715794 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.15134423 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.109559183 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.674203221 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.384844788 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.491801556 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.168188843 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.578316843 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.114594247 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.095733556 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.110059662 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.908946637 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.210464694 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.068744009 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.212357837 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.380621007 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.269925183 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.194712052 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.402865802 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.316093991 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.228827275 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.219164793 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.432783123 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.243145925 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.469039882 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.591600256 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.458239833 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.60017267 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.083775522 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 9.490332149 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.176838542 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.17883518 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.080577938 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.222745638 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.797398013 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.996736218 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.607049313 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.215659549 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.801224484 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.116155635 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.096447834 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.645342487 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.436605262 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.007425818 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.119082001 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.214212887 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.068677141 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.363252609 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.094825658 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.168668508 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.677116528 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.088852354 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.142385866 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.635201235 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.081938005 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.384437807 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.513584883 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.208445825 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.087640604 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.424360147 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.090347133 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.200248517 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.648528817 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.487481209 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.280223182 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.077836244 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.017231343 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.084091327 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.328467192 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.0834541 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.749711031 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.653672476 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.116249869 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.329993707 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.203573074 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.071098857 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.354501008 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.131022169 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.21482106 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.379137485 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.404932531 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.249987268 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.068226909 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.441578476 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.080269835 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.313212453 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.395854169 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.251362649 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.39786022 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.169515382 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.094660192 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.141900098 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.52450812 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.719155039 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.810104374 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.350261992 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.210683767 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.68242319 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.400421519 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.953326227 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.19158261 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.130748702 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.08156308 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.097258565 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.14123664 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.073545728 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.079805774 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.428706623 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.525120227 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.831143364 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.028371762 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.065909071 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.37544502 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.232964874 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.013330081 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.759376689 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.089698586 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.434734068 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.582880132 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.241867571 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.109129935 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.076499447 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.119571679 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.872096069 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.121684553 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.417886779 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.745239972 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.548139955 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.525027364 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.346963741 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.119691055 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.454608951 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.344457955 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.366439204 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.279859905 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.628168619 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.200130619 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.4416351 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.196887377 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.366910238 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.080778736 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.735798149 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.360871276 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.558134614 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.456462455 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.306953237 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.306320967 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.397355001 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.083954399 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.784573938 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.180463885 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.454537365 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.110276295 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.750014646 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.184868673 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.282752032 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.010297485 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.254877993 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.557416968 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.182948498 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.260449599 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.577519835 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.102180481 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.407451805 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.302391675 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.328157112 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.280257832 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.113581507 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.251084885 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.269711108 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.21911086 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.332947165 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.193576671 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.489131668 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.067765577 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.501921075 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.070655676 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.332189462 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.11340422 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.09023294 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.412770795 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.271003601 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.39405893 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.316797573 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.242835361 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.073336258 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.248454176 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.682246672 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.935034463 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.651462705 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.06961028 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.113519449 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.067778719 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.503487234 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.521533631 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.145775972 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.216422671 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.752362104 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.121561578 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.27500325 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.084017481 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.083327112 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.967635817 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.211063746 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.322349308 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.778146151 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.085376036 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.888947873 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.229425355 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.618506104 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.626845328 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.13312539 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.20197351 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.552777656 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.276185812 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.487661937 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.109857589 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.235055283 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.460967384 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.207225004 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.204092817 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.071263238 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.123679805 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.716758711 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.49223716 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.602813412 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.117323292 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.450210804 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.384116453 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.303346245 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.094759081 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.16321393 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.516127112 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.206906494 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.506474444 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.085083719 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.232990111 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.330402322 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.107143796 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.173998526 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.225844553 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.07136671 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 8.214325302 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 3.68032906 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.335438233 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.042539064 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.316600643 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.082248144 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.122934399 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.241042606 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.182467179 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.707003633 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.647664793 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.090790658 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.361486001 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.086409813 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.441474301 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.107327219 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.096253057 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.204411558 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.180751495 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.069264426 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.38503914 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.253075664 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.602205166 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.313416952 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.04480885 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.086414062 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.993791354 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.197394162 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.388294524 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.088062652 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.096181942 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.27856349 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.751370466 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.269418851 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.110558169 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.319846226 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.08402106 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.775312977 seconds)
  done (took 869.362087561 seconds)
done (took 870.541208715 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.118036836 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.449420455 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.282208522 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.036037494 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.877747791 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.725109505 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.29672289 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.310858853 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.156831545 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.303891205 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.984847116 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.883877993 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.169470381 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.191866515 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.155112637 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.180978188 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.304736961 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.316586193 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.195792924 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.194544263 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.442499529 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.200830204 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.501018947 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.372574289 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.46161273 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.173711343 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.142600588 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.430232041 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.434779468 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.074078635 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.302068727 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.281797821 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.910622035 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.316864072 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.162698722 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.160192306 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.954487116 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.170716981 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.10554438 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.159930794 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.457229416 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.206110965 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.787014265 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.984524618 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.856296755 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.494749056 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.935568623 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.186798411 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.174063497 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.257762301 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.106255543 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.103561188 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.430195492 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.091710215 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.974136402 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.972804219 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.435289199 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.950484853 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.804905292 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.260343365 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.453956955 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.175094915 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.258524134 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.308855405 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.196758475 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.37035625 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.498635969 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.110835999 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.277192935 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.302540042 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.325924683 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.302284155 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.193887917 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.283016668 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.197575799 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.296629344 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.812502929 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.276149894 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.866022685 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.179631454 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.006447205 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.042866028 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.034849708 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.154609258 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.118597097 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.854150536 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.949595231 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.01194624 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.198370659 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.276357995 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.977799102 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.283046729 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.531499464 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.150835518 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.118582127 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.278846785 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.956028328 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.100979798 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.239030781 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.28305837 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.869289924 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.145426606 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.068666384 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.156381503 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.180366276 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.107711933 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.143064361 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.499172981 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.303067003 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.236513895 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.453231439 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.19584259 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.301985863 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.199478992 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.154254774 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.861218647 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.359184616 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.923633684 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.104211431 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.750022132 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.356716011 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.162871627 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.451561453 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.372472004 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.12391545 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.1707365 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.184079386 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.025193489 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.186935105 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.174182139 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.266221739 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.529710144 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.254642689 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.038399117 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.309192938 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.760614054 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.314034176 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.302799096 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.159829598 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.009084627 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.17798853 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.221537871 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.372935361 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.451559209 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.322024952 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.372367995 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.199387109 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.352170494 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.100013823 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.193489866 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.303864989 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.206918677 seconds)
done (took 237.149955013 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.432244635 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.181612641 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.346757198 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.302043437 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.466872399 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.360219351 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.146730579 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.537890975 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.132585723 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.493364814 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.283317969 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 3.004938988 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.260525055 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.321847131 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.430826253 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.333009351 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.129090627 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.343155408 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.527425489 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.4615141 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.873083856 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.295013644 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.219742435 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.46981771 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.069528414 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.876146916 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.37775505 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.194548904 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.345278062 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.848786687 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.861144448 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.347982051 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.376190167 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.814343334 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.555655427 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.816351458 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.418892634 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.900410111 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.337314092 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.411022189 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.348044494 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 6.048132085 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.845261299 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.881646159 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.186734109 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.359363155 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.15304815 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.01834662 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.076514089 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.854141209 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.339240821 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.890947353 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.000161728 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.372951513 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.316397409 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.834877386 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.486972783 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.471542922 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.456829391 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.373976732 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.32944278 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.497172022 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.458031705 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.20907651 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.855876856 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.38016162 seconds)
  done (took 145.028868344 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.508327432 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.38516521 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.482821074 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.335969724 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.635638597 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.499034955 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.438016334 seconds)
  done (took 13.362775548 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.144634234 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.130809821 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.369446692 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.369266807 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.134762164 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.250775315 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.214815096 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.834901619 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.382359985 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.171140564 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.44712435 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.385768706 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.757394124 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.883572401 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.219846671 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.366362449 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.115811735 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.194196781 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.186797848 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.391629642 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.833095528 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.799737722 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.283817726 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.10786247 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.130765725 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.181371909 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.126238161 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.099126279 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.124824849 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.111149883 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.136520232 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.238204523 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.126366507 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.878530193 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.111686154 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.451215821 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.137961823 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.127459359 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.258893941 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.074834499 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.119000811 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.130841892 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.267755433 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.135209721 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.120364501 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.316021213 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.112825567 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.136911955 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.110396225 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.133335419 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.317514295 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.123508654 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.11150061 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.768288814 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.335516106 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.80918768 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.199371037 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.122315538 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.126869541 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.190772204 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.124195103 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.384706301 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.344347655 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.11890338 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.369734365 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.432287212 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.130308839 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.111746033 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.105771571 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.370464591 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.121414835 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.325609916 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.129571006 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.176049604 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.130996946 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.261609942 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.315228463 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.924568924 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.898617055 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.818326285 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.449184894 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.122099884 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.446422634 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.066051696 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.759678812 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.110225645 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.137083541 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.796468797 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.035798914 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.130350989 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.436506401 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.109876763 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.198105646 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.175583109 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.106536865 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.185043098 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.292674043 seconds)
  done (took 148.351425645 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.202718925 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.439160433 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.279420487 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.037378496 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.116517535 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.298491674 seconds)
  done (took 14.452262234 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.458777055 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.886961805 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.149062445 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.148000277 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.180042438 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.081863192 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.089676118 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.331633631 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.303862085 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.130189607 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.081842618 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.0821402 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.081217979 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.279547089 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.081673278 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.127400106 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.081186522 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.150581281 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.131225356 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.190018801 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.436508338 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.187266232 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.198745483 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.995909747 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.171057604 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.134467971 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.845662797 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.134173699 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.13842048 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.468707989 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.316472546 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.087295698 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.932685427 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.507526166 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.802615139 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.994414569 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.301035067 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.085365523 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.127664161 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.087779685 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.084760884 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.190420186 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.145632936 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.087938469 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.490193107 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.956272396 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.167799338 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.375823987 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.087667661 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.081704369 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.082514513 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.155386575 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.081860014 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.088537854 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.634830842 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.573192229 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.063598241 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.087666132 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.184681468 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.005526461 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.228882293 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.085445431 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.471016212 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.063189363 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.816252124 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.087459697 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.003818865 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.286674339 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.198179085 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.150753743 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.08386062 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.1424416 seconds)
  done (took 114.378997224 seconds)
done (took 436.647813226 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.276149148 seconds)
  done (took 7.354679417 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.198061403 seconds)
  done (took 7.424059527 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.077406827 seconds)
  done (took 7.167215954 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.094369404 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.118958593 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.103412336 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.106466466 seconds)
  done (took 25.543601306 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.600098311 seconds)
  done (took 7.688317408 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.076036648 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.092468994 seconds)
  done (took 13.334943543 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.176376804 seconds)
  done (took 7.279649213 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.356730216 seconds)
  done (took 7.457942671 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.077242876 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.092357428 seconds)
  done (took 13.285051131 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.073280938 seconds)
  done (took 7.162367141 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.341536526 seconds)
  done (took 8.511361338 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.072006525 seconds)
  done (took 7.182082927 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.084062323 seconds)
  done (took 7.179319698 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.165418709 seconds)
  done (took 7.255527961 seconds)
done (took 134.901211034 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.069632157 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.081251805 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.081677776 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.083477758 seconds)
  done (took 25.394553495 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.406619647 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.406904632 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.387971022 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.458081835 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.356063283 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.350766115 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.412069716 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.406162151 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.352016385 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.457942775 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.406709708 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.565462144 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.458294095 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.389915866 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.384491091 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.451881661 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.46337388 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.40714389 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.357743886 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.385021027 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.45716746 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.457336967 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.826013723 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.82531085 seconds)
  done (took 35.919446439 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.295524846 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.5275079 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.242223652 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.403925687 seconds)
  done (took 6.547847047 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.122875563 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.4570036 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.439613747 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.505083579 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.445542964 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.25321522 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.43848719 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.291363066 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.266648158 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.262228625 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.68277749 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.236750078 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.246783642 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.498343799 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.253174756 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.085562784 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.082212016 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.220508255 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.464421769 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.304463364 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.342409801 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.439734342 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.442870661 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.444706574 seconds)
  done (took 33.305986063 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.920003939 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.014499718 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.439424858 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.994896036 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.785234898 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.889123499 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.365756439 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.579930396 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.348104185 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.327963372 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.81199217 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.8739813 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.23129255 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.969011357 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.841632301 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.260521077 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.259606677 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.934342999 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.50445021 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.381438153 seconds)
  done (took 37.811932099 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.070040593 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.079304106 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.334878205 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.248609702 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.077026823 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.080102949 seconds)
  done (took 27.974589827 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.374920393 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.222434951 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.383595274 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.369034559 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.244678462 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.211396066 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.686320059 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.330714726 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.882725212 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.781950048 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.50163925 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.510092029 seconds)
  done (took 21.588269931 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.072640229 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.116057262 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.080468773 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.310673015 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.40681711 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.86160657 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.096659967 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.072056463 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.605254887 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.338238224 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.214435677 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.313904083 seconds)
  done (took 44.586951761 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.301310314 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.253163093 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.382675062 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.115535806 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.478791376 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.123183781 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.447373304 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.037692313 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.830440556 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.838474048 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.46231262 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.099143468 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.608338634 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.050056238 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.079854767 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.369563193 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.906016151 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.582423743 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.386788257 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.116546596 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.049333968 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.215255788 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.070479556 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.518804647 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.357612305 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.075013804 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.293578464 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.329958865 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.070718108 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.332817288 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.100682282 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.55033962 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.282467102 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.381214199 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.482763788 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.124942686 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.199285176 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.754390529 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.663295288 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.378494799 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.221629507 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.236943114 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.073725685 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.092128085 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.331859849 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.907403096 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.078548752 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.733961868 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.059259547 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.227472409 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.981172143 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.693032939 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.537801696 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.047354074 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.224648949 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.361779854 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.233911498 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.116343582 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.323949591 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.136875434 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.271860571 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.197975916 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.309531962 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043602584 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.332397241 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.424796285 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.257992698 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.318828793 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.349277377 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.371146901 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.415956487 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.219623017 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.913027957 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.212075652 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.645714083 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.987226468 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.441139701 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.072611507 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.793652283 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.610621674 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.061195998 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.194407771 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.819173801 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.039363362 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.080654521 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.250852612 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.942971102 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054158194 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.090487877 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.163397069 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.483078808 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.199645177 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.218981264 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.2666181 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.779955125 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053741378 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.079816088 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.353183837 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.049770846 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.647994141 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.109484678 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.050539424 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.118957905 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.599936991 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.469365538 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.86487068 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.867246857 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.716597173 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.378510445 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.669580866 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.241804872 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.078749329 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.430847305 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.40734242 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.075253611 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.836063589 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.079457507 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.228076758 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.435219512 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.078446766 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.050149501 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.485173415 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.281495457 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.071062273 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.321066454 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.07977869 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.230418228 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.077892423 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.726576349 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.055970371 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.323269341 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.527872886 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.164422844 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.230838961 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.047044607 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.226203004 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.515771221 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.147272759 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.41137359 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.385747641 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.263720124 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.526455741 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.070751495 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.939112658 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.439146028 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.298589693 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.416892796 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.724308459 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.244877843 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.086808611 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.070185479 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.26561369 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.086117693 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.64037355 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.075768761 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.836103132 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.796570635 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.336956689 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.077755533 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.240014337 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.080698711 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.300613671 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.646914369 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.096914974 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.248741142 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.35340902 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.25489568 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.071240229 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.058735696 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.34169569 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.313350043 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.532481552 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.320514992 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.642257716 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.377422009 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.567489241 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.290945888 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.406691109 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.832148218 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.501694399 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.325136364 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.602367473 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.091167282 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.106063979 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.180374677 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.508349284 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.306862365 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.83384692 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.568142143 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.483293874 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.111090451 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.095721523 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.045259999 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.22976722 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.450401702 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.078560617 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.567853978 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.160791079 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.37684835 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.594617695 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.104445536 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.373327221 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.845170478 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.435757105 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.433946245 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.403784572 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053818043 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.439207967 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.634257527 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.258940602 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.1361388 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.383771096 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.010320394 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108363217 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.077722979 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.432272635 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.992347768 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.781837132 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.608331129 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.642227296 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.025981387 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.242829101 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.46062355 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.090027345 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.991422681 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212112703 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.149856715 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.943892538 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.515799751 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.295597913 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.4020154 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.070638187 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.085326502 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.360154154 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.383002096 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.363811866 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.525465687 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.30298548 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.749274894 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.177585044 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.721148071 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.247624914 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.107777071 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.732585734 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.405950183 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.936793435 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.273549715 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.782788602 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.238497405 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.962743467 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.344161841 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.071825839 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.438005413 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.659636677 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.16482098 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.971984703 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.203106424 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.076349515 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.310530027 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.83755918 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.106642967 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.762936377 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.322104286 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.328367193 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.277581381 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.456230114 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.480316027 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.40019268 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.053022823 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.24014051 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.170310243 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.378898697 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.071496393 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.367877556 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.77651481 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.65617533 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.873173505 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.551737958 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.307804629 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.84548174 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.442941263 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.283389578 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.391869199 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.96929868 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.708768892 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.06607456 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.220704109 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.047048328 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.818464425 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.366008522 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.450722304 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.439239817 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.099924599 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.492841028 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.415533244 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.144046939 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.237165825 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.336822773 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.074733465 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.352983908 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.070903083 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.851474878 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.455618177 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.079047787 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.753045315 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.257900844 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.408080796 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.242224902 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.732400525 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.085879149 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.230390095 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.838101169 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.255644116 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.213209528 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.423652502 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.857826258 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.084821335 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.152392247 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.230294923 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.723400996 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.438304364 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.647525467 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.575082105 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.367916963 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.857312748 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.072427604 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.295268202 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.239784781 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.071708138 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.285679456 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.459939532 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.099161351 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.30509435 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.37985605 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.208926185 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.634577228 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053677278 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.771653849 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.338430282 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.593690596 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.622785989 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.866887682 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.497915209 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.085300206 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.505283756 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.03888109 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.23153874 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.372922371 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.68514814 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.116116138 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.934835874 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.867772126 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.245366533 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.516868692 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.171679697 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.847232571 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.245447385 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.317382399 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.288800677 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.211761791 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.041067788 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.659431178 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.855874103 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.355647489 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.240741463 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.27395757 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.245386711 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.249378661 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.590078339 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.391226277 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.84800042 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.440852318 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.274408652 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.049500022 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.077567777 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.364154951 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.43761297 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.085752924 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.364667228 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.411180255 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.102147255 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.093247947 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.136026424 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.357688699 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.855375574 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.798704333 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.319826188 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.479814588 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.515859784 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.078569241 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.863375967 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.293992875 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.435830819 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.459220166 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.878412059 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.513932064 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.37669857 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.23326435 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.044924143 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.282478363 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.084301475 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.188173892 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.912051125 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.379446796 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.153175403 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.923613856 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.713688315 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.021406014 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.119732216 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.502426248 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.304696704 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.270001433 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.071268715 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.660750218 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.454793015 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.227609982 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058433646 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.844413428 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.051627553 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.288286458 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.078624464 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.26587104 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.913094382 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.186419669 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.751711861 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.513421334 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.095854079 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.278113464 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047077712 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.840323032 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.065912943 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.674659681 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.872895846 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.326191716 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.596836003 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.279008917 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.075866266 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.410308441 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.209565609 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.392079594 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.338706486 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.444600619 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.466335309 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.339872481 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.34546026 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.559950949 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.22594487 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.322326179 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.044357221 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.025181106 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.114420079 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.454619597 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.435791967 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.072146463 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.595946639 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.322939191 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.239666438 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.261137413 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.154309731 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.649064863 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.287350595 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.242893542 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.244271205 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.11137331 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.399071369 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.013446012 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.323124542 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.072191466 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.105901501 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.292117189 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.326961265 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.455049299 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.38833206 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.689664957 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.233236624 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.558545575 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.814406955 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.612907606 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.080844015 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.895573651 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.401708618 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.073187318 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.444118144 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.670140781 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.282975559 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.35055031 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.33256228 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.099079003 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.233091885 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.58825416 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.075487612 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.674272098 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.449573657 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.07234991 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.44582411 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.121387411 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.247448313 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.845242822 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.581532011 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.076092453 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.631674536 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.388175281 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.638401674 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.349211196 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.093423231 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.172441097 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.729970653 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.058998715 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.120217995 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.168482977 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.624477356 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.089747018 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.551587636 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.190291095 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.242273847 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.090842741 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.221364182 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.080709935 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.297996437 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.676199189 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.319487767 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.356857012 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.282328427 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.081859317 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.667307465 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.759395037 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.184851775 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.29965008 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.093130909 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.396282979 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.893893194 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.081175537 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.640309744 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.270195082 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.063629905 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.468327688 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.334240245 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.102507944 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.295444231 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.078184342 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.388131811 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.235662687 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.572886074 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.319039123 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.358717609 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.196477763 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.095730438 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.623150087 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.435344814 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.92148974 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.081819971 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.389419997 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.07748255 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.641135873 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.814927725 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.27118037 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.22824653 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.799064301 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.862640966 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.115715605 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.124780035 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.080637112 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.301837779 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.586430872 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.052340366 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.631931957 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.176405498 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.300286916 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.406131944 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.043706293 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.281777931 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092731362 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.06249503 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.57953996 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.077964793 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.43048705 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.05056536 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.645544403 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.091201449 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.2050003 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.239062866 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.397711682 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.080839014 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.799912503 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.25176112 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.077657992 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.082594816 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.432519799 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.22986385 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.325659091 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.439216562 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.296632153 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.420433284 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.987410831 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.638543659 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.27558595 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.38954552 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.916866979 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.63695326 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.185417561 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.600335658 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.62067049 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.277929291 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.629786435 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.329288386 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.805011183 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.221482766 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.583318672 seconds)
  done (took 1924.052794679 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.11426795 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.169763701 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.15461523 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.161374669 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.132354301 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.174608492 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.131071327 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.181344368 seconds)
  done (took 50.300134788 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.079005989 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.123430674 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.59421893 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.262920057 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.103308093 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.316094908 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.242010003 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.609660929 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.283172037 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.141681155 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.139481034 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.172839663 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.089170332 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.11298419 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.012951726 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.16634542 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.08261851 seconds)
  done (took 92.628071589 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.090495528 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.168932275 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.08610411 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.992732261 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.142865679 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.496039221 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.092152763 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.07744042 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.523783208 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.737579892 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.099102887 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.224312698 seconds)
  done (took 80.853904096 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.112268475 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.111692115 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.118379981 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.112397864 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.111698264 seconds)
  done (took 6.656329835 seconds)
done (took 2388.715980849 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.302781343 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.601699032 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.635149251 seconds)
  done (took 4.32744297 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.141137392 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.205863603 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.289298068 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.225205048 seconds)
  done (took 5.972855663 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.386481574 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.561333754 seconds)
  done (took 4.033143979 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.443165637 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.087625312 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.62671845 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.079255619 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.0817149 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.081635871 seconds)
  done (took 19.339667109 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.109005533 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.109172413 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.102252669 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.101741591 seconds)
  done (took 5.513362618 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.077867219 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.11846786 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.082225726 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.090616401 seconds)
  done (took 18.449294311 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.383916117 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.17308866 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.84216056 seconds)
  done (took 5.492153886 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.890948807 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.217485781 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.874848371 seconds)
  done (took 6.063735793 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.032746668 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.034477579 seconds)
  done (took 5.147041075 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.251007294 seconds)
  done (took 2.331320039 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.560582995 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.563306443 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.736481028 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.798197524 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 1.978455326 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.371199002 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.449385916 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.356166435 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.580276946 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.576498983 seconds)
  done (took 17.051381831 seconds)
done (took 105.252483917 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.96521854 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.493802646 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.248989518 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.135633528 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.251532484 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.242648907 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.695196001 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.935036935 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.374702467 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.375101521 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.148869417 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.251424861 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.106839503 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.486799799 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.108194446 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.438970981 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.488919792 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.987782514 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.857996198 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.710960861 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.704995319 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.372532889 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.874003217 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.383405779 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.495794387 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.243298475 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.031288261 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.444958932 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.089944621 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.03603773 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.248839875 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 3.957259851 seconds)
  done (took 152.27496304 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.072167367 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.088362473 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.094855788 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.083593604 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.916185054 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.087772986 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.085340303 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.083437672 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.773919308 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.780459063 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.092684901 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.902058164 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.090031209 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.083027987 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.091549446 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.082918075 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.900659178 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.091168816 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.087770871 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.088735231 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.089999134 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.690510803 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.089150549 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.702141775 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.907640708 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.093937026 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.083183823 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.087782533 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.088236356 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.088584046 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.090442919 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.082918428 seconds)
  done (took 185.769094532 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.079102401 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.094358114 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.087453023 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.083671362 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.088172891 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.090046159 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.08685192 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.083188609 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.087883487 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.085017849 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.091742785 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.08816166 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.090563391 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.082775914 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.088191553 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.086905527 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.087054992 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.086620882 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.087940034 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.086018419 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.090981427 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.083290769 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.088449202 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.087637879 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.092102814 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.087327391 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.084197405 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.088057311 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.088872203 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.0871494 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.086521068 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.083959676 seconds)
  done (took 195.888679743 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.389325825 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.116582121 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.049972666 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.647680508 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.020412461 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.106993403 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.645506894 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.390710169 seconds)
  done (took 13.463350205 seconds)
done (took 548.483251672 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.720805045 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.986428866 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.261854523 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.32652681 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.693338434 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.399151825 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.327929439 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.544451282 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.81969569 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.552111639 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.543159995 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.311960831 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.888977015 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.311620288 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.272771379 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.5781604 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.490284784 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.783495435 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.291986083 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.951338148 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.298283374 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.937984738 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.554938019 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.881473673 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.552308242 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.004870609 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.244072687 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.491446296 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.298022542 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.299081325 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.096960745 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.537156365 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.317293429 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.31198686 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.59391205 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.627335753 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.480917184 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.509144283 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.263389746 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.747032314 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.978129106 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.704251738 seconds)
  done (took 73.867687498 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.102939148 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.125940971 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.278754291 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.176526799 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.748543743 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.186408824 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.347293525 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.326760226 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.197071806 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.313671314 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.358791447 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.795303774 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.352201817 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.759943373 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.344322287 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.364352442 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.19070519 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.746807807 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.335682778 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.324553275 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.157367609 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.278746335 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.147659613 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.301253235 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.145959165 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.162473233 seconds)
  done (took 35.681929719 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.153561983 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.27377643 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.361070847 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.174135258 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.355352796 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.170884106 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.44581736 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.266160638 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.865580555 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.284094911 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.191637871 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.263496923 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.293285675 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.388240539 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.41725176 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.220765653 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.272072738 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.297843576 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.281702151 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.236530455 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.20530931 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.19125116 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.45073497 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.190888165 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.760528278 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.629570616 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.283945758 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.736561966 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.129015286 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.357654453 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.244342525 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.434773857 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.563164537 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.358675925 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.257930408 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.130020023 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.136343558 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.194605967 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 1.98527244 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.285708776 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.4441444 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.494934902 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.400374698 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.674101949 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.395587745 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.270547377 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.614727259 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.204253965 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.252848836 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.93519965 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.413855815 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.888387507 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.225442187 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.303618478 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.244143513 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.433446944 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.298169025 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.433549345 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.214939104 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.695797449 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.20845528 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.505674914 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.281469641 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.40049945 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.337752129 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.311815471 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.197823885 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.657051019 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.403815358 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.133623466 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.792739087 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.19837579 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.156249435 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.198428791 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.274987864 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.646278244 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.11969255 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.330803575 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.568477767 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.443098355 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.363809161 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.748257314 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.102347791 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.621477403 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.138098989 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.117866985 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.200409019 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.438035078 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.42830707 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.622424753 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.683849951 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.458561863 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.430547896 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.307063995 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.747712068 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.478037985 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.111748652 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.129433432 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.340939591 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.690477812 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.204119161 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.294943324 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.752206788 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.418017084 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.480420881 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.252408813 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.475080142 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.413553672 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.454966838 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.104021336 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.209106617 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.201119883 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.349941408 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.594506671 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.113928526 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.650721233 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.217604898 seconds)
  done (took 233.175610872 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.073411569 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.08953112 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.084097545 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.09540661 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.082466649 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.625300334 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.130325176 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.083810222 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.627418069 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.130206108 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.082795608 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.084147766 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.082723073 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.080040526 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.223551449 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.265204602 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.997457049 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.073962762 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.084132858 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.091189653 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.911533812 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.075503128 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.085399924 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.085076507 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.086710689 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.083847229 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.084921192 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.133851564 seconds)
  done (took 150.72289107 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.1411644 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.56906841 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.165970146 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.227680945 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.178241663 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.1625481 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.649480307 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.279646311 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.217576008 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.156384495 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.146217275 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.362343539 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.452216276 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.738865756 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.269986159 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.43636843 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.798380477 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.283453438 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.147931984 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.142259075 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.30129021 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.496895601 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.414489199 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.419729496 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.300735329 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.403793387 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.21894971 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.144527771 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.263535539 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.627421082 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.166797284 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.508264239 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.297229958 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.151632883 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.645773962 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.501222665 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.72184934 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.791554532 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.386449779 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.100331196 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.103441873 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.371779808 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.444671472 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.191734216 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.134833407 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.784846045 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.160070623 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.404613224 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.162441622 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.10310099 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.239951628 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.25377905 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.396516967 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.607948173 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.322008267 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.295333779 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.728169388 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.122953575 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.198347265 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.464539964 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.116981463 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.633555649 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.097096759 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.20678872 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.145685347 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.996882409 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.227036373 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.671376982 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.772323132 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.187503132 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.494013554 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.340332602 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.119738025 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.406909533 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.317684694 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.577356993 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.724415152 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.279489554 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.244293134 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.225523111 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.425904596 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.131350655 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.692248189 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.244886993 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.115579178 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.637568692 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.533470688 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.117009655 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.133913752 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.261988758 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.310706437 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.355621437 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.427192566 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.211548521 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.061032453 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.402941738 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.421855326 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.167804492 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.267706761 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.130942959 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.524938131 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.342580668 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.119365824 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.462023255 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.550712155 seconds)
  done (took 154.810243533 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.870935826 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.195870779 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.380316107 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.675860633 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.462074954 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.570651088 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.408809726 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.216127964 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.426573703 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.349462513 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.467351223 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.225134289 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.846993846 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.860315355 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.195579064 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.321828143 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.20941147 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.788181453 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.438172137 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.142299066 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.405015182 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.865876062 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.452267112 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.544353673 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.512502446 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.644903375 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.798140716 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.256107844 seconds)
  done (took 47.626996351 seconds)
done (took 696.957168663 seconds)
SAVING RESULT...
DONE!
